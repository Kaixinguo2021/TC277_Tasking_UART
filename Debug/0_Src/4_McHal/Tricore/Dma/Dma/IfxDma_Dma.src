	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Dma\\Dma\\.IfxDma_Dma.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc27xc -D__CPU_TC27XC__ --core=tc1.6.x --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\2_CDrv\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.src ..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c'

	
$TC16X
	.sdecl	'.zrodata.IfxDma..2.cnt',data,rom
	.sect	'.zrodata.IfxDma..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268204800
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_configureTransactionSet',code,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_configureTransactionSet'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     2   * \file IfxDma_Dma.c
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     3   * \brief DMA DMA details
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     4   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     5   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     7   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     8   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    10   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    11   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    15   * products.
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    16   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    22   *
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    23   */
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    24  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    25  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    26  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    27  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    28  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    29  #include "IfxDma_Dma.h"
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    30  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    31  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    32  /*-----------------------Private Function Prototypes--------------------------*/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    33  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    34  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    35  /** \brief local function to copy a transaction set into DMA channel SFRs or memory location (for linked lists)
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    36   * \param channel Specifies the pointer to DMA channel registers
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    37   * \param config pointer to the DMA default channel configuration structure
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    38   * \return None
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    39   */
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    40  static void IfxDma_Dma_configureTransactionSet(Ifx_DMA_CH *channel, const IfxDma_Dma_ChannelConfig *config);
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    41  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    42  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    43  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    44  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    45  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    46  static void IfxDma_Dma_configureTransactionSet(Ifx_DMA_CH *channel, const IfxDma_Dma_ChannelConfig *config)
; Function IfxDma_Dma_configureTransactionSet
.L10:
IfxDma_Dma_configureTransactionSet:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    47  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    48      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    49          Ifx_DMA_CH_CHCFGR chcfgr;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    50          chcfgr.U          = 0;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    51          chcfgr.B.TREL     = config->transferCount;
	mov	d15,#0
	ld.hu	d0,[a5]26
.L143:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    52          chcfgr.B.BLKM     = config->blockMode;
	insert	d15,d15,d0,#0,#14
	ld.bu	d0,[a5]28
.L210:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    53          chcfgr.B.RROAT    = config->requestMode;
	insert	d15,d15,d0,#16,#3
	ld.bu	d0,[a5]29
.L211:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    54          chcfgr.B.CHMODE   = config->operationMode;
	insert	d15,d15,d0,#19,#1
	ld.bu	d0,[a5]30
.L212:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    55          chcfgr.B.CHDW     = config->moveSize;
	insert	d15,d15,d0,#20,#1
	ld.bu	d0,[a5]31
.L213:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    56          chcfgr.B.PRSEL    = config->requestSource;
	insert	d15,d15,d0,#21,#3
	ld.bu	d0,[a5]33
.L214:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    57          chcfgr.B.PATSEL   = config->pattern;
	insert	d15,d15,d0,#28,#1
	ld.bu	d0,[a5]32
.L215:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    58  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    59          channel->CHCFGR.U = chcfgr.U;
	insert	d15,d15,d0,#24,#3
	st.w	[a4]20,d15
.L137:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    60      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    61  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    62      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    63          Ifx_DMA_CH_ADICR adicr;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    64          adicr.U       = 0;
	mov	d15,#0
.L144:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    65          adicr.B.SMF   = config->sourceAddressIncrementStep;
	ld.bu	d0,[a5]36
.L216:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    66          adicr.B.INCS  = config->sourceAddressIncrementDirection;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    67          adicr.B.CBLS  = config->sourceAddressCircularRange;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    68          adicr.B.SCBE  = config->sourceCircularBufferEnabled;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    69          adicr.B.DMF   = config->destinationAddressIncrementStep;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    70          adicr.B.INCD  = config->destinationAddressIncrementDirection;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    71          adicr.B.CBLD  = config->destinationAddressCircularRange;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    72          adicr.B.DCBE  = config->destinationCircularBufferEnabled;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    73          adicr.B.SHCT  = config->shadowControl;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    74          adicr.B.STAMP = config->timestampEnabled;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    75          adicr.B.WRPSE = config->wrapSourceInterruptEnabled;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    76          adicr.B.WRPDE = config->wrapDestinationInterruptEnabled;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    77          adicr.B.INTCT = (config->channelInterruptEnabled ? 2 : 0) | (config->channelInterruptControl ? 1 : 0);
	ld.bu	d1,[a5]49
.L217:
	insert	d15,d15,d0,#0,#3
	ld.bu	d0,[a5]37
.L218:
	ne	d1,d1,#0
.L219:
	insert	d15,d15,d0,#3,#1
	ld.bu	d0,[a5]38
.L220:
	insert	d15,d15,d0,#8,#4
	ld.bu	d0,[a5]43
.L221:
	insert	d15,d15,d0,#20,#1
	ld.bu	d0,[a5]39
.L222:
	insert	d15,d15,d0,#4,#3
	ld.bu	d0,[a5]40
.L223:
	insert	d15,d15,d0,#7,#1
	ld.bu	d0,[a5]41
.L224:
	insert	d15,d15,d0,#12,#4
	ld.bu	d0,[a5]44
.L225:
	insert	d15,d15,d0,#21,#1
	ld.bu	d0,[a5]42
.L226:
	insert	d15,d15,d0,#16,#4
	ld.bu	d0,[a5]45
.L227:
	insert	d15,d15,d0,#22,#1
	ld.bu	d0,[a5]46
.L228:
	insert	d15,d15,d0,#24,#1
	ld.bu	d0,[a5]47
.L229:
	insert	d15,d15,d0,#25,#1
	ld.bu	d0,[a5]48
.L230:
	ne	d0,d0,#0
	sha	d0,#1
.L231:
	or	d0,d1
.L232:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    78          adicr.B.IRDV  = config->interruptRaiseThreshold;
	insert	d15,d15,d0,#26,#2
	ld.bu	d0,[a5]50
.L233:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    79          adicr.B.ETRL  = config->transactionRequestLostInterruptEnabled;
	insert	d15,d15,d0,#28,#4
	ld.bu	d0,[a5]51
.L234:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    80          //enter also the circular buffer enable bits
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    81  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    82          channel->ADICR.U = adicr.U;
	insert	d15,d15,d0,#23,#1
	st.w	[a4]16,d15
.L140:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    83      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    84  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    85      channel->SADR.U   = config->sourceAddress;
	ld.w	d15,[a5]6
.L145:
	st.w	[a4]8,d15
.L235:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    86      channel->DADR.U   = config->destinationAddress;
	ld.w	d15,[a5]10
.L236:
	st.w	[a4]12,d15
.L237:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    87      channel->SDCRCR.U = config->sourceDestinationAddressCrc;
	ld.w	d15,[a5]22
.L238:
	st.w	[a4]4,d15
.L239:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    88      channel->RDCRCR.U = config->readDataCrc;
	ld.w	d15,[a5]18
.L240:
	st.w	[a4],d15
.L241:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    89  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    90      // write not allowed if SHCT=1 or SHCT=2
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    91      if ((config->shadowControl != IfxDma_ChannelShadow_none) &&
	ld.bu	d15,[a5]42
.L242:
	jeq	d15,#0,.L2
.L243:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    92          (config->shadowControl != IfxDma_ChannelShadow_src) &&
	jeq	d15,#1,.L3
.L244:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    93          (config->shadowControl != IfxDma_ChannelShadow_dst))
	jeq	d15,#2,.L4
.L245:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    94      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    95          channel->SHADR.U = config->shadowAddress;
	ld.w	d15,[a5]14
.L246:
	st.w	[a4]24,d15
.L4:
.L3:
.L2:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    96      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    97  }
	ret
.L133:
	
__IfxDma_Dma_configureTransactionSet_function_end:
	.size	IfxDma_Dma_configureTransactionSet,__IfxDma_Dma_configureTransactionSet_function_end-IfxDma_Dma_configureTransactionSet
.L68:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_createModuleHandle',code,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_createModuleHandle'
	.align	2
	
	.global	IfxDma_Dma_createModuleHandle

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    98  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	    99  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   100  void IfxDma_Dma_createModuleHandle(IfxDma_Dma *dmaHandle, Ifx_DMA *dma)
; Function IfxDma_Dma_createModuleHandle
.L12:
IfxDma_Dma_createModuleHandle:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   101  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   102      dmaHandle->dma = dma;
	st.a	[a4],a5
.L163:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   103  }
	ret
.L69:
	
__IfxDma_Dma_createModuleHandle_function_end:
	.size	IfxDma_Dma_createModuleHandle,__IfxDma_Dma_createModuleHandle_function_end-IfxDma_Dma_createModuleHandle
.L33:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_deInitModule',code,cluster('IfxDma_Dma_deInitModule')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_deInitModule'
	.align	2
	
	.global	IfxDma_Dma_deInitModule

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   104  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   105  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   106  void IfxDma_Dma_deInitModule(IfxDma_Dma *dma)
; Function IfxDma_Dma_deInitModule
.L14:
IfxDma_Dma_deInitModule:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   107  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   108      //TODO
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   109  }
	ret
.L74:
	
__IfxDma_Dma_deInitModule_function_end:
	.size	IfxDma_Dma_deInitModule,__IfxDma_Dma_deInitModule_function_end-IfxDma_Dma_deInitModule
.L38:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initChannel',code,cluster('IfxDma_Dma_initChannel')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initChannel'
	.align	2
	
	.global	IfxDma_Dma_initChannel

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   110  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   111  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   112  void IfxDma_Dma_initChannel(IfxDma_Dma_Channel *channel, const IfxDma_Dma_ChannelConfig *config)
; Function IfxDma_Dma_initChannel
.L16:
IfxDma_Dma_initChannel:	.type	func
	mov.aa	a13,a5
.L147:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   113  {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   114      Ifx_DMA *dma = config->module->dma;
	ld.a	a2,[a13]
.L183:
	mov.aa	a15,a4
.L148:
	ld.a	a12,[a2]
.L149:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   115  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   116      channel->dma       = dma;
	st.a	[a15],a12
.L184:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   117      channel->channelId = config->channelId;
	ld.bu	d15,[a13]4
.L185:
	st.b	[a15]4,d15
.L186:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   118      channel->channel   = &dma->CH[config->channelId];
	ld.b	d15,[a13]4
	sha	d15,#5
.L187:
	addsc.a	a2,a12,d15,#0
	lea	a4,[a2]8192
.L146:
	st.a	[a15]8,a4
.L188:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   119  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   120      IfxDma_Dma_configureTransactionSet(channel->channel, config);
	call	IfxDma_Dma_configureTransactionSet
.L90:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   121  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   122      {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   123          Ifx_DMA_TSR tsr;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   124          tsr.U = 0;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   125  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   126          if (config->hardwareRequestEnabled)
	ld.bu	d15,[a13]35
.L189:
	mov	d0,#0
.L150:
	jeq	d15,#0,.L5
.L190:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   127          {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   128              tsr.B.ECH = 1;
	insert	d0,d0,#1,#16,#1
	j	.L6
.L5:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   129          }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   130          else
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   131          {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   132              tsr.B.DCH = 1;
	insert	d0,d0,#1,#17,#1
.L6:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   133          }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   134  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   135          dma->TSR[channel->channelId].U = tsr.U;
	ld.b	d15,[a15]4
.L191:
	addsc.a	a2,a12,d15,#2
.L192:
	st.w	[a2]7680,d0
.L91:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   136      }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   137  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   138      if (config->channelInterruptPriority > 0)
	ld.hu	d0,[a13]52
.L151:
	jeq	d0,#0,.L7
.L94:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277   *     // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279   *     if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280   *         (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   *         // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282   *         IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *     // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *     IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   *     // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318   *     IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340   *     // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341   *     IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   *     unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   *         IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *     // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   *     IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *     IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   *     IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364   *     // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   *     // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *     IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *     // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *     IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *     // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *     unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *         IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *     // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *     IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *     IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *     // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *     IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   *     boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *     // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   *     trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440   *     // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441   *     if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   *         // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   *         result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483   *     // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484   *     IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485   *                           IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486   *                           IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487   *                           IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   *                           IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489   *                           IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490   *                           IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491   *                           IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513   *     // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514   *     IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515   *     IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537   *     // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538   *     IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539   *     IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   *     uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *     // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   *     errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *     if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *         }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *     if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563   *     if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *     if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *     if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *     if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *     if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   *     uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   *     uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627   *     // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   *     bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   *     do {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *         notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   *             if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *                 notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   *                 break;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *             }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   *     } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   *     uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   *     // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *     IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   *     IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   *     // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *     // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770   *     // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771   *     IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   *     // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   *     IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   *     // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *     // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *     IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *     IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808   *     // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   *     IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   *     // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   *     // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *     IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *     // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *     IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *     // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   *     IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   *     // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824   *     IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826   *     // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   *     IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   *     // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   *     IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832   *     // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *     // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *     IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *     // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *     IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   *     // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *     IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   *     // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *     while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906   *     // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907   *     IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *     // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   *     while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   *     boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945   *     // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946   *     buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   *     IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   *     // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   *     IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028   *     // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   *     // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *     // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   *     // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *     while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *     // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *     boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   *     destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *     // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *     boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   *     sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   *     boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   *     // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *     patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   *     // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   *     IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169          dma->BLK1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173          dma->BLK0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192      dma->CH[channelId].ADICR.B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200          dma->BLK1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204          dma->BLK0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213          dma->BLK1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217          dma->BLK0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236      dma->CH[channelId].ADICR.B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244          dma->BLK1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248          dma->BLK0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257          dma->BLK1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261          dma->BLK0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403          return dma->BLK1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407          return dma->BLK0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	ld.w	d1,.2.cnt
.L96:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   139  Dma_getSrcPointer(channel->dma, channel->channelId);
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   140          IfxSrc_init(src, config->channelInterruptTypeOfService, config->channelInterruptPriority);
	ld.b	d15,[a15]4
.L103:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277   *     // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279   *     if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280   *         (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   *         // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282   *         IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *     // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *     IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   *     // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318   *     IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340   *     // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341   *     IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   *     unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   *         IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *     // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   *     IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *     IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   *     IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364   *     // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   *     // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *     IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *     // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *     IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *     // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *     unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *         IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *     // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *     IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *     IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *     // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *     IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   *     boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *     // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   *     trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440   *     // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441   *     if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   *         // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   *         result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483   *     // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484   *     IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485   *                           IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486   *                           IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487   *                           IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   *                           IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489   *                           IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490   *                           IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491   *                           IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513   *     // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514   *     IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515   *     IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537   *     // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538   *     IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539   *     IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   *     uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *     // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   *     errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *     if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *         }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *     if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563   *     if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *     if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *     if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *     if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *     if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   *     uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   *     uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627   *     // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   *     bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   *     do {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *         notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   *             if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *                 notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   *                 break;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *             }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   *     } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   *     uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   *     // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *     IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   *     IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   *     // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *     // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770   *     // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771   *     IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   *     // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   *     IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   *     // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *     // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *     IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *     IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808   *     // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   *     IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   *     // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   *     // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *     IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *     // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *     IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *     // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   *     IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   *     // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824   *     IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826   *     // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   *     IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   *     // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   *     IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832   *     // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *     // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *     IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *     // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *     IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   *     // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *     IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   *     // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *     while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906   *     // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907   *     IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *     // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   *     while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   *     boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945   *     // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946   *     buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   *     IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   *     // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   *     IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028   *     // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   *     // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *     // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   *     // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *     while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *     // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *     boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   *     destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *     // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *     boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   *     sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   *     boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   *     // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *     patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   *     // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   *     IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169          dma->BLK1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173          dma->BLK0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192      dma->CH[channelId].ADICR.B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200          dma->BLK1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204          dma->BLK0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213          dma->BLK1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217          dma->BLK0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236      dma->CH[channelId].ADICR.B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244          dma->BLK1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248          dma->BLK0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257          dma->BLK1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261          dma->BLK0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403          return dma->BLK1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407          return dma->BLK0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	mov.a	a15,d1
.L104:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   141  ->channelInterruptTypeOfService, config->channelInterruptPriority);
	ld.bu	d1,[a13]54
.L105:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277   *     // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279   *     if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280   *         (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   *         // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282   *         IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *     // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *     IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   *     // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318   *     IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340   *     // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341   *     IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   *     unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   *         IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *     // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   *     IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *     IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   *     IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364   *     // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   *     // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *     IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *     // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *     IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *     // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *     unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *         IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *     // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *     IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *     IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *     // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *     IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   *     boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *     // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   *     trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440   *     // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441   *     if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   *         // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   *         result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483   *     // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484   *     IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485   *                           IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486   *                           IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487   *                           IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   *                           IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489   *                           IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490   *                           IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491   *                           IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513   *     // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514   *     IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515   *     IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537   *     // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538   *     IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539   *     IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   *     uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *     // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   *     errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *     if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *         }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *     if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563   *     if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *     if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *     if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *     if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *     if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *        // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *        }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   *     uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   *     uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627   *     // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   *     bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   *     do {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *         notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   *             if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *                 notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   *                 break;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *             }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   *     } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   *     uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   *     // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *     IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   *     IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   *     // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *     // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770   *     // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771   *     IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   *     // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   *     IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   *     // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *     // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *     IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *     IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808   *     // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   *     IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   *     // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   *     // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *     IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *     // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *     IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *     // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   *     IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   *     // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824   *     IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826   *     // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   *     IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   *     // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   *     IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832   *     // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *     // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *     IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *     // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *     IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   *     // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *     IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   *     // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *     while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906   *     // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907   *     IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *     // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   *     while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   *     boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945   *     // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946   *     buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   *     IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   *     // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   *     IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028   *     // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   *     // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *     // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   *     // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *     while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *     // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *     boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   *     destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *     // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *     // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *     boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   *     sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   *     boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   *     // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *     patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   *     // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   *     IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169          dma->BLK1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173          dma->BLK0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192      dma->CH[channelId].ADICR.B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200          dma->BLK1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204          dma->BLK0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213          dma->BLK1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217          dma->BLK0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236      dma->CH[channelId].ADICR.B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244          dma->BLK1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248          dma->BLK0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257          dma->BLK1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261          dma->BLK0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403          return dma->BLK1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405      else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407          return dma->BLK0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	addsc.a	a15,a15,d15,#2
.L106:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * \{
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * \{
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   * {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * \}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   * \}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   * {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256      src->B.SRPN = priority;
	st.b	[a15],d0
.L193:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L194:
	insert	d15,d15,d1,#3,#2
	st.b	[a15]1,d15
.L117:
	ld.bu	d15,[a15]3
.L195:
	or	d15,#2
	st.b	[a15]3,d15
.L108:
	ld.bu	d15,[a15]1
.L196:
	or	d15,#4
	st.b	[a15]1,d15
.L7:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   142  ->channelInterruptTypeOfService, config->channelInterruptPriority);
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   143          IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   144      }
	ret
.L84:
	
__IfxDma_Dma_initChannel_function_end:
	.size	IfxDma_Dma_initChannel,__IfxDma_Dma_initChannel_function_end-IfxDma_Dma_initChannel
.L53:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initChannelConfig',code,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initChannelConfig'
	.align	2
	
	.global	IfxDma_Dma_initChannelConfig

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   145  }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   146  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   147  
; Function IfxDma_Dma_initChannelConfig
.L18:
IfxDma_Dma_initChannelConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   148  void IfxDma_Dma_initChannelConfig(IfxDma_Dma_ChannelConfig *config, IfxDma_Dma *dma)
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   149  {
	movh.a	a15,#@his(.1.ini)
	lea	a15,[a15]@los(.1.ini)
.L201:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   150      const IfxDma_Dma_ChannelConfig defaultConfig = {
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   151          .module                                 = NULL_PTR,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   152          .channelId                              = IfxDma_ChannelId_0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   153          .sourceAddress                          = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   154          .destinationAddress                     = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   155          .shadowAddress                          = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   156          .readDataCrc                            = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   157          .sourceDestinationAddressCrc            = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   158          .transferCount                          = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   159          .blockMode                              = IfxDma_ChannelMove_1,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   160          .requestMode                            = IfxDma_ChannelRequestMode_oneTransferPerRequest,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   161          .operationMode                          = IfxDma_ChannelOperationMode_single,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   162          .moveSize                               = IfxDma_ChannelMoveSize_8bit,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   163          .pattern                                = IfxDma_ChannelPattern_0_disable,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   164          .requestSource                          = IfxDma_ChannelRequestSource_peripheral,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   165          .busPriority                            = IfxDma_ChannelBusPriority_medium,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   166          .hardwareRequestEnabled                 = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   167          .sourceAddressIncrementStep             = IfxDma_ChannelIncrementStep_1,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   168          .sourceAddressIncrementDirection        = IfxDma_ChannelIncrementDirection_positive,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   169          .sourceAddressCircularRange             = IfxDma_ChannelIncrementCircular_32768,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   170          .destinationAddressIncrementStep        = IfxDma_ChannelIncrementStep_1,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   171          .destinationAddressIncrementDirection   = IfxDma_ChannelIncrementDirection_positive,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   172          .destinationAddressCircularRange        = IfxDma_ChannelIncrementCircular_32768,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   173          .shadowControl                          = IfxDma_ChannelShadow_none,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   174          .sourceCircularBufferEnabled            = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   175          .destinationCircularBufferEnabled       = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   176          .timestampEnabled                       = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   177          .wrapSourceInterruptEnabled             = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   178          .wrapDestinationInterruptEnabled        = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   179          .channelInterruptEnabled                = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   180          .channelInterruptControl                = IfxDma_ChannelInterruptControl_thresholdLimitMatch,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   181          .interruptRaiseThreshold                = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   182          .transactionRequestLostInterruptEnabled = FALSE,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   183          .channelInterruptPriority               = 0,
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   184          .channelInterruptTypeOfService          = IfxSrc_Tos_cpu0
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   185      };
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   186  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   187      /* Default Configuration */
	mov.aa	a2,a4
.L152:
	mov.a	a6,#13
.L8:
	ld.w	d15,[a15+]
	st.w	[a2+],d15
	loop	a6,.L8
.L153:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   188      *config = defaultConfig;
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   189  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   190      /* take over module pointer */
	st.a	[a4],a5
.L154:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   191      config->module = dma;
	ret
.L125:
	
__IfxDma_Dma_initChannelConfig_function_end:
	.size	IfxDma_Dma_initChannelConfig,__IfxDma_Dma_initChannelConfig_function_end-IfxDma_Dma_initChannelConfig
.L58:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initLinkedListEntry',code,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initLinkedListEntry'
	.align	2
	
	.global	IfxDma_Dma_initLinkedListEntry

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   192  }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   193  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   194  
; Function IfxDma_Dma_initLinkedListEntry
.L20:
IfxDma_Dma_initLinkedListEntry:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   195  void IfxDma_Dma_initLinkedListEntry(void *ptrToAddress, const IfxDma_Dma_ChannelConfig *config)
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   196  {
	j	IfxDma_Dma_configureTransactionSet
.L129:
	
__IfxDma_Dma_initLinkedListEntry_function_end:
	.size	IfxDma_Dma_initLinkedListEntry,__IfxDma_Dma_initLinkedListEntry_function_end-IfxDma_Dma_initLinkedListEntry
.L63:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initModule',code,cluster('IfxDma_Dma_initModule')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initModule'
	.align	2
	
	.global	IfxDma_Dma_initModule

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   197      IfxDma_Dma_configureTransactionSet((Ifx_DMA_CH *)ptrToAddress, config);
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   198  }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   199  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   200  
; Function IfxDma_Dma_initModule
.L22:
IfxDma_Dma_initModule:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   201  void IfxDma_Dma_initModule(IfxDma_Dma *dma, const IfxDma_Dma_Config *config)
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   202  {
	ld.a	a15,[a5]
.L172:
	st.a	[a4],a15
.L173:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   203      dma->dma = config->dma;
	ret
.L76:
	
__IfxDma_Dma_initModule_function_end:
	.size	IfxDma_Dma_initModule,__IfxDma_Dma_initModule_function_end-IfxDma_Dma_initModule
.L43:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initModuleConfig',code,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initModuleConfig'
	.align	2
	
	.global	IfxDma_Dma_initModuleConfig

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   204  }
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   205  
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   206  
; Function IfxDma_Dma_initModuleConfig
.L24:
IfxDma_Dma_initModuleConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   207  void IfxDma_Dma_initModuleConfig(IfxDma_Dma_Config *config, Ifx_DMA *dma)
; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   208  {
	st.a	[a4],a5
.L178:

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   209      config->dma = dma;
	ret
.L80:
	
__IfxDma_Dma_initModuleConfig_function_end:
	.size	IfxDma_Dma_initModuleConfig,__IfxDma_Dma_initModuleConfig_function_end-IfxDma_Dma_initModuleConfig
.L48:
	; End of function
	
	.sdecl	'.rodata.IfxDma_Dma..1.ini',data,rom
	.sect	'.rodata.IfxDma_Dma..1.ini'
	.align	4
.1.ini:	.type	object
	.size	.1.ini,56
	.space	34
	.byte	1
	.space	2
	.byte	1,15
	.space	1
	.byte	1,15
	.space	14
	.calls	'IfxDma_Dma_initChannel','IfxDma_Dma_configureTransactionSet'
	.calls	'IfxDma_Dma_initLinkedListEntry','IfxDma_Dma_configureTransactionSet'
	.calls	'IfxDma_Dma_configureTransactionSet','',0
	.calls	'IfxDma_Dma_createModuleHandle','',0
	.calls	'IfxDma_Dma_deInitModule','',0
	.calls	'IfxDma_Dma_initChannel','',0
	.calls	'IfxDma_Dma_initChannelConfig','',0
	.calls	'IfxDma_Dma_initLinkedListEntry','',0
	.calls	'IfxDma_Dma_initModule','',0
	.calls	'IfxDma_Dma_initModuleConfig','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L26:
	.word	97438
	.half	3
	.word	.L27
	.byte	4
.L25:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L28
	.byte	2
	.byte	'__stopPerfCounters',0,3,1,217,1,17,1,1,3,0,4
	.byte	'unsigned long long int',0,8,7,5
	.byte	'void',0
.L130:
	.byte	6
	.word	209
	.byte	7
	.byte	'__ld64',0,3,2,110,19
	.word	183
	.byte	1,1,8
	.byte	'addr',0,2,110,32
	.word	215
	.byte	3,0,2
	.byte	'__st64',0,3,2,118,17,1,1,8
	.byte	'addr',0,2,118,30
	.word	215
	.byte	8
	.byte	'value',0,2,118,43
	.word	183
	.byte	3,0,4
	.byte	'unsigned int',0,4,7,4
	.byte	'int',0,4,5,4
	.byte	'unsigned char',0,1,8,9
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,45,16,4,10
	.byte	'SRPN',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	319
	.byte	2,6,2,35,1,10
	.byte	'SRE',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'TOS',0,1
	.word	319
	.byte	2,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	319
	.byte	3,0,2,35,1,10
	.byte	'ECC',0,1
	.word	319
	.byte	6,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	319
	.byte	2,0,2,35,2,10
	.byte	'SRR',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'CLRR',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'SETR',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'IOV',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'IOVCLR',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'SWS',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'SWSCLR',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,4,70,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	336
	.byte	4,2,35,0,0,13
	.word	626
	.byte	6
	.word	665
.L116:
	.byte	2
	.byte	'IfxSrc_clearRequest',0,3,3,230,1,17,1,1
.L118:
	.byte	8
	.byte	'src',0,3,230,1,60
	.word	670
.L120:
	.byte	3,0
.L121:
	.byte	2
	.byte	'IfxSrc_enable',0,3,3,248,1,17,1,1
.L122:
	.byte	8
	.byte	'src',0,3,248,1,54
	.word	670
.L124:
	.byte	3,0,14,5,49,9,1,15
	.byte	'IfxSrc_Tos_cpu0',0,0,15
	.byte	'IfxSrc_Tos_cpu1',0,1,15
	.byte	'IfxSrc_Tos_cpu2',0,2,15
	.byte	'IfxSrc_Tos_dma',0,3,0,4
	.byte	'unsigned short int',0,2,7
.L107:
	.byte	2
	.byte	'IfxSrc_init',0,3,3,254,1,17,1,1
.L109:
	.byte	8
	.byte	'src',0,3,254,1,52
	.word	670
.L111:
	.byte	8
	.byte	'typOfService',0,3,254,1,68
	.word	755
.L113:
	.byte	8
	.byte	'priority',0,3,254,1,95
	.word	832
.L115:
	.byte	16,3,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,7,239,8,16,4,10
	.byte	'ENDINIT',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'PW',0,2
	.word	832
	.byte	14,0,2,35,0,10
	.byte	'REL',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,7,130,17,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	931
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,7,248,8,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	2,6,2,35,0,10
	.byte	'IR0',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	319
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,7,141,17,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1067
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,7,135,9,16,4,10
	.byte	'AE',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	319
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,7,152,17,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1311
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU',0,7,204,17,25,12,12
	.byte	'CON0',0
	.word	1027
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	1271
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	1502
	.byte	4,2,35,8,0,13
	.word	1542
	.byte	6
	.word	1605
	.byte	2
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,6,130,3,17,1,1,8
	.byte	'watchdog',0,6,130,3,65
	.word	1610
	.byte	8
	.byte	'password',0,6,130,3,82
	.word	832
	.byte	3,0,2
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,6,222,3,17,1,1,8
	.byte	'watchdog',0,6,222,3,63
	.word	1610
	.byte	8
	.byte	'password',0,6,222,3,80
	.word	832
	.byte	3,0,7
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,6,187,3,19
	.word	832
	.byte	1,1,8
	.byte	'watchdog',0,6,187,3,74
	.word	1610
	.byte	3,0,14,9,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_1',0,1,15
	.byte	'IfxCpu_ResourceCpu_2',0,2,15
	.byte	'IfxCpu_ResourceCpu_none',0,3,0,7
	.byte	'IfxCpu_getCoreIndex',0,3,8,170,5,31
	.word	1840
	.byte	1,1,3,0,7
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,185,4,20
	.word	319
	.byte	1,1,3,0,4
	.byte	'unsigned long int',0,4,7,7
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,190,5,19
	.word	2017
	.byte	1,1,8
	.byte	'address',0,8,190,5,55
	.word	2017
	.byte	3,0,7
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,198,5,20
	.word	319
	.byte	1,1,8
	.byte	'address',0,8,198,5,70
	.word	2017
	.byte	3,0,2
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,153,7,17,1,1,8
	.byte	'address',0,8,153,7,56
	.word	2017
	.byte	8
	.byte	'count',0,8,153,7,72
	.word	2017
	.byte	3,0,9
	.byte	'_Ifx_P_OUT_Bits',0,11,143,3,16,4,10
	.byte	'P0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,11,250,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2246
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMR_Bits',0,11,169,2,16,4,10
	.byte	'PS0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'PCL0',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,11,184,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2562
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ID_Bits',0,11,110,16,4,10
	.byte	'MODREV',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,11,156,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3133
	.byte	4,2,35,0,0,17,4
	.word	319
	.byte	18,3,0,9
	.byte	'_Ifx_P_IOCR0_Bits',0,11,140,1,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'PC0',0,1
	.word	319
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	319
	.byte	3,5,2,35,1,10
	.byte	'PC1',0,1
	.word	319
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	319
	.byte	3,5,2,35,2,10
	.byte	'PC2',0,1
	.word	319
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'PC3',0,1
	.word	319
	.byte	5,0,2,35,3,0,11,11,178,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3261
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR4_Bits',0,11,166,1,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'PC4',0,1
	.word	319
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	319
	.byte	3,5,2,35,1,10
	.byte	'PC5',0,1
	.word	319
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	319
	.byte	3,5,2,35,2,10
	.byte	'PC6',0,1
	.word	319
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'PC7',0,1
	.word	319
	.byte	5,0,2,35,3,0,11,11,200,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3476
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR8_Bits',0,11,179,1,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'PC8',0,1
	.word	319
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	319
	.byte	3,5,2,35,1,10
	.byte	'PC9',0,1
	.word	319
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	319
	.byte	3,5,2,35,2,10
	.byte	'PC10',0,1
	.word	319
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'PC11',0,1
	.word	319
	.byte	5,0,2,35,3,0,11,11,211,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3691
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR12_Bits',0,11,153,1,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'PC12',0,1
	.word	319
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	319
	.byte	3,5,2,35,1,10
	.byte	'PC13',0,1
	.word	319
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	319
	.byte	3,5,2,35,2,10
	.byte	'PC14',0,1
	.word	319
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'PC15',0,1
	.word	319
	.byte	5,0,2,35,3,0,11,11,189,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3908
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IN_Bits',0,11,118,16,4,10
	.byte	'P0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,11,167,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4128
	.byte	4,2,35,0,0,17,24
	.word	319
	.byte	18,23,0,9
	.byte	'_Ifx_P_PDR0_Bits',0,11,204,3,16,4,10
	.byte	'PD0',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	319
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'PD2',0,1
	.word	319
	.byte	3,5,2,35,1,10
	.byte	'PL2',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'PD3',0,1
	.word	319
	.byte	3,1,2,35,1,10
	.byte	'PL3',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'PD4',0,1
	.word	319
	.byte	3,5,2,35,2,10
	.byte	'PL4',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'PD5',0,1
	.word	319
	.byte	3,1,2,35,2,10
	.byte	'PL5',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'PD6',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'PL6',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'PD7',0,1
	.word	319
	.byte	3,1,2,35,3,10
	.byte	'PL7',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,11,155,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4451
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PDR1_Bits',0,11,225,3,16,4,10
	.byte	'PD8',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'PL8',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'PD9',0,1
	.word	319
	.byte	3,1,2,35,0,10
	.byte	'PL9',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'PD10',0,1
	.word	319
	.byte	3,5,2,35,1,10
	.byte	'PL10',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'PD11',0,1
	.word	319
	.byte	3,1,2,35,1,10
	.byte	'PL11',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'PD12',0,1
	.word	319
	.byte	3,5,2,35,2,10
	.byte	'PL12',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'PD13',0,1
	.word	319
	.byte	3,1,2,35,2,10
	.byte	'PL13',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'PD14',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'PL14',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'PD15',0,1
	.word	319
	.byte	3,1,2,35,3,10
	.byte	'PL15',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,11,166,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4755
	.byte	4,2,35,0,0,17,8
	.word	319
	.byte	18,7,0,9
	.byte	'_Ifx_P_ESR_Bits',0,11,88,16,4,10
	.byte	'EN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,11,145,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5080
	.byte	4,2,35,0,0,17,12
	.word	319
	.byte	18,11,0,9
	.byte	'_Ifx_P_PDISC_Bits',0,11,182,3,16,4,10
	.byte	'PDIS0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'PDIS2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'PDIS3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'PDIS4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'PDIS5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'PDIS6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PDIS7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'PDIS8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'PDIS9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'PDIS10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'PDIS11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'PDIS12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'PDIS13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'PDIS14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'PDIS15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,11,144,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5420
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PCSR_Bits',0,11,165,3,16,4,10
	.byte	'SEL0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'SEL1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'SEL2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'SEL3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'SEL4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'SEL5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'SEL6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	832
	.byte	3,6,2,35,0,10
	.byte	'SEL10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'SEL11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	296
	.byte	19,1,2,35,0,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,11,133,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5786
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR0_Bits',0,11,206,2,16,4,10
	.byte	'PS0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	28,0,2,35,0,0,11,11,206,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6056
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR4_Bits',0,11,227,2,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	4,4,2,35,0,10
	.byte	'PS4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	296
	.byte	24,0,2,35,0,0,11,11,228,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6203
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR8_Bits',0,11,238,2,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'PS8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	296
	.byte	20,0,2,35,0,0,11,11,239,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6372
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR12_Bits',0,11,216,2,16,4,10
	.byte	'reserved_0',0,2
	.word	832
	.byte	12,4,2,35,0,10
	.byte	'PS12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,11,217,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6544
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR0_Bits',0,11,232,1,16,4,10
	.byte	'reserved_0',0,2
	.word	832
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	832
	.byte	12,0,2,35,2,0,11,11,140,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6719
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR4_Bits',0,11,253,1,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	20,12,2,35,0,10
	.byte	'PCL4',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,11,162,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6893
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR8_Bits',0,11,136,2,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	24,8,2,35,0,10
	.byte	'PCL8',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	319
	.byte	4,0,2,35,3,0,11,11,173,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7067
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR12_Bits',0,11,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	28,4,2,35,0,10
	.byte	'PCL12',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,11,151,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7243
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR_Bits',0,11,249,2,16,4,10
	.byte	'PS0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,11,195,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7399
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR_Bits',0,11,147,2,16,4,10
	.byte	'reserved_0',0,2
	.word	832
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,11,129,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7732
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_LPCR0_Bits',0,11,192,1,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	30,0,2,35,0,0,11,11,222,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8080
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_LPCR1_Bits',0,11,200,1,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	30,0,2,35,0,0,9
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,11,208,1,16,4,10
	.byte	'RDIS_CTRL',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'RX_DIS',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'TERM',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'LRXTERM',0,1
	.word	319
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	296
	.byte	24,0,2,35,0,0,11,11,233,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8204
	.byte	4,2,35,0,12
	.byte	'B_P21',0
	.word	8288
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_LPCR2_Bits',0,11,218,1,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'LVDSR',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'LVDSRL',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	319
	.byte	2,4,2,35,1,10
	.byte	'TDIS_CTRL',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'TX_DIS',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'TX_PD',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'TX_PWDPD',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,11,246,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8468
	.byte	4,2,35,0,0,17,76
	.word	319
	.byte	18,75,0,9
	.byte	'_Ifx_P_ACCEN1_Bits',0,11,82,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,11,134,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8721
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ACCEN0_Bits',0,11,45,16,4,10
	.byte	'EN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,11,251,3,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8808
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P',0,11,185,6,25,128,2,12
	.byte	'OUT',0
	.word	2522
	.byte	4,2,35,0,12
	.byte	'OMR',0
	.word	3093
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	3212
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	3252
	.byte	4,2,35,12,12
	.byte	'IOCR0',0
	.word	3436
	.byte	4,2,35,16,12
	.byte	'IOCR4',0
	.word	3651
	.byte	4,2,35,20,12
	.byte	'IOCR8',0
	.word	3868
	.byte	4,2,35,24,12
	.byte	'IOCR12',0
	.word	4088
	.byte	4,2,35,28,12
	.byte	'reserved_20',0
	.word	3252
	.byte	4,2,35,32,12
	.byte	'IN',0
	.word	4402
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	4442
	.byte	24,2,35,40,12
	.byte	'PDR0',0
	.word	4715
	.byte	4,2,35,64,12
	.byte	'PDR1',0
	.word	5031
	.byte	4,2,35,68,12
	.byte	'reserved_48',0
	.word	5071
	.byte	8,2,35,72,12
	.byte	'ESR',0
	.word	5371
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	5411
	.byte	12,2,35,84,12
	.byte	'PDISC',0
	.word	5746
	.byte	4,2,35,96,12
	.byte	'PCSR',0
	.word	6016
	.byte	4,2,35,100,12
	.byte	'reserved_68',0
	.word	5071
	.byte	8,2,35,104,12
	.byte	'OMSR0',0
	.word	6163
	.byte	4,2,35,112,12
	.byte	'OMSR4',0
	.word	6332
	.byte	4,2,35,116,12
	.byte	'OMSR8',0
	.word	6504
	.byte	4,2,35,120,12
	.byte	'OMSR12',0
	.word	6679
	.byte	4,2,35,124,12
	.byte	'OMCR0',0
	.word	6853
	.byte	4,3,35,128,1,12
	.byte	'OMCR4',0
	.word	7027
	.byte	4,3,35,132,1,12
	.byte	'OMCR8',0
	.word	7203
	.byte	4,3,35,136,1,12
	.byte	'OMCR12',0
	.word	7359
	.byte	4,3,35,140,1,12
	.byte	'OMSR',0
	.word	7692
	.byte	4,3,35,144,1,12
	.byte	'OMCR',0
	.word	8040
	.byte	4,3,35,148,1,12
	.byte	'reserved_98',0
	.word	5071
	.byte	8,3,35,152,1,12
	.byte	'LPCR0',0
	.word	8164
	.byte	4,3,35,160,1,12
	.byte	'LPCR1',0
	.word	8413
	.byte	4,3,35,164,1,12
	.byte	'LPCR2',0
	.word	8672
	.byte	4,3,35,168,1,12
	.byte	'reserved_A4',0
	.word	8712
	.byte	76,3,35,172,1,12
	.byte	'ACCEN1',0
	.word	8768
	.byte	4,3,35,248,1,12
	.byte	'ACCEN0',0
	.word	9335
	.byte	4,3,35,252,1,0,13
	.word	9375
	.byte	6
	.word	9978
	.byte	14,10,152,1,9,4,15
	.byte	'IfxPort_State_notChanged',0,0,15
	.byte	'IfxPort_State_high',0,1,15
	.byte	'IfxPort_State_low',0,128,128,4,15
	.byte	'IfxPort_State_toggled',0,129,128,4,0,2
	.byte	'IfxPort_setPinState',0,3,10,182,4,17,1,1,8
	.byte	'port',0,10,182,4,44
	.word	9983
	.byte	8
	.byte	'pinIndex',0,10,182,4,56
	.word	319
	.byte	8
	.byte	'action',0,10,182,4,80
	.word	9988
	.byte	3,0,9
	.byte	'_Ifx_DMA_CLC_Bits',0,13,131,4,16,4,10
	.byte	'DISR',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	28,0,2,35,0,0,11,13,140,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10169
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ID_Bits',0,13,155,4,16,4,10
	.byte	'MOD_REV',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'MOD_TYPE',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	832
	.byte	16,0,2,35,2,0,11,13,173,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10326
	.byte	4,2,35,0,0,17,20
	.word	319
	.byte	18,19,0,9
	.byte	'_Ifx_DMA_MEMCON_Bits',0,13,163,4,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	2,6,2,35,0,10
	.byte	'INTERR',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'RMWERR',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'DATAERR',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'PMIC',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'ERRDIS',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	296
	.byte	22,0,2,35,0,0,11,13,184,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10459
	.byte	4,2,35,0,0,17,28
	.word	319
	.byte	18,27,0,9
	.byte	'_Ifx_DMA_ACCEN00_Bits',0,13,45,16,4,10
	.byte	'EN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,13,128,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10736
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN01_Bits',0,13,82,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,139,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11306
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN10_Bits',0,13,88,16,4,10
	.byte	'EN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,13,150,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11396
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN11_Bits',0,13,125,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,161,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11966
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN20_Bits',0,13,131,1,16,4,10
	.byte	'EN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,13,172,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12056
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN21_Bits',0,13,168,1,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,183,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12627
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN30_Bits',0,13,174,1,16,4,10
	.byte	'EN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,13,194,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12718
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN31_Bits',0,13,211,1,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,205,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13289
	.byte	4,2,35,0,0,17,192,1
	.word	319
	.byte	18,191,1,0,9
	.byte	'_Ifx_DMA_BLK_EER_Bits',0,13,233,1,16,4,10
	.byte	'reserved_0',0,2
	.word	832
	.byte	16,0,2,35,0,10
	.byte	'ESER',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'EDER',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	319
	.byte	6,0,2,35,2,10
	.byte	'ERER',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'ELER',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	319
	.byte	5,0,2,35,3,0,11,13,227,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13391
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ERRSR_Bits',0,13,246,1,16,4,10
	.byte	'LEC',0,1
	.word	319
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	832
	.byte	9,0,2,35,0,10
	.byte	'SER',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'DER',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	319
	.byte	2,4,2,35,2,10
	.byte	'SPBER',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'SRIER',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	319
	.byte	2,0,2,35,2,10
	.byte	'RAMER',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'SLLER',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'DLLER',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	319
	.byte	5,0,2,35,3,0,11,13,238,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13615
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_CLRE_Bits',0,13,217,1,16,4,10
	.byte	'reserved_0',0,2
	.word	832
	.byte	16,0,2,35,0,10
	.byte	'CSER',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'CDER',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	319
	.byte	2,4,2,35,2,10
	.byte	'CSPBER',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'CSRIER',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	319
	.byte	2,0,2,35,2,10
	.byte	'CRAMER',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'CSLLER',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'CDLLER',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	319
	.byte	5,0,2,35,3,0,11,13,216,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13907
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SR_Bits',0,13,161,3,16,4,10
	.byte	'RS',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	319
	.byte	3,4,2,35,0,10
	.byte	'WS',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,2
	.word	832
	.byte	11,0,2,35,0,10
	.byte	'CH',0,1
	.word	319
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	832
	.byte	9,0,2,35,2,0,11,13,169,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14190
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R0_Bits',0,13,193,2,16,4,10
	.byte	'RD00',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'RD01',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'RD02',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'RD03',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,165,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14370
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R1_Bits',0,13,202,2,16,4,10
	.byte	'RD10',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'RD11',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'RD12',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'RD13',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,176,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14505
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R2_Bits',0,13,211,2,16,4,10
	.byte	'RD20',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'RD21',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'RD22',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'RD23',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,187,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14640
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R3_Bits',0,13,220,2,16,4,10
	.byte	'RD30',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'RD31',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'RD32',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'RD33',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,198,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14775
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R4_Bits',0,13,229,2,16,4,10
	.byte	'RD40',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'RD41',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'RD42',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'RD43',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,209,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14910
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R5_Bits',0,13,238,2,16,4,10
	.byte	'RD50',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'RD51',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'RD52',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'RD53',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,220,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15045
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R6_Bits',0,13,247,2,16,4,10
	.byte	'RD60',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'RD61',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'RD62',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'RD63',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,231,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15180
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R7_Bits',0,13,128,3,16,4,10
	.byte	'RD70',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'RD71',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'RD72',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'RD73',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,242,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15315
	.byte	4,2,35,0,0,17,32
	.word	319
	.byte	18,31,0,9
	.byte	'_Ifx_DMA_BLK_ME_RDCRC_Bits',0,13,137,3,16,4,10
	.byte	'RDCRC',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,253,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15459
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SDCRC_Bits',0,13,149,3,16,4,10
	.byte	'SDCRC',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,147,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15550
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SADR_Bits',0,13,143,3,16,4,10
	.byte	'SADR',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,136,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15641
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_DADR_Bits',0,13,187,2,16,4,10
	.byte	'DADR',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,154,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15730
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_ADICR_Bits',0,13,135,2,16,4,10
	.byte	'SMF',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'INCS',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'DMF',0,1
	.word	319
	.byte	3,1,2,35,0,10
	.byte	'INCD',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'CBLS',0,1
	.word	319
	.byte	4,4,2,35,1,10
	.byte	'CBLD',0,1
	.word	319
	.byte	4,0,2,35,1,10
	.byte	'SHCT',0,1
	.word	319
	.byte	4,4,2,35,2,10
	.byte	'SCBE',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'DCBE',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'STAMP',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'ETRL',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'WRPSE',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'WRPDE',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'INTCT',0,1
	.word	319
	.byte	2,4,2,35,3,10
	.byte	'IRDV',0,1
	.word	319
	.byte	4,0,2,35,3,0,11,13,249,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15819
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_CHCR_Bits',0,13,155,2,16,4,10
	.byte	'TREL',0,2
	.word	832
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'BLKM',0,1
	.word	319
	.byte	3,5,2,35,2,10
	.byte	'RROAT',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'CHMODE',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'CHDW',0,1
	.word	319
	.byte	3,0,2,35,2,10
	.byte	'PATSEL',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'PRSEL',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'DMAPRIO',0,1
	.word	319
	.byte	2,0,2,35,3,0,11,13,132,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16135
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SHADR_Bits',0,13,155,3,16,4,10
	.byte	'SHADR',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,158,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16414
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_CHSR_Bits',0,13,171,2,16,4,10
	.byte	'TCOUNT',0,2
	.word	832
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'LXO',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'WRPS',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'WRPD',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'ICH',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'IPM',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,1
	.word	319
	.byte	2,2,2,35,2,10
	.byte	'BUFFER',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'FROZEN',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,143,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16505
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME',0,13,163,9,25,112,12
	.byte	'SR',0
	.word	14330
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	5411
	.byte	12,2,35,4,12
	.byte	'R0',0
	.word	14465
	.byte	4,2,35,16,12
	.byte	'R1',0
	.word	14600
	.byte	4,2,35,20,12
	.byte	'R2',0
	.word	14735
	.byte	4,2,35,24,12
	.byte	'R3',0
	.word	14870
	.byte	4,2,35,28,12
	.byte	'R4',0
	.word	15005
	.byte	4,2,35,32,12
	.byte	'R5',0
	.word	15140
	.byte	4,2,35,36,12
	.byte	'R6',0
	.word	15275
	.byte	4,2,35,40,12
	.byte	'R7',0
	.word	15410
	.byte	4,2,35,44,12
	.byte	'reserved_30',0
	.word	15450
	.byte	32,2,35,48,12
	.byte	'RDCRC',0
	.word	15510
	.byte	4,2,35,80,12
	.byte	'SDCRC',0
	.word	15601
	.byte	4,2,35,84,12
	.byte	'SADR',0
	.word	15690
	.byte	4,2,35,88,12
	.byte	'DADR',0
	.word	15779
	.byte	4,2,35,92,12
	.byte	'ADICR',0
	.word	16095
	.byte	4,2,35,96,12
	.byte	'CHCR',0
	.word	16374
	.byte	4,2,35,100,12
	.byte	'SHADR',0
	.word	16465
	.byte	4,2,35,104,12
	.byte	'CHSR',0
	.word	16738
	.byte	4,2,35,108,0,13
	.word	16778
	.byte	9
	.byte	'_Ifx_DMA_BLK',0,13,197,9,25,128,1,12
	.byte	'EER',0
	.word	13575
	.byte	4,2,35,0,12
	.byte	'ERRSR',0
	.word	13867
	.byte	4,2,35,4,12
	.byte	'CLRE',0
	.word	14150
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	3252
	.byte	4,2,35,12,12
	.byte	'ME',0
	.word	17066
	.byte	112,2,35,16,0,13
	.word	17071
	.byte	17,128,31
	.word	319
	.byte	18,255,30,0,13
	.word	17071
	.byte	17,96
	.word	319
	.byte	18,95,0,9
	.byte	'_Ifx_DMA_OTSS_Bits',0,13,185,4,16,4,10
	.byte	'TGS',0,1
	.word	319
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	319
	.byte	3,1,2,35,0,10
	.byte	'BS',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	296
	.byte	24,0,2,35,0,0,11,13,206,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17196
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ERRINTR_Bits',0,13,141,4,16,4,10
	.byte	'SIT',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	296
	.byte	31,0,2,35,0,0,11,13,151,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17335
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_PRR0_Bits',0,13,194,4,16,4,10
	.byte	'PAT00',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'PAT01',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'PAT02',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'PAT03',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,217,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17441
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_PRR1_Bits',0,13,203,4,16,4,10
	.byte	'PAT10',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'PAT11',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'PAT12',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'PAT13',0,1
	.word	319
	.byte	8,0,2,35,3,0,11,13,228,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17575
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_TIME_Bits',0,13,226,4,16,4,10
	.byte	'COUNT',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,133,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17709
	.byte	4,2,35,0,0,17,236,1
	.word	319
	.byte	18,235,1,0,9
	.byte	'_Ifx_DMA_MODE_Bits',0,13,178,4,16,4,10
	.byte	'MODE',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	296
	.byte	31,0,2,35,0,0,11,13,195,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17803
	.byte	4,2,35,0,0,17,16
	.word	17867
	.byte	18,3,0,17,240,9
	.word	319
	.byte	18,239,9,0,9
	.byte	'_Ifx_DMA_HRR_Bits',0,13,148,4,16,4,10
	.byte	'HRP',0,1
	.word	319
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	30,0,2,35,0,0,11,13,162,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17927
	.byte	4,2,35,0,0,17,128,2
	.word	17989
	.byte	18,63,0,17,128,2
	.word	319
	.byte	18,255,1,0,9
	.byte	'_Ifx_DMA_SUSENR_Bits',0,13,219,4,16,4,10
	.byte	'SUSEN',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	296
	.byte	31,0,2,35,0,0,11,13,250,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18050
	.byte	4,2,35,0,0,17,128,2
	.word	18117
	.byte	18,63,0,9
	.byte	'_Ifx_DMA_SUSACR_Bits',0,13,212,4,16,4,10
	.byte	'SUSAC',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	296
	.byte	31,0,2,35,0,0,11,13,239,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18167
	.byte	4,2,35,0,0,17,128,2
	.word	18234
	.byte	18,63,0,9
	.byte	'_Ifx_DMA_TSR_Bits',0,13,232,4,16,4,10
	.byte	'RST',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'HTRE',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'TRL',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'CH',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	319
	.byte	4,0,2,35,0,10
	.byte	'HLTREQ',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'HLTACK',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	319
	.byte	6,0,2,35,1,10
	.byte	'ECH',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'DCH',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'CTL',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	319
	.byte	5,0,2,35,2,10
	.byte	'HLTCLR',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	319
	.byte	7,0,2,35,3,0
.L92:
	.byte	11,13,144,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18284
	.byte	4,2,35,0,0,17,128,2
	.word	18559
	.byte	18,63,0,9
	.byte	'_Ifx_DMA_CH_RDCRCR_Bits',0,13,235,3,16,4,10
	.byte	'RDCRC',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,224,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18609
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_SDCRCR_Bits',0,13,247,3,16,4,10
	.byte	'SDCRC',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,246,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18697
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_SADR_Bits',0,13,241,3,16,4,10
	.byte	'SADR',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,235,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18785
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_DADR_Bits',0,13,229,3,16,4,10
	.byte	'DADR',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,213,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18870
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_ADICR_Bits',0,13,172,3,16,4,10
	.byte	'SMF',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'INCS',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'DMF',0,1
	.word	319
	.byte	3,1,2,35,0,10
	.byte	'INCD',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'CBLS',0,1
	.word	319
	.byte	4,4,2,35,1,10
	.byte	'CBLD',0,1
	.word	319
	.byte	4,0,2,35,1,10
	.byte	'SHCT',0,1
	.word	319
	.byte	4,4,2,35,2,10
	.byte	'SCBE',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'DCBE',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'STAMP',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'ETRL',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'WRPSE',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'WRPDE',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'INTCT',0,1
	.word	319
	.byte	2,4,2,35,3,10
	.byte	'IRDV',0,1
	.word	319
	.byte	4,0,2,35,3,0
.L141:
	.byte	11,13,180,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18955
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_CHCFGR_Bits',0,13,192,3,16,4,10
	.byte	'TREL',0,2
	.word	832
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'BLKM',0,1
	.word	319
	.byte	3,5,2,35,2,10
	.byte	'RROAT',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'CHMODE',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'CHDW',0,1
	.word	319
	.byte	3,0,2,35,2,10
	.byte	'PATSEL',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'PRSEL',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'DMAPRIO',0,1
	.word	319
	.byte	2,0,2,35,3,0
.L138:
	.byte	11,13,191,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19267
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_SHADR_Bits',0,13,253,3,16,4,10
	.byte	'SHADR',0,4
	.word	296
	.byte	32,0,2,35,0,0,11,13,129,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19544
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_CHCSR_Bits',0,13,208,3,16,4,10
	.byte	'TCOUNT',0,2
	.word	832
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'LXO',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'WRPS',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'WRPD',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'ICH',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'IPM',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,1
	.word	319
	.byte	2,2,2,35,2,10
	.byte	'BUFFER',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'FROZEN',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'SWB',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'CWRP',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'CICH',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'SIT',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	319
	.byte	3,1,2,35,3,10
	.byte	'SCH',0,1
	.word	319
	.byte	1,0,2,35,3,0,11,13,202,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19631
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH',0,13,207,9,25,32,12
	.byte	'RDCRCR',0
	.word	18657
	.byte	4,2,35,0,12
	.byte	'SDCRCR',0
	.word	18745
	.byte	4,2,35,4,12
	.byte	'SADR',0
	.word	18830
	.byte	4,2,35,8,12
	.byte	'DADR',0
	.word	18915
	.byte	4,2,35,12,12
	.byte	'ADICR',0
	.word	19227
	.byte	4,2,35,16,12
	.byte	'CHCFGR',0
	.word	19504
	.byte	4,2,35,20,12
	.byte	'SHADR',0
	.word	19591
	.byte	4,2,35,24,12
	.byte	'CHCSR',0
	.word	19938
	.byte	4,2,35,28,0,17,128,16
	.word	19978
	.byte	18,63,0,13
	.word	20118
	.byte	17,128,48
	.word	319
	.byte	18,255,47,0,9
	.byte	'_Ifx_DMA',0,13,230,9,25,128,128,1,12
	.byte	'CLC',0
	.word	10286
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	3252
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	10410
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	10450
	.byte	20,2,35,12,12
	.byte	'MEMCON',0
	.word	10687
	.byte	4,2,35,32,12
	.byte	'reserved_24',0
	.word	10727
	.byte	28,2,35,36,12
	.byte	'ACCEN00',0
	.word	11266
	.byte	4,2,35,64,12
	.byte	'ACCEN01',0
	.word	11356
	.byte	4,2,35,68,12
	.byte	'ACCEN10',0
	.word	11926
	.byte	4,2,35,72,12
	.byte	'ACCEN11',0
	.word	12016
	.byte	4,2,35,76,12
	.byte	'ACCEN20',0
	.word	12587
	.byte	4,2,35,80,12
	.byte	'ACCEN21',0
	.word	12678
	.byte	4,2,35,84,12
	.byte	'ACCEN30',0
	.word	13249
	.byte	4,2,35,88,12
	.byte	'ACCEN31',0
	.word	13340
	.byte	4,2,35,92,12
	.byte	'reserved_60',0
	.word	13380
	.byte	192,1,2,35,96,12
	.byte	'BLK0',0
	.word	17166
	.byte	128,1,3,35,160,2,12
	.byte	'reserved_1A0',0
	.word	17171
	.byte	128,31,3,35,160,3,12
	.byte	'BLK1',0
	.word	17182
	.byte	128,1,3,35,160,34,12
	.byte	'reserved_11A0',0
	.word	17187
	.byte	96,3,35,160,35,12
	.byte	'OTSS',0
	.word	17295
	.byte	4,3,35,128,36,12
	.byte	'ERRINTR',0
	.word	17401
	.byte	4,3,35,132,36,12
	.byte	'PRR0',0
	.word	17535
	.byte	4,3,35,136,36,12
	.byte	'PRR1',0
	.word	17669
	.byte	4,3,35,140,36,12
	.byte	'TIME',0
	.word	17752
	.byte	4,3,35,144,36,12
	.byte	'reserved_1214',0
	.word	17792
	.byte	236,1,3,35,148,36,12
	.byte	'MODE',0
	.word	17907
	.byte	16,3,35,128,38,12
	.byte	'reserved_1310',0
	.word	17916
	.byte	240,9,3,35,144,38,12
	.byte	'HRR',0
	.word	18029
	.byte	128,2,3,35,128,48,12
	.byte	'reserved_1900',0
	.word	18039
	.byte	128,2,3,35,128,50,12
	.byte	'SUSENR',0
	.word	18157
	.byte	128,2,3,35,128,52,12
	.byte	'reserved_1B00',0
	.word	18039
	.byte	128,2,3,35,128,54,12
	.byte	'SUSACR',0
	.word	18274
	.byte	128,2,3,35,128,56,12
	.byte	'reserved_1D00',0
	.word	18039
	.byte	128,2,3,35,128,58,12
	.byte	'TSR',0
	.word	18599
	.byte	128,2,3,35,128,60,12
	.byte	'reserved_1F00',0
	.word	18039
	.byte	128,2,3,35,128,62,12
	.byte	'CH',0
	.word	20128
	.byte	128,16,3,35,128,64,12
	.byte	'reserved_2800',0
	.word	20133
	.byte	128,48,3,35,128,80,0,13
	.word	20144
.L72:
	.byte	6
	.word	20850
	.byte	14,14,83,9,1,15
	.byte	'IfxDma_ChannelId_none',0,127,15
	.byte	'IfxDma_ChannelId_0',0,0,15
	.byte	'IfxDma_ChannelId_1',0,1,15
	.byte	'IfxDma_ChannelId_2',0,2,15
	.byte	'IfxDma_ChannelId_3',0,3,15
	.byte	'IfxDma_ChannelId_4',0,4,15
	.byte	'IfxDma_ChannelId_5',0,5,15
	.byte	'IfxDma_ChannelId_6',0,6,15
	.byte	'IfxDma_ChannelId_7',0,7,15
	.byte	'IfxDma_ChannelId_8',0,8,15
	.byte	'IfxDma_ChannelId_9',0,9,15
	.byte	'IfxDma_ChannelId_10',0,10,15
	.byte	'IfxDma_ChannelId_11',0,11,15
	.byte	'IfxDma_ChannelId_12',0,12,15
	.byte	'IfxDma_ChannelId_13',0,13,15
	.byte	'IfxDma_ChannelId_14',0,14,15
	.byte	'IfxDma_ChannelId_15',0,15,15
	.byte	'IfxDma_ChannelId_16',0,16,15
	.byte	'IfxDma_ChannelId_17',0,17,15
	.byte	'IfxDma_ChannelId_18',0,18,15
	.byte	'IfxDma_ChannelId_19',0,19,15
	.byte	'IfxDma_ChannelId_20',0,20,15
	.byte	'IfxDma_ChannelId_21',0,21,15
	.byte	'IfxDma_ChannelId_22',0,22,15
	.byte	'IfxDma_ChannelId_23',0,23,15
	.byte	'IfxDma_ChannelId_24',0,24,15
	.byte	'IfxDma_ChannelId_25',0,25,15
	.byte	'IfxDma_ChannelId_26',0,26,15
	.byte	'IfxDma_ChannelId_27',0,27,15
	.byte	'IfxDma_ChannelId_28',0,28,15
	.byte	'IfxDma_ChannelId_29',0,29,15
	.byte	'IfxDma_ChannelId_30',0,30,15
	.byte	'IfxDma_ChannelId_31',0,31,15
	.byte	'IfxDma_ChannelId_32',0,32,15
	.byte	'IfxDma_ChannelId_33',0,33,15
	.byte	'IfxDma_ChannelId_34',0,34,15
	.byte	'IfxDma_ChannelId_35',0,35,15
	.byte	'IfxDma_ChannelId_36',0,36,15
	.byte	'IfxDma_ChannelId_37',0,37,15
	.byte	'IfxDma_ChannelId_38',0,38,15
	.byte	'IfxDma_ChannelId_39',0,39,15
	.byte	'IfxDma_ChannelId_40',0,40,15
	.byte	'IfxDma_ChannelId_41',0,41,15
	.byte	'IfxDma_ChannelId_42',0,42,15
	.byte	'IfxDma_ChannelId_43',0,43,15
	.byte	'IfxDma_ChannelId_44',0,44,15
	.byte	'IfxDma_ChannelId_45',0,45,15
	.byte	'IfxDma_ChannelId_46',0,46,15
	.byte	'IfxDma_ChannelId_47',0,47,15
	.byte	'IfxDma_ChannelId_48',0,48,15
	.byte	'IfxDma_ChannelId_49',0,49,15
	.byte	'IfxDma_ChannelId_50',0,50,15
	.byte	'IfxDma_ChannelId_51',0,51,15
	.byte	'IfxDma_ChannelId_52',0,52,15
	.byte	'IfxDma_ChannelId_53',0,53,15
	.byte	'IfxDma_ChannelId_54',0,54,15
	.byte	'IfxDma_ChannelId_55',0,55,15
	.byte	'IfxDma_ChannelId_56',0,56,15
	.byte	'IfxDma_ChannelId_57',0,57,15
	.byte	'IfxDma_ChannelId_58',0,58,15
	.byte	'IfxDma_ChannelId_59',0,59,15
	.byte	'IfxDma_ChannelId_60',0,60,15
	.byte	'IfxDma_ChannelId_61',0,61,15
	.byte	'IfxDma_ChannelId_62',0,62,15
	.byte	'IfxDma_ChannelId_63',0,63,0,7
	.byte	'IfxDma_isChannelTransactionPending',0,3,12,157,11,20
	.word	319
	.byte	1,1,8
	.byte	'dma',0,12,157,11,64
	.word	20855
	.byte	8
	.byte	'channelId',0,12,157,11,86
	.word	20860
	.byte	3,0,2
	.byte	'IfxDma_startChannelTransaction',0,3,12,150,12,17,1,1,8
	.byte	'dma',0,12,150,12,57
	.word	20855
	.byte	8
	.byte	'channelId',0,12,150,12,79
	.word	20860
	.byte	3,0,2
	.byte	'IfxDma_setChannelDestinationAddress',0,3,12,187,11,17,1,1,8
	.byte	'dma',0,12,187,11,62
	.word	20855
	.byte	8
	.byte	'channelId',0,12,187,11,84
	.word	20860
	.byte	8
	.byte	'address',0,12,187,11,101
	.word	215
	.byte	3,0,19
	.word	209
	.byte	6
	.word	22537
	.byte	2
	.byte	'IfxDma_setChannelSourceAddress',0,3,12,246,11,17,1,1,8
	.byte	'dma',0,12,246,11,57
	.word	20855
	.byte	8
	.byte	'channelId',0,12,246,11,79
	.word	20860
	.byte	8
	.byte	'address',0,12,246,11,102
	.word	22542
	.byte	3,0,2
	.byte	'IfxDma_setChannelTransferCount',0,3,12,135,12,17,1,1,8
	.byte	'dma',0,12,135,12,57
	.word	20855
	.byte	8
	.byte	'channelId',0,12,135,12,79
	.word	20860
	.byte	8
	.byte	'transferCount',0,12,135,12,97
	.word	2017
	.byte	3,0,2
	.byte	'IfxDma_clearChannelInterrupt',0,3,12,129,9,17,1,1,8
	.byte	'dma',0,12,129,9,55
	.word	20855
	.byte	8
	.byte	'channelId',0,12,129,9,77
	.word	20860
	.byte	3,0,7
	.byte	'IfxDma_getAndClearChannelInterrupt',0,3,12,242,9,20
	.word	319
	.byte	1,1,8
	.byte	'dma',0,12,242,9,64
	.word	20855
	.byte	8
	.byte	'channelId',0,12,242,9,86
	.word	20860
	.byte	3,0,7
	.byte	'IfxDma_getChannelInterrupt',0,3,12,186,10,20
	.word	319
	.byte	1,1,8
	.byte	'dma',0,12,186,10,56
	.word	20855
	.byte	8
	.byte	'channelId',0,12,186,10,78
	.word	20860
	.byte	3,0
.L95:
	.byte	7
	.byte	'IfxDma_getSrcPointer',0,3,12,132,11,35
	.word	670
	.byte	1,1
.L97:
	.byte	8
	.byte	'dma',0,12,132,11,65
	.word	20855
.L99:
	.byte	8
	.byte	'channelId',0,12,132,11,87
	.word	20860
.L101:
	.byte	3,0,19
	.word	312
	.byte	20
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,21
	.word	23025
	.byte	0,13
	.word	296
	.byte	6
	.word	296
	.byte	22
	.byte	'__cmpswapw',0
	.word	23067
	.byte	1,1,1,1,23
	.byte	'p',0
	.word	23072
	.byte	23
	.byte	'value',0
	.word	296
	.byte	23
	.byte	'compare',0
	.word	296
	.byte	0,24
	.word	154
	.byte	3,0,24
	.word	220
	.byte	25
	.word	238
	.byte	3,0,24
	.word	253
	.byte	25
	.word	267
	.byte	25
	.word	280
	.byte	3,0,24
	.word	675
	.byte	25
	.word	703
	.byte	3,0,24
	.word	718
	.byte	25
	.word	740
	.byte	3,0,24
	.word	854
	.byte	25
	.word	874
	.byte	25
	.word	887
	.byte	25
	.word	909
	.byte	16,26
	.word	675
	.byte	25
	.word	703
	.byte	27
	.word	716
	.byte	0,3,0,0,24
	.word	1615
	.byte	25
	.word	1655
	.byte	25
	.word	1673
	.byte	3,0,24
	.word	1693
	.byte	25
	.word	1731
	.byte	25
	.word	1749
	.byte	3,0,24
	.word	1769
	.byte	25
	.word	1820
	.byte	3,0,24
	.word	1941
	.byte	3,0,24
	.word	1975
	.byte	3,0,24
	.word	2038
	.byte	25
	.word	2079
	.byte	3,0,24
	.word	2098
	.byte	25
	.word	2153
	.byte	3,0,24
	.word	2172
	.byte	25
	.word	2212
	.byte	25
	.word	2229
	.byte	3,0,24
	.word	10091
	.byte	25
	.word	10119
	.byte	25
	.word	10133
	.byte	25
	.word	10151
	.byte	3,0,24
	.word	22288
	.byte	25
	.word	22335
	.byte	25
	.word	22348
	.byte	3,0,24
	.word	22369
	.byte	25
	.word	22408
	.byte	25
	.word	22421
	.byte	3,0,24
	.word	22442
	.byte	25
	.word	22486
	.byte	25
	.word	22499
	.byte	25
	.word	22518
	.byte	3,0,24
	.word	22547
	.byte	25
	.word	22586
	.byte	25
	.word	22599
	.byte	25
	.word	22618
	.byte	3,0,24
	.word	22637
	.byte	25
	.word	22676
	.byte	25
	.word	22689
	.byte	25
	.word	22708
	.byte	3,0,24
	.word	22733
	.byte	25
	.word	22770
	.byte	25
	.word	22783
	.byte	3,0,24
	.word	22804
	.byte	25
	.word	22851
	.byte	25
	.word	22864
	.byte	3,0,24
	.word	22885
	.byte	25
	.word	22924
	.byte	25
	.word	22937
	.byte	3,0,24
	.word	22958
	.byte	25
	.word	22991
	.byte	25
	.word	23004
	.byte	3,0,28,15,187,3,9,4,12
	.byte	'dma',0
	.word	20855
	.byte	4,2,35,0,0
.L70:
	.byte	6
	.word	23520
	.byte	28,15,247,3,9,4,12
	.byte	'dma',0
	.word	20855
	.byte	4,2,35,0,0,19
	.word	23545
.L78:
	.byte	6
	.word	23565
.L81:
	.byte	6
	.word	23545
	.byte	13
	.word	19978
.L134:
	.byte	6
	.word	23580
	.byte	28,15,198,3,9,12,12
	.byte	'dma',0
	.word	20855
	.byte	4,2,35,0,12
	.byte	'channelId',0
	.word	20860
	.byte	1,2,35,4,12
	.byte	'channel',0
	.word	23585
	.byte	4,2,35,8,0
.L85:
	.byte	6
	.word	23590
	.byte	14,12,140,1,9,1,15
	.byte	'IfxDma_ChannelMove_1',0,0,15
	.byte	'IfxDma_ChannelMove_2',0,1,15
	.byte	'IfxDma_ChannelMove_4',0,2,15
	.byte	'IfxDma_ChannelMove_8',0,3,15
	.byte	'IfxDma_ChannelMove_16',0,4,15
	.byte	'IfxDma_ChannelMove_3',0,5,15
	.byte	'IfxDma_ChannelMove_5',0,6,15
	.byte	'IfxDma_ChannelMove_9',0,7,0,14,12,201,1,9,1,15
	.byte	'IfxDma_ChannelRequestMode_oneTransferPerRequest',0,0,15
	.byte	'IfxDma_ChannelRequestMode_completeTransactionPerRequest',0,1,0,14,12,168,1,9,1,15
	.byte	'IfxDma_ChannelOperationMode_single',0,0,15
	.byte	'IfxDma_ChannelOperationMode_continuous',0,1,0,14,12,155,1,9,1,15
	.byte	'IfxDma_ChannelMoveSize_8bit',0,0,15
	.byte	'IfxDma_ChannelMoveSize_16bit',0,1,15
	.byte	'IfxDma_ChannelMoveSize_32bit',0,2,15
	.byte	'IfxDma_ChannelMoveSize_64bit',0,3,15
	.byte	'IfxDma_ChannelMoveSize_128bit',0,4,15
	.byte	'IfxDma_ChannelMoveSize_256bit',0,5,0,14,12,177,1,9,1,15
	.byte	'IfxDma_ChannelPattern_0_disable',0,0,15
	.byte	'IfxDma_ChannelPattern_0_mode1',0,1,15
	.byte	'IfxDma_ChannelPattern_0_mode2',0,2,15
	.byte	'IfxDma_ChannelPattern_0_mode3',0,3,15
	.byte	'IfxDma_ChannelPattern_1_disable',0,4,15
	.byte	'IfxDma_ChannelPattern_1_mode1',0,5,15
	.byte	'IfxDma_ChannelPattern_1_mode2',0,6,15
	.byte	'IfxDma_ChannelPattern_1_mode3',0,7,0,14,12,210,1,9,1,15
	.byte	'IfxDma_ChannelRequestSource_peripheral',0,0,15
	.byte	'IfxDma_ChannelRequestSource_daisyChain',0,1,0,14,12,74,9,1,15
	.byte	'IfxDma_ChannelBusPriority_low',0,0,15
	.byte	'IfxDma_ChannelBusPriority_medium',0,1,15
	.byte	'IfxDma_ChannelBusPriority_high',0,2,0,14,12,116,9,1,15
	.byte	'IfxDma_ChannelIncrementStep_1',0,0,15
	.byte	'IfxDma_ChannelIncrementStep_2',0,1,15
	.byte	'IfxDma_ChannelIncrementStep_4',0,2,15
	.byte	'IfxDma_ChannelIncrementStep_8',0,3,15
	.byte	'IfxDma_ChannelIncrementStep_16',0,4,15
	.byte	'IfxDma_ChannelIncrementStep_32',0,5,15
	.byte	'IfxDma_ChannelIncrementStep_64',0,6,15
	.byte	'IfxDma_ChannelIncrementStep_128',0,7,0,14,12,107,9,1,15
	.byte	'IfxDma_ChannelIncrementDirection_negative',0,0,15
	.byte	'IfxDma_ChannelIncrementDirection_positive',0,1,0,14,12,84,9,1,15
	.byte	'IfxDma_ChannelIncrementCircular_none',0,0,15
	.byte	'IfxDma_ChannelIncrementCircular_2',0,1,15
	.byte	'IfxDma_ChannelIncrementCircular_4',0,2,15
	.byte	'IfxDma_ChannelIncrementCircular_8',0,3,15
	.byte	'IfxDma_ChannelIncrementCircular_16',0,4,15
	.byte	'IfxDma_ChannelIncrementCircular_32',0,5,15
	.byte	'IfxDma_ChannelIncrementCircular_64',0,6,15
	.byte	'IfxDma_ChannelIncrementCircular_128',0,7,15
	.byte	'IfxDma_ChannelIncrementCircular_256',0,8,15
	.byte	'IfxDma_ChannelIncrementCircular_512',0,9,15
	.byte	'IfxDma_ChannelIncrementCircular_1024',0,10,15
	.byte	'IfxDma_ChannelIncrementCircular_2048',0,11,15
	.byte	'IfxDma_ChannelIncrementCircular_4096',0,12,15
	.byte	'IfxDma_ChannelIncrementCircular_8192',0,13,15
	.byte	'IfxDma_ChannelIncrementCircular_16384',0,14,15
	.byte	'IfxDma_ChannelIncrementCircular_32768',0,15,0,14,12,219,1,9,1,15
	.byte	'IfxDma_ChannelShadow_none',0,0,15
	.byte	'IfxDma_ChannelShadow_src',0,1,15
	.byte	'IfxDma_ChannelShadow_dst',0,2,15
	.byte	'IfxDma_ChannelShadow_srcDirectWrite',0,5,15
	.byte	'IfxDma_ChannelShadow_dstDirectWrite',0,6,15
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch',0,8,15
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch',0,9,15
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch',0,10,15
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch',0,11,15
	.byte	'IfxDma_ChannelShadow_linkedList',0,12,15
	.byte	'IfxDma_ChannelShadow_accumulatedLinkedList',0,13,15
	.byte	'IfxDma_ChannelShadow_safeLinkedList',0,14,15
	.byte	'IfxDma_ChannelShadow_conditionalLinkedList',0,15,0,14,12,131,1,9,1,15
	.byte	'IfxDma_ChannelInterruptControl_thresholdLimitMatch',0,0,15
	.byte	'IfxDma_ChannelInterruptControl_transferCountDecremented',0,1,0,28,15,207,3,9,56,12
	.byte	'module',0
	.word	23540
	.byte	4,2,35,0,12
	.byte	'channelId',0
	.word	20860
	.byte	1,2,35,4,12
	.byte	'sourceAddress',0
	.word	2017
	.byte	4,2,35,6,12
	.byte	'destinationAddress',0
	.word	2017
	.byte	4,2,35,10,12
	.byte	'shadowAddress',0
	.word	2017
	.byte	4,2,35,14,12
	.byte	'readDataCrc',0
	.word	2017
	.byte	4,2,35,18,12
	.byte	'sourceDestinationAddressCrc',0
	.word	2017
	.byte	4,2,35,22,12
	.byte	'transferCount',0
	.word	832
	.byte	2,2,35,26,12
	.byte	'blockMode',0
	.word	23651
	.byte	1,2,35,28,12
	.byte	'requestMode',0
	.word	23843
	.byte	1,2,35,29,12
	.byte	'operationMode',0
	.word	23958
	.byte	1,2,35,30,12
	.byte	'moveSize',0
	.word	24043
	.byte	1,2,35,31,12
	.byte	'pattern',0
	.word	24237
	.byte	1,2,35,32,12
	.byte	'requestSource',0
	.word	24504
	.byte	1,2,35,33,12
	.byte	'busPriority',0
	.word	24593
	.byte	1,2,35,34,12
	.byte	'hardwareRequestEnabled',0
	.word	319
	.byte	1,2,35,35,12
	.byte	'sourceAddressIncrementStep',0
	.word	24699
	.byte	1,2,35,36,12
	.byte	'sourceAddressIncrementDirection',0
	.word	24966
	.byte	1,2,35,37,12
	.byte	'sourceAddressCircularRange',0
	.word	25060
	.byte	1,2,35,38,12
	.byte	'destinationAddressIncrementStep',0
	.word	24699
	.byte	1,2,35,39,12
	.byte	'destinationAddressIncrementDirection',0
	.word	24966
	.byte	1,2,35,40,12
	.byte	'destinationAddressCircularRange',0
	.word	25060
	.byte	1,2,35,41,12
	.byte	'shadowControl',0
	.word	25674
	.byte	1,2,35,42,12
	.byte	'sourceCircularBufferEnabled',0
	.word	319
	.byte	1,2,35,43,12
	.byte	'destinationCircularBufferEnabled',0
	.word	319
	.byte	1,2,35,44,12
	.byte	'timestampEnabled',0
	.word	319
	.byte	1,2,35,45,12
	.byte	'wrapSourceInterruptEnabled',0
	.word	319
	.byte	1,2,35,46,12
	.byte	'wrapDestinationInterruptEnabled',0
	.word	319
	.byte	1,2,35,47,12
	.byte	'channelInterruptEnabled',0
	.word	319
	.byte	1,2,35,48,12
	.byte	'channelInterruptControl',0
	.word	26227
	.byte	1,2,35,49,12
	.byte	'interruptRaiseThreshold',0
	.word	319
	.byte	1,2,35,50,12
	.byte	'transactionRequestLostInterruptEnabled',0
	.word	319
	.byte	1,2,35,51,12
	.byte	'channelInterruptPriority',0
	.word	832
	.byte	2,2,35,52,12
	.byte	'channelInterruptTypeOfService',0
	.word	755
	.byte	1,2,35,54,0,19
	.word	26345
.L87:
	.byte	6
	.word	27382
.L126:
	.byte	6
	.word	26345
	.byte	4
	.byte	'short int',0,2,5,29
	.byte	'__wchar_t',0,16,1,1
	.word	27397
	.byte	29
	.byte	'__size_t',0,16,1,1
	.word	296
	.byte	29
	.byte	'__ptrdiff_t',0,16,1,1
	.word	312
	.byte	30,1,6
	.word	27465
	.byte	29
	.byte	'__codeptr',0,16,1,1
	.word	27467
	.byte	29
	.byte	'uint8',0,17,89,24
	.word	319
	.byte	29
	.byte	'sint16',0,17,90,24
	.word	27397
	.byte	29
	.byte	'uint16',0,17,91,24
	.word	832
	.byte	4
	.byte	'long int',0,4,5,29
	.byte	'sint32',0,17,92,24
	.word	27534
	.byte	29
	.byte	'uint32',0,17,93,24
	.word	2017
	.byte	4
	.byte	'float',0,4,4,29
	.byte	'float32',0,17,94,24
	.word	27576
	.byte	29
	.byte	'boolean',0,17,104,24
	.word	319
	.byte	4
	.byte	'long long int',0,8,5,29
	.byte	'sint64',0,18,36,28
	.word	27617
	.byte	29
	.byte	'uint64',0,18,37,28
	.word	183
	.byte	29
	.byte	'pvoid',0,18,40,28
	.word	215
	.byte	29
	.byte	'Ifx_TickTime',0,18,43,28
	.word	27617
	.byte	29
	.byte	'Ifx_Priority',0,18,67,16
	.word	832
	.byte	14,18,94,9,1,15
	.byte	'Ifx_RxSel_a',0,0,15
	.byte	'Ifx_RxSel_b',0,1,15
	.byte	'Ifx_RxSel_c',0,2,15
	.byte	'Ifx_RxSel_d',0,3,15
	.byte	'Ifx_RxSel_e',0,4,15
	.byte	'Ifx_RxSel_f',0,5,15
	.byte	'Ifx_RxSel_g',0,6,15
	.byte	'Ifx_RxSel_h',0,7,0,29
	.byte	'Ifx_RxSel',0,18,104,3
	.word	27720
	.byte	29
	.byte	'IfxDma_ChannelId',0,14,150,1,3
	.word	20860
	.byte	29
	.byte	'Ifx_DMA_ACCEN00_Bits',0,13,79,3
	.word	10736
	.byte	29
	.byte	'Ifx_DMA_ACCEN01_Bits',0,13,85,3
	.word	11306
	.byte	29
	.byte	'Ifx_DMA_ACCEN10_Bits',0,13,122,3
	.word	11396
	.byte	29
	.byte	'Ifx_DMA_ACCEN11_Bits',0,13,128,1,3
	.word	11966
	.byte	29
	.byte	'Ifx_DMA_ACCEN20_Bits',0,13,165,1,3
	.word	12056
	.byte	29
	.byte	'Ifx_DMA_ACCEN21_Bits',0,13,171,1,3
	.word	12627
	.byte	29
	.byte	'Ifx_DMA_ACCEN30_Bits',0,13,208,1,3
	.word	12718
	.byte	29
	.byte	'Ifx_DMA_ACCEN31_Bits',0,13,214,1,3
	.word	13289
	.byte	29
	.byte	'Ifx_DMA_BLK_CLRE_Bits',0,13,230,1,3
	.word	13907
	.byte	29
	.byte	'Ifx_DMA_BLK_EER_Bits',0,13,243,1,3
	.word	13391
	.byte	29
	.byte	'Ifx_DMA_BLK_ERRSR_Bits',0,13,132,2,3
	.word	13615
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_ADICR_Bits',0,13,152,2,3
	.word	15819
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_CHCR_Bits',0,13,168,2,3
	.word	16135
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_CHSR_Bits',0,13,184,2,3
	.word	16505
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_DADR_Bits',0,13,190,2,3
	.word	15730
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R0_Bits',0,13,199,2,3
	.word	14370
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R1_Bits',0,13,208,2,3
	.word	14505
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R2_Bits',0,13,217,2,3
	.word	14640
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R3_Bits',0,13,226,2,3
	.word	14775
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R4_Bits',0,13,235,2,3
	.word	14910
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R5_Bits',0,13,244,2,3
	.word	15045
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R6_Bits',0,13,253,2,3
	.word	15180
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R7_Bits',0,13,134,3,3
	.word	15315
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_RDCRC_Bits',0,13,140,3,3
	.word	15459
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_SADR_Bits',0,13,146,3,3
	.word	15641
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_SDCRC_Bits',0,13,152,3,3
	.word	15550
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_SHADR_Bits',0,13,158,3,3
	.word	16414
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_SR_Bits',0,13,169,3,3
	.word	14190
	.byte	29
	.byte	'Ifx_DMA_CH_ADICR_Bits',0,13,189,3,3
	.word	18955
	.byte	29
	.byte	'Ifx_DMA_CH_CHCFGR_Bits',0,13,205,3,3
	.word	19267
	.byte	29
	.byte	'Ifx_DMA_CH_CHCSR_Bits',0,13,226,3,3
	.word	19631
	.byte	29
	.byte	'Ifx_DMA_CH_DADR_Bits',0,13,232,3,3
	.word	18870
	.byte	29
	.byte	'Ifx_DMA_CH_RDCRCR_Bits',0,13,238,3,3
	.word	18609
	.byte	29
	.byte	'Ifx_DMA_CH_SADR_Bits',0,13,244,3,3
	.word	18785
	.byte	29
	.byte	'Ifx_DMA_CH_SDCRCR_Bits',0,13,250,3,3
	.word	18697
	.byte	29
	.byte	'Ifx_DMA_CH_SHADR_Bits',0,13,128,4,3
	.word	19544
	.byte	29
	.byte	'Ifx_DMA_CLC_Bits',0,13,138,4,3
	.word	10169
	.byte	29
	.byte	'Ifx_DMA_ERRINTR_Bits',0,13,145,4,3
	.word	17335
	.byte	29
	.byte	'Ifx_DMA_HRR_Bits',0,13,152,4,3
	.word	17927
	.byte	29
	.byte	'Ifx_DMA_ID_Bits',0,13,160,4,3
	.word	10326
	.byte	29
	.byte	'Ifx_DMA_MEMCON_Bits',0,13,175,4,3
	.word	10459
	.byte	29
	.byte	'Ifx_DMA_MODE_Bits',0,13,182,4,3
	.word	17803
	.byte	29
	.byte	'Ifx_DMA_OTSS_Bits',0,13,191,4,3
	.word	17196
	.byte	29
	.byte	'Ifx_DMA_PRR0_Bits',0,13,200,4,3
	.word	17441
	.byte	29
	.byte	'Ifx_DMA_PRR1_Bits',0,13,209,4,3
	.word	17575
	.byte	29
	.byte	'Ifx_DMA_SUSACR_Bits',0,13,216,4,3
	.word	18167
	.byte	29
	.byte	'Ifx_DMA_SUSENR_Bits',0,13,223,4,3
	.word	18050
	.byte	29
	.byte	'Ifx_DMA_TIME_Bits',0,13,229,4,3
	.word	17709
	.byte	29
	.byte	'Ifx_DMA_TSR_Bits',0,13,248,4,3
	.word	18284
	.byte	29
	.byte	'Ifx_DMA_ACCEN00',0,13,136,5,3
	.word	11266
	.byte	29
	.byte	'Ifx_DMA_ACCEN01',0,13,147,5,3
	.word	11356
	.byte	29
	.byte	'Ifx_DMA_ACCEN10',0,13,158,5,3
	.word	11926
	.byte	29
	.byte	'Ifx_DMA_ACCEN11',0,13,169,5,3
	.word	12016
	.byte	29
	.byte	'Ifx_DMA_ACCEN20',0,13,180,5,3
	.word	12587
	.byte	29
	.byte	'Ifx_DMA_ACCEN21',0,13,191,5,3
	.word	12678
	.byte	29
	.byte	'Ifx_DMA_ACCEN30',0,13,202,5,3
	.word	13249
	.byte	29
	.byte	'Ifx_DMA_ACCEN31',0,13,213,5,3
	.word	13340
	.byte	29
	.byte	'Ifx_DMA_BLK_CLRE',0,13,224,5,3
	.word	14150
	.byte	29
	.byte	'Ifx_DMA_BLK_EER',0,13,235,5,3
	.word	13575
	.byte	29
	.byte	'Ifx_DMA_BLK_ERRSR',0,13,246,5,3
	.word	13867
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_ADICR',0,13,129,6,3
	.word	16095
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_CHCR',0,13,140,6,3
	.word	16374
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_CHSR',0,13,151,6,3
	.word	16738
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_DADR',0,13,162,6,3
	.word	15779
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R0',0,13,173,6,3
	.word	14465
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R1',0,13,184,6,3
	.word	14600
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R2',0,13,195,6,3
	.word	14735
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R3',0,13,206,6,3
	.word	14870
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R4',0,13,217,6,3
	.word	15005
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R5',0,13,228,6,3
	.word	15140
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R6',0,13,239,6,3
	.word	15275
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_R7',0,13,250,6,3
	.word	15410
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_RDCRC',0,13,133,7,3
	.word	15510
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_SADR',0,13,144,7,3
	.word	15690
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_SDCRC',0,13,155,7,3
	.word	15601
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_SHADR',0,13,166,7,3
	.word	16465
	.byte	29
	.byte	'Ifx_DMA_BLK_ME_SR',0,13,177,7,3
	.word	14330
	.byte	29
	.byte	'Ifx_DMA_CH_ADICR',0,13,188,7,3
	.word	19227
	.byte	29
	.byte	'Ifx_DMA_CH_CHCFGR',0,13,199,7,3
	.word	19504
	.byte	29
	.byte	'Ifx_DMA_CH_CHCSR',0,13,210,7,3
	.word	19938
	.byte	29
	.byte	'Ifx_DMA_CH_DADR',0,13,221,7,3
	.word	18915
	.byte	29
	.byte	'Ifx_DMA_CH_RDCRCR',0,13,232,7,3
	.word	18657
	.byte	29
	.byte	'Ifx_DMA_CH_SADR',0,13,243,7,3
	.word	18830
	.byte	29
	.byte	'Ifx_DMA_CH_SDCRCR',0,13,254,7,3
	.word	18745
	.byte	29
	.byte	'Ifx_DMA_CH_SHADR',0,13,137,8,3
	.word	19591
	.byte	29
	.byte	'Ifx_DMA_CLC',0,13,148,8,3
	.word	10286
	.byte	29
	.byte	'Ifx_DMA_ERRINTR',0,13,159,8,3
	.word	17401
	.byte	29
	.byte	'Ifx_DMA_HRR',0,13,170,8,3
	.word	17989
	.byte	29
	.byte	'Ifx_DMA_ID',0,13,181,8,3
	.word	10410
	.byte	29
	.byte	'Ifx_DMA_MEMCON',0,13,192,8,3
	.word	10687
	.byte	29
	.byte	'Ifx_DMA_MODE',0,13,203,8,3
	.word	17867
	.byte	29
	.byte	'Ifx_DMA_OTSS',0,13,214,8,3
	.word	17295
	.byte	29
	.byte	'Ifx_DMA_PRR0',0,13,225,8,3
	.word	17535
	.byte	29
	.byte	'Ifx_DMA_PRR1',0,13,236,8,3
	.word	17669
	.byte	29
	.byte	'Ifx_DMA_SUSACR',0,13,247,8,3
	.word	18234
	.byte	29
	.byte	'Ifx_DMA_SUSENR',0,13,130,9,3
	.word	18117
	.byte	29
	.byte	'Ifx_DMA_TIME',0,13,141,9,3
	.word	17752
	.byte	29
	.byte	'Ifx_DMA_TSR',0,13,152,9,3
	.word	18559
	.byte	13
	.word	16778
	.byte	29
	.byte	'Ifx_DMA_BLK_ME',0,13,184,9,3
	.word	30636
	.byte	13
	.word	17071
	.byte	29
	.byte	'Ifx_DMA_BLK',0,13,204,9,3
	.word	30665
	.byte	13
	.word	19978
	.byte	29
	.byte	'Ifx_DMA_CH',0,13,217,9,3
	.word	30691
	.byte	13
	.word	20144
	.byte	29
	.byte	'Ifx_DMA',0,13,141,10,3
	.word	30716
	.byte	29
	.byte	'IfxSrc_Tos',0,5,55,3
	.word	755
	.byte	29
	.byte	'Ifx_SRC_SRCR_Bits',0,4,62,3
	.word	336
	.byte	29
	.byte	'Ifx_SRC_SRCR',0,4,78,3
	.word	626
	.byte	9
	.byte	'_Ifx_SRC_AGBT',0,4,89,25,4,12
	.byte	'SR',0
	.word	626
	.byte	4,2,35,0,0,13
	.word	30804
	.byte	29
	.byte	'Ifx_SRC_AGBT',0,4,92,3
	.word	30836
	.byte	9
	.byte	'_Ifx_SRC_ASCLIN',0,4,95,25,12,12
	.byte	'TX',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	626
	.byte	4,2,35,8,0,13
	.word	30862
	.byte	29
	.byte	'Ifx_SRC_ASCLIN',0,4,100,3
	.word	30921
	.byte	9
	.byte	'_Ifx_SRC_BCUSPB',0,4,103,25,4,12
	.byte	'SBSRC',0
	.word	626
	.byte	4,2,35,0,0,13
	.word	30949
	.byte	29
	.byte	'Ifx_SRC_BCUSPB',0,4,106,3
	.word	30986
	.byte	17,64
	.word	626
	.byte	18,15,0,9
	.byte	'_Ifx_SRC_CAN',0,4,109,25,64,12
	.byte	'INT',0
	.word	31014
	.byte	64,2,35,0,0,13
	.word	31023
	.byte	29
	.byte	'Ifx_SRC_CAN',0,4,112,3
	.word	31055
	.byte	9
	.byte	'_Ifx_SRC_CCU6',0,4,115,25,16,12
	.byte	'SR0',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	626
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	626
	.byte	4,2,35,12,0,13
	.word	31080
	.byte	29
	.byte	'Ifx_SRC_CCU6',0,4,121,3
	.word	31152
	.byte	17,8
	.word	626
	.byte	18,1,0,9
	.byte	'_Ifx_SRC_CERBERUS',0,4,124,25,8,12
	.byte	'SR',0
	.word	31178
	.byte	8,2,35,0,0,13
	.word	31187
	.byte	29
	.byte	'Ifx_SRC_CERBERUS',0,4,127,3
	.word	31223
	.byte	9
	.byte	'_Ifx_SRC_CIF',0,4,130,1,25,16,12
	.byte	'MI',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'MIEP',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'ISP',0
	.word	626
	.byte	4,2,35,8,12
	.byte	'MJPEG',0
	.word	626
	.byte	4,2,35,12,0,13
	.word	31253
	.byte	29
	.byte	'Ifx_SRC_CIF',0,4,136,1,3
	.word	31327
	.byte	9
	.byte	'_Ifx_SRC_CPU',0,4,139,1,25,4,12
	.byte	'SBSRC',0
	.word	626
	.byte	4,2,35,0,0,13
	.word	31353
	.byte	29
	.byte	'Ifx_SRC_CPU',0,4,142,1,3
	.word	31388
	.byte	17,24
	.word	626
	.byte	18,5,0,9
	.byte	'_Ifx_SRC_DAM',0,4,145,1,25,24,12
	.byte	'SR',0
	.word	31414
	.byte	24,2,35,0,0,13
	.word	31423
	.byte	29
	.byte	'Ifx_SRC_DAM',0,4,148,1,3
	.word	31455
	.byte	17,128,2
	.word	626
	.byte	18,63,0,9
	.byte	'_Ifx_SRC_DMA',0,4,151,1,25,144,2,12
	.byte	'ERR',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	5411
	.byte	12,2,35,4,12
	.byte	'CH',0
	.word	31481
	.byte	128,2,2,35,16,0,13
	.word	31491
	.byte	29
	.byte	'Ifx_SRC_DMA',0,4,156,1,3
	.word	31558
	.byte	9
	.byte	'_Ifx_SRC_DSADC',0,4,159,1,25,8,12
	.byte	'SRM',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'SRA',0
	.word	626
	.byte	4,2,35,4,0,13
	.word	31584
	.byte	29
	.byte	'Ifx_SRC_DSADC',0,4,163,1,3
	.word	31632
	.byte	9
	.byte	'_Ifx_SRC_EMEM',0,4,166,1,25,4,12
	.byte	'SR',0
	.word	626
	.byte	4,2,35,0,0,13
	.word	31660
	.byte	29
	.byte	'Ifx_SRC_EMEM',0,4,169,1,3
	.word	31693
	.byte	17,40
	.word	319
	.byte	18,39,0,9
	.byte	'_Ifx_SRC_ERAY',0,4,172,1,25,80,12
	.byte	'INT',0
	.word	31178
	.byte	8,2,35,0,12
	.byte	'TINT',0
	.word	31178
	.byte	8,2,35,8,12
	.byte	'NDAT',0
	.word	31178
	.byte	8,2,35,16,12
	.byte	'MBSC',0
	.word	31178
	.byte	8,2,35,24,12
	.byte	'OBUSY',0
	.word	626
	.byte	4,2,35,32,12
	.byte	'IBUSY',0
	.word	626
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	31720
	.byte	40,2,35,40,0,13
	.word	31729
	.byte	29
	.byte	'Ifx_SRC_ERAY',0,4,181,1,3
	.word	31856
	.byte	9
	.byte	'_Ifx_SRC_ETH',0,4,184,1,25,4,12
	.byte	'SR',0
	.word	626
	.byte	4,2,35,0,0,13
	.word	31883
	.byte	29
	.byte	'Ifx_SRC_ETH',0,4,187,1,3
	.word	31915
	.byte	9
	.byte	'_Ifx_SRC_FCE',0,4,190,1,25,4,12
	.byte	'SR',0
	.word	626
	.byte	4,2,35,0,0,13
	.word	31941
	.byte	29
	.byte	'Ifx_SRC_FCE',0,4,193,1,3
	.word	31973
	.byte	17,16
	.word	319
	.byte	18,15,0,9
	.byte	'_Ifx_SRC_GPSR',0,4,196,1,25,32,12
	.byte	'SR0',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	626
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	626
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	31999
	.byte	16,2,35,16,0,13
	.word	32008
	.byte	29
	.byte	'Ifx_SRC_GPSR',0,4,203,1,3
	.word	32102
	.byte	9
	.byte	'_Ifx_SRC_GPT12',0,4,206,1,25,48,12
	.byte	'CIRQ',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'T2',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'T3',0
	.word	626
	.byte	4,2,35,8,12
	.byte	'T4',0
	.word	626
	.byte	4,2,35,12,12
	.byte	'T5',0
	.word	626
	.byte	4,2,35,16,12
	.byte	'T6',0
	.word	626
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	4442
	.byte	24,2,35,24,0,13
	.word	32129
	.byte	29
	.byte	'Ifx_SRC_GPT12',0,4,215,1,3
	.word	32246
	.byte	17,12
	.word	626
	.byte	18,2,0,17,32
	.word	626
	.byte	18,7,0,17,32
	.word	32283
	.byte	18,0,0,17,88
	.word	319
	.byte	18,87,0,17,108
	.word	626
	.byte	18,26,0,17,128,1
	.word	32283
	.byte	18,3,0,17,128,3
	.word	319
	.byte	18,255,2,0,17,96
	.word	32283
	.byte	18,2,0,17,160,3
	.word	319
	.byte	18,159,3,0,17,16
	.word	626
	.byte	18,3,0,17,80
	.word	32360
	.byte	18,4,0,17,176,2
	.word	319
	.byte	18,175,2,0,17,48
	.word	319
	.byte	18,47,0,9
	.byte	'_Ifx_SRC_GTM',0,4,218,1,25,208,18,12
	.byte	'AEIIRQ',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'ARUIRQ',0
	.word	32274
	.byte	12,2,35,4,12
	.byte	'reserved_10',0
	.word	3252
	.byte	4,2,35,16,12
	.byte	'BRCIRQ',0
	.word	626
	.byte	4,2,35,20,12
	.byte	'CMPIRQ',0
	.word	626
	.byte	4,2,35,24,12
	.byte	'SPEIRQ',0
	.word	31178
	.byte	8,2,35,28,12
	.byte	'reserved_24',0
	.word	5071
	.byte	8,2,35,36,12
	.byte	'PSM',0
	.word	32292
	.byte	32,2,35,44,12
	.byte	'reserved_4C',0
	.word	32301
	.byte	88,2,35,76,12
	.byte	'DPLL',0
	.word	32310
	.byte	108,3,35,164,1,12
	.byte	'reserved_110',0
	.word	17187
	.byte	96,3,35,144,2,12
	.byte	'ERR',0
	.word	626
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	5411
	.byte	12,3,35,244,2,12
	.byte	'TIM',0
	.word	32319
	.byte	128,1,3,35,128,3,12
	.byte	'reserved_200',0
	.word	32329
	.byte	128,3,3,35,128,4,12
	.byte	'MCS',0
	.word	32319
	.byte	128,1,3,35,128,7,12
	.byte	'reserved_400',0
	.word	32329
	.byte	128,3,3,35,128,8,12
	.byte	'TOM',0
	.word	32340
	.byte	96,3,35,128,11,12
	.byte	'reserved_5E0',0
	.word	32349
	.byte	160,3,3,35,224,11,12
	.byte	'ATOM',0
	.word	32369
	.byte	80,3,35,128,15,12
	.byte	'reserved_7D0',0
	.word	32378
	.byte	176,2,3,35,208,15,12
	.byte	'MCSW0',0
	.word	32360
	.byte	16,3,35,128,18,12
	.byte	'reserved_910',0
	.word	32389
	.byte	48,3,35,144,18,12
	.byte	'MCSW1',0
	.word	32360
	.byte	16,3,35,192,18,0,13
	.word	32398
	.byte	29
	.byte	'Ifx_SRC_GTM',0,4,244,1,3
	.word	32860
	.byte	9
	.byte	'_Ifx_SRC_HSCT',0,4,247,1,25,4,12
	.byte	'SR',0
	.word	626
	.byte	4,2,35,0,0,13
	.word	32886
	.byte	29
	.byte	'Ifx_SRC_HSCT',0,4,250,1,3
	.word	32919
	.byte	9
	.byte	'_Ifx_SRC_HSM',0,4,253,1,25,8,12
	.byte	'HSM',0
	.word	31178
	.byte	8,2,35,0,0,13
	.word	32946
	.byte	29
	.byte	'Ifx_SRC_HSM',0,4,128,2,3
	.word	32979
	.byte	9
	.byte	'_Ifx_SRC_HSSL',0,4,131,2,25,16,12
	.byte	'COK',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'RDI',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	626
	.byte	4,2,35,8,12
	.byte	'TRG',0
	.word	626
	.byte	4,2,35,12,0,13
	.word	33005
	.byte	29
	.byte	'Ifx_SRC_HSSL',0,4,137,2,3
	.word	33078
	.byte	17,56
	.word	319
	.byte	18,55,0,9
	.byte	'_Ifx_SRC_I2C',0,4,140,2,25,80,12
	.byte	'BREQ',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'LBREQ',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'SREQ',0
	.word	626
	.byte	4,2,35,8,12
	.byte	'LSREQ',0
	.word	626
	.byte	4,2,35,12,12
	.byte	'ERR',0
	.word	626
	.byte	4,2,35,16,12
	.byte	'P',0
	.word	626
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	33105
	.byte	56,2,35,24,0,13
	.word	33114
	.byte	29
	.byte	'Ifx_SRC_I2C',0,4,149,2,3
	.word	33237
	.byte	9
	.byte	'_Ifx_SRC_LMU',0,4,152,2,25,4,12
	.byte	'SR',0
	.word	626
	.byte	4,2,35,0,0,13
	.word	33263
	.byte	29
	.byte	'Ifx_SRC_LMU',0,4,155,2,3
	.word	33295
	.byte	9
	.byte	'_Ifx_SRC_MSC',0,4,158,2,25,20,12
	.byte	'SR0',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	626
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	626
	.byte	4,2,35,12,12
	.byte	'SR4',0
	.word	626
	.byte	4,2,35,16,0,13
	.word	33321
	.byte	29
	.byte	'Ifx_SRC_MSC',0,4,165,2,3
	.word	33406
	.byte	9
	.byte	'_Ifx_SRC_PMU',0,4,168,2,25,4,12
	.byte	'SR',0
	.word	626
	.byte	4,2,35,0,0,13
	.word	33432
	.byte	29
	.byte	'Ifx_SRC_PMU',0,4,171,2,3
	.word	33464
	.byte	9
	.byte	'_Ifx_SRC_PSI5',0,4,174,2,25,32,12
	.byte	'SR',0
	.word	32283
	.byte	32,2,35,0,0,13
	.word	33490
	.byte	29
	.byte	'Ifx_SRC_PSI5',0,4,177,2,3
	.word	33523
	.byte	9
	.byte	'_Ifx_SRC_PSI5S',0,4,180,2,25,32,12
	.byte	'SR',0
	.word	32283
	.byte	32,2,35,0,0,13
	.word	33550
	.byte	29
	.byte	'Ifx_SRC_PSI5S',0,4,183,2,3
	.word	33584
	.byte	9
	.byte	'_Ifx_SRC_QSPI',0,4,186,2,25,24,12
	.byte	'TX',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	626
	.byte	4,2,35,8,12
	.byte	'PT',0
	.word	626
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	3252
	.byte	4,2,35,16,12
	.byte	'U',0
	.word	626
	.byte	4,2,35,20,0,13
	.word	33612
	.byte	29
	.byte	'Ifx_SRC_QSPI',0,4,194,2,3
	.word	33714
	.byte	9
	.byte	'_Ifx_SRC_SCU',0,4,197,2,25,20,12
	.byte	'DTS',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'ERU',0
	.word	32360
	.byte	16,2,35,4,0,13
	.word	33741
	.byte	29
	.byte	'Ifx_SRC_SCU',0,4,201,2,3
	.word	33787
	.byte	17,40
	.word	626
	.byte	18,9,0,9
	.byte	'_Ifx_SRC_SENT',0,4,204,2,25,40,12
	.byte	'SR',0
	.word	33813
	.byte	40,2,35,0,0,13
	.word	33822
	.byte	29
	.byte	'Ifx_SRC_SENT',0,4,207,2,3
	.word	33855
	.byte	9
	.byte	'_Ifx_SRC_SMU',0,4,210,2,25,12,12
	.byte	'SR',0
	.word	32274
	.byte	12,2,35,0,0,13
	.word	33882
	.byte	29
	.byte	'Ifx_SRC_SMU',0,4,213,2,3
	.word	33914
	.byte	9
	.byte	'_Ifx_SRC_STM',0,4,216,2,25,8,12
	.byte	'SR0',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	626
	.byte	4,2,35,4,0,13
	.word	33940
	.byte	29
	.byte	'Ifx_SRC_STM',0,4,220,2,3
	.word	33986
	.byte	9
	.byte	'_Ifx_SRC_VADCCG',0,4,223,2,25,16,12
	.byte	'SR0',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	626
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	626
	.byte	4,2,35,12,0,13
	.word	34012
	.byte	29
	.byte	'Ifx_SRC_VADCCG',0,4,229,2,3
	.word	34087
	.byte	9
	.byte	'_Ifx_SRC_VADCG',0,4,232,2,25,16,12
	.byte	'SR0',0
	.word	626
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	626
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	626
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	626
	.byte	4,2,35,12,0,13
	.word	34116
	.byte	29
	.byte	'Ifx_SRC_VADCG',0,4,238,2,3
	.word	34190
	.byte	9
	.byte	'_Ifx_SRC_XBAR',0,4,241,2,25,4,12
	.byte	'SRC',0
	.word	626
	.byte	4,2,35,0,0,13
	.word	34218
	.byte	29
	.byte	'Ifx_SRC_XBAR',0,4,244,2,3
	.word	34252
	.byte	17,4
	.word	30804
	.byte	18,0,0,13
	.word	34279
	.byte	9
	.byte	'_Ifx_SRC_GAGBT',0,4,129,3,25,4,12
	.byte	'AGBT',0
	.word	34288
	.byte	4,2,35,0,0,13
	.word	34293
	.byte	29
	.byte	'Ifx_SRC_GAGBT',0,4,132,3,3
	.word	34329
	.byte	17,48
	.word	30862
	.byte	18,3,0,13
	.word	34357
	.byte	9
	.byte	'_Ifx_SRC_GASCLIN',0,4,135,3,25,48,12
	.byte	'ASCLIN',0
	.word	34366
	.byte	48,2,35,0,0,13
	.word	34371
	.byte	29
	.byte	'Ifx_SRC_GASCLIN',0,4,138,3,3
	.word	34411
	.byte	13
	.word	30949
	.byte	9
	.byte	'_Ifx_SRC_GBCU',0,4,141,3,25,4,12
	.byte	'SPB',0
	.word	34441
	.byte	4,2,35,0,0,13
	.word	34446
	.byte	29
	.byte	'Ifx_SRC_GBCU',0,4,144,3,3
	.word	34480
	.byte	17,64
	.word	31023
	.byte	18,0,0,13
	.word	34507
	.byte	9
	.byte	'_Ifx_SRC_GCAN',0,4,147,3,25,64,12
	.byte	'CAN',0
	.word	34516
	.byte	64,2,35,0,0,13
	.word	34521
	.byte	29
	.byte	'Ifx_SRC_GCAN',0,4,150,3,3
	.word	34555
	.byte	17,32
	.word	31080
	.byte	18,1,0,13
	.word	34582
	.byte	9
	.byte	'_Ifx_SRC_GCCU6',0,4,153,3,25,32,12
	.byte	'CCU6',0
	.word	34591
	.byte	32,2,35,0,0,13
	.word	34596
	.byte	29
	.byte	'Ifx_SRC_GCCU6',0,4,156,3,3
	.word	34632
	.byte	13
	.word	31187
	.byte	9
	.byte	'_Ifx_SRC_GCERBERUS',0,4,159,3,25,8,12
	.byte	'CERBERUS',0
	.word	34660
	.byte	8,2,35,0,0,13
	.word	34665
	.byte	29
	.byte	'Ifx_SRC_GCERBERUS',0,4,162,3,3
	.word	34709
	.byte	17,16
	.word	31253
	.byte	18,0,0,13
	.word	34741
	.byte	9
	.byte	'_Ifx_SRC_GCIF',0,4,165,3,25,16,12
	.byte	'CIF',0
	.word	34750
	.byte	16,2,35,0,0,13
	.word	34755
	.byte	29
	.byte	'Ifx_SRC_GCIF',0,4,168,3,3
	.word	34789
	.byte	17,12
	.word	31353
	.byte	18,2,0,13
	.word	34816
	.byte	9
	.byte	'_Ifx_SRC_GCPU',0,4,171,3,25,12,12
	.byte	'CPU',0
	.word	34825
	.byte	12,2,35,0,0,13
	.word	34830
	.byte	29
	.byte	'Ifx_SRC_GCPU',0,4,174,3,3
	.word	34864
	.byte	17,24
	.word	31423
	.byte	18,0,0,13
	.word	34891
	.byte	9
	.byte	'_Ifx_SRC_GDAM',0,4,177,3,25,24,12
	.byte	'DAM',0
	.word	34900
	.byte	24,2,35,0,0,13
	.word	34905
	.byte	29
	.byte	'Ifx_SRC_GDAM',0,4,180,3,3
	.word	34939
	.byte	17,144,2
	.word	31491
	.byte	18,0,0,13
	.word	34966
	.byte	9
	.byte	'_Ifx_SRC_GDMA',0,4,183,3,25,144,2,12
	.byte	'DMA',0
	.word	34976
	.byte	144,2,2,35,0,0,13
	.word	34981
	.byte	29
	.byte	'Ifx_SRC_GDMA',0,4,186,3,3
	.word	35017
	.byte	17,48
	.word	31584
	.byte	18,5,0,13
	.word	35044
	.byte	9
	.byte	'_Ifx_SRC_GDSADC',0,4,189,3,25,48,12
	.byte	'DSADC',0
	.word	35053
	.byte	48,2,35,0,0,13
	.word	35058
	.byte	29
	.byte	'Ifx_SRC_GDSADC',0,4,192,3,3
	.word	35096
	.byte	17,4
	.word	31660
	.byte	18,0,0,13
	.word	35125
	.byte	9
	.byte	'_Ifx_SRC_GEMEM',0,4,195,3,25,4,12
	.byte	'EMEM',0
	.word	35134
	.byte	4,2,35,0,0,13
	.word	35139
	.byte	29
	.byte	'Ifx_SRC_GEMEM',0,4,198,3,3
	.word	35175
	.byte	17,80
	.word	31729
	.byte	18,0,0,13
	.word	35203
	.byte	9
	.byte	'_Ifx_SRC_GERAY',0,4,201,3,25,80,12
	.byte	'ERAY',0
	.word	35212
	.byte	80,2,35,0,0,13
	.word	35217
	.byte	29
	.byte	'Ifx_SRC_GERAY',0,4,204,3,3
	.word	35253
	.byte	17,4
	.word	31883
	.byte	18,0,0,13
	.word	35281
	.byte	9
	.byte	'_Ifx_SRC_GETH',0,4,207,3,25,4,12
	.byte	'ETH',0
	.word	35290
	.byte	4,2,35,0,0,13
	.word	35295
	.byte	29
	.byte	'Ifx_SRC_GETH',0,4,210,3,3
	.word	35329
	.byte	17,4
	.word	31941
	.byte	18,0,0,13
	.word	35356
	.byte	9
	.byte	'_Ifx_SRC_GFCE',0,4,213,3,25,4,12
	.byte	'FCE',0
	.word	35365
	.byte	4,2,35,0,0,13
	.word	35370
	.byte	29
	.byte	'Ifx_SRC_GFCE',0,4,216,3,3
	.word	35404
	.byte	17,96
	.word	32008
	.byte	18,2,0,13
	.word	35431
	.byte	9
	.byte	'_Ifx_SRC_GGPSR',0,4,219,3,25,96,12
	.byte	'GPSR',0
	.word	35440
	.byte	96,2,35,0,0,13
	.word	35445
	.byte	29
	.byte	'Ifx_SRC_GGPSR',0,4,222,3,3
	.word	35481
	.byte	17,48
	.word	32129
	.byte	18,0,0,13
	.word	35509
	.byte	9
	.byte	'_Ifx_SRC_GGPT12',0,4,225,3,25,48,12
	.byte	'GPT12',0
	.word	35518
	.byte	48,2,35,0,0,13
	.word	35523
	.byte	29
	.byte	'Ifx_SRC_GGPT12',0,4,228,3,3
	.word	35561
	.byte	17,208,18
	.word	32398
	.byte	18,0,0,13
	.word	35590
	.byte	9
	.byte	'_Ifx_SRC_GGTM',0,4,231,3,25,208,18,12
	.byte	'GTM',0
	.word	35600
	.byte	208,18,2,35,0,0,13
	.word	35605
	.byte	29
	.byte	'Ifx_SRC_GGTM',0,4,234,3,3
	.word	35641
	.byte	17,4
	.word	32886
	.byte	18,0,0,13
	.word	35668
	.byte	9
	.byte	'_Ifx_SRC_GHSCT',0,4,237,3,25,4,12
	.byte	'HSCT',0
	.word	35677
	.byte	4,2,35,0,0,13
	.word	35682
	.byte	29
	.byte	'Ifx_SRC_GHSCT',0,4,240,3,3
	.word	35718
	.byte	17,8
	.word	32946
	.byte	18,0,0,13
	.word	35746
	.byte	9
	.byte	'_Ifx_SRC_GHSM',0,4,243,3,25,8,12
	.byte	'HSM',0
	.word	35755
	.byte	8,2,35,0,0,13
	.word	35760
	.byte	29
	.byte	'Ifx_SRC_GHSM',0,4,246,3,3
	.word	35794
	.byte	17,64
	.word	33005
	.byte	18,3,0,13
	.word	35821
	.byte	9
	.byte	'_Ifx_SRC_GHSSL',0,4,249,3,25,68,12
	.byte	'HSSL',0
	.word	35830
	.byte	64,2,35,0,12
	.byte	'EXI',0
	.word	626
	.byte	4,2,35,64,0,13
	.word	35835
	.byte	29
	.byte	'Ifx_SRC_GHSSL',0,4,253,3,3
	.word	35884
	.byte	17,80
	.word	33114
	.byte	18,0,0,13
	.word	35912
	.byte	9
	.byte	'_Ifx_SRC_GI2C',0,4,128,4,25,80,12
	.byte	'I2C',0
	.word	35921
	.byte	80,2,35,0,0,13
	.word	35926
	.byte	29
	.byte	'Ifx_SRC_GI2C',0,4,131,4,3
	.word	35960
	.byte	17,4
	.word	33263
	.byte	18,0,0,13
	.word	35987
	.byte	9
	.byte	'_Ifx_SRC_GLMU',0,4,134,4,25,4,12
	.byte	'LMU',0
	.word	35996
	.byte	4,2,35,0,0,13
	.word	36001
	.byte	29
	.byte	'Ifx_SRC_GLMU',0,4,137,4,3
	.word	36035
	.byte	17,40
	.word	33321
	.byte	18,1,0,13
	.word	36062
	.byte	9
	.byte	'_Ifx_SRC_GMSC',0,4,140,4,25,40,12
	.byte	'MSC',0
	.word	36071
	.byte	40,2,35,0,0,13
	.word	36076
	.byte	29
	.byte	'Ifx_SRC_GMSC',0,4,143,4,3
	.word	36110
	.byte	17,8
	.word	33432
	.byte	18,1,0,13
	.word	36137
	.byte	9
	.byte	'_Ifx_SRC_GPMU',0,4,146,4,25,8,12
	.byte	'PMU',0
	.word	36146
	.byte	8,2,35,0,0,13
	.word	36151
	.byte	29
	.byte	'Ifx_SRC_GPMU',0,4,149,4,3
	.word	36185
	.byte	17,32
	.word	33490
	.byte	18,0,0,13
	.word	36212
	.byte	9
	.byte	'_Ifx_SRC_GPSI5',0,4,152,4,25,32,12
	.byte	'PSI5',0
	.word	36221
	.byte	32,2,35,0,0,13
	.word	36226
	.byte	29
	.byte	'Ifx_SRC_GPSI5',0,4,155,4,3
	.word	36262
	.byte	17,32
	.word	33550
	.byte	18,0,0,13
	.word	36290
	.byte	9
	.byte	'_Ifx_SRC_GPSI5S',0,4,158,4,25,32,12
	.byte	'PSI5S',0
	.word	36299
	.byte	32,2,35,0,0,13
	.word	36304
	.byte	29
	.byte	'Ifx_SRC_GPSI5S',0,4,161,4,3
	.word	36342
	.byte	17,96
	.word	33612
	.byte	18,3,0,13
	.word	36371
	.byte	9
	.byte	'_Ifx_SRC_GQSPI',0,4,164,4,25,96,12
	.byte	'QSPI',0
	.word	36380
	.byte	96,2,35,0,0,13
	.word	36385
	.byte	29
	.byte	'Ifx_SRC_GQSPI',0,4,167,4,3
	.word	36421
	.byte	13
	.word	33741
	.byte	9
	.byte	'_Ifx_SRC_GSCU',0,4,170,4,25,20,12
	.byte	'SCU',0
	.word	36449
	.byte	20,2,35,0,0,13
	.word	36454
	.byte	29
	.byte	'Ifx_SRC_GSCU',0,4,173,4,3
	.word	36488
	.byte	17,40
	.word	33822
	.byte	18,0,0,13
	.word	36515
	.byte	9
	.byte	'_Ifx_SRC_GSENT',0,4,176,4,25,40,12
	.byte	'SENT',0
	.word	36524
	.byte	40,2,35,0,0,13
	.word	36529
	.byte	29
	.byte	'Ifx_SRC_GSENT',0,4,179,4,3
	.word	36565
	.byte	17,12
	.word	33882
	.byte	18,0,0,13
	.word	36593
	.byte	9
	.byte	'_Ifx_SRC_GSMU',0,4,182,4,25,12,12
	.byte	'SMU',0
	.word	36602
	.byte	12,2,35,0,0,13
	.word	36607
	.byte	29
	.byte	'Ifx_SRC_GSMU',0,4,185,4,3
	.word	36641
	.byte	17,24
	.word	33940
	.byte	18,2,0,13
	.word	36668
	.byte	9
	.byte	'_Ifx_SRC_GSTM',0,4,188,4,25,24,12
	.byte	'STM',0
	.word	36677
	.byte	24,2,35,0,0,13
	.word	36682
	.byte	29
	.byte	'Ifx_SRC_GSTM',0,4,191,4,3
	.word	36716
	.byte	17,128,1
	.word	34116
	.byte	18,7,0,13
	.word	36743
	.byte	17,160,1
	.word	319
	.byte	18,159,1,0,17,32
	.word	34012
	.byte	18,1,0,13
	.word	36769
	.byte	9
	.byte	'_Ifx_SRC_GVADC',0,4,194,4,25,192,2,12
	.byte	'G',0
	.word	36753
	.byte	128,1,2,35,0,12
	.byte	'reserved_80',0
	.word	36758
	.byte	160,1,3,35,128,1,12
	.byte	'CG',0
	.word	36778
	.byte	32,3,35,160,2,0,13
	.word	36783
	.byte	29
	.byte	'Ifx_SRC_GVADC',0,4,199,4,3
	.word	36854
	.byte	13
	.word	34218
	.byte	9
	.byte	'_Ifx_SRC_GXBAR',0,4,202,4,25,4,12
	.byte	'XBAR',0
	.word	36882
	.byte	4,2,35,0,0,13
	.word	36887
	.byte	29
	.byte	'Ifx_SRC_GXBAR',0,4,205,4,3
	.word	36923
	.byte	14,19,131,11,9,1,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,29
	.byte	'IfxScu_CCUCON0_CLKSEL',0,19,135,11,3
	.word	36951
	.byte	14,19,145,11,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,29
	.byte	'IfxScu_WDTCON1_IR',0,19,150,11,3
	.word	37048
	.byte	9
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,7,45,16,4,10
	.byte	'EN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_ACCEN0_Bits',0,7,79,3
	.word	37170
	.byte	9
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,7,82,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN1_Bits',0,7,85,3
	.word	37727
	.byte	9
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,7,88,16,4,10
	.byte	'STM0DIS',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'STM1DIS',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'STM2DIS',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	296
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,7,94,3
	.word	37804
	.byte	9
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,7,97,16,4,10
	.byte	'BAUD1DIV',0,1
	.word	319
	.byte	4,4,2,35,0,10
	.byte	'BAUD2DIV',0,1
	.word	319
	.byte	4,0,2,35,0,10
	.byte	'SRIDIV',0,1
	.word	319
	.byte	4,4,2,35,1,10
	.byte	'LPDIV',0,1
	.word	319
	.byte	4,0,2,35,1,10
	.byte	'SPBDIV',0,1
	.word	319
	.byte	4,4,2,35,2,10
	.byte	'FSI2DIV',0,1
	.word	319
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	319
	.byte	2,0,2,35,2,10
	.byte	'FSIDIV',0,1
	.word	319
	.byte	2,6,2,35,3,10
	.byte	'ADCCLKSEL',0,1
	.word	319
	.byte	2,4,2,35,3,10
	.byte	'CLKSEL',0,1
	.word	319
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON0_Bits',0,7,111,3
	.word	37940
	.byte	9
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,7,114,16,4,10
	.byte	'CANDIV',0,1
	.word	319
	.byte	4,4,2,35,0,10
	.byte	'ERAYDIV',0,1
	.word	319
	.byte	4,0,2,35,0,10
	.byte	'STMDIV',0,1
	.word	319
	.byte	4,4,2,35,1,10
	.byte	'GTMDIV',0,1
	.word	319
	.byte	4,0,2,35,1,10
	.byte	'ETHDIV',0,1
	.word	319
	.byte	4,4,2,35,2,10
	.byte	'ASCLINFDIV',0,1
	.word	319
	.byte	4,0,2,35,2,10
	.byte	'ASCLINSDIV',0,1
	.word	319
	.byte	4,4,2,35,3,10
	.byte	'INSEL',0,1
	.word	319
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON1_Bits',0,7,126,3
	.word	38218
	.byte	9
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,7,129,1,16,4,10
	.byte	'BBBDIV',0,1
	.word	319
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON2_Bits',0,7,135,1,3
	.word	38456
	.byte	9
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,7,138,1,16,4,10
	.byte	'PLLDIV',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'PLLSEL',0,1
	.word	319
	.byte	2,0,2,35,0,10
	.byte	'PLLERAYDIV',0,1
	.word	319
	.byte	6,2,2,35,1,10
	.byte	'PLLERAYSEL',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'SRIDIV',0,1
	.word	319
	.byte	6,2,2,35,2,10
	.byte	'SRISEL',0,1
	.word	319
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	5,3,2,35,3,10
	.byte	'SLCK',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'UP',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON3_Bits',0,7,150,1,3
	.word	38584
	.byte	9
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,7,153,1,16,4,10
	.byte	'SPBDIV',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'SPBSEL',0,1
	.word	319
	.byte	2,0,2,35,0,10
	.byte	'GTMDIV',0,1
	.word	319
	.byte	6,2,2,35,1,10
	.byte	'GTMSEL',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'STMDIV',0,1
	.word	319
	.byte	6,2,2,35,2,10
	.byte	'STMSEL',0,1
	.word	319
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	5,3,2,35,3,10
	.byte	'SLCK',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'UP',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON4_Bits',0,7,165,1,3
	.word	38827
	.byte	9
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,7,168,1,16,4,10
	.byte	'MAXDIV',0,1
	.word	319
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON5_Bits',0,7,174,1,3
	.word	39062
	.byte	9
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,7,177,1,16,4,10
	.byte	'CPU0DIV',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	296
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON6_Bits',0,7,181,1,3
	.word	39190
	.byte	9
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,7,184,1,16,4,10
	.byte	'CPU1DIV',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	296
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON7_Bits',0,7,188,1,3
	.word	39290
	.byte	9
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,7,191,1,16,4,10
	.byte	'CPU2DIV',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	296
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON8_Bits',0,7,195,1,3
	.word	39390
	.byte	9
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,7,198,1,16,4,10
	.byte	'ADCDIV',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'ADCSEL',0,1
	.word	319
	.byte	2,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	296
	.byte	21,3,2,35,0,10
	.byte	'SLCK',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'UP',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON9_Bits',0,7,206,1,3
	.word	39490
	.byte	9
	.byte	'_Ifx_SCU_CHIPID_Bits',0,7,209,1,16,4,10
	.byte	'CHREV',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'CHTEC',0,1
	.word	319
	.byte	2,0,2,35,0,10
	.byte	'CHID',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'EEA',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'UCODE',0,1
	.word	319
	.byte	7,0,2,35,2,10
	.byte	'FSIZE',0,1
	.word	319
	.byte	4,4,2,35,3,10
	.byte	'SP',0,1
	.word	319
	.byte	2,2,2,35,3,10
	.byte	'SEC',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CHIPID_Bits',0,7,220,1,3
	.word	39652
	.byte	9
	.byte	'_Ifx_SCU_DTSCON_Bits',0,7,223,1,16,4,10
	.byte	'PWD',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'START',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	2,4,2,35,0,10
	.byte	'CAL',0,4
	.word	296
	.byte	20,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	7,1,2,35,3,10
	.byte	'SLCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_DTSCON_Bits',0,7,231,1,3
	.word	39860
	.byte	9
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,7,234,1,16,4,10
	.byte	'LOWER',0,2
	.word	832
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	319
	.byte	5,1,2,35,1,10
	.byte	'LLU',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'UPPER',0,2
	.word	832
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	319
	.byte	4,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'UOF',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_DTSLIM_Bits',0,7,243,1,3
	.word	40025
	.byte	9
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,7,246,1,16,4,10
	.byte	'RESULT',0,2
	.word	832
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	319
	.byte	4,2,2,35,1,10
	.byte	'RDY',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'BUSY',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,7,253,1,3
	.word	40208
	.byte	9
	.byte	'_Ifx_SCU_EICR_Bits',0,7,128,2,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	4,4,2,35,0,10
	.byte	'EXIS0',0,1
	.word	319
	.byte	3,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'FEN0',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'REN0',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'LDEN0',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'EIEN0',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'INP0',0,1
	.word	319
	.byte	3,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	296
	.byte	5,12,2,35,0,10
	.byte	'EXIS1',0,1
	.word	319
	.byte	3,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'FEN1',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'REN1',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'LDEN1',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'EIEN1',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'INP1',0,1
	.word	319
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EICR_Bits',0,7,147,2,3
	.word	40362
	.byte	9
	.byte	'_Ifx_SCU_EIFR_Bits',0,7,150,2,16,4,10
	.byte	'INTF0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'INTF1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'INTF2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'INTF3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'INTF4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'INTF5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'INTF6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'INTF7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	296
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_EIFR_Bits',0,7,161,2,3
	.word	40726
	.byte	9
	.byte	'_Ifx_SCU_EMSR_Bits',0,7,164,2,16,4,10
	.byte	'POL',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'MODE',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'ENON',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'PSEL',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	832
	.byte	12,0,2,35,0,10
	.byte	'EMSF',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'SEMSF',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	319
	.byte	6,0,2,35,2,10
	.byte	'EMSFM',0,1
	.word	319
	.byte	2,6,2,35,3,10
	.byte	'SEMSFM',0,1
	.word	319
	.byte	2,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	319
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_EMSR_Bits',0,7,177,2,3
	.word	40937
	.byte	9
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,7,180,2,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	7,1,2,35,0,10
	.byte	'EDCON',0,2
	.word	832
	.byte	2,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	296
	.byte	23,0,2,35,0,0,29
	.byte	'Ifx_SCU_ESRCFG_Bits',0,7,185,2,3
	.word	41189
	.byte	9
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,7,188,2,16,4,10
	.byte	'ARI',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'ARC',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_ESROCFG_Bits',0,7,193,2,3
	.word	41307
	.byte	9
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,7,196,2,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	28,4,2,35,0,10
	.byte	'EVR13OFF',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'BPEVR13OFF',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVR13CON_Bits',0,7,203,2,3
	.word	41418
	.byte	9
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,7,206,2,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	28,4,2,35,0,10
	.byte	'EVR33OFF',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'BPEVR33OFF',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVR33CON_Bits',0,7,213,2,3
	.word	41581
	.byte	9
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,7,216,2,16,4,10
	.byte	'ADC13V',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'ADC33V',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'ADCSWDV',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,7,223,2,3
	.word	41744
	.byte	9
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,7,226,2,16,4,10
	.byte	'DVS13TRIM',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'DVS33TRIM',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,7,233,2,3
	.word	41902
	.byte	9
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,7,236,2,16,4,10
	.byte	'EVR13OVMOD',0,1
	.word	319
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	2,4,2,35,0,10
	.byte	'EVR13UVMOD',0,1
	.word	319
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	319
	.byte	2,0,2,35,0,10
	.byte	'EVR33OVMOD',0,1
	.word	319
	.byte	2,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	319
	.byte	2,4,2,35,1,10
	.byte	'EVR33UVMOD',0,1
	.word	319
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'SWDOVMOD',0,1
	.word	319
	.byte	2,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	319
	.byte	2,4,2,35,2,10
	.byte	'SWDUVMOD',0,1
	.word	319
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	832
	.byte	8,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,7,252,2,3
	.word	42067
	.byte	9
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,7,255,2,16,4,10
	.byte	'OSCTRIM',0,2
	.word	832
	.byte	10,6,2,35,0,10
	.byte	'OSCPTAT',0,1
	.word	319
	.byte	6,0,2,35,1,10
	.byte	'OSCANASEL',0,1
	.word	319
	.byte	4,4,2,35,2,10
	.byte	'HPBGTRIM',0,2
	.word	832
	.byte	7,5,2,35,2,10
	.byte	'HPBGCLKEN',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'OSC3V3',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	319
	.byte	2,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,7,137,3,3
	.word	42435
	.byte	9
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,7,140,3,16,4,10
	.byte	'EVR13OVVAL',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'EVR33OVVAL',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'SWDOVVAL',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVROVMON_Bits',0,7,148,3,3
	.word	42656
	.byte	9
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,7,151,3,16,4,10
	.byte	'RST13TRIM',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	296
	.byte	16,8,2,35,0,10
	.byte	'RST13OFF',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'BPRST13OFF',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'RST33OFF',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'BPRST33OFF',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'RSTSWDOFF',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'BPRSTSWDOFF',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,7,163,3,3
	.word	42835
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,7,166,3,16,4,10
	.byte	'SD5P',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'SD5I',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'SD5D',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,7,173,3,3
	.word	43100
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,7,176,3,16,4,10
	.byte	'SD33P',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'SD33I',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'SD33D',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,7,183,3,3
	.word	43253
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,7,186,3,16,4,10
	.byte	'CT5REG0',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'CT5REG1',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'CT5REG2',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,7,193,3,3
	.word	43409
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,7,196,3,16,4,10
	.byte	'CT5REG3',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'CT5REG4',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	15,1,2,35,2,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,7,202,3,3
	.word	43571
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,7,205,3,16,4,10
	.byte	'CT33REG0',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'CT33REG1',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'CT33REG2',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,7,212,3,3
	.word	43714
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,7,215,3,16,4,10
	.byte	'CT33REG3',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'CT33REG4',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	15,1,2,35,2,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,7,221,3,3
	.word	43879
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,7,224,3,16,4,10
	.byte	'SDFREQSPRD',0,2
	.word	832
	.byte	16,0,2,35,0,10
	.byte	'SDFREQ',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'SDSTEP',0,1
	.word	319
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	319
	.byte	2,2,2,35,3,10
	.byte	'SDSAMPLE',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,7,232,3,3
	.word	44024
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,7,235,3,16,4,10
	.byte	'DRVP',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'SDMINMAXDC',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'DRVN',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'SDLUT',0,1
	.word	319
	.byte	6,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,7,243,3,3
	.word	44205
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,7,246,3,16,4,10
	.byte	'SDPWMPRE',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'SDPID',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'SDVOKLVL',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,7,253,3,3
	.word	44379
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,7,128,4,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'SYNCDIV',0,1
	.word	319
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	296
	.byte	20,1,2,35,0,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,7,134,4,3
	.word	44539
	.byte	9
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,7,137,4,16,4,10
	.byte	'EVR13',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'OV13',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EVR33',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'OV33',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'OVSWD',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'UV13',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'UV33',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'UVSWD',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'EXTPASS13',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'EXTPASS33',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'BGPROK',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	296
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,7,151,4,3
	.word	44683
	.byte	9
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,7,154,4,16,4,10
	.byte	'EVR13TRIM',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'SDVOUTSEL',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	14,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,7,161,4,3
	.word	44957
	.byte	9
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,7,164,4,16,4,10
	.byte	'EVR13UVVAL',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'EVR33UVVAL',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'SWDUVVAL',0,1
	.word	319
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,7,172,4,3
	.word	45112
	.byte	9
	.byte	'_Ifx_SCU_EXTCON_Bits',0,7,175,4,16,4,10
	.byte	'EN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'SEL0',0,1
	.word	319
	.byte	4,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	832
	.byte	10,0,2,35,0,10
	.byte	'EN1',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'NSEL',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'SEL1',0,1
	.word	319
	.byte	4,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	319
	.byte	2,0,2,35,2,10
	.byte	'DIV1',0,1
	.word	319
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_SCU_EXTCON_Bits',0,7,186,4,3
	.word	45291
	.byte	9
	.byte	'_Ifx_SCU_FDR_Bits',0,7,189,4,16,4,10
	.byte	'STEP',0,2
	.word	832
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	319
	.byte	4,2,2,35,1,10
	.byte	'DM',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'RESULT',0,2
	.word	832
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	319
	.byte	5,1,2,35,3,10
	.byte	'DISCLK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_FDR_Bits',0,7,197,4,3
	.word	45509
	.byte	9
	.byte	'_Ifx_SCU_FMR_Bits',0,7,200,4,16,4,10
	.byte	'FS0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'FS1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'FS2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'FS3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'FS4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'FS5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'FS6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'FS7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'FC0',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'FC1',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'FC2',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'FC3',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'FC4',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'FC5',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'FC6',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'FC7',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_SCU_FMR_Bits',0,7,220,4,3
	.word	45672
	.byte	9
	.byte	'_Ifx_SCU_ID_Bits',0,7,223,4,16,4,10
	.byte	'MODREV',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_ID_Bits',0,7,228,4,3
	.word	46008
	.byte	9
	.byte	'_Ifx_SCU_IGCR_Bits',0,7,231,4,16,4,10
	.byte	'IPEN00',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'IPEN01',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'IPEN02',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'IPEN03',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'IPEN04',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'IPEN05',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'IPEN06',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'IPEN07',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	319
	.byte	5,3,2,35,1,10
	.byte	'GEEN0',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'IGP0',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'IPEN10',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'IPEN11',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'IPEN12',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'IPEN13',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'IPEN14',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'IPEN15',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'IPEN16',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'IPEN17',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	5,3,2,35,3,10
	.byte	'GEEN1',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'IGP1',0,1
	.word	319
	.byte	2,0,2,35,3,0,29
	.byte	'Ifx_SCU_IGCR_Bits',0,7,255,4,3
	.word	46115
	.byte	9
	.byte	'_Ifx_SCU_IN_Bits',0,7,130,5,16,4,10
	.byte	'P0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_IN_Bits',0,7,135,5,3
	.word	46567
	.byte	9
	.byte	'_Ifx_SCU_IOCR_Bits',0,7,138,5,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	4,4,2,35,0,10
	.byte	'PC0',0,1
	.word	319
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	319
	.byte	4,4,2,35,1,10
	.byte	'PC1',0,1
	.word	319
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_IOCR_Bits',0,7,145,5,3
	.word	46666
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,7,148,5,16,4,10
	.byte	'LBISTREQ',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'LBISTREQP',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'PATTERNS',0,2
	.word	832
	.byte	14,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,7,154,5,3
	.word	46816
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,7,157,5,16,4,10
	.byte	'SEED',0,4
	.word	296
	.byte	23,9,2,35,0,10
	.byte	'reserved_23',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'SPLITSH',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'BODY',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'LBISTFREQU',0,1
	.word	319
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,7,164,5,3
	.word	46965
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,7,167,5,16,4,10
	.byte	'SIGNATURE',0,4
	.word	296
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	7,1,2,35,3,10
	.byte	'LBISTDONE',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,7,172,5,3
	.word	47126
	.byte	9
	.byte	'_Ifx_SCU_LCLCON_Bits',0,7,175,5,16,4,10
	.byte	'reserved_0',0,2
	.word	832
	.byte	16,0,2,35,0,10
	.byte	'LS',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	832
	.byte	14,1,2,35,2,10
	.byte	'LSEN',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_LCLCON_Bits',0,7,181,5,3
	.word	47256
	.byte	9
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,7,184,5,16,4,10
	.byte	'LCLT0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'LCLT1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_LCLTEST_Bits',0,7,189,5,3
	.word	47388
	.byte	9
	.byte	'_Ifx_SCU_MANID_Bits',0,7,192,5,16,4,10
	.byte	'DEPT',0,1
	.word	319
	.byte	5,3,2,35,0,10
	.byte	'MANUF',0,2
	.word	832
	.byte	11,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_MANID_Bits',0,7,197,5,3
	.word	47503
	.byte	9
	.byte	'_Ifx_SCU_OMR_Bits',0,7,200,5,16,4,10
	.byte	'PS0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	832
	.byte	14,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	832
	.byte	14,0,2,35,2,0,29
	.byte	'Ifx_SCU_OMR_Bits',0,7,208,5,3
	.word	47614
	.byte	9
	.byte	'_Ifx_SCU_OSCCON_Bits',0,7,211,5,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PLLLV',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'OSCRES',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'GAINSEL',0,1
	.word	319
	.byte	2,3,2,35,0,10
	.byte	'MODE',0,1
	.word	319
	.byte	2,1,2,35,0,10
	.byte	'SHBY',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'PLLHV',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'X1D',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'X1DEN',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	319
	.byte	4,0,2,35,1,10
	.byte	'OSCVAL',0,1
	.word	319
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	319
	.byte	2,1,2,35,2,10
	.byte	'APREN',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'CAP0EN',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'CAP1EN',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'CAP2EN',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'CAP3EN',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	319
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_OSCCON_Bits',0,7,232,5,3
	.word	47772
	.byte	9
	.byte	'_Ifx_SCU_OUT_Bits',0,7,235,5,16,4,10
	.byte	'P0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_OUT_Bits',0,7,240,5,3
	.word	48184
	.byte	9
	.byte	'_Ifx_SCU_OVCCON_Bits',0,7,243,5,16,4,10
	.byte	'CSEL0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'CSEL1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'CSEL2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	832
	.byte	13,0,2,35,0,10
	.byte	'OVSTRT',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'OVSTP',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'DCINVAL',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	319
	.byte	5,0,2,35,2,10
	.byte	'OVCONF',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'POVCONF',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	319
	.byte	6,0,2,35,3,0,29
	.byte	'Ifx_SCU_OVCCON_Bits',0,7,128,6,3
	.word	48285
	.byte	9
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,7,131,6,16,4,10
	.byte	'OVEN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'OVEN1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'OVEN2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	296
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,7,137,6,3
	.word	48552
	.byte	9
	.byte	'_Ifx_SCU_PDISC_Bits',0,7,140,6,16,4,10
	.byte	'PDIS0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDISC_Bits',0,7,145,6,3
	.word	48688
	.byte	9
	.byte	'_Ifx_SCU_PDR_Bits',0,7,148,6,16,4,10
	.byte	'PD0',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	319
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	296
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDR_Bits',0,7,155,6,3
	.word	48799
	.byte	9
	.byte	'_Ifx_SCU_PDRR_Bits',0,7,158,6,16,4,10
	.byte	'PDR0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PDR1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'PDR2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'PDR3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'PDR4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'PDR5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'PDR6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PDR7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	296
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDRR_Bits',0,7,169,6,3
	.word	48932
	.byte	9
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,7,172,6,16,4,10
	.byte	'VCOBYP',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'MODEN',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	832
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	319
	.byte	7,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	319
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	319
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	319
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_PLLCON0_Bits',0,7,189,6,3
	.word	49135
	.byte	9
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,7,192,6,16,4,10
	.byte	'K2DIV',0,1
	.word	319
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	319
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	319
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	832
	.byte	9,0,2,35,2,0,29
	.byte	'Ifx_SCU_PLLCON1_Bits',0,7,200,6,3
	.word	49491
	.byte	9
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,7,203,6,16,4,10
	.byte	'MODCFG',0,2
	.word	832
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_PLLCON2_Bits',0,7,207,6,3
	.word	49669
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,7,210,6,16,4,10
	.byte	'VCOBYP',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	2,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	832
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	319
	.byte	5,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	319
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	319
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	319
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,7,227,6,3
	.word	49769
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,7,230,6,16,4,10
	.byte	'K2DIV',0,1
	.word	319
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	319
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	319
	.byte	4,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	319
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	832
	.byte	9,0,2,35,2,0,29
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,7,238,6,3
	.word	50139
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,7,241,6,16,4,10
	.byte	'VCOBYST',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PWDSTAT',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	296
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,7,250,6,3
	.word	50325
	.byte	9
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,7,253,6,16,4,10
	.byte	'VCOBYST',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'MODRUN',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	296
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,7,136,7,3
	.word	50523
	.byte	9
	.byte	'_Ifx_SCU_PMCSR_Bits',0,7,139,7,16,4,10
	.byte	'REQSLP',0,1
	.word	319
	.byte	2,6,2,35,0,10
	.byte	'SMUSLP',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	319
	.byte	5,0,2,35,0,10
	.byte	'PMST',0,1
	.word	319
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	296
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR_Bits',0,7,146,7,3
	.word	50756
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,7,149,7,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'ESR1WKEN',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'PINAWKEN',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'PINBWKEN',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'ESR0DFEN',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'ESR0EDCON',0,1
	.word	319
	.byte	2,1,2,35,0,10
	.byte	'ESR1DFEN',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'ESR1EDCON',0,1
	.word	319
	.byte	2,6,2,35,1,10
	.byte	'PINADFEN',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'PINAEDCON',0,1
	.word	319
	.byte	2,3,2,35,1,10
	.byte	'PINBDFEN',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'PINBEDCON',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'STBYRAMSEL',0,1
	.word	319
	.byte	2,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	319
	.byte	2,3,2,35,2,10
	.byte	'TRISTEN',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'TRISTREQ',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'PORSTDF',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'PWRWKEN',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'DCDCSYNC',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'BLNKFIL',0,1
	.word	319
	.byte	3,3,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,7,175,7,3
	.word	50908
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,7,178,7,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'CPUIDLSEL',0,1
	.word	319
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'IRADIS',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	296
	.byte	11,8,2,35,0,10
	.byte	'CPUSEL',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'STBYEVEN',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'STBYEV',0,1
	.word	319
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,7,189,7,3
	.word	51456
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,7,192,7,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKP',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUN',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'PINAWKP',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUN',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'PINBWKP',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUN',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'PWRWKP',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'PORSTDF',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'HWCFGEVR',0,1
	.word	319
	.byte	3,3,2,35,1,10
	.byte	'STBYRAM',0,1
	.word	319
	.byte	2,1,2,35,1,10
	.byte	'TRIST',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	319
	.byte	4,4,2,35,2,10
	.byte	'ESR1WKEN',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'PINAWKEN',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'PINBWKEN',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'PWRWKEN',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'BLNKFIL',0,1
	.word	319
	.byte	3,5,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	319
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,7,214,7,3
	.word	51701
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,7,217,7,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKPCLR',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUNCLR',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'PINAWKPCLR',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUNCLR',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'PINBWKPCLR',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUNCLR',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'PWRWKPCLR',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	296
	.byte	23,0,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,7,228,7,3
	.word	52162
	.byte	9
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,7,231,7,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'CLRC',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	832
	.byte	10,4,2,35,0,10
	.byte	'CSS0',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'CSS1',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'CSS2',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'USRINFO',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_RSTCON2_Bits',0,7,241,7,3
	.word	52432
	.byte	9
	.byte	'_Ifx_SCU_RSTCON_Bits',0,7,244,7,16,4,10
	.byte	'ESR0',0,1
	.word	319
	.byte	2,6,2,35,0,10
	.byte	'ESR1',0,1
	.word	319
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	319
	.byte	2,2,2,35,0,10
	.byte	'SMU',0,1
	.word	319
	.byte	2,0,2,35,0,10
	.byte	'SW',0,1
	.word	319
	.byte	2,6,2,35,1,10
	.byte	'STM0',0,1
	.word	319
	.byte	2,4,2,35,1,10
	.byte	'STM1',0,1
	.word	319
	.byte	2,2,2,35,1,10
	.byte	'STM2',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_RSTCON_Bits',0,7,255,7,3
	.word	52641
	.byte	9
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,7,130,8,16,4,10
	.byte	'ESR0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'ESR1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'SMU',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'SW',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'STM0',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'STM1',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'STM2',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'PORST',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'CB0',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'CB1',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'CB3',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	319
	.byte	2,1,2,35,2,10
	.byte	'EVR13',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'EVR33',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'SWD',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	319
	.byte	2,4,2,35,3,10
	.byte	'STBYR',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	319
	.byte	3,0,2,35,3,0,29
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,7,153,8,3
	.word	52852
	.byte	9
	.byte	'_Ifx_SCU_SAFECON_Bits',0,7,156,8,16,4,10
	.byte	'HBT',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	296
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_SCU_SAFECON_Bits',0,7,160,8,3
	.word	53284
	.byte	9
	.byte	'_Ifx_SCU_STSTAT_Bits',0,7,163,8,16,4,10
	.byte	'HWCFG',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'FTM',0,1
	.word	319
	.byte	7,1,2,35,1,10
	.byte	'MODE',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'FCBAE',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'LUDIS',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'TRSTL',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'SPDEN',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	319
	.byte	3,0,2,35,2,10
	.byte	'RAMINT',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	319
	.byte	7,0,2,35,3,0,29
	.byte	'Ifx_SCU_STSTAT_Bits',0,7,176,8,3
	.word	53380
	.byte	9
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,7,179,8,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'SWRSTREQ',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,7,184,8,3
	.word	53640
	.byte	9
	.byte	'_Ifx_SCU_SYSCON_Bits',0,7,187,8,16,4,10
	.byte	'CCTRIG0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'RAMINTM',0,1
	.word	319
	.byte	2,4,2,35,0,10
	.byte	'SETLUDIS',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	319
	.byte	3,0,2,35,0,10
	.byte	'DATM',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	296
	.byte	23,0,2,35,0,0,29
	.byte	'Ifx_SCU_SYSCON_Bits',0,7,196,8,3
	.word	53765
	.byte	9
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,7,199,8,16,4,10
	.byte	'ESR0T',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,7,206,8,3
	.word	53962
	.byte	9
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,7,209,8,16,4,10
	.byte	'ESR0T',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,7,216,8,3
	.word	54115
	.byte	9
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,7,219,8,16,4,10
	.byte	'ESR0T',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSET_Bits',0,7,226,8,3
	.word	54268
	.byte	9
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,7,229,8,16,4,10
	.byte	'ESR0T',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,7,236,8,3
	.word	54421
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,7,245,8,3
	.word	931
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,7,132,9,3
	.word	1067
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,7,148,9,3
	.word	1311
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,7,151,9,16,4,10
	.byte	'ENDINIT',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'LCK',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'PW',0,2
	.word	832
	.byte	14,0,2,35,0,10
	.byte	'REL',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,7,157,9,3
	.word	54676
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,7,160,9,16,4,10
	.byte	'CLRIRF',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'IR0',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	319
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,7,173,9,3
	.word	54802
	.byte	9
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,7,176,9,16,4,10
	.byte	'AE',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	319
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,7,189,9,3
	.word	55054
	.byte	11,7,197,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37170
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN0',0,7,205,9,3
	.word	55273
	.byte	11,7,208,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37727
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN1',0,7,216,9,3
	.word	55337
	.byte	11,7,219,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37804
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ARSTDIS',0,7,227,9,3
	.word	55401
	.byte	11,7,230,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37940
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON0',0,7,238,9,3
	.word	55466
	.byte	11,7,241,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38218
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON1',0,7,249,9,3
	.word	55531
	.byte	11,7,252,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38456
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON2',0,7,132,10,3
	.word	55596
	.byte	11,7,135,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38584
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON3',0,7,143,10,3
	.word	55661
	.byte	11,7,146,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38827
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON4',0,7,154,10,3
	.word	55726
	.byte	11,7,157,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39062
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON5',0,7,165,10,3
	.word	55791
	.byte	11,7,168,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39190
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON6',0,7,176,10,3
	.word	55856
	.byte	11,7,179,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39290
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON7',0,7,187,10,3
	.word	55921
	.byte	11,7,190,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39390
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON8',0,7,198,10,3
	.word	55986
	.byte	11,7,201,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39490
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON9',0,7,209,10,3
	.word	56051
	.byte	11,7,212,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39652
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CHIPID',0,7,220,10,3
	.word	56116
	.byte	11,7,223,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39860
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSCON',0,7,231,10,3
	.word	56180
	.byte	11,7,234,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40025
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSLIM',0,7,242,10,3
	.word	56244
	.byte	11,7,245,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40208
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSSTAT',0,7,253,10,3
	.word	56308
	.byte	11,7,128,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40362
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EICR',0,7,136,11,3
	.word	56373
	.byte	11,7,139,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40726
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EIFR',0,7,147,11,3
	.word	56435
	.byte	11,7,150,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40937
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EMSR',0,7,158,11,3
	.word	56497
	.byte	11,7,161,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41189
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ESRCFG',0,7,169,11,3
	.word	56559
	.byte	11,7,172,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41307
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ESROCFG',0,7,180,11,3
	.word	56623
	.byte	11,7,183,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41418
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVR13CON',0,7,191,11,3
	.word	56688
	.byte	11,7,194,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41581
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVR33CON',0,7,202,11,3
	.word	56754
	.byte	11,7,205,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41744
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRADCSTAT',0,7,213,11,3
	.word	56820
	.byte	11,7,216,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41902
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRDVSTAT',0,7,224,11,3
	.word	56888
	.byte	11,7,227,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42067
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRMONCTRL',0,7,235,11,3
	.word	56955
	.byte	11,7,238,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42435
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVROSCCTRL',0,7,246,11,3
	.word	57023
	.byte	11,7,249,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42656
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVROVMON',0,7,129,12,3
	.word	57091
	.byte	11,7,132,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42835
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRRSTCON',0,7,140,12,3
	.word	57157
	.byte	11,7,143,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43100
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,7,151,12,3
	.word	57224
	.byte	11,7,154,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43253
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,7,162,12,3
	.word	57293
	.byte	11,7,165,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43409
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,7,173,12,3
	.word	57362
	.byte	11,7,176,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43571
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,7,184,12,3
	.word	57431
	.byte	11,7,187,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43714
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,7,195,12,3
	.word	57500
	.byte	11,7,198,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43879
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,7,206,12,3
	.word	57569
	.byte	11,7,209,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44024
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL1',0,7,217,12,3
	.word	57638
	.byte	11,7,220,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44205
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL2',0,7,228,12,3
	.word	57706
	.byte	11,7,231,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44379
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL3',0,7,239,12,3
	.word	57774
	.byte	11,7,242,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44539
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL4',0,7,250,12,3
	.word	57842
	.byte	11,7,253,12,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44683
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSTAT',0,7,133,13,3
	.word	57910
	.byte	11,7,136,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44957
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRTRIM',0,7,144,13,3
	.word	57975
	.byte	11,7,147,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45112
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRUVMON',0,7,155,13,3
	.word	58040
	.byte	11,7,158,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45291
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EXTCON',0,7,166,13,3
	.word	58106
	.byte	11,7,169,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45509
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_FDR',0,7,177,13,3
	.word	58170
	.byte	11,7,180,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45672
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_FMR',0,7,188,13,3
	.word	58231
	.byte	11,7,191,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46008
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ID',0,7,199,13,3
	.word	58292
	.byte	11,7,202,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46115
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IGCR',0,7,210,13,3
	.word	58352
	.byte	11,7,213,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46567
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IN',0,7,221,13,3
	.word	58414
	.byte	11,7,224,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46666
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IOCR',0,7,232,13,3
	.word	58474
	.byte	11,7,235,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46816
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL0',0,7,243,13,3
	.word	58536
	.byte	11,7,246,13,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46965
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL1',0,7,254,13,3
	.word	58604
	.byte	11,7,129,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47126
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL2',0,7,137,14,3
	.word	58672
	.byte	11,7,140,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47256
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LCLCON',0,7,148,14,3
	.word	58740
	.byte	11,7,151,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47388
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LCLTEST',0,7,159,14,3
	.word	58804
	.byte	11,7,162,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47503
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_MANID',0,7,170,14,3
	.word	58869
	.byte	11,7,173,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47614
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OMR',0,7,181,14,3
	.word	58932
	.byte	11,7,184,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47772
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OSCCON',0,7,192,14,3
	.word	58993
	.byte	11,7,195,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48184
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OUT',0,7,203,14,3
	.word	59057
	.byte	11,7,206,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48285
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OVCCON',0,7,214,14,3
	.word	59118
	.byte	11,7,217,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48552
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OVCENABLE',0,7,225,14,3
	.word	59182
	.byte	11,7,228,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48688
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDISC',0,7,236,14,3
	.word	59249
	.byte	11,7,239,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48799
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDR',0,7,247,14,3
	.word	59312
	.byte	11,7,250,14,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48932
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDRR',0,7,130,15,3
	.word	59373
	.byte	11,7,133,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49135
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLCON0',0,7,141,15,3
	.word	59435
	.byte	11,7,144,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49491
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLCON1',0,7,152,15,3
	.word	59500
	.byte	11,7,155,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49669
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLCON2',0,7,163,15,3
	.word	59565
	.byte	11,7,166,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49769
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYCON0',0,7,174,15,3
	.word	59630
	.byte	11,7,177,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50139
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYCON1',0,7,185,15,3
	.word	59699
	.byte	11,7,188,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50325
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYSTAT',0,7,196,15,3
	.word	59768
	.byte	11,7,199,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50523
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLSTAT',0,7,207,15,3
	.word	59837
	.byte	11,7,210,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50756
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR',0,7,218,15,3
	.word	59902
	.byte	11,7,221,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50908
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWCR0',0,7,229,15,3
	.word	59965
	.byte	11,7,232,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51456
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWCR1',0,7,240,15,3
	.word	60030
	.byte	11,7,243,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51701
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWSTAT',0,7,251,15,3
	.word	60095
	.byte	11,7,254,15,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52162
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWSTATCLR',0,7,134,16,3
	.word	60161
	.byte	11,7,137,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52641
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTCON',0,7,145,16,3
	.word	60230
	.byte	11,7,148,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52432
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTCON2',0,7,156,16,3
	.word	60294
	.byte	11,7,159,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52852
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTSTAT',0,7,167,16,3
	.word	60359
	.byte	11,7,170,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53284
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SAFECON',0,7,178,16,3
	.word	60424
	.byte	11,7,181,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53380
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STSTAT',0,7,189,16,3
	.word	60489
	.byte	11,7,192,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53640
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SWRSTCON',0,7,200,16,3
	.word	60553
	.byte	11,7,203,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53765
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SYSCON',0,7,211,16,3
	.word	60619
	.byte	11,7,214,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53962
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPCLR',0,7,222,16,3
	.word	60683
	.byte	11,7,225,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54115
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPDIS',0,7,233,16,3
	.word	60748
	.byte	11,7,236,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54268
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSET',0,7,244,16,3
	.word	60813
	.byte	11,7,247,16,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54421
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSTAT',0,7,255,16,3
	.word	60878
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON0',0,7,138,17,3
	.word	1027
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON1',0,7,149,17,3
	.word	1271
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_SR',0,7,160,17,3
	.word	1502
	.byte	11,7,163,17,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54676
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON0',0,7,171,17,3
	.word	61029
	.byte	11,7,174,17,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54802
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON1',0,7,182,17,3
	.word	61096
	.byte	11,7,185,17,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55054
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_SR',0,7,193,17,3
	.word	61163
	.byte	13
	.word	1542
	.byte	29
	.byte	'Ifx_SCU_WDTCPU',0,7,209,17,3
	.word	61228
	.byte	9
	.byte	'_Ifx_SCU_WDTS',0,7,212,17,25,12,12
	.byte	'CON0',0
	.word	61029
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	61096
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	61163
	.byte	4,2,35,8,0,13
	.word	61257
	.byte	29
	.byte	'Ifx_SCU_WDTS',0,7,217,17,3
	.word	61318
	.byte	17,8
	.word	56559
	.byte	18,1,0,17,12
	.word	59902
	.byte	18,2,0,13
	.word	61257
	.byte	17,36
	.word	1542
	.byte	18,2,0,13
	.word	61368
	.byte	17,16
	.word	56373
	.byte	18,3,0,17,16
	.word	58352
	.byte	18,3,0,17,180,3
	.word	319
	.byte	18,179,3,0,9
	.byte	'_Ifx_SCU',0,7,230,17,25,128,8,12
	.byte	'reserved_0',0
	.word	5071
	.byte	8,2,35,0,12
	.byte	'ID',0
	.word	58292
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	3252
	.byte	4,2,35,12,12
	.byte	'OSCCON',0
	.word	58993
	.byte	4,2,35,16,12
	.byte	'PLLSTAT',0
	.word	59837
	.byte	4,2,35,20,12
	.byte	'PLLCON0',0
	.word	59435
	.byte	4,2,35,24,12
	.byte	'PLLCON1',0
	.word	59500
	.byte	4,2,35,28,12
	.byte	'PLLCON2',0
	.word	59565
	.byte	4,2,35,32,12
	.byte	'PLLERAYSTAT',0
	.word	59768
	.byte	4,2,35,36,12
	.byte	'PLLERAYCON0',0
	.word	59630
	.byte	4,2,35,40,12
	.byte	'PLLERAYCON1',0
	.word	59699
	.byte	4,2,35,44,12
	.byte	'CCUCON0',0
	.word	55466
	.byte	4,2,35,48,12
	.byte	'CCUCON1',0
	.word	55531
	.byte	4,2,35,52,12
	.byte	'FDR',0
	.word	58170
	.byte	4,2,35,56,12
	.byte	'EXTCON',0
	.word	58106
	.byte	4,2,35,60,12
	.byte	'CCUCON2',0
	.word	55596
	.byte	4,2,35,64,12
	.byte	'CCUCON3',0
	.word	55661
	.byte	4,2,35,68,12
	.byte	'CCUCON4',0
	.word	55726
	.byte	4,2,35,72,12
	.byte	'CCUCON5',0
	.word	55791
	.byte	4,2,35,76,12
	.byte	'RSTSTAT',0
	.word	60359
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	3252
	.byte	4,2,35,84,12
	.byte	'RSTCON',0
	.word	60230
	.byte	4,2,35,88,12
	.byte	'ARSTDIS',0
	.word	55401
	.byte	4,2,35,92,12
	.byte	'SWRSTCON',0
	.word	60553
	.byte	4,2,35,96,12
	.byte	'RSTCON2',0
	.word	60294
	.byte	4,2,35,100,12
	.byte	'reserved_68',0
	.word	3252
	.byte	4,2,35,104,12
	.byte	'EVRRSTCON',0
	.word	57157
	.byte	4,2,35,108,12
	.byte	'ESRCFG',0
	.word	61345
	.byte	8,2,35,112,12
	.byte	'ESROCFG',0
	.word	56623
	.byte	4,2,35,120,12
	.byte	'SYSCON',0
	.word	60619
	.byte	4,2,35,124,12
	.byte	'CCUCON6',0
	.word	55856
	.byte	4,3,35,128,1,12
	.byte	'CCUCON7',0
	.word	55921
	.byte	4,3,35,132,1,12
	.byte	'CCUCON8',0
	.word	55986
	.byte	4,3,35,136,1,12
	.byte	'CCUCON9',0
	.word	56051
	.byte	4,3,35,140,1,12
	.byte	'reserved_90',0
	.word	5411
	.byte	12,3,35,144,1,12
	.byte	'PDR',0
	.word	59312
	.byte	4,3,35,156,1,12
	.byte	'IOCR',0
	.word	58474
	.byte	4,3,35,160,1,12
	.byte	'OUT',0
	.word	59057
	.byte	4,3,35,164,1,12
	.byte	'OMR',0
	.word	58932
	.byte	4,3,35,168,1,12
	.byte	'IN',0
	.word	58414
	.byte	4,3,35,172,1,12
	.byte	'EVRSTAT',0
	.word	57910
	.byte	4,3,35,176,1,12
	.byte	'EVRDVSTAT',0
	.word	56888
	.byte	4,3,35,180,1,12
	.byte	'EVR13CON',0
	.word	56688
	.byte	4,3,35,184,1,12
	.byte	'EVR33CON',0
	.word	56754
	.byte	4,3,35,188,1,12
	.byte	'STSTAT',0
	.word	60489
	.byte	4,3,35,192,1,12
	.byte	'reserved_C4',0
	.word	3252
	.byte	4,3,35,196,1,12
	.byte	'PMSWCR0',0
	.word	59965
	.byte	4,3,35,200,1,12
	.byte	'PMSWSTAT',0
	.word	60095
	.byte	4,3,35,204,1,12
	.byte	'PMSWSTATCLR',0
	.word	60161
	.byte	4,3,35,208,1,12
	.byte	'PMCSR',0
	.word	61354
	.byte	12,3,35,212,1,12
	.byte	'DTSSTAT',0
	.word	56308
	.byte	4,3,35,224,1,12
	.byte	'DTSCON',0
	.word	56180
	.byte	4,3,35,228,1,12
	.byte	'PMSWCR1',0
	.word	60030
	.byte	4,3,35,232,1,12
	.byte	'reserved_EC',0
	.word	3252
	.byte	4,3,35,236,1,12
	.byte	'WDTS',0
	.word	61363
	.byte	12,3,35,240,1,12
	.byte	'EMSR',0
	.word	56497
	.byte	4,3,35,252,1,12
	.byte	'WDTCPU',0
	.word	61377
	.byte	36,3,35,128,2,12
	.byte	'TRAPSTAT',0
	.word	60878
	.byte	4,3,35,164,2,12
	.byte	'TRAPSET',0
	.word	60813
	.byte	4,3,35,168,2,12
	.byte	'TRAPCLR',0
	.word	60683
	.byte	4,3,35,172,2,12
	.byte	'TRAPDIS',0
	.word	60748
	.byte	4,3,35,176,2,12
	.byte	'LCLCON0',0
	.word	58740
	.byte	4,3,35,180,2,12
	.byte	'LCLCON1',0
	.word	58740
	.byte	4,3,35,184,2,12
	.byte	'LCLTEST',0
	.word	58804
	.byte	4,3,35,188,2,12
	.byte	'CHIPID',0
	.word	56116
	.byte	4,3,35,192,2,12
	.byte	'MANID',0
	.word	58869
	.byte	4,3,35,196,2,12
	.byte	'reserved_148',0
	.word	5071
	.byte	8,3,35,200,2,12
	.byte	'SAFECON',0
	.word	60424
	.byte	4,3,35,208,2,12
	.byte	'reserved_154',0
	.word	31999
	.byte	16,3,35,212,2,12
	.byte	'LBISTCTRL0',0
	.word	58536
	.byte	4,3,35,228,2,12
	.byte	'LBISTCTRL1',0
	.word	58604
	.byte	4,3,35,232,2,12
	.byte	'LBISTCTRL2',0
	.word	58672
	.byte	4,3,35,236,2,12
	.byte	'reserved_170',0
	.word	10727
	.byte	28,3,35,240,2,12
	.byte	'PDISC',0
	.word	59249
	.byte	4,3,35,140,3,12
	.byte	'reserved_190',0
	.word	5071
	.byte	8,3,35,144,3,12
	.byte	'EVRTRIM',0
	.word	57975
	.byte	4,3,35,152,3,12
	.byte	'EVRADCSTAT',0
	.word	56820
	.byte	4,3,35,156,3,12
	.byte	'EVRUVMON',0
	.word	58040
	.byte	4,3,35,160,3,12
	.byte	'EVROVMON',0
	.word	57091
	.byte	4,3,35,164,3,12
	.byte	'EVRMONCTRL',0
	.word	56955
	.byte	4,3,35,168,3,12
	.byte	'reserved_1AC',0
	.word	3252
	.byte	4,3,35,172,3,12
	.byte	'EVRSDCTRL1',0
	.word	57638
	.byte	4,3,35,176,3,12
	.byte	'EVRSDCTRL2',0
	.word	57706
	.byte	4,3,35,180,3,12
	.byte	'EVRSDCTRL3',0
	.word	57774
	.byte	4,3,35,184,3,12
	.byte	'EVRSDCTRL4',0
	.word	57842
	.byte	4,3,35,188,3,12
	.byte	'EVRSDCOEFF1',0
	.word	57224
	.byte	4,3,35,192,3,12
	.byte	'EVRSDCOEFF2',0
	.word	57293
	.byte	4,3,35,196,3,12
	.byte	'EVRSDCOEFF3',0
	.word	57362
	.byte	4,3,35,200,3,12
	.byte	'EVRSDCOEFF4',0
	.word	57431
	.byte	4,3,35,204,3,12
	.byte	'EVRSDCOEFF5',0
	.word	57500
	.byte	4,3,35,208,3,12
	.byte	'EVRSDCOEFF6',0
	.word	57569
	.byte	4,3,35,212,3,12
	.byte	'EVROSCCTRL',0
	.word	57023
	.byte	4,3,35,216,3,12
	.byte	'reserved_1DC',0
	.word	3252
	.byte	4,3,35,220,3,12
	.byte	'OVCENABLE',0
	.word	59182
	.byte	4,3,35,224,3,12
	.byte	'OVCCON',0
	.word	59118
	.byte	4,3,35,228,3,12
	.byte	'reserved_1E8',0
	.word	31720
	.byte	40,3,35,232,3,12
	.byte	'EICR',0
	.word	61382
	.byte	16,3,35,144,4,12
	.byte	'EIFR',0
	.word	56435
	.byte	4,3,35,160,4,12
	.byte	'FMR',0
	.word	58231
	.byte	4,3,35,164,4,12
	.byte	'PDRR',0
	.word	59373
	.byte	4,3,35,168,4,12
	.byte	'IGCR',0
	.word	61391
	.byte	16,3,35,172,4,12
	.byte	'reserved_23C',0
	.word	3252
	.byte	4,3,35,188,4,12
	.byte	'DTSLIM',0
	.word	56244
	.byte	4,3,35,192,4,12
	.byte	'reserved_244',0
	.word	61400
	.byte	180,3,3,35,196,4,12
	.byte	'ACCEN1',0
	.word	55337
	.byte	4,3,35,248,7,12
	.byte	'ACCEN0',0
	.word	55273
	.byte	4,3,35,252,7,0,13
	.word	61411
	.byte	29
	.byte	'Ifx_SCU',0,7,210,18,3
	.word	63391
	.byte	4
	.byte	'unsigned int',0,4,7,9
	.byte	'_Ifx_CPU_A_Bits',0,20,45,16,4,10
	.byte	'ADDR',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_A_Bits',0,20,48,3
	.word	63429
	.byte	9
	.byte	'_Ifx_CPU_BIV_Bits',0,20,51,16,4,10
	.byte	'VSS',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'BIV',0,4
	.word	63413
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_BIV_Bits',0,20,55,3
	.word	63490
	.byte	9
	.byte	'_Ifx_CPU_BTV_Bits',0,20,58,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'BTV',0,4
	.word	63413
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_BTV_Bits',0,20,62,3
	.word	63569
	.byte	9
	.byte	'_Ifx_CPU_CCNT_Bits',0,20,65,16,4,10
	.byte	'CountValue',0,4
	.word	63413
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	63413
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_CCNT_Bits',0,20,69,3
	.word	63655
	.byte	9
	.byte	'_Ifx_CPU_CCTRL_Bits',0,20,72,16,4,10
	.byte	'CM',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'CE',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'M1',0,4
	.word	63413
	.byte	3,27,2,35,0,10
	.byte	'M2',0,4
	.word	63413
	.byte	3,24,2,35,0,10
	.byte	'M3',0,4
	.word	63413
	.byte	3,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	63413
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_CPU_CCTRL_Bits',0,20,80,3
	.word	63744
	.byte	9
	.byte	'_Ifx_CPU_COMPAT_Bits',0,20,83,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'RM',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'SP',0,4
	.word	63413
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	63413
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_COMPAT_Bits',0,20,89,3
	.word	63890
	.byte	9
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,20,92,16,4,10
	.byte	'CORE_ID',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	63413
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CORE_ID_Bits',0,20,96,3
	.word	64017
	.byte	9
	.byte	'_Ifx_CPU_CPR_L_Bits',0,20,99,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	63413
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_L_Bits',0,20,103,3
	.word	64115
	.byte	9
	.byte	'_Ifx_CPU_CPR_U_Bits',0,20,106,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	63413
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_U_Bits',0,20,110,3
	.word	64208
	.byte	9
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,20,113,16,4,10
	.byte	'MOD_REV',0,4
	.word	63413
	.byte	8,24,2,35,0,10
	.byte	'MOD_32B',0,4
	.word	63413
	.byte	8,16,2,35,0,10
	.byte	'MOD',0,4
	.word	63413
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPU_ID_Bits',0,20,118,3
	.word	64301
	.byte	9
	.byte	'_Ifx_CPU_CPXE_Bits',0,20,121,16,4,10
	.byte	'XE',0,4
	.word	63413
	.byte	8,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	63413
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPXE_Bits',0,20,125,3
	.word	64409
	.byte	9
	.byte	'_Ifx_CPU_CREVT_Bits',0,20,128,1,16,4,10
	.byte	'EVTA',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	63413
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	63413
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	63413
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	63413
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_CREVT_Bits',0,20,136,1,3
	.word	64496
	.byte	9
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,20,139,1,16,4,10
	.byte	'CID',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	63413
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CUS_ID_Bits',0,20,143,1,3
	.word	64650
	.byte	9
	.byte	'_Ifx_CPU_D_Bits',0,20,146,1,16,4,10
	.byte	'DATA',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_D_Bits',0,20,149,1,3
	.word	64744
	.byte	9
	.byte	'_Ifx_CPU_DATR_Bits',0,20,152,1,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'SBE',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'reserved_4',0,4
	.word	63413
	.byte	5,23,2,35,0,10
	.byte	'CWE',0,4
	.word	63413
	.byte	1,22,2,35,0,10
	.byte	'CFE',0,4
	.word	63413
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	63413
	.byte	3,18,2,35,0,10
	.byte	'SOE',0,4
	.word	63413
	.byte	1,17,2,35,0,10
	.byte	'SME',0,4
	.word	63413
	.byte	1,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	63413
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DATR_Bits',0,20,163,1,3
	.word	64807
	.byte	9
	.byte	'_Ifx_CPU_DBGSR_Bits',0,20,166,1,16,4,10
	.byte	'DE',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'HALT',0,4
	.word	63413
	.byte	2,29,2,35,0,10
	.byte	'SIH',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'SUSP',0,4
	.word	63413
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	63413
	.byte	1,26,2,35,0,10
	.byte	'PREVSUSP',0,4
	.word	63413
	.byte	1,25,2,35,0,10
	.byte	'PEVT',0,4
	.word	63413
	.byte	1,24,2,35,0,10
	.byte	'EVTSRC',0,4
	.word	63413
	.byte	5,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	63413
	.byte	19,0,2,35,0,0,29
	.byte	'Ifx_CPU_DBGSR_Bits',0,20,177,1,3
	.word	65025
	.byte	9
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,20,180,1,16,4,10
	.byte	'DTA',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	63413
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_DBGTCR_Bits',0,20,184,1,3
	.word	65240
	.byte	9
	.byte	'_Ifx_CPU_DCON0_Bits',0,20,187,1,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'DCBYP',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	63413
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_CPU_DCON0_Bits',0,20,192,1,3
	.word	65334
	.byte	9
	.byte	'_Ifx_CPU_DCON2_Bits',0,20,195,1,16,4,10
	.byte	'DCACHE_SZE',0,4
	.word	63413
	.byte	16,16,2,35,0,10
	.byte	'DSCRATCH_SZE',0,4
	.word	63413
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DCON2_Bits',0,20,199,1,3
	.word	65450
	.byte	9
	.byte	'_Ifx_CPU_DCX_Bits',0,20,202,1,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	6,26,2,35,0,10
	.byte	'DCXValue',0,4
	.word	63413
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_CPU_DCX_Bits',0,20,206,1,3
	.word	65551
	.byte	9
	.byte	'_Ifx_CPU_DEADD_Bits',0,20,209,1,16,4,10
	.byte	'ERROR_ADDRESS',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_DEADD_Bits',0,20,212,1,3
	.word	65644
	.byte	9
	.byte	'_Ifx_CPU_DIEAR_Bits',0,20,215,1,16,4,10
	.byte	'TA',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_DIEAR_Bits',0,20,218,1,3
	.word	65724
	.byte	9
	.byte	'_Ifx_CPU_DIETR_Bits',0,20,221,1,16,4,10
	.byte	'IED',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	63413
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	63413
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	63413
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	63413
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	63413
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	63413
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	63413
	.byte	18,0,2,35,0,0,29
	.byte	'Ifx_CPU_DIETR_Bits',0,20,233,1,3
	.word	65793
	.byte	9
	.byte	'_Ifx_CPU_DMS_Bits',0,20,236,1,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'DMSValue',0,4
	.word	63413
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_DMS_Bits',0,20,240,1,3
	.word	66022
	.byte	9
	.byte	'_Ifx_CPU_DPR_L_Bits',0,20,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	63413
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_L_Bits',0,20,247,1,3
	.word	66115
	.byte	9
	.byte	'_Ifx_CPU_DPR_U_Bits',0,20,250,1,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	63413
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_U_Bits',0,20,254,1,3
	.word	66210
	.byte	9
	.byte	'_Ifx_CPU_DPRE_Bits',0,20,129,2,16,4,10
	.byte	'RE',0,4
	.word	63413
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	63413
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPRE_Bits',0,20,133,2,3
	.word	66305
	.byte	9
	.byte	'_Ifx_CPU_DPWE_Bits',0,20,136,2,16,4,10
	.byte	'WE',0,4
	.word	63413
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	63413
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPWE_Bits',0,20,140,2,3
	.word	66395
	.byte	9
	.byte	'_Ifx_CPU_DSTR_Bits',0,20,143,2,16,4,10
	.byte	'SRE',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'GAE',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'LBE',0,4
	.word	63413
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	63413
	.byte	3,26,2,35,0,10
	.byte	'CRE',0,4
	.word	63413
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	63413
	.byte	7,18,2,35,0,10
	.byte	'DTME',0,4
	.word	63413
	.byte	1,17,2,35,0,10
	.byte	'LOE',0,4
	.word	63413
	.byte	1,16,2,35,0,10
	.byte	'SDE',0,4
	.word	63413
	.byte	1,15,2,35,0,10
	.byte	'SCE',0,4
	.word	63413
	.byte	1,14,2,35,0,10
	.byte	'CAC',0,4
	.word	63413
	.byte	1,13,2,35,0,10
	.byte	'MPE',0,4
	.word	63413
	.byte	1,12,2,35,0,10
	.byte	'CLE',0,4
	.word	63413
	.byte	1,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	63413
	.byte	3,8,2,35,0,10
	.byte	'ALN',0,4
	.word	63413
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	63413
	.byte	7,0,2,35,0,0,29
	.byte	'Ifx_CPU_DSTR_Bits',0,20,161,2,3
	.word	66485
	.byte	9
	.byte	'_Ifx_CPU_EXEVT_Bits',0,20,164,2,16,4,10
	.byte	'EVTA',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	63413
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	63413
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	63413
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	63413
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_EXEVT_Bits',0,20,172,2,3
	.word	66809
	.byte	9
	.byte	'_Ifx_CPU_FCX_Bits',0,20,175,2,16,4,10
	.byte	'FCXO',0,4
	.word	63413
	.byte	16,16,2,35,0,10
	.byte	'FCXS',0,4
	.word	63413
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	63413
	.byte	12,0,2,35,0,0,29
	.byte	'Ifx_CPU_FCX_Bits',0,20,180,2,3
	.word	66963
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,20,183,2,16,4,10
	.byte	'TST',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'TCL',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	63413
	.byte	6,24,2,35,0,10
	.byte	'RM',0,4
	.word	63413
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	63413
	.byte	8,14,2,35,0,10
	.byte	'FXE',0,4
	.word	63413
	.byte	1,13,2,35,0,10
	.byte	'FUE',0,4
	.word	63413
	.byte	1,12,2,35,0,10
	.byte	'FZE',0,4
	.word	63413
	.byte	1,11,2,35,0,10
	.byte	'FVE',0,4
	.word	63413
	.byte	1,10,2,35,0,10
	.byte	'FIE',0,4
	.word	63413
	.byte	1,9,2,35,0,10
	.byte	'reserved_23',0,4
	.word	63413
	.byte	3,6,2,35,0,10
	.byte	'FX',0,4
	.word	63413
	.byte	1,5,2,35,0,10
	.byte	'FU',0,4
	.word	63413
	.byte	1,4,2,35,0,10
	.byte	'FZ',0,4
	.word	63413
	.byte	1,3,2,35,0,10
	.byte	'FV',0,4
	.word	63413
	.byte	1,2,2,35,0,10
	.byte	'FI',0,4
	.word	63413
	.byte	1,1,2,35,0,10
	.byte	'reserved_31',0,4
	.word	63413
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,20,202,2,3
	.word	67069
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,20,205,2,16,4,10
	.byte	'OPC',0,4
	.word	63413
	.byte	8,24,2,35,0,10
	.byte	'FMT',0,4
	.word	63413
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	63413
	.byte	7,16,2,35,0,10
	.byte	'DREG',0,4
	.word	63413
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	63413
	.byte	12,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,20,212,2,3
	.word	67418
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,20,215,2,16,4,10
	.byte	'PC',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,20,218,2,3
	.word	67578
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,20,221,2,16,4,10
	.byte	'SRC1',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,20,224,2,3
	.word	67659
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,20,227,2,16,4,10
	.byte	'SRC2',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,20,230,2,3
	.word	67746
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,20,233,2,16,4,10
	.byte	'SRC3',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,20,236,2,3
	.word	67833
	.byte	9
	.byte	'_Ifx_CPU_ICNT_Bits',0,20,239,2,16,4,10
	.byte	'CountValue',0,4
	.word	63413
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	63413
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_ICNT_Bits',0,20,243,2,3
	.word	67920
	.byte	9
	.byte	'_Ifx_CPU_ICR_Bits',0,20,246,2,16,4,10
	.byte	'CCPN',0,4
	.word	63413
	.byte	10,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	63413
	.byte	5,17,2,35,0,10
	.byte	'IE',0,4
	.word	63413
	.byte	1,16,2,35,0,10
	.byte	'PIPN',0,4
	.word	63413
	.byte	10,6,2,35,0,10
	.byte	'reserved_26',0,4
	.word	63413
	.byte	6,0,2,35,0,0,29
	.byte	'Ifx_CPU_ICR_Bits',0,20,253,2,3
	.word	68011
	.byte	9
	.byte	'_Ifx_CPU_ISP_Bits',0,20,128,3,16,4,10
	.byte	'ISP',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_ISP_Bits',0,20,131,3,3
	.word	68154
	.byte	9
	.byte	'_Ifx_CPU_LCX_Bits',0,20,134,3,16,4,10
	.byte	'LCXO',0,4
	.word	63413
	.byte	16,16,2,35,0,10
	.byte	'LCXS',0,4
	.word	63413
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	63413
	.byte	12,0,2,35,0,0,29
	.byte	'Ifx_CPU_LCX_Bits',0,20,139,3,3
	.word	68220
	.byte	9
	.byte	'_Ifx_CPU_M1CNT_Bits',0,20,142,3,16,4,10
	.byte	'CountValue',0,4
	.word	63413
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	63413
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_M1CNT_Bits',0,20,146,3,3
	.word	68326
	.byte	9
	.byte	'_Ifx_CPU_M2CNT_Bits',0,20,149,3,16,4,10
	.byte	'CountValue',0,4
	.word	63413
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	63413
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_M2CNT_Bits',0,20,153,3,3
	.word	68419
	.byte	9
	.byte	'_Ifx_CPU_M3CNT_Bits',0,20,156,3,16,4,10
	.byte	'CountValue',0,4
	.word	63413
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	63413
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_M3CNT_Bits',0,20,160,3,3
	.word	68512
	.byte	9
	.byte	'_Ifx_CPU_PC_Bits',0,20,163,3,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'PC',0,4
	.word	63413
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_PC_Bits',0,20,167,3,3
	.word	68605
	.byte	9
	.byte	'_Ifx_CPU_PCON0_Bits',0,20,170,3,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'PCBYP',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	63413
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCON0_Bits',0,20,175,3,3
	.word	68690
	.byte	9
	.byte	'_Ifx_CPU_PCON1_Bits',0,20,178,3,16,4,10
	.byte	'PCINV',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'PBINV',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	63413
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCON1_Bits',0,20,183,3,3
	.word	68806
	.byte	9
	.byte	'_Ifx_CPU_PCON2_Bits',0,20,186,3,16,4,10
	.byte	'PCACHE_SZE',0,4
	.word	63413
	.byte	16,16,2,35,0,10
	.byte	'PSCRATCH_SZE',0,4
	.word	63413
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCON2_Bits',0,20,190,3,3
	.word	68917
	.byte	9
	.byte	'_Ifx_CPU_PCXI_Bits',0,20,193,3,16,4,10
	.byte	'PCXO',0,4
	.word	63413
	.byte	16,16,2,35,0,10
	.byte	'PCXS',0,4
	.word	63413
	.byte	4,12,2,35,0,10
	.byte	'UL',0,4
	.word	63413
	.byte	1,11,2,35,0,10
	.byte	'PIE',0,4
	.word	63413
	.byte	1,10,2,35,0,10
	.byte	'PCPN',0,4
	.word	63413
	.byte	10,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCXI_Bits',0,20,200,3,3
	.word	69018
	.byte	9
	.byte	'_Ifx_CPU_PIEAR_Bits',0,20,203,3,16,4,10
	.byte	'TA',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_PIEAR_Bits',0,20,206,3,3
	.word	69148
	.byte	9
	.byte	'_Ifx_CPU_PIETR_Bits',0,20,209,3,16,4,10
	.byte	'IED',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	63413
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	63413
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	63413
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	63413
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	63413
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	63413
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	63413
	.byte	18,0,2,35,0,0,29
	.byte	'Ifx_CPU_PIETR_Bits',0,20,221,3,3
	.word	69217
	.byte	9
	.byte	'_Ifx_CPU_PMA0_Bits',0,20,224,3,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	13,19,2,35,0,10
	.byte	'DAC',0,4
	.word	63413
	.byte	3,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	63413
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PMA0_Bits',0,20,229,3,3
	.word	69446
	.byte	9
	.byte	'_Ifx_CPU_PMA1_Bits',0,20,232,3,16,4,10
	.byte	'reserved_0',0,4
	.word	63413
	.byte	14,18,2,35,0,10
	.byte	'CAC',0,4
	.word	63413
	.byte	2,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	63413
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PMA1_Bits',0,20,237,3,3
	.word	69559
	.byte	9
	.byte	'_Ifx_CPU_PMA2_Bits',0,20,240,3,16,4,10
	.byte	'PSI',0,4
	.word	63413
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	63413
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PMA2_Bits',0,20,244,3,3
	.word	69672
	.byte	9
	.byte	'_Ifx_CPU_PSTR_Bits',0,20,247,3,16,4,10
	.byte	'FRE',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'FBE',0,4
	.word	63413
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	63413
	.byte	9,20,2,35,0,10
	.byte	'FPE',0,4
	.word	63413
	.byte	1,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	63413
	.byte	1,18,2,35,0,10
	.byte	'FME',0,4
	.word	63413
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	63413
	.byte	17,0,2,35,0,0,29
	.byte	'Ifx_CPU_PSTR_Bits',0,20,129,4,3
	.word	69763
	.byte	9
	.byte	'_Ifx_CPU_PSW_Bits',0,20,132,4,16,4,10
	.byte	'CDC',0,4
	.word	63413
	.byte	7,25,2,35,0,10
	.byte	'CDE',0,4
	.word	63413
	.byte	1,24,2,35,0,10
	.byte	'GW',0,4
	.word	63413
	.byte	1,23,2,35,0,10
	.byte	'IS',0,4
	.word	63413
	.byte	1,22,2,35,0,10
	.byte	'IO',0,4
	.word	63413
	.byte	2,20,2,35,0,10
	.byte	'PRS',0,4
	.word	63413
	.byte	2,18,2,35,0,10
	.byte	'S',0,4
	.word	63413
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	63413
	.byte	12,5,2,35,0,10
	.byte	'SAV',0,4
	.word	63413
	.byte	1,4,2,35,0,10
	.byte	'AV',0,4
	.word	63413
	.byte	1,3,2,35,0,10
	.byte	'SV',0,4
	.word	63413
	.byte	1,2,2,35,0,10
	.byte	'V',0,4
	.word	63413
	.byte	1,1,2,35,0,10
	.byte	'C',0,4
	.word	63413
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_PSW_Bits',0,20,147,4,3
	.word	69966
	.byte	9
	.byte	'_Ifx_CPU_SEGEN_Bits',0,20,150,4,16,4,10
	.byte	'ADFLIP',0,4
	.word	63413
	.byte	8,24,2,35,0,10
	.byte	'ADTYPE',0,4
	.word	63413
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	63413
	.byte	21,1,2,35,0,10
	.byte	'AE',0,4
	.word	63413
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_SEGEN_Bits',0,20,156,4,3
	.word	70209
	.byte	9
	.byte	'_Ifx_CPU_SMACON_Bits',0,20,159,4,16,4,10
	.byte	'PC',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'PT',0,4
	.word	63413
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	63413
	.byte	5,24,2,35,0,10
	.byte	'DC',0,4
	.word	63413
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	63413
	.byte	1,22,2,35,0,10
	.byte	'DT',0,4
	.word	63413
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	63413
	.byte	13,8,2,35,0,10
	.byte	'IODT',0,4
	.word	63413
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	63413
	.byte	7,0,2,35,0,0,29
	.byte	'Ifx_CPU_SMACON_Bits',0,20,171,4,3
	.word	70337
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,20,174,4,16,4,10
	.byte	'EN',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,20,177,4,3
	.word	70578
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,20,180,4,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,20,183,4,3
	.word	70661
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,20,186,4,16,4,10
	.byte	'EN',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,20,189,4,3
	.word	70752
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,20,192,4,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,20,195,4,3
	.word	70843
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,20,198,4,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	296
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,20,202,4,3
	.word	70942
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,20,205,4,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	296
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,20,209,4,3
	.word	71049
	.byte	9
	.byte	'_Ifx_CPU_SWEVT_Bits',0,20,212,4,16,4,10
	.byte	'EVTA',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	63413
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	63413
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	63413
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	63413
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_SWEVT_Bits',0,20,220,4,3
	.word	71156
	.byte	9
	.byte	'_Ifx_CPU_SYSCON_Bits',0,20,223,4,16,4,10
	.byte	'FCDSF',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'PROTEN',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'TPROTEN',0,4
	.word	63413
	.byte	1,29,2,35,0,10
	.byte	'IS',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'IT',0,4
	.word	63413
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	63413
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_SYSCON_Bits',0,20,231,4,3
	.word	71310
	.byte	9
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,20,234,4,16,4,10
	.byte	'ASI',0,4
	.word	63413
	.byte	5,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	63413
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,20,238,4,3
	.word	71471
	.byte	9
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,20,241,4,16,4,10
	.byte	'TEXP0',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'TEXP1',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'TEXP2',0,4
	.word	63413
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	63413
	.byte	13,16,2,35,0,10
	.byte	'TTRAP',0,4
	.word	63413
	.byte	1,15,2,35,0,10
	.byte	'reserved_17',0,4
	.word	63413
	.byte	15,0,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_CON_Bits',0,20,249,4,3
	.word	71569
	.byte	9
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,20,252,4,16,4,10
	.byte	'Timer',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,20,255,4,3
	.word	71741
	.byte	9
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,20,130,5,16,4,10
	.byte	'ADDR',0,4
	.word	63413
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_TR_ADR_Bits',0,20,133,5,3
	.word	71821
	.byte	9
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,20,136,5,16,4,10
	.byte	'EVTA',0,4
	.word	63413
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	63413
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	63413
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	63413
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	63413
	.byte	4,20,2,35,0,10
	.byte	'TYP',0,4
	.word	63413
	.byte	1,19,2,35,0,10
	.byte	'RNG',0,4
	.word	63413
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	63413
	.byte	1,17,2,35,0,10
	.byte	'ASI_EN',0,4
	.word	63413
	.byte	1,16,2,35,0,10
	.byte	'ASI',0,4
	.word	63413
	.byte	5,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	63413
	.byte	6,5,2,35,0,10
	.byte	'AST',0,4
	.word	63413
	.byte	1,4,2,35,0,10
	.byte	'ALD',0,4
	.word	63413
	.byte	1,3,2,35,0,10
	.byte	'reserved_29',0,4
	.word	63413
	.byte	3,0,2,35,0,0,29
	.byte	'Ifx_CPU_TR_EVT_Bits',0,20,153,5,3
	.word	71894
	.byte	9
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,20,156,5,16,4,10
	.byte	'T0',0,4
	.word	63413
	.byte	1,31,2,35,0,10
	.byte	'T1',0,4
	.word	63413
	.byte	1,30,2,35,0,10
	.byte	'T2',0,4
	.word	63413
	.byte	1,29,2,35,0,10
	.byte	'T3',0,4
	.word	63413
	.byte	1,28,2,35,0,10
	.byte	'T4',0,4
	.word	63413
	.byte	1,27,2,35,0,10
	.byte	'T5',0,4
	.word	63413
	.byte	1,26,2,35,0,10
	.byte	'T6',0,4
	.word	63413
	.byte	1,25,2,35,0,10
	.byte	'T7',0,4
	.word	63413
	.byte	1,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	63413
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,20,167,5,3
	.word	72212
	.byte	11,20,175,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63429
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_A',0,20,183,5,3
	.word	72407
	.byte	11,20,186,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63490
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_BIV',0,20,194,5,3
	.word	72466
	.byte	11,20,197,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63569
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_BTV',0,20,205,5,3
	.word	72527
	.byte	11,20,208,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63655
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CCNT',0,20,216,5,3
	.word	72588
	.byte	11,20,219,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63744
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CCTRL',0,20,227,5,3
	.word	72650
	.byte	11,20,230,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63890
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_COMPAT',0,20,238,5,3
	.word	72713
	.byte	11,20,241,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64017
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CORE_ID',0,20,249,5,3
	.word	72777
	.byte	11,20,252,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64115
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_L',0,20,132,6,3
	.word	72842
	.byte	11,20,135,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64208
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_U',0,20,143,6,3
	.word	72905
	.byte	11,20,146,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64301
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPU_ID',0,20,154,6,3
	.word	72968
	.byte	11,20,157,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64409
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPXE',0,20,165,6,3
	.word	73032
	.byte	11,20,168,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64496
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CREVT',0,20,176,6,3
	.word	73094
	.byte	11,20,179,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64650
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CUS_ID',0,20,187,6,3
	.word	73157
	.byte	11,20,190,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64744
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_D',0,20,198,6,3
	.word	73221
	.byte	11,20,201,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64807
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DATR',0,20,209,6,3
	.word	73280
	.byte	11,20,212,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65025
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DBGSR',0,20,220,6,3
	.word	73342
	.byte	11,20,223,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65240
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DBGTCR',0,20,231,6,3
	.word	73405
	.byte	11,20,234,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65334
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DCON0',0,20,242,6,3
	.word	73469
	.byte	11,20,245,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65450
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DCON2',0,20,253,6,3
	.word	73532
	.byte	11,20,128,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65551
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DCX',0,20,136,7,3
	.word	73595
	.byte	11,20,139,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65644
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DEADD',0,20,147,7,3
	.word	73656
	.byte	11,20,150,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65724
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DIEAR',0,20,158,7,3
	.word	73719
	.byte	11,20,161,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65793
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DIETR',0,20,169,7,3
	.word	73782
	.byte	11,20,172,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66022
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DMS',0,20,180,7,3
	.word	73845
	.byte	11,20,183,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66115
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_L',0,20,191,7,3
	.word	73906
	.byte	11,20,194,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66210
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_U',0,20,202,7,3
	.word	73969
	.byte	11,20,205,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66305
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPRE',0,20,213,7,3
	.word	74032
	.byte	11,20,216,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66395
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPWE',0,20,224,7,3
	.word	74094
	.byte	11,20,227,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66485
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DSTR',0,20,235,7,3
	.word	74156
	.byte	11,20,238,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66809
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_EXEVT',0,20,246,7,3
	.word	74218
	.byte	11,20,249,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66963
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FCX',0,20,129,8,3
	.word	74281
	.byte	11,20,132,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67069
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,20,140,8,3
	.word	74342
	.byte	11,20,143,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67418
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,20,151,8,3
	.word	74412
	.byte	11,20,154,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67578
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,20,162,8,3
	.word	74482
	.byte	11,20,165,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67659
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,20,173,8,3
	.word	74551
	.byte	11,20,176,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67746
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,20,184,8,3
	.word	74622
	.byte	11,20,187,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67833
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,20,195,8,3
	.word	74693
	.byte	11,20,198,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67920
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_ICNT',0,20,206,8,3
	.word	74764
	.byte	11,20,209,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68011
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_ICR',0,20,217,8,3
	.word	74826
	.byte	11,20,220,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68154
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_ISP',0,20,228,8,3
	.word	74887
	.byte	11,20,231,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68220
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_LCX',0,20,239,8,3
	.word	74948
	.byte	11,20,242,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68326
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_M1CNT',0,20,250,8,3
	.word	75009
	.byte	11,20,253,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68419
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_M2CNT',0,20,133,9,3
	.word	75072
	.byte	11,20,136,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68512
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_M3CNT',0,20,144,9,3
	.word	75135
	.byte	11,20,147,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68605
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PC',0,20,155,9,3
	.word	75198
	.byte	11,20,158,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68690
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCON0',0,20,166,9,3
	.word	75258
	.byte	11,20,169,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68806
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCON1',0,20,177,9,3
	.word	75321
	.byte	11,20,180,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68917
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCON2',0,20,188,9,3
	.word	75384
	.byte	11,20,191,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69018
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCXI',0,20,199,9,3
	.word	75447
	.byte	11,20,202,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69148
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PIEAR',0,20,210,9,3
	.word	75509
	.byte	11,20,213,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69217
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PIETR',0,20,221,9,3
	.word	75572
	.byte	11,20,224,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69446
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PMA0',0,20,232,9,3
	.word	75635
	.byte	11,20,235,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69559
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PMA1',0,20,243,9,3
	.word	75697
	.byte	11,20,246,9,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69672
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PMA2',0,20,254,9,3
	.word	75759
	.byte	11,20,129,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69763
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PSTR',0,20,137,10,3
	.word	75821
	.byte	11,20,140,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69966
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PSW',0,20,148,10,3
	.word	75883
	.byte	11,20,151,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70209
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SEGEN',0,20,159,10,3
	.word	75944
	.byte	11,20,162,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70337
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SMACON',0,20,170,10,3
	.word	76007
	.byte	11,20,173,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70578
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENA',0,20,181,10,3
	.word	76071
	.byte	11,20,184,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70661
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENB',0,20,192,10,3
	.word	76141
	.byte	11,20,195,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70752
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,20,203,10,3
	.word	76211
	.byte	11,20,206,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70843
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,20,214,10,3
	.word	76285
	.byte	11,20,217,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70942
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,20,225,10,3
	.word	76359
	.byte	11,20,228,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71049
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,20,236,10,3
	.word	76429
	.byte	11,20,239,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71156
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SWEVT',0,20,247,10,3
	.word	76499
	.byte	11,20,250,10,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71310
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SYSCON',0,20,130,11,3
	.word	76562
	.byte	11,20,133,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71471
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TASK_ASI',0,20,141,11,3
	.word	76626
	.byte	11,20,144,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71569
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_CON',0,20,152,11,3
	.word	76692
	.byte	11,20,155,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71741
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_TIMER',0,20,163,11,3
	.word	76757
	.byte	11,20,166,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71821
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TR_ADR',0,20,174,11,3
	.word	76824
	.byte	11,20,177,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71894
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TR_EVT',0,20,185,11,3
	.word	76888
	.byte	11,20,188,11,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72212
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TRIG_ACC',0,20,196,11,3
	.word	76952
	.byte	9
	.byte	'_Ifx_CPU_CPR',0,20,207,11,25,8,12
	.byte	'L',0
	.word	72842
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	72905
	.byte	4,2,35,4,0,13
	.word	77018
	.byte	29
	.byte	'Ifx_CPU_CPR',0,20,211,11,3
	.word	77060
	.byte	9
	.byte	'_Ifx_CPU_DPR',0,20,214,11,25,8,12
	.byte	'L',0
	.word	73906
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	73969
	.byte	4,2,35,4,0,13
	.word	77086
	.byte	29
	.byte	'Ifx_CPU_DPR',0,20,218,11,3
	.word	77128
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN',0,20,221,11,25,16,12
	.byte	'LA',0
	.word	76359
	.byte	4,2,35,0,12
	.byte	'UA',0
	.word	76429
	.byte	4,2,35,4,12
	.byte	'ACCENA',0
	.word	76211
	.byte	4,2,35,8,12
	.byte	'ACCENB',0
	.word	76285
	.byte	4,2,35,12,0,13
	.word	77154
	.byte	29
	.byte	'Ifx_CPU_SPROT_RGN',0,20,227,11,3
	.word	77236
	.byte	17,12
	.word	76757
	.byte	18,2,0,9
	.byte	'_Ifx_CPU_TPS',0,20,230,11,25,16,12
	.byte	'CON',0
	.word	76692
	.byte	4,2,35,0,12
	.byte	'TIMER',0
	.word	77268
	.byte	12,2,35,4,0,13
	.word	77277
	.byte	29
	.byte	'Ifx_CPU_TPS',0,20,234,11,3
	.word	77325
	.byte	9
	.byte	'_Ifx_CPU_TR',0,20,237,11,25,8,12
	.byte	'EVT',0
	.word	76888
	.byte	4,2,35,0,12
	.byte	'ADR',0
	.word	76824
	.byte	4,2,35,4,0,13
	.word	77351
	.byte	29
	.byte	'Ifx_CPU_TR',0,20,241,11,3
	.word	77396
	.byte	29
	.byte	'IfxCpu_ResourceCpu',0,9,89,3
	.word	1840
	.byte	14,8,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,29
	.byte	'IfxCpu_CounterMode',0,8,122,3
	.word	77448
	.byte	28,8,132,1,9,6,12
	.byte	'counter',0
	.word	2017
	.byte	4,2,35,0,12
	.byte	'overlfow',0
	.word	319
	.byte	1,2,35,4,0,29
	.byte	'IfxCpu_Counter',0,8,136,1,3
	.word	77535
	.byte	28,8,144,1,9,32,12
	.byte	'instruction',0
	.word	77535
	.byte	6,2,35,0,12
	.byte	'clock',0
	.word	77535
	.byte	6,2,35,6,12
	.byte	'counter1',0
	.word	77535
	.byte	6,2,35,12,12
	.byte	'counter2',0
	.word	77535
	.byte	6,2,35,18,12
	.byte	'counter3',0
	.word	77535
	.byte	6,2,35,24,0,29
	.byte	'IfxCpu_Perf',0,8,151,1,3
	.word	77601
	.byte	9
	.byte	'_Ifx_STM_ACCEN0_Bits',0,21,45,16,4,10
	.byte	'EN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_STM_ACCEN0_Bits',0,21,79,3
	.word	77719
	.byte	9
	.byte	'_Ifx_STM_ACCEN1_Bits',0,21,82,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_ACCEN1_Bits',0,21,85,3
	.word	78276
	.byte	9
	.byte	'_Ifx_STM_CAP_Bits',0,21,88,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_CAP_Bits',0,21,91,3
	.word	78353
	.byte	9
	.byte	'_Ifx_STM_CAPSV_Bits',0,21,94,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_CAPSV_Bits',0,21,97,3
	.word	78425
	.byte	9
	.byte	'_Ifx_STM_CLC_Bits',0,21,100,16,4,10
	.byte	'DISR',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_STM_CLC_Bits',0,21,107,3
	.word	78501
	.byte	9
	.byte	'_Ifx_STM_CMCON_Bits',0,21,110,16,4,10
	.byte	'MSIZE0',0,1
	.word	319
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	319
	.byte	3,0,2,35,0,10
	.byte	'MSTART0',0,1
	.word	319
	.byte	5,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	319
	.byte	3,0,2,35,1,10
	.byte	'MSIZE1',0,1
	.word	319
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	319
	.byte	3,0,2,35,2,10
	.byte	'MSTART1',0,1
	.word	319
	.byte	5,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	319
	.byte	3,0,2,35,3,0,29
	.byte	'Ifx_STM_CMCON_Bits',0,21,120,3
	.word	78642
	.byte	9
	.byte	'_Ifx_STM_CMP_Bits',0,21,123,16,4,10
	.byte	'CMPVAL',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_CMP_Bits',0,21,126,3
	.word	78860
	.byte	9
	.byte	'_Ifx_STM_ICR_Bits',0,21,129,1,16,4,10
	.byte	'CMP0EN',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'CMP0IR',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'CMP0OS',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'CMP1EN',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'CMP1IR',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'CMP1OS',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,4
	.word	296
	.byte	25,0,2,35,0,0,29
	.byte	'Ifx_STM_ICR_Bits',0,21,139,1,3
	.word	78927
	.byte	9
	.byte	'_Ifx_STM_ID_Bits',0,21,142,1,16,4,10
	.byte	'MODREV',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_STM_ID_Bits',0,21,147,1,3
	.word	79130
	.byte	9
	.byte	'_Ifx_STM_ISCR_Bits',0,21,150,1,16,4,10
	.byte	'CMP0IRR',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'CMP0IRS',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'CMP1IRR',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'CMP1IRS',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_STM_ISCR_Bits',0,21,157,1,3
	.word	79237
	.byte	9
	.byte	'_Ifx_STM_KRST0_Bits',0,21,160,1,16,4,10
	.byte	'RST',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_STM_KRST0_Bits',0,21,165,1,3
	.word	79388
	.byte	9
	.byte	'_Ifx_STM_KRST1_Bits',0,21,168,1,16,4,10
	.byte	'RST',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	296
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_STM_KRST1_Bits',0,21,172,1,3
	.word	79499
	.byte	9
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,21,175,1,16,4,10
	.byte	'CLR',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	296
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_STM_KRSTCLR_Bits',0,21,179,1,3
	.word	79591
	.byte	9
	.byte	'_Ifx_STM_OCS_Bits',0,21,182,1,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	24,8,2,35,0,10
	.byte	'SUS',0,1
	.word	319
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	319
	.byte	2,0,2,35,3,0,29
	.byte	'Ifx_STM_OCS_Bits',0,21,189,1,3
	.word	79687
	.byte	9
	.byte	'_Ifx_STM_TIM0_Bits',0,21,192,1,16,4,10
	.byte	'STM31_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM0_Bits',0,21,195,1,3
	.word	79833
	.byte	9
	.byte	'_Ifx_STM_TIM0SV_Bits',0,21,198,1,16,4,10
	.byte	'STM31_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM0SV_Bits',0,21,201,1,3
	.word	79905
	.byte	9
	.byte	'_Ifx_STM_TIM1_Bits',0,21,204,1,16,4,10
	.byte	'STM35_4',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM1_Bits',0,21,207,1,3
	.word	79981
	.byte	9
	.byte	'_Ifx_STM_TIM2_Bits',0,21,210,1,16,4,10
	.byte	'STM39_8',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM2_Bits',0,21,213,1,3
	.word	80053
	.byte	9
	.byte	'_Ifx_STM_TIM3_Bits',0,21,216,1,16,4,10
	.byte	'STM43_12',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM3_Bits',0,21,219,1,3
	.word	80125
	.byte	9
	.byte	'_Ifx_STM_TIM4_Bits',0,21,222,1,16,4,10
	.byte	'STM47_16',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM4_Bits',0,21,225,1,3
	.word	80198
	.byte	9
	.byte	'_Ifx_STM_TIM5_Bits',0,21,228,1,16,4,10
	.byte	'STM51_20',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM5_Bits',0,21,231,1,3
	.word	80271
	.byte	9
	.byte	'_Ifx_STM_TIM6_Bits',0,21,234,1,16,4,10
	.byte	'STM63_32',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM6_Bits',0,21,237,1,3
	.word	80344
	.byte	11,21,245,1,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77719
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ACCEN0',0,21,253,1,3
	.word	80417
	.byte	11,21,128,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78276
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ACCEN1',0,21,136,2,3
	.word	80481
	.byte	11,21,139,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78353
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CAP',0,21,147,2,3
	.word	80545
	.byte	11,21,150,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78425
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CAPSV',0,21,158,2,3
	.word	80606
	.byte	11,21,161,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78501
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CLC',0,21,169,2,3
	.word	80669
	.byte	11,21,172,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78642
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CMCON',0,21,180,2,3
	.word	80730
	.byte	11,21,183,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78860
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CMP',0,21,191,2,3
	.word	80793
	.byte	11,21,194,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78927
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ICR',0,21,202,2,3
	.word	80854
	.byte	11,21,205,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79130
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ID',0,21,213,2,3
	.word	80915
	.byte	11,21,216,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79237
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ISCR',0,21,224,2,3
	.word	80975
	.byte	11,21,227,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79388
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_KRST0',0,21,235,2,3
	.word	81037
	.byte	11,21,238,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79499
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_KRST1',0,21,246,2,3
	.word	81100
	.byte	11,21,249,2,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79591
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_KRSTCLR',0,21,129,3,3
	.word	81163
	.byte	11,21,132,3,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79687
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_OCS',0,21,140,3,3
	.word	81228
	.byte	11,21,143,3,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79833
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM0',0,21,151,3,3
	.word	81289
	.byte	11,21,154,3,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79905
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM0SV',0,21,162,3,3
	.word	81351
	.byte	11,21,165,3,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79981
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM1',0,21,173,3,3
	.word	81415
	.byte	11,21,176,3,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80053
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM2',0,21,184,3,3
	.word	81477
	.byte	11,21,187,3,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80125
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM3',0,21,195,3,3
	.word	81539
	.byte	11,21,198,3,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80198
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM4',0,21,206,3,3
	.word	81601
	.byte	11,21,209,3,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80271
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM5',0,21,217,3,3
	.word	81663
	.byte	11,21,220,3,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80344
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM6',0,21,228,3,3
	.word	81725
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,22,45,16,4,10
	.byte	'EN0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,22,79,3
	.word	81787
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,22,82,16,4,10
	.byte	'reserved_0',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,22,85,3
	.word	82348
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,22,88,16,4,10
	.byte	'SEL',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	319
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	296
	.byte	22,0,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,22,95,3
	.word	82429
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,22,98,16,4,10
	.byte	'VLD0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'VLD1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'VLD2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'VLD3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'VLD4',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'VLD5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'VLD6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'VLD7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'VLD8',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'VLD9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	296
	.byte	22,0,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,22,111,3
	.word	82582
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,22,114,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	296
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	319
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,22,121,3
	.word	82830
	.byte	9
	.byte	'_Ifx_FLASH_COMM0_Bits',0,22,124,16,4,10
	.byte	'STATUS',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	296
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM0_Bits',0,22,128,1,3
	.word	82976
	.byte	9
	.byte	'_Ifx_FLASH_COMM1_Bits',0,22,131,1,16,4,10
	.byte	'STATUS',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_COMM1_Bits',0,22,136,1,3
	.word	83074
	.byte	9
	.byte	'_Ifx_FLASH_COMM2_Bits',0,22,139,1,16,4,10
	.byte	'STATUS',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_COMM2_Bits',0,22,144,1,3
	.word	83190
	.byte	9
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,22,147,1,16,4,10
	.byte	'RCODE',0,4
	.word	296
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	832
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ECCRD_Bits',0,22,153,1,3
	.word	83306
	.byte	9
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,22,156,1,16,4,10
	.byte	'RCODE',0,4
	.word	296
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	832
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ECCRP_Bits',0,22,162,1,3
	.word	83446
	.byte	9
	.byte	'_Ifx_FLASH_ECCW_Bits',0,22,165,1,16,4,10
	.byte	'WCODE',0,4
	.word	296
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	832
	.byte	8,2,2,35,2,10
	.byte	'DECENCDIS',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'PECENCDIS',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ECCW_Bits',0,22,171,1,3
	.word	83586
	.byte	9
	.byte	'_Ifx_FLASH_FCON_Bits',0,22,174,1,16,4,10
	.byte	'WSPFLASH',0,1
	.word	319
	.byte	4,4,2,35,0,10
	.byte	'WSECPF',0,1
	.word	319
	.byte	2,2,2,35,0,10
	.byte	'WSDFLASH',0,2
	.word	832
	.byte	6,4,2,35,0,10
	.byte	'WSECDF',0,1
	.word	319
	.byte	3,1,2,35,1,10
	.byte	'IDLE',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'ESLDIS',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'SLEEP',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'NSAFECC',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'STALL',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'RES21',0,1
	.word	319
	.byte	2,2,2,35,2,10
	.byte	'RES23',0,1
	.word	319
	.byte	2,0,2,35,2,10
	.byte	'VOPERM',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'PROERM',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	319
	.byte	3,2,2,35,3,10
	.byte	'PR5V',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_FCON_Bits',0,22,193,1,3
	.word	83725
	.byte	9
	.byte	'_Ifx_FLASH_FPRO_Bits',0,22,196,1,16,4,10
	.byte	'PROINP',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'PRODISP',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'PROIND',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'PRODISD',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'PROINHSMCOTP',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'PROINOTP',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'RES7',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'PROINDBG',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'PRODISDBG',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'PROINHSM',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	319
	.byte	5,0,2,35,1,10
	.byte	'DCFP',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'DDFP',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'DDFPX',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'DDFD',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'ENPE',0,1
	.word	319
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	319
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_FLASH_FPRO_Bits',0,22,218,1,3
	.word	84087
	.byte	9
	.byte	'_Ifx_FLASH_FSR_Bits',0,22,221,1,16,4,10
	.byte	'FABUSY',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'D0BUSY',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'D1BUSY',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'P0BUSY',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'P1BUSY',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'RES6',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'PROG',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'PFPAGE',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'PROER',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'PFSBER',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'PFDBER',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'PFMBER',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'RES17',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'DFSBER',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'DFDBER',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'DFTBER',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'DFMBER',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'SRIADDERR',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	832
	.byte	2,7,2,35,2,10
	.byte	'PVER',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'SLM',0,1
	.word	319
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	319
	.byte	1,2,2,35,3,10
	.byte	'ORIER',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_FSR_Bits',0,22,254,1,3
	.word	84528
	.byte	9
	.byte	'_Ifx_FLASH_HSMFCON_Bits',0,22,129,2,16,4,10
	.byte	'LCKHSMUCB',0,1
	.word	319
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	296
	.byte	22,8,2,35,0,10
	.byte	'VOPERM',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	319
	.byte	5,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_HSMFCON_Bits',0,22,137,2,3
	.word	85136
	.byte	9
	.byte	'_Ifx_FLASH_HSMFSR_Bits',0,22,140,2,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	2,6,2,35,0,10
	.byte	'D1BUSY',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	319
	.byte	4,1,2,35,0,10
	.byte	'PROG',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	296
	.byte	12,7,2,35,0,10
	.byte	'PVER',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	319
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	319
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_FLASH_HSMFSR_Bits',0,22,156,2,3
	.word	85316
	.byte	9
	.byte	'_Ifx_FLASH_HSMMARD_Bits',0,22,159,2,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'SELD1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,4
	.word	296
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMMARD_Bits',0,22,167,2,3
	.word	85638
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRAD_Bits',0,22,170,2,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	296
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRAD_Bits',0,22,174,2,3
	.word	85819
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRCT_Bits',0,22,177,2,16,4,10
	.byte	'STRT',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	319
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	319
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_HSMRRCT_Bits',0,22,188,2,3
	.word	85919
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD0_Bits',0,22,191,2,16,4,10
	.byte	'DATA',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRD0_Bits',0,22,194,2,3
	.word	86135
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD1_Bits',0,22,197,2,16,4,10
	.byte	'DATA',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRD1_Bits',0,22,200,2,3
	.word	86214
	.byte	9
	.byte	'_Ifx_FLASH_ID_Bits',0,22,203,2,16,4,10
	.byte	'MOD_REV',0,1
	.word	319
	.byte	8,0,2,35,0,10
	.byte	'MOD_TYPE',0,1
	.word	319
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_ID_Bits',0,22,208,2,3
	.word	86293
	.byte	9
	.byte	'_Ifx_FLASH_MARD_Bits',0,22,211,2,16,4,10
	.byte	'HMARGIN',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'SELD0',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,2
	.word	832
	.byte	10,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_MARD_Bits',0,22,221,2,3
	.word	86406
	.byte	9
	.byte	'_Ifx_FLASH_MARP_Bits',0,22,224,2,16,4,10
	.byte	'SELP0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'SELP1',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'RES2',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'RES3',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	832
	.byte	11,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_MARP_Bits',0,22,233,2,3
	.word	86620
	.byte	9
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,22,236,2,16,4,10
	.byte	'L',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'NSAFECC',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'RAMIN',0,1
	.word	319
	.byte	2,4,2,35,0,10
	.byte	'RAMINSEL',0,1
	.word	319
	.byte	4,0,2,35,0,10
	.byte	'OSCCFG',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'MODE',0,1
	.word	319
	.byte	2,5,2,35,1,10
	.byte	'APREN',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'CAP0EN',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'CAP1EN',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'CAP2EN',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'CAP3EN',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'ESR0CNT',0,2
	.word	832
	.byte	12,4,2,35,2,10
	.byte	'RES29',0,1
	.word	319
	.byte	2,2,2,35,3,10
	.byte	'RES30',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCOND_Bits',0,22,253,2,3
	.word	86807
	.byte	9
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,22,128,3,16,4,10
	.byte	'OCDSDIS',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'EDM',0,1
	.word	319
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	296
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,22,134,3,3
	.word	87131
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,22,137,3,16,4,10
	.byte	'HSMDBGDIS',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'TSTIFLCK',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'HSMTSTDIS',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'RES15',0,2
	.word	832
	.byte	12,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,22,145,3,3
	.word	87274
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,22,148,3,16,4,10
	.byte	'HSMBOOTEN',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'SSWWAIT',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'HSMDX',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'HSM6X',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'HSM16X',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'HSM17X',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'HSMENPINS',0,2
	.word	832
	.byte	2,7,2,35,0,10
	.byte	'HSMENRES',0,1
	.word	319
	.byte	2,5,2,35,1,10
	.byte	'DESTDBG',0,1
	.word	319
	.byte	2,3,2,35,1,10
	.byte	'BLKFLAN',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	319
	.byte	2,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	832
	.byte	14,0,2,35,2,0,29
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,22,165,3,3
	.word	87463
	.byte	9
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,22,168,3,16,4,10
	.byte	'S0ROM',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'S1ROM',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'S2ROM',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'S3ROM',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'S4ROM',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'S5ROM',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'S7ROM',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'S8ROM',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'S9ROM',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'S10ROM',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'S11ROM',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'S12ROM',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'S13ROM',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'S14ROM',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'S15ROM',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'S18ROM',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'S19ROM',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'S20ROM',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'S21ROM',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'S22ROM',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'S23ROM',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'S24ROM',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'S25ROM',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'S26ROM',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	319
	.byte	2,3,2,35,3,10
	.byte	'BML',0,1
	.word	319
	.byte	2,1,2,35,3,10
	.byte	'TP',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,22,200,3,3
	.word	87826
	.byte	9
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,22,203,3,16,4,10
	.byte	'S0L',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'S1L',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'S2L',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'S3L',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'S4L',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'S5L',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'S6L',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'S7L',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'S8L',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'S9L',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'S10L',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'S11L',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'S12L',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'S13L',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'S14L',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'S15L',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'S16L',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'S17L',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'S18L',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'S19L',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'S20L',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'S21L',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'S22L',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'S23L',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'S24L',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'S25L',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'S26L',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	319
	.byte	4,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCONP_Bits',0,22,234,3,3
	.word	88421
	.byte	9
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,22,237,3,16,4,10
	.byte	'S0WOP',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'S1WOP',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'S2WOP',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'S3WOP',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'S4WOP',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'S5WOP',0,1
	.word	319
	.byte	1,2,2,35,0,10
	.byte	'S6WOP',0,1
	.word	319
	.byte	1,1,2,35,0,10
	.byte	'S7WOP',0,1
	.word	319
	.byte	1,0,2,35,0,10
	.byte	'S8WOP',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'S9WOP',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'S10WOP',0,1
	.word	319
	.byte	1,5,2,35,1,10
	.byte	'S11WOP',0,1
	.word	319
	.byte	1,4,2,35,1,10
	.byte	'S12WOP',0,1
	.word	319
	.byte	1,3,2,35,1,10
	.byte	'S13WOP',0,1
	.word	319
	.byte	1,2,2,35,1,10
	.byte	'S14WOP',0,1
	.word	319
	.byte	1,1,2,35,1,10
	.byte	'S15WOP',0,1
	.word	319
	.byte	1,0,2,35,1,10
	.byte	'S16WOP',0,1
	.word	319
	.byte	1,7,2,35,2,10
	.byte	'S17WOP',0,1
	.word	319
	.byte	1,6,2,35,2,10
	.byte	'S18WOP',0,1
	.word	319
	.byte	1,5,2,35,2,10
	.byte	'S19WOP',0,1
	.word	319
	.byte	1,4,2,35,2,10
	.byte	'S20WOP',0,1
	.word	319
	.byte	1,3,2,35,2,10
	.byte	'S21WOP',0,1
	.word	319
	.byte	1,2,2,35,2,10
	.byte	'S22WOP',0,1
	.word	319
	.byte	1,1,2,35,2,10
	.byte	'S23WOP',0,1
	.word	319
	.byte	1,0,2,35,2,10
	.byte	'S24WOP',0,1
	.word	319
	.byte	1,7,2,35,3,10
	.byte	'S25WOP',0,1
	.word	319
	.byte	1,6,2,35,3,10
	.byte	'S26WOP',0,1
	.word	319
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	319
	.byte	4,1,2,35,3,10
	.byte	'DATM',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,22,140,4,3
	.word	88945
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,22,143,4,16,4,10
	.byte	'TAG',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	296
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,22,147,4,3
	.word	89527
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,22,150,4,16,4,10
	.byte	'TAG',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	296
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,22,154,4,3
	.word	89629
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,22,157,4,16,4,10
	.byte	'TAG',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	296
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,22,161,4,3
	.word	89731
	.byte	9
	.byte	'_Ifx_FLASH_RRAD_Bits',0,22,164,4,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	296
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RRAD_Bits',0,22,168,4,3
	.word	89833
	.byte	9
	.byte	'_Ifx_FLASH_RRCT_Bits',0,22,171,4,16,4,10
	.byte	'STRT',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	319
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	319
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	319
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	319
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	319
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	319
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	832
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_RRCT_Bits',0,22,182,4,3
	.word	89927
	.byte	9
	.byte	'_Ifx_FLASH_RRD0_Bits',0,22,185,4,16,4,10
	.byte	'DATA',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD0_Bits',0,22,188,4,3
	.word	90137
	.byte	9
	.byte	'_Ifx_FLASH_RRD1_Bits',0,22,191,4,16,4,10
	.byte	'DATA',0,4
	.word	296
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD1_Bits',0,22,194,4,3
	.word	90210
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,22,197,4,16,4,10
	.byte	'SEL',0,1
	.word	319
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	319
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	319
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	319
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	296
	.byte	22,0,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,22,204,4,3
	.word	90283
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,22,207,4,16,4,10
	.byte	'VLD0',0,1
	.word	319
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	296
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,22,211,4,3
	.word	90438
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,22,214,4,16,4,10
	.byte	'reserved_0',0,1
	.word	319
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	296
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	319
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	319
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	319
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,22,221,4,3
	.word	90543
	.byte	11,22,229,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81787
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ACCEN0',0,22,237,4,3
	.word	90691
	.byte	11,22,240,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	82348
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ACCEN1',0,22,248,4,3
	.word	90757
	.byte	11,22,251,4,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	82429
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_CFG',0,22,131,5,3
	.word	90823
	.byte	11,22,134,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	82582
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_STAT',0,22,142,5,3
	.word	90891
	.byte	11,22,145,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	82830
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_TOP',0,22,153,5,3
	.word	90960
	.byte	11,22,156,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	82976
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM0',0,22,164,5,3
	.word	91028
	.byte	11,22,167,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83074
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM1',0,22,175,5,3
	.word	91093
	.byte	11,22,178,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83190
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM2',0,22,186,5,3
	.word	91158
	.byte	11,22,189,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83306
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ECCRD',0,22,197,5,3
	.word	91223
	.byte	11,22,200,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83446
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ECCRP',0,22,208,5,3
	.word	91288
	.byte	11,22,211,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83586
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ECCW',0,22,219,5,3
	.word	91353
	.byte	11,22,222,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83725
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_FCON',0,22,230,5,3
	.word	91417
	.byte	11,22,233,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84087
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_FPRO',0,22,241,5,3
	.word	91481
	.byte	11,22,244,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84528
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_FSR',0,22,252,5,3
	.word	91545
	.byte	11,22,255,5,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85136
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMFCON',0,22,135,6,3
	.word	91608
	.byte	11,22,138,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85316
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMFSR',0,22,146,6,3
	.word	91675
	.byte	11,22,149,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85638
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMMARD',0,22,157,6,3
	.word	91741
	.byte	11,22,160,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85819
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRAD',0,22,168,6,3
	.word	91808
	.byte	11,22,171,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85919
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRCT',0,22,179,6,3
	.word	91875
	.byte	11,22,182,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86135
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRD0',0,22,190,6,3
	.word	91942
	.byte	11,22,193,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86214
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRD1',0,22,201,6,3
	.word	92009
	.byte	11,22,204,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86293
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ID',0,22,212,6,3
	.word	92076
	.byte	11,22,215,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86406
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_MARD',0,22,223,6,3
	.word	92138
	.byte	11,22,226,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86620
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_MARP',0,22,234,6,3
	.word	92202
	.byte	11,22,237,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86807
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCOND',0,22,245,6,3
	.word	92266
	.byte	11,22,248,6,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87131
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONDBG',0,22,128,7,3
	.word	92333
	.byte	11,22,131,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87274
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONHSM',0,22,139,7,3
	.word	92402
	.byte	11,22,142,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87463
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,22,150,7,3
	.word	92471
	.byte	11,22,153,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87826
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONOTP',0,22,161,7,3
	.word	92544
	.byte	11,22,164,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88421
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONP',0,22,172,7,3
	.word	92613
	.byte	11,22,175,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88945
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONWOP',0,22,183,7,3
	.word	92680
	.byte	11,22,186,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89527
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG0',0,22,194,7,3
	.word	92749
	.byte	11,22,197,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89629
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG1',0,22,205,7,3
	.word	92817
	.byte	11,22,208,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89731
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG2',0,22,216,7,3
	.word	92885
	.byte	11,22,219,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89833
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRAD',0,22,227,7,3
	.word	92953
	.byte	11,22,230,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89927
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRCT',0,22,238,7,3
	.word	93017
	.byte	11,22,241,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90137
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD0',0,22,249,7,3
	.word	93081
	.byte	11,22,252,7,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90210
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD1',0,22,132,8,3
	.word	93145
	.byte	11,22,135,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90283
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_CFG',0,22,143,8,3
	.word	93209
	.byte	11,22,146,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90438
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_STAT',0,22,154,8,3
	.word	93277
	.byte	11,22,157,8,9,4,12
	.byte	'U',0
	.word	296
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	312
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90543
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_TOP',0,22,165,8,3
	.word	93346
	.byte	9
	.byte	'_Ifx_FLASH_CBAB',0,22,176,8,25,12,12
	.byte	'CFG',0
	.word	90823
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	90891
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	90960
	.byte	4,2,35,8,0,13
	.word	93414
	.byte	29
	.byte	'Ifx_FLASH_CBAB',0,22,181,8,3
	.word	93477
	.byte	9
	.byte	'_Ifx_FLASH_RDB',0,22,184,8,25,12,12
	.byte	'CFG0',0
	.word	92749
	.byte	4,2,35,0,12
	.byte	'CFG1',0
	.word	92817
	.byte	4,2,35,4,12
	.byte	'CFG2',0
	.word	92885
	.byte	4,2,35,8,0,13
	.word	93506
	.byte	29
	.byte	'Ifx_FLASH_RDB',0,22,189,8,3
	.word	93570
	.byte	9
	.byte	'_Ifx_FLASH_UBAB',0,22,192,8,25,12,12
	.byte	'CFG',0
	.word	93209
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	93277
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	93346
	.byte	4,2,35,8,0,13
	.word	93598
	.byte	29
	.byte	'Ifx_FLASH_UBAB',0,22,197,8,3
	.word	93661
	.byte	29
	.byte	'Ifx_P_ACCEN0_Bits',0,11,79,3
	.word	8808
	.byte	29
	.byte	'Ifx_P_ACCEN1_Bits',0,11,85,3
	.word	8721
	.byte	29
	.byte	'Ifx_P_ESR_Bits',0,11,107,3
	.word	5080
	.byte	29
	.byte	'Ifx_P_ID_Bits',0,11,115,3
	.word	3133
	.byte	29
	.byte	'Ifx_P_IN_Bits',0,11,137,1,3
	.word	4128
	.byte	29
	.byte	'Ifx_P_IOCR0_Bits',0,11,150,1,3
	.word	3261
	.byte	29
	.byte	'Ifx_P_IOCR12_Bits',0,11,163,1,3
	.word	3908
	.byte	29
	.byte	'Ifx_P_IOCR4_Bits',0,11,176,1,3
	.word	3476
	.byte	29
	.byte	'Ifx_P_IOCR8_Bits',0,11,189,1,3
	.word	3691
	.byte	29
	.byte	'Ifx_P_LPCR0_Bits',0,11,197,1,3
	.word	8080
	.byte	29
	.byte	'Ifx_P_LPCR1_Bits',0,11,205,1,3
	.word	8204
	.byte	29
	.byte	'Ifx_P_LPCR1_P21_Bits',0,11,215,1,3
	.word	8288
	.byte	29
	.byte	'Ifx_P_LPCR2_Bits',0,11,229,1,3
	.word	8468
	.byte	29
	.byte	'Ifx_P_OMCR0_Bits',0,11,240,1,3
	.word	6719
	.byte	29
	.byte	'Ifx_P_OMCR12_Bits',0,11,250,1,3
	.word	7243
	.byte	29
	.byte	'Ifx_P_OMCR4_Bits',0,11,133,2,3
	.word	6893
	.byte	29
	.byte	'Ifx_P_OMCR8_Bits',0,11,144,2,3
	.word	7067
	.byte	29
	.byte	'Ifx_P_OMCR_Bits',0,11,166,2,3
	.word	7732
	.byte	29
	.byte	'Ifx_P_OMR_Bits',0,11,203,2,3
	.word	2562
	.byte	29
	.byte	'Ifx_P_OMSR0_Bits',0,11,213,2,3
	.word	6056
	.byte	29
	.byte	'Ifx_P_OMSR12_Bits',0,11,224,2,3
	.word	6544
	.byte	29
	.byte	'Ifx_P_OMSR4_Bits',0,11,235,2,3
	.word	6203
	.byte	29
	.byte	'Ifx_P_OMSR8_Bits',0,11,246,2,3
	.word	6372
	.byte	29
	.byte	'Ifx_P_OMSR_Bits',0,11,140,3,3
	.word	7399
	.byte	29
	.byte	'Ifx_P_OUT_Bits',0,11,162,3,3
	.word	2246
	.byte	29
	.byte	'Ifx_P_PCSR_Bits',0,11,179,3,3
	.word	5786
	.byte	29
	.byte	'Ifx_P_PDISC_Bits',0,11,201,3,3
	.word	5420
	.byte	29
	.byte	'Ifx_P_PDR0_Bits',0,11,222,3,3
	.word	4451
	.byte	29
	.byte	'Ifx_P_PDR1_Bits',0,11,243,3,3
	.word	4755
	.byte	29
	.byte	'Ifx_P_ACCEN0',0,11,131,4,3
	.word	9335
	.byte	29
	.byte	'Ifx_P_ACCEN1',0,11,142,4,3
	.word	8768
	.byte	29
	.byte	'Ifx_P_ESR',0,11,153,4,3
	.word	5371
	.byte	29
	.byte	'Ifx_P_ID',0,11,164,4,3
	.word	3212
	.byte	29
	.byte	'Ifx_P_IN',0,11,175,4,3
	.word	4402
	.byte	29
	.byte	'Ifx_P_IOCR0',0,11,186,4,3
	.word	3436
	.byte	29
	.byte	'Ifx_P_IOCR12',0,11,197,4,3
	.word	4088
	.byte	29
	.byte	'Ifx_P_IOCR4',0,11,208,4,3
	.word	3651
	.byte	29
	.byte	'Ifx_P_IOCR8',0,11,219,4,3
	.word	3868
	.byte	29
	.byte	'Ifx_P_LPCR0',0,11,230,4,3
	.word	8164
	.byte	29
	.byte	'Ifx_P_LPCR1',0,11,243,4,3
	.word	8413
	.byte	29
	.byte	'Ifx_P_LPCR2',0,11,254,4,3
	.word	8672
	.byte	29
	.byte	'Ifx_P_OMCR',0,11,137,5,3
	.word	8040
	.byte	29
	.byte	'Ifx_P_OMCR0',0,11,148,5,3
	.word	6853
	.byte	29
	.byte	'Ifx_P_OMCR12',0,11,159,5,3
	.word	7359
	.byte	29
	.byte	'Ifx_P_OMCR4',0,11,170,5,3
	.word	7027
	.byte	29
	.byte	'Ifx_P_OMCR8',0,11,181,5,3
	.word	7203
	.byte	29
	.byte	'Ifx_P_OMR',0,11,192,5,3
	.word	3093
	.byte	29
	.byte	'Ifx_P_OMSR',0,11,203,5,3
	.word	7692
	.byte	29
	.byte	'Ifx_P_OMSR0',0,11,214,5,3
	.word	6163
	.byte	29
	.byte	'Ifx_P_OMSR12',0,11,225,5,3
	.word	6679
	.byte	29
	.byte	'Ifx_P_OMSR4',0,11,236,5,3
	.word	6332
	.byte	29
	.byte	'Ifx_P_OMSR8',0,11,247,5,3
	.word	6504
	.byte	29
	.byte	'Ifx_P_OUT',0,11,130,6,3
	.word	2522
	.byte	29
	.byte	'Ifx_P_PCSR',0,11,141,6,3
	.word	6016
	.byte	29
	.byte	'Ifx_P_PDISC',0,11,152,6,3
	.word	5746
	.byte	29
	.byte	'Ifx_P_PDR0',0,11,163,6,3
	.word	4715
	.byte	29
	.byte	'Ifx_P_PDR1',0,11,174,6,3
	.word	5031
	.byte	13
	.word	9375
	.byte	29
	.byte	'Ifx_P',0,11,223,6,3
	.word	95008
	.byte	14,10,63,9,1,15
	.byte	'IfxPort_InputMode_undefined',0,127,15
	.byte	'IfxPort_InputMode_noPullDevice',0,0,15
	.byte	'IfxPort_InputMode_pullDown',0,8,15
	.byte	'IfxPort_InputMode_pullUp',0,16,0,29
	.byte	'IfxPort_InputMode',0,10,69,3
	.word	95028
	.byte	14,10,100,9,1,15
	.byte	'IfxPort_OutputIdx_general',0,128,1,15
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,15
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,15
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,15
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,15
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,15
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,15
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,29
	.byte	'IfxPort_OutputIdx',0,10,110,3
	.word	95179
	.byte	14,10,114,9,1,15
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,15
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,29
	.byte	'IfxPort_OutputMode',0,10,118,3
	.word	95422
	.byte	14,10,124,9,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,15
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,15
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,15
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,15
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,15
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,15
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,15
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,15
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,29
	.byte	'IfxPort_PadDriver',0,10,138,1,3
	.word	95518
	.byte	29
	.byte	'IfxPort_State',0,10,158,1,3
	.word	9988
	.byte	28,10,170,1,9,8,12
	.byte	'port',0
	.word	9983
	.byte	4,2,35,0,12
	.byte	'pinIndex',0
	.word	319
	.byte	1,2,35,4,0,29
	.byte	'IfxPort_Pin',0,10,174,1,3
	.word	95982
	.byte	31,1,1,6
	.word	96042
	.byte	29
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,23,129,1,16
	.word	96045
	.byte	28,23,197,5,9,8,12
	.byte	'value',0
	.word	2017
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	2017
	.byte	4,2,35,4,0,29
	.byte	'IfxScuCcu_CcuconRegConfig',0,23,201,5,3
	.word	96090
	.byte	28,23,206,5,9,8,12
	.byte	'pDivider',0
	.word	319
	.byte	1,2,35,0,12
	.byte	'nDivider',0
	.word	319
	.byte	1,2,35,1,12
	.byte	'k2Initial',0
	.word	319
	.byte	1,2,35,2,12
	.byte	'waitTime',0
	.word	27576
	.byte	4,2,35,4,0,29
	.byte	'IfxScuCcu_InitialStepConfig',0,23,212,5,3
	.word	96161
	.byte	28,23,216,5,9,12,12
	.byte	'k2Step',0
	.word	319
	.byte	1,2,35,0,12
	.byte	'waitTime',0
	.word	27576
	.byte	4,2,35,2,12
	.byte	'hookFunction',0
	.word	96050
	.byte	4,2,35,8,0,29
	.byte	'IfxScuCcu_PllStepsConfig',0,23,221,5,3
	.word	96278
	.byte	6
	.word	96042
	.byte	28,23,229,5,9,56,12
	.byte	'ccucon0',0
	.word	96090
	.byte	8,2,35,0,12
	.byte	'ccucon1',0
	.word	96090
	.byte	8,2,35,8,12
	.byte	'ccucon2',0
	.word	96090
	.byte	8,2,35,16,12
	.byte	'ccucon5',0
	.word	96090
	.byte	8,2,35,24,12
	.byte	'ccucon6',0
	.word	96090
	.byte	8,2,35,32,12
	.byte	'ccucon7',0
	.word	96090
	.byte	8,2,35,40,12
	.byte	'ccucon8',0
	.word	96090
	.byte	8,2,35,48,0,29
	.byte	'IfxScuCcu_ClockDistributionConfig',0,23,238,5,3
	.word	96380
	.byte	28,23,242,5,9,8,12
	.byte	'value',0
	.word	2017
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	2017
	.byte	4,2,35,4,0,29
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,23,246,5,3
	.word	96549
	.byte	6
	.word	96278
	.byte	28,23,251,5,9,16,12
	.byte	'numOfPllDividerSteps',0
	.word	319
	.byte	1,2,35,0,12
	.byte	'pllDividerStep',0
	.word	96625
	.byte	4,2,35,4,12
	.byte	'pllInitialStep',0
	.word	96161
	.byte	8,2,35,8,0,29
	.byte	'IfxScuCcu_SysPllConfig',0,23,128,6,3
	.word	96630
	.byte	29
	.byte	'IfxDma_ChannelBusPriority',0,12,79,3
	.word	24593
	.byte	29
	.byte	'IfxDma_ChannelIncrementCircular',0,12,102,3
	.word	25060
	.byte	29
	.byte	'IfxDma_ChannelIncrementDirection',0,12,111,3
	.word	24966
	.byte	29
	.byte	'IfxDma_ChannelIncrementStep',0,12,126,3
	.word	24699
	.byte	29
	.byte	'IfxDma_ChannelInterruptControl',0,12,135,1,3
	.word	26227
	.byte	29
	.byte	'IfxDma_ChannelMove',0,12,150,1,3
	.word	23651
	.byte	29
	.byte	'IfxDma_ChannelMoveSize',0,12,163,1,3
	.word	24043
	.byte	29
	.byte	'IfxDma_ChannelOperationMode',0,12,172,1,3
	.word	23958
	.byte	29
	.byte	'IfxDma_ChannelPattern',0,12,187,1,3
	.word	24237
	.byte	29
	.byte	'IfxDma_ChannelRequestMode',0,12,205,1,3
	.word	23843
	.byte	29
	.byte	'IfxDma_ChannelRequestSource',0,12,214,1,3
	.word	24504
	.byte	29
	.byte	'IfxDma_ChannelShadow',0,12,234,1,3
	.word	25674
	.byte	14,12,246,1,9,1,15
	.byte	'IfxDma_MoveEngine_0',0,0,15
	.byte	'IfxDma_MoveEngine_1',0,1,0,29
	.byte	'IfxDma_MoveEngine',0,12,250,1,3
	.word	97168
	.byte	14,12,255,1,9,1,15
	.byte	'IfxDma_SleepMode_enable',0,0,15
	.byte	'IfxDma_SleepMode_disable',0,1,0,29
	.byte	'IfxDma_SleepMode',0,12,131,2,3
	.word	97246
	.byte	29
	.byte	'IfxDma_Dma',0,15,190,3,3
	.word	23520
	.byte	29
	.byte	'IfxDma_Dma_Channel',0,15,203,3,3
	.word	23590
	.byte	29
	.byte	'IfxDma_Dma_ChannelConfig',0,15,243,3,3
	.word	26345
	.byte	29
	.byte	'IfxDma_Dma_Config',0,15,250,3,3
	.word	23545
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L27:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	0,0,0,4,36,0,3,8,11,15,62,15,0,0,5,59,0,3,8,0,0,6,15,0,73,19,0,0,7,46,1,3,8,32,13,58,15,59,15,57,15,73
	.byte	19,54,15,39,12,0,0,8,5,0,3,8,58,15,59,15,57,15,73,19,0,0,9,19,1,3,8,58,15,59,15,57,15,11,15,0,0,10,13
	.byte	0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,11,23,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,13,53,0,73,19,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,11,1,0,0,17,1,1,11
	.byte	15,73,19,0,0,18,33,0,47,15,0,0,19,38,0,73,19,0,0,20,46,1,3,8,54,15,39,12,63,12,60,12,0,0,21,5,0,73,19
	.byte	0,0,22,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,23,5,0,3,8,73,19,0,0,24,46,1,49,19,0,0,25,5,0,49,19
	.byte	0,0,26,29,1,49,19,0,0,27,11,0,49,19,0,0,28,19,1,58,15,59,15,57,15,11,15,0,0,29,22,0,3,8,58,15,59,15,57
	.byte	15,73,19,0,0,30,21,0,54,15,0,0,31,21,0,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L28:
	.word	.L156-.L155
.L155:
	.half	3
	.word	.L158-.L157
.L157:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl',0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Src\\Std\\IfxSrc.h',0,0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'IfxSrc_cfg.h',0,2,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0
	.byte	'IfxCpu_cfg.h',0,2,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Port\\Std\\IfxPort.h',0,0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Dma\\Std\\IfxDma.h',0,0,0,0
	.byte	'IfxDma_regdef.h',0,1,0,0
	.byte	'IfxDma_cfg.h',0,2,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.h',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Platform_Types.h',0,0
	.byte	0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Ifx_Types.h',0,0,0,0
	.byte	'IfxScu_cfg.h',0,2,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'IfxStm_regdef.h',0,1,0,0
	.byte	'IfxFlash_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuCcu.h',0,0,0,0,0
.L158:
.L156:
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_info'
.L29:
	.word	257
	.half	3
	.word	.L30
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L32,.L31
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_createModuleHandle',0,1,100,6,1,1,1
	.word	.L12,.L69,.L11
	.byte	4
	.byte	'dmaHandle',0,1,100,48
	.word	.L70,.L71
	.byte	4
	.byte	'dma',0,1,100,68
	.word	.L72,.L73
	.byte	5
	.word	.L12,.L69
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_abbrev'
.L30:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_line'
.L31:
	.word	.L160-.L159
.L159:
	.half	3
	.word	.L162-.L161
.L161:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L162:
	.byte	5,20,7,0,5,2
	.word	.L12
	.byte	3,229,0,1,5,1,9
	.half	.L163-.L12
	.byte	3,1,1,7,9
	.half	.L33-.L163
	.byte	0,1,1
.L160:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_ranges'
.L32:
	.word	-1,.L12,0,.L33-.L12,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_info'
.L34:
	.word	229
	.half	3
	.word	.L35
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L37,.L36
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_deInitModule',0,1,106,6,1,1,1
	.word	.L14,.L74,.L13
	.byte	4
	.byte	'dma',0,1,106,42
	.word	.L70,.L75
	.byte	5
	.word	.L14,.L74
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_abbrev'
.L35:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_line'
.L36:
	.word	.L165-.L164
.L164:
	.half	3
	.word	.L167-.L166
.L166:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L167:
	.byte	5,1,7,0,5,2
	.word	.L14
	.byte	3,236,0,1,7,9
	.half	.L38-.L14
	.byte	0,1,1
.L165:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_ranges'
.L37:
	.word	-1,.L14,0,.L38-.L14,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_info'
.L39:
	.word	249
	.half	3
	.word	.L40
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L42,.L41
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_initModule',0,1,200,1,6,1,1,1
	.word	.L22,.L76,.L21
	.byte	4
	.byte	'dma',0,1,200,1,40
	.word	.L70,.L77
	.byte	4
	.byte	'config',0,1,200,1,70
	.word	.L78,.L79
	.byte	5
	.word	.L22,.L76
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_abbrev'
.L40:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_line'
.L41:
	.word	.L169-.L168
.L168:
	.half	3
	.word	.L171-.L170
.L170:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L171:
	.byte	5,22,7,0,5,2
	.word	.L22
	.byte	3,201,1,1,5,14,9
	.half	.L172-.L22
	.byte	1,5,1,9
	.half	.L173-.L172
	.byte	3,1,1,7,9
	.half	.L43-.L173
	.byte	0,1,1
.L169:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_ranges'
.L42:
	.word	-1,.L22,0,.L43-.L22,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_info'
.L44:
	.word	255
	.half	3
	.word	.L45
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L47,.L46
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_initModuleConfig',0,1,206,1,6,1,1,1
	.word	.L24,.L80,.L23
	.byte	4
	.byte	'config',0,1,206,1,53
	.word	.L81,.L82
	.byte	4
	.byte	'dma',0,1,206,1,70
	.word	.L72,.L83
	.byte	5
	.word	.L24,.L80
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_abbrev'
.L45:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_line'
.L46:
	.word	.L175-.L174
.L174:
	.half	3
	.word	.L177-.L176
.L176:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L177:
	.byte	5,17,7,0,5,2
	.word	.L24
	.byte	3,207,1,1,5,1,9
	.half	.L178-.L24
	.byte	3,1,1,7,9
	.half	.L48-.L178
	.byte	0,1,1
.L175:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_ranges'
.L47:
	.word	-1,.L24,0,.L48-.L24,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_info'
.L49:
	.word	536
	.half	3
	.word	.L50
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L52,.L51
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_initChannel',0,1,112,6,1,1,1
	.word	.L16,.L84,.L15
	.byte	4
	.byte	'channel',0,1,112,49
	.word	.L85,.L86
	.byte	4
	.byte	'config',0,1,112,90
	.word	.L87,.L88
	.byte	5
	.word	.L16,.L84
	.byte	6
	.byte	'dma',0,1,114,14
	.word	.L72,.L89
	.byte	5
	.word	.L90,.L91
	.byte	6
	.byte	'tsr',0,1,123,21
	.word	.L92,.L93
	.byte	0,5
	.word	.L94,.L7
	.byte	7
	.word	.L95,.L94,.L96
	.byte	8
	.word	.L97,.L98
	.byte	8
	.word	.L99,.L100
	.byte	9
	.word	.L101,.L102
	.byte	0,7
	.word	.L95,.L103,.L104
	.byte	8
	.word	.L97,.L98
	.byte	8
	.word	.L99,.L100
	.byte	0,7
	.word	.L95,.L105,.L106
	.byte	8
	.word	.L97,.L98
	.byte	8
	.word	.L99,.L100
	.byte	0,7
	.word	.L107,.L106,.L108
	.byte	8
	.word	.L109,.L110
	.byte	8
	.word	.L111,.L112
	.byte	8
	.word	.L113,.L114
	.byte	10
	.word	.L115,.L106,.L108
	.byte	7
	.word	.L116,.L117,.L108
	.byte	8
	.word	.L118,.L119
	.byte	11
	.word	.L120,.L117,.L108
	.byte	0,0,0,7
	.word	.L121,.L108,.L7
	.byte	8
	.word	.L122,.L123
	.byte	11
	.word	.L124,.L108,.L7
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_abbrev'
.L50:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_line'
.L51:
	.word	.L180-.L179
.L179:
	.half	3
	.word	.L182-.L181
.L181:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Dma\\Std\\IfxDma.h',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Src\\Std\\IfxSrc.h',0,0,0,0,0
.L182:
	.byte	5,6,7,0,5,2
	.word	.L16
	.byte	3,239,0,1,5,26,9
	.half	.L147-.L16
	.byte	3,2,1,5,6,9
	.half	.L183-.L147
	.byte	3,126,1,5,34,9
	.half	.L148-.L183
	.byte	3,2,1,5,24,9
	.half	.L149-.L148
	.byte	3,2,1,5,32,9
	.half	.L184-.L149
	.byte	3,1,1,5,24,9
	.half	.L185-.L184
	.byte	1,5,41,9
	.half	.L186-.L185
	.byte	3,1,1,5,34,9
	.half	.L187-.L186
	.byte	1,5,24,9
	.half	.L146-.L187
	.byte	1,5,58,9
	.half	.L188-.L146
	.byte	3,2,1,5,19,9
	.half	.L90-.L188
	.byte	3,6,1,5,15,9
	.half	.L189-.L90
	.byte	3,126,1,5,9,9
	.half	.L150-.L189
	.byte	3,2,1,5,23,7,9
	.half	.L190-.L150
	.byte	3,2,1,5,26,1,5,23,9
	.half	.L5-.L190
	.byte	3,4,1,5,25,9
	.half	.L6-.L5
	.byte	3,3,1,5,17,9
	.half	.L191-.L6
	.byte	1,5,40,9
	.half	.L192-.L191
	.byte	1,5,15,9
	.half	.L91-.L192
	.byte	3,3,1,5,5,9
	.half	.L151-.L91
	.byte	1,4,2,5,34,7,9
	.half	.L94-.L151
	.byte	3,253,9,1,4,1,5,80,9
	.half	.L96-.L94
	.byte	3,133,118,1,4,2,5,34,9
	.half	.L103-.L96
	.byte	3,251,9,1,4,1,5,32,9
	.half	.L104-.L103
	.byte	3,134,118,1,4,2,5,37,9
	.half	.L105-.L104
	.byte	3,250,9,1,4,3,5,17,9
	.half	.L106-.L105
	.byte	3,249,118,1,5,11,9
	.half	.L193-.L106
	.byte	3,1,1,5,17,9
	.half	.L194-.L193
	.byte	1,5,11,9
	.half	.L117-.L194
	.byte	3,103,1,5,17,9
	.half	.L195-.L117
	.byte	1,5,11,9
	.half	.L108-.L195
	.byte	3,18,1,5,16,9
	.half	.L196-.L108
	.byte	1,4,1,5,1,9
	.half	.L7-.L196
	.byte	3,150,127,1,7,9
	.half	.L53-.L7
	.byte	0,1,1
.L180:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_ranges'
.L52:
	.word	-1,.L16,0,.L53-.L16,0,0
.L102:
	.word	-1,.L16,.L94-.L16,.L96-.L16,.L103-.L16,.L104-.L16,.L105-.L16,.L106-.L16,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_info'
.L54:
	.word	256
	.half	3
	.word	.L55
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L57,.L56
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_initChannelConfig',0,1,147,1,6,1,1,1
	.word	.L18,.L125,.L17
	.byte	4
	.byte	'config',0,1,147,1,61
	.word	.L126,.L127
	.byte	4
	.byte	'dma',0,1,147,1,81
	.word	.L70,.L128
	.byte	5
	.word	.L18,.L125
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_abbrev'
.L55:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_line'
.L56:
	.word	.L198-.L197
.L197:
	.half	3
	.word	.L200-.L199
.L199:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L200:
	.byte	5,52,7,0,5,2
	.word	.L18
	.byte	3,148,1,1,5,13,9
	.half	.L201-.L18
	.byte	3,38,1,5,20,9
	.half	.L153-.L201
	.byte	3,3,1,5,1,9
	.half	.L154-.L153
	.byte	3,1,1,7,9
	.half	.L58-.L154
	.byte	0,1,1
.L198:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_ranges'
.L57:
	.word	-1,.L18,0,.L58-.L18,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_info'
.L59:
	.word	267
	.half	3
	.word	.L60
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L62,.L61
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_initLinkedListEntry',0,1,194,1,6,1,1,1
	.word	.L20,.L129,.L19
	.byte	4
	.byte	'ptrToAddress',0,1,194,1,43
	.word	.L130,.L131
	.byte	4
	.byte	'config',0,1,194,1,89
	.word	.L87,.L132
	.byte	5
	.word	.L20,.L129
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_abbrev'
.L60:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_line'
.L61:
	.word	.L203-.L202
.L202:
	.half	3
	.word	.L205-.L204
.L204:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L205:
	.byte	5,68,7,0,5,2
	.word	.L20
	.byte	3,195,1,1,5,1,7,9
	.half	.L63-.L20
	.byte	3,1,0,1,1
.L203:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_ranges'
.L62:
	.word	-1,.L20,0,.L63-.L20,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_info'
.L64:
	.word	320
	.half	3
	.word	.L65
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L67,.L66
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_configureTransactionSet',0,1,46,13,1,1
	.word	.L10,.L133,.L9
	.byte	4
	.byte	'channel',0,1,46,60
	.word	.L134,.L135
	.byte	4
	.byte	'config',0,1,46,101
	.word	.L87,.L136
	.byte	5
	.word	.L10,.L133
	.byte	5
	.word	.L10,.L137
	.byte	6
	.byte	'chcfgr',0,1,49,27
	.word	.L138,.L139
	.byte	0,5
	.word	.L137,.L140
	.byte	6
	.byte	'adicr',0,1,63,26
	.word	.L141,.L142
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_abbrev'
.L65:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_line'
.L66:
	.word	.L207-.L206
.L206:
	.half	3
	.word	.L209-.L208
.L208:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L209:
	.byte	5,27,7,0,5,2
	.word	.L10
	.byte	3,49,1,5,35,3,1,1,5,27,9
	.half	.L143-.L10
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L210-.L143
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L211-.L210
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L212-.L211
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L213-.L212
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L214-.L213
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L215-.L214
	.byte	1,3,2,1,5,23,9
	.half	.L137-.L215
	.byte	3,5,1,5,31,9
	.half	.L144-.L137
	.byte	3,1,1,5,76,9
	.half	.L216-.L144
	.byte	3,12,1,5,23,9
	.half	.L217-.L216
	.byte	3,116,1,5,31,3,1,1,5,70,9
	.half	.L218-.L217
	.byte	3,11,1,5,23,9
	.half	.L219-.L218
	.byte	3,117,1,5,31,3,1,1,5,23,9
	.half	.L220-.L219
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L221-.L220
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L222-.L221
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L223-.L222
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L224-.L223
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L225-.L224
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L226-.L225
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L227-.L226
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L228-.L227
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L229-.L228
	.byte	1,5,32,3,1,1,5,26,9
	.half	.L230-.L229
	.byte	1,5,67,9
	.half	.L231-.L230
	.byte	1,5,23,9
	.half	.L232-.L231
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L233-.L232
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L234-.L233
	.byte	1,5,26,3,3,1,5,31,9
	.half	.L140-.L234
	.byte	3,3,1,5,23,9
	.half	.L145-.L140
	.byte	1,5,31,9
	.half	.L235-.L145
	.byte	3,1,1,5,23,9
	.half	.L236-.L235
	.byte	1,5,31,9
	.half	.L237-.L236
	.byte	3,1,1,5,23,9
	.half	.L238-.L237
	.byte	1,5,31,9
	.half	.L239-.L238
	.byte	3,1,1,5,23,9
	.half	.L240-.L239
	.byte	1,5,16,9
	.half	.L241-.L240
	.byte	3,3,1,5,9,9
	.half	.L242-.L241
	.byte	1,5,32,7,9
	.half	.L243-.L242
	.byte	3,1,1,7,9
	.half	.L244-.L243
	.byte	3,1,1,5,34,7,9
	.half	.L245-.L244
	.byte	3,2,1,5,26,9
	.half	.L246-.L245
	.byte	1,5,1,9
	.half	.L2-.L246
	.byte	3,2,1,7,9
	.half	.L68-.L2
	.byte	0,1,1
.L207:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_ranges'
.L67:
	.word	-1,.L10,0,.L68-.L10,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_loc'
.L9:
	.word	-1,.L10,0,.L133-.L10
	.half	2
	.byte	138,0
	.word	0,0
.L142:
	.word	-1,.L10,.L144-.L10,.L145-.L10
	.half	1
	.byte	95
	.word	0,0
.L135:
	.word	-1,.L10,0,.L133-.L10
	.half	1
	.byte	100
	.word	0,0
.L139:
	.word	-1,.L10,.L143-.L10,.L144-.L10
	.half	1
	.byte	95
	.word	0,0
.L136:
	.word	-1,.L10,0,.L133-.L10
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_loc'
.L11:
	.word	-1,.L12,0,.L69-.L12
	.half	2
	.byte	138,0
	.word	0,0
.L73:
	.word	-1,.L12,0,.L69-.L12
	.half	1
	.byte	101
	.word	0,0
.L71:
	.word	-1,.L12,0,.L69-.L12
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_loc'
.L13:
	.word	-1,.L14,0,.L74-.L14
	.half	2
	.byte	138,0
	.word	0,0
.L75:
	.word	-1,.L14,0,.L74-.L14
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_loc'
.L15:
	.word	-1,.L16,0,.L84-.L16
	.half	2
	.byte	138,0
	.word	0,0
.L86:
	.word	-1,.L16,0,.L146-.L16
	.half	1
	.byte	100
	.word	.L148-.L16,.L104-.L16
	.half	1
	.byte	111
	.word	0,0
.L100:
	.word	0,0
.L88:
	.word	-1,.L16,0,.L90-.L16
	.half	1
	.byte	101
	.word	.L147-.L16,.L84-.L16
	.half	1
	.byte	109
	.word	0,0
.L89:
	.word	-1,.L16,.L149-.L16,.L84-.L16
	.half	1
	.byte	108
	.word	0,0
.L98:
	.word	0,0
.L114:
	.word	0,0
.L119:
	.word	0,0
.L123:
	.word	0,0
.L110:
	.word	0,0
.L93:
	.word	-1,.L16,.L150-.L16,.L151-.L16
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L112:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_loc'
.L17:
	.word	-1,.L18,0,.L125-.L18
	.half	2
	.byte	138,0
	.word	0,0
.L127:
	.word	-1,.L18,0,.L8-.L18
	.half	1
	.byte	100
	.word	.L152-.L18,.L125-.L18
	.half	1
	.byte	98
	.word	.L153-.L18,.L154-.L18
	.half	1
	.byte	100
	.word	0,0
.L128:
	.word	-1,.L18,0,.L125-.L18
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_loc'
.L19:
	.word	-1,.L20,0,.L129-.L20
	.half	2
	.byte	138,0
	.word	0,0
.L132:
	.word	-1,.L20,0,.L129-.L20
	.half	1
	.byte	101
	.word	0,0
.L131:
	.word	-1,.L20,0,.L129-.L20
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_loc'
.L21:
	.word	-1,.L22,0,.L76-.L22
	.half	2
	.byte	138,0
	.word	0,0
.L79:
	.word	-1,.L22,0,.L76-.L22
	.half	1
	.byte	101
	.word	0,0
.L77:
	.word	-1,.L22,0,.L76-.L22
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_loc'
.L23:
	.word	-1,.L24,0,.L80-.L24
	.half	2
	.byte	138,0
	.word	0,0
.L82:
	.word	-1,.L24,0,.L80-.L24
	.half	1
	.byte	100
	.word	0,0
.L83:
	.word	-1,.L24,0,.L80-.L24
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L247:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_frame'
	.word	20
	.word	.L247,.L10,.L133-.L10
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_frame'
	.word	20
	.word	.L247,.L12,.L69-.L12
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_frame'
	.word	24
	.word	.L247,.L14,.L74-.L14
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_frame'
	.word	12
	.word	.L247,.L16,.L84-.L16
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_frame'
	.word	16
	.word	.L247,.L18,.L125-.L18
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_frame'
	.word	12
	.word	.L247,.L20,.L129-.L20
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_frame'
	.word	20
	.word	.L247,.L22,.L76-.L22
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L247,.L24,.L80-.L24
	.byte	8,18,8,19,8,22,8,23

; ..\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.c	   210  }
	; Module end
