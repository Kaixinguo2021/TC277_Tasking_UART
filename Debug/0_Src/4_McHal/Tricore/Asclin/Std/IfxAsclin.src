	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Asclin\\Std\\.IfxAsclin.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc27xc -D__CPU_TC27XC__ --core=tc1.6.x --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\2_CDrv\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.src ..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c'

	
$TC16X
	.sdecl	'.zrodata.IfxAsclin..1.cnt',data,rom
	.sect	'.zrodata.IfxAsclin..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	-268433920
	.sdecl	'.zrodata.IfxAsclin..2.cnt',data,rom
	.sect	'.zrodata.IfxAsclin..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	981668463
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_enableAscErrorFlags',code,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.text.IfxAsclin.IfxAsclin_enableAscErrorFlags'
	.align	2
	
	.global	IfxAsclin_enableAscErrorFlags

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     2   * \file IfxAsclin.c
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     4   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     5   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     7   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    15   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    16   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    22   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    23   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    24  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    25  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    26  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    27  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    28  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    29  #include "IfxAsclin.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    30  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    31  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    32  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    33  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    34  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    35  void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable)
; Function IfxAsclin_enableAscErrorFlags
.L60:
IfxAsclin_enableAscErrorFlags:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
	ld.bu	d15,[a4]66
.L552:
	ne	d0,d4,#0
.L553:
	insert	d15,d15,d0,#0,#1
	st.b	[a4]66,d15
.L290:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
	ld.bu	d15,[a4]67
.L554:
	ne	d0,d5,#0
.L555:
	insert	d15,d15,d0,#2,#1
	st.b	[a4]67,d15
.L297:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    36  ag(asclin, parEnable);     /* enables parity error*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    37      IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    38  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    39  
	ret
.L285:
	
__IfxAsclin_enableAscErrorFlags_function_end:
	.size	IfxAsclin_enableAscErrorFlags,__IfxAsclin_enableAscErrorFlags_function_end-IfxAsclin_enableAscErrorFlags
.L143:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_enableModule',code,cluster('IfxAsclin_enableModule')
	.sect	'.text.IfxAsclin.IfxAsclin_enableModule'
	.align	2
	
	.global	IfxAsclin_enableModule

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    41  void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    42  {
; Function IfxAsclin_enableModule
.L62:
IfxAsclin_enableModule:	.type	func
	mov.aa	a15,a4
.L414:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    43      uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    44      IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
	call	IfxScuWdt_getCpuWatchdogPassword
.L413:
	mov	d15,d2
.L416:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    45      IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L415:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    46      IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    47  }
	mov	d4,d15

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      return asclin->CSR.B.CON;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      return asclin->FLAGS.B.CE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      return asclin->FLAGS.B.FED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      return asclin->FLAGS.B.FE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      return asclin->FLAGS.B.HT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      return asclin->KRST0.B.RSTSTAT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      return asclin->FLAGS.B.LA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      return asclin->FLAGS.B.LC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      return asclin->FLAGS.B.LP;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      return asclin->CLC.B.DISS;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      return asclin->FLAGS.B.PE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      return asclin->BITCON.B.PRESCALER + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.RED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->IOCR.B.RXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->FLAGS.B.RT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1961  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1962  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1963  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1964  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1965  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1966      return asclin->RXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1967  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1968  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1969  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1970  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1971  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1972      return asclin->FLAGS.B.RFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1973  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1974  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1975  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1976  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1977  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1978      return asclin->RXFIFOCON.B.OUTW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1979  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1980  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1981  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1982  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1983  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1984      return asclin->FLAGS.B.RFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1985  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1986  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1987  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1988  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1989  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1990      return asclin->FLAGS.B.RFU;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1991  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1992  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1993  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1994  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1995  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1996      return asclin->FLAGS.B.RH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1998  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1999  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2000  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2002      return asclin->FLAGS.B.RR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2003  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2004  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2005  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2006  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2007  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2008      return asclin->FLAGS.B.TC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2009  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2010  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2011  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2012  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2013  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2014      return asclin->IOCR.B.TXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2015  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2016  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2017  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2018  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2019  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2020      return asclin->TXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2021  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2023  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2024  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2025  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2026      return asclin->FLAGS.B.TFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2027  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2028  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2029  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2030  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2031  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2032      return asclin->TXFIFOCON.B.INW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2033  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2034  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2035  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2036  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2037  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2038      return asclin->FLAGS.B.TFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2039  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2040  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2041  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2042  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2043  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2044      return asclin->FLAGS.B.TH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2045  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2046  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2047  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2048  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2049  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2050      return asclin->FLAGS.B.TR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2051  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2052  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2053  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2054  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2055  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2056      IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2057      IfxAsclin_enableCts(cts->module, TRUE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2058      IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2059  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2060  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2062  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2063  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2064      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2065      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2066  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2068  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2069  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2070  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2071      IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2072      IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2073  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2074  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2075  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2076  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2077  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2078      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2079      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2080  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2081  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2082  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2083  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2084  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2085      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2086      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2087  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2088  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2089  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2090  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2091  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2092      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2093      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2094  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2095  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2097  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2098  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2099  	return asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2100  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2101  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2103  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2105      asclin->BRD.B.LOWERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2106  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2108  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2109  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2111      asclin->BRD.B.UPPERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2112  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2114  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2115  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2116  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2117      asclin->LIN.CON.B.CSI = csi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2118  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2119  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2121  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2122  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2123      asclin->DATCON.B.CSM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2124  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2125  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2127  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2128  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2129      asclin->IOCR.B.CPOL = cpol;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2130  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2132  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2133  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2134  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2135      asclin->IOCR.B.CTS = ctsi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2136  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2137  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2139  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2140  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2141      asclin->DATCON.B.DATLEN = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2142  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2143  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2145  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2146  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2147      asclin->BRG.B.DENOMINATOR = denominator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2148  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2150  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2151  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2152  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2153      asclin->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2154  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2156  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2157  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2158  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2159      asclin->CLC.B.DISR = 0;
	ld.bu	d0,[a15]
.L307:
	insert	d0,d0,#0,#0,#1
	st.b	[a15],d0
.L308:
	j	IfxScuWdt_setCpuEndinit
.L303:
	
__IfxAsclin_enableModule_function_end:
	.size	IfxAsclin_enableModule,__IfxAsclin_enableModule_function_end-IfxAsclin_enableModule
.L148:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getFaFrequency',code,cluster('IfxAsclin_getFaFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getFaFrequency'
	.align	2
	
	.global	IfxAsclin_getFaFrequency

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    48  xAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    49  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    50      float32               frequency;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    51      IfxAsclin_ClockSource clockSource = IfxAsclin_getClockSource(asclin);   /* gets the current clock source*/
; Function IfxAsclin_getFaFrequency
.L64:
IfxAsclin_getFaFrequency:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
	ld.bu	d15,[a4]76
	and	d15,#31
.L230:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    52   switch (clockSource)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    53      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    54      case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    55          frequency = 0.0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    56          break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    57      case IfxAsclin_ClockSource_kernelClock:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    58          frequency = IfxScuCcu_getSpbFrequency();
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    59          break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    60      case IfxAsclin_ClockSource_oscillatorClock:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    61          frequency = IfxScuCcu_getOsc0Frequency();
	jeq	d15,#1,.L2
.L484:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    62          break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    63      case IfxAsclin_ClockSource_flexRayClock:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    64          frequency = IfxScuCcu_getPllErayFrequency();
	jeq	d15,#2,.L3
.L485:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    65          break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    66      case IfxAsclin_ClockSource_ascFastClock:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    67          frequency = IfxScuCcu_getBaud2Frequency();
	jeq	d15,#4,.L4
.L486:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    68          break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    69      case IfxAsclin_ClockSource_ascSlowClock:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    70          frequency = IfxScuCcu_getBaud1Frequency();
	mov	d0,#8
	jeq	d15,d0,.L5
.L487:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    71          break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    72      default:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    73          frequency = 0.0;
	mov	d0,#16
	jeq	d15,d0,.L6
	j	.L7
.L2:
	j	IfxScuCcu_getSpbFrequency
.L3:
	j	IfxScuCcu_getOsc0Frequency
.L4:
	j	IfxScuCcu_getPllErayFrequency
.L5:
	j	IfxScuCcu_getBaud2Frequency
.L6:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    74          break;
	j	IfxScuCcu_getBaud1Frequency

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    75      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    76  
.L7:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    77      return frequency;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    78  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    79  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    80  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    81  sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    82  {
	mov	d2,#0
	ret
.L225:
	
__IfxAsclin_getFaFrequency_function_end:
	.size	IfxAsclin_getFaFrequency,__IfxAsclin_getFaFrequency_function_end-IfxAsclin_getFaFrequency
.L113:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getIndex',code,cluster('IfxAsclin_getIndex')
	.sect	'.text.IfxAsclin.IfxAsclin_getIndex'
	.align	2
	
	.global	IfxAsclin_getIndex

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    83      uint32 base           = (uint32)&MODULE_ASCLIN0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    84      uint32 singleDistance = ((uint32)&MODULE_ASCLIN1) - base;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    85      uint32 distance       = ((uint32)asclin) - base;
; Function IfxAsclin_getIndex
.L66:
IfxAsclin_getIndex:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    86      uint32 index          = distance / singleDistance;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    87      return index;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    88  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    89  
	mov.d	d15,a4
.L417:
	ld.w	d0,.1.cnt
.L564:
	sub	d15,d0
.L418:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    90  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    91  float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    92  {
	sh	d2,d15,#-8
	ret
.L313:
	
__IfxAsclin_getIndex_function_end:
	.size	IfxAsclin_getIndex,__IfxAsclin_getIndex_function_end-IfxAsclin_getIndex
.L153:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getOvsFrequency',code,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getOvsFrequency'
	.align	2
	
	.global	IfxAsclin_getOvsFrequency

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    93      return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    94  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    95  
; Function IfxAsclin_getOvsFrequency
.L68:
IfxAsclin_getOvsFrequency:	.type	func
	mov.aa	a15,a4
.L420:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    96  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    97  float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
	call	IfxAsclin_getPdFrequency
.L419:
	ld.hu	d15,[a15]34
.L492:
	extr.u	d15,d15,#0,#12
	ld.hu	d0,[a15]32
	extr.u	d0,d0,#0,#12
.L493:
	itof	d15,d15
.L494:
	mul.f	d15,d2,d15
.L495:
	itof	d0,d0
.L496:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    98  {
	div.f	d2,d15,d0
	ret
.L234:
	
__IfxAsclin_getOvsFrequency_function_end:
	.size	IfxAsclin_getOvsFrequency,__IfxAsclin_getOvsFrequency_function_end-IfxAsclin_getOvsFrequency
.L118:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getPdFrequency',code,cluster('IfxAsclin_getPdFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getPdFrequency'
	.align	2
	
	.global	IfxAsclin_getPdFrequency

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    99      return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   100  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   101  
; Function IfxAsclin_getPdFrequency
.L70:
IfxAsclin_getPdFrequency:	.type	func
	mov.aa	a15,a4
.L422:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   103  float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
	call	IfxAsclin_getFaFrequency
.L421:
	ld.hu	d15,[a15]20
	extr.u	d15,d15,#0,#12
.L501:
	add	d15,#1
	itof	d15,d15
.L502:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   104  {
	div.f	d2,d2,d15
	ret
.L236:
	
__IfxAsclin_getPdFrequency_function_end:
	.size	IfxAsclin_getPdFrequency,__IfxAsclin_getPdFrequency_function_end-IfxAsclin_getPdFrequency
.L123:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getShiftFrequency',code,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getShiftFrequency'
	.align	2
	
	.global	IfxAsclin_getShiftFrequency

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   105      return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   106  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   107  
; Function IfxAsclin_getShiftFrequency
.L72:
IfxAsclin_getShiftFrequency:	.type	func
	mov.aa	a15,a4
.L424:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   108  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   109  volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
	call	IfxAsclin_getOvsFrequency
.L423:
	ld.bu	d15,[a15]22
	and	d15,#15
	itof	d15,d15
.L507:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   110  {
	div.f	d2,d2,d15
	ret
.L238:
	
__IfxAsclin_getShiftFrequency_function_end:
	.size	IfxAsclin_getShiftFrequency,__IfxAsclin_getShiftFrequency_function_end-IfxAsclin_getShiftFrequency
.L128:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getSrcPointerEr',code,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.text.IfxAsclin.IfxAsclin_getSrcPointerEr'
	.align	2
	
	.global	IfxAsclin_getSrcPointerEr

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   111      return &MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   112  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   113  
; Function IfxAsclin_getSrcPointerEr
.L74:
IfxAsclin_getSrcPointerEr:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   114  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   115  volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
	call	IfxAsclin_getIndex
.L569:
	fcall	.cocofun_5
.L425:
	lea	a2,[a3]-32632
.L570:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   116  {
	ret
.L316:
	
__IfxAsclin_getSrcPointerEr_function_end:
	.size	IfxAsclin_getSrcPointerEr,__IfxAsclin_getSrcPointerEr_function_end-IfxAsclin_getSrcPointerEr
.L158:
	; End of function
	
	.sdecl	'.text.IfxAsclin..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.IfxAsclin..cocofun_5'
	.align	2
; Function .cocofun_5
.L76:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:1
	mul	d15,d2,#12
	mov.a	a15,d15
	movh.a	a3,#61444
	add.a	a3,a15
.L646:
	fret
.L223:
	; End of function
	.sdecl	'.text.IfxAsclin.IfxAsclin_getSrcPointerRx',code,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.text.IfxAsclin.IfxAsclin_getSrcPointerRx'
	.align	2
	
	.global	IfxAsclin_getSrcPointerRx

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   117      return &MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   118  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   119  
; Function IfxAsclin_getSrcPointerRx
.L78:
IfxAsclin_getSrcPointerRx:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   121  volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
	call	IfxAsclin_getIndex
.L575:
	fcall	.cocofun_3
.L426:
	add.a	a2,#4
.L576:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   122  {
	ret
.L319:
	
__IfxAsclin_getSrcPointerRx_function_end:
	.size	IfxAsclin_getSrcPointerRx,__IfxAsclin_getSrcPointerRx_function_end-IfxAsclin_getSrcPointerRx
.L163:
	; End of function
	
	.sdecl	'.text.IfxAsclin..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.IfxAsclin..cocofun_3'
	.align	2
; Function .cocofun_3
.L80:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	fcall	.cocofun_5
.L636:
	lea	a2,[a3]-32640
.L637:
	fret
.L213:
	; End of function
	.sdecl	'.text.IfxAsclin.IfxAsclin_getSrcPointerTx',code,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.text.IfxAsclin.IfxAsclin_getSrcPointerTx'
	.align	2
	
	.global	IfxAsclin_getSrcPointerTx

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   123      return &MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   124  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   125  
; Function IfxAsclin_getSrcPointerTx
.L82:
IfxAsclin_getSrcPointerTx:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   127  uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
	call	IfxAsclin_getIndex
.L581:
	fcall	.cocofun_3
.L427:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   128  {
	ret
.L322:
	
__IfxAsclin_getSrcPointerTx_function_end:
	.size	IfxAsclin_getSrcPointerTx,__IfxAsclin_getSrcPointerTx_function_end-IfxAsclin_getSrcPointerTx
.L168:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_read16',code,cluster('IfxAsclin_read16')
	.sect	'.text.IfxAsclin.IfxAsclin_read16'
	.align	2
	
	.global	IfxAsclin_read16

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   129      volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   130  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   131      while (count > 0)
; Function IfxAsclin_read16
.L84:
IfxAsclin_read16:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   132      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   133          *data++ = (uint16)rxData->U;
	lea	a15,[a4]72
.L428:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   134          count--;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   135      }
	j	.L21
.L22:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   136  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   137      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   138  }
	add	d4,#-1
	ld.w	d15,[a15]
.L586:
	st.h	[a5+],d15
.L21:
	jne	d4,#0,.L22
.L587:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   139  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   140  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   141  uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   142  {
	mov	d2,#0
	ret
.L324:
	
__IfxAsclin_read16_function_end:
	.size	IfxAsclin_read16,__IfxAsclin_read16_function_end-IfxAsclin_read16
.L173:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_read32',code,cluster('IfxAsclin_read32')
	.sect	'.text.IfxAsclin.IfxAsclin_read32'
	.align	2
	
	.global	IfxAsclin_read32

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   143      volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   145      while (count > 0)
; Function IfxAsclin_read32
.L86:
IfxAsclin_read32:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   146      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   147          *data++ = rxData->U;
	lea	a15,[a4]72
.L429:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   148          count--;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   149      }
	j	.L24
.L25:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   150  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   151      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   152  }
	add	d4,#-1
	ld.w	d15,[a15]
.L592:
	st.w	[a5+],d15
.L24:
	jne	d4,#0,.L25
.L593:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   154  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   155  uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   156  {
	mov	d2,#0
	ret
.L331:
	
__IfxAsclin_read32_function_end:
	.size	IfxAsclin_read32,__IfxAsclin_read32_function_end-IfxAsclin_read32
.L178:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_read8',code,cluster('IfxAsclin_read8')
	.sect	'.text.IfxAsclin.IfxAsclin_read8'
	.align	2
	
	.global	IfxAsclin_read8

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   157      volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   158  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   159      while (count > 0)
; Function IfxAsclin_read8
.L88:
IfxAsclin_read8:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   160      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   161          *data++ = (uint8)rxData->U;
	lea	a15,[a4]72
.L430:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   162          count--;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   163      }
	j	.L27
.L28:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   164  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   165      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   166  }
	add	d4,#-1
	ld.w	d15,[a15]
.L598:
	st.b	[a5+],d15
.L27:
	jne	d4,#0,.L28
.L599:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   167  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   168  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   169  void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   170  {
	mov	d2,#0
	ret
.L337:
	
__IfxAsclin_read8_function_end:
	.size	IfxAsclin_read8,__IfxAsclin_read8_function_end-IfxAsclin_read8
.L183:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_setBaudrateBitFields',code,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.text.IfxAsclin.IfxAsclin_setBaudrateBitFields'
	.align	2
	
	.global	IfxAsclin_setBaudrateBitFields

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   171      IfxAsclin_ClockSource clockSource = IfxAsclin_getClockSource(asclin); /* gets the current clock source */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   172      IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);      /* turns off the clock for settings */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   173      IfxAsclin_setPrescaler(asclin, prescaler);                            /* sets the prescaler*/
; Function IfxAsclin_setBaudrateBitFields
.L90:
IfxAsclin_setBaudrateBitFields:	.type	func
	mov.aa	a15,a4
.L349:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
	ld.bu	d15,[a15]76
.L350:
	mov	e8,d5,d4
.L353:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
	and	d12,d15,#31
.L354:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   174  ator(asclin, denominator);                        /* sets the denominator*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   175      IfxAsclin_setOversampling(asclin, oversampling);                      /* sets the oversampling*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   176      IfxAsclin_setClockSource(asclin, clockSource);                        /* sets the clock source back on*/
	mov	d4,#0
.L431:
	mov	e10,d7,d6
	call	IfxAsclin_setClockSource
.L356:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      return asclin->CSR.B.CON;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      return asclin->FLAGS.B.CE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      return asclin->FLAGS.B.FED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      return asclin->FLAGS.B.FE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      return asclin->FLAGS.B.HT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      return asclin->KRST0.B.RSTSTAT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      return asclin->FLAGS.B.LA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      return asclin->FLAGS.B.LC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      return asclin->FLAGS.B.LP;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      return asclin->CLC.B.DISS;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      return asclin->FLAGS.B.PE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      return asclin->BITCON.B.PRESCALER + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.RED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->IOCR.B.RXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->FLAGS.B.RT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1961  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1962  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1963  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1964  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1965  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1966      return asclin->RXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1967  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1968  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1969  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1970  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1971  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1972      return asclin->FLAGS.B.RFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1973  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1974  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1975  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1976  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1977  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1978      return asclin->RXFIFOCON.B.OUTW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1979  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1980  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1981  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1982  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1983  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1984      return asclin->FLAGS.B.RFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1985  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1986  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1987  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1988  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1989  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1990      return asclin->FLAGS.B.RFU;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1991  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1992  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1993  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1994  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1995  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1996      return asclin->FLAGS.B.RH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1998  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1999  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2000  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2002      return asclin->FLAGS.B.RR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2003  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2004  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2005  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2006  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2007  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2008      return asclin->FLAGS.B.TC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2009  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2010  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2011  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2012  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2013  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2014      return asclin->IOCR.B.TXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2015  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2016  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2017  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2018  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2019  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2020      return asclin->TXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2021  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2023  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2024  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2025  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2026      return asclin->FLAGS.B.TFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2027  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2028  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2029  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2030  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2031  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2032      return asclin->TXFIFOCON.B.INW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2033  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2034  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2035  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2036  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2037  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2038      return asclin->FLAGS.B.TFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2039  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2040  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2041  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2042  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2043  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2044      return asclin->FLAGS.B.TH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2045  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2046  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2047  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2048  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2049  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2050      return asclin->FLAGS.B.TR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2051  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2052  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2053  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2054  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2055  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2056      IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2057      IfxAsclin_enableCts(cts->module, TRUE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2058      IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2059  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2060  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2062  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2063  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2064      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2065      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2066  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2068  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2069  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2070  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2071      IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2072      IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2073  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2074  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2075  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2076  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2077  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2078      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2079      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2080  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2081  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2082  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2083  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2084  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2085      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2086      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2087  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2088  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2089  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2090  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2091  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2092      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2093      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2094  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2095  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2097  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2098  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2099  	return asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2100  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2101  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2103  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2105      asclin->BRD.B.LOWERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2106  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2108  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2109  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2111      asclin->BRD.B.UPPERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2112  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2114  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2115  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2116  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2117      asclin->LIN.CON.B.CSI = csi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2118  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2119  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2121  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2122  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2123      asclin->DATCON.B.CSM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2124  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2125  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2127  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2128  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2129      asclin->IOCR.B.CPOL = cpol;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2130  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2132  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2133  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2134  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2135      asclin->IOCR.B.CTS = ctsi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2136  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2137  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2139  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2140  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2141      asclin->DATCON.B.DATLEN = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2142  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2143  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2145  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2146  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2147      asclin->BRG.B.DENOMINATOR = denominator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2148  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2150  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2151  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2152  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2153      asclin->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2154  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2156  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2157  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2158  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2159      asclin->CLC.B.DISR = 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2160  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2161  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2163  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2165      asclin->IOCR.B.DEPTH = __minu(depth, 63);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2166  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2168  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2169  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2170  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2171      asclin->FRAMECON.B.MODE = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2172  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2174  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2175  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2177      asclin->DATCON.B.HO = type;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2178  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2181  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2182  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2183      asclin->FRAMECON.B.IDLE = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2184  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2185  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2187  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2188  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2189      asclin->KRST1.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2190  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2191  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2193  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2194  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2195      asclin->KRST0.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2196  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2198  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2199  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2201      asclin->FRAMECON.B.LEAD = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2202  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2203  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2205  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2206  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2207      asclin->LIN.BTIMER.B.BREAK = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2208  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2209  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2210  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2211  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2212  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2213      asclin->LIN.HTIMER.B.HEADER = timeout;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2214  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2216  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2217  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2218  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2219      asclin->LIN.CON.B.MS = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2220  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2223  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2224  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2225      asclin->DATCON.B.RM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2226  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2227  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2228  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2229  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2230  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2231      asclin->DATCON.B.RESPONSE = __minu(threshold, 256);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2232  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2234  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2235  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2236  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2237      asclin->BRG.B.NUMERATOR = numerator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2238  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2240  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2241  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2242  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2243      asclin->BITCON.B.OVERSAMPLING = ovsFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2244  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2245  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2247  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2248  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2249      asclin->FRAMECON.B.ODD = type;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2250  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2252  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2253  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2254  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2255      asclin->BITCON.B.PRESCALER = prescaler - 1;
	ld.hu	d0,[a15]20
.L604:
	add	d8,#-1
.L605:
	insert	d15,d0,d8,#0,#12
	st.h	[a15]20,d15
.L357:
	fcall	.cocofun_4
.L364:
	ld.hu	d15,[a15]32
.L372:
	mov	d4,d12
	mov.aa	a4,a15
.L379:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      return asclin->CSR.B.CON;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      return asclin->FLAGS.B.CE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      return asclin->FLAGS.B.FED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      return asclin->FLAGS.B.FE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      return asclin->FLAGS.B.HT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      return asclin->KRST0.B.RSTSTAT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      return asclin->FLAGS.B.LA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      return asclin->FLAGS.B.LC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      return asclin->FLAGS.B.LP;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      return asclin->CLC.B.DISS;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      return asclin->FLAGS.B.PE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      return asclin->BITCON.B.PRESCALER + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.RED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->IOCR.B.RXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->FLAGS.B.RT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1961  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1962  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1963  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1964  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1965  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1966      return asclin->RXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1967  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1968  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1969  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1970  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1971  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1972      return asclin->FLAGS.B.RFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1973  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1974  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1975  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1976  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1977  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1978      return asclin->RXFIFOCON.B.OUTW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1979  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1980  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1981  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1982  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1983  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1984      return asclin->FLAGS.B.RFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1985  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1986  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1987  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1988  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1989  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1990      return asclin->FLAGS.B.RFU;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1991  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1992  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1993  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1994  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1995  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1996      return asclin->FLAGS.B.RH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1998  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1999  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2000  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2002      return asclin->FLAGS.B.RR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2003  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2004  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2005  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2006  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2007  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2008      return asclin->FLAGS.B.TC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2009  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2010  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2011  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2012  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2013  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2014      return asclin->IOCR.B.TXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2015  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2016  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2017  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2018  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2019  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2020      return asclin->TXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2021  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2023  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2024  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2025  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2026      return asclin->FLAGS.B.TFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2027  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2028  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2029  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2030  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2031  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2032      return asclin->TXFIFOCON.B.INW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2033  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2034  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2035  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2036  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2037  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2038      return asclin->FLAGS.B.TFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2039  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2040  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2041  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2042  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2043  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2044      return asclin->FLAGS.B.TH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2045  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2046  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2047  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2048  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2049  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2050      return asclin->FLAGS.B.TR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2051  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2052  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2053  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2054  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2055  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2056      IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2057      IfxAsclin_enableCts(cts->module, TRUE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2058      IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2059  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2060  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2062  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2063  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2064      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2065      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2066  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2068  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2069  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2070  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2071      IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2072      IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2073  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2074  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2075  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2076  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2077  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2078      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2079      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2080  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2081  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2082  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2083  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2084  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2085      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2086      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2087  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2088  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2089  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2090  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2091  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2092      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2093      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2094  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2095  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2097  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2098  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2099  	return asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2100  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2101  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2103  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2105      asclin->BRD.B.LOWERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2106  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2108  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2109  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2111      asclin->BRD.B.UPPERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2112  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2114  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2115  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2116  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2117      asclin->LIN.CON.B.CSI = csi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2118  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2119  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2121  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2122  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2123      asclin->DATCON.B.CSM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2124  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2125  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2127  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2128  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2129      asclin->IOCR.B.CPOL = cpol;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2130  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2132  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2133  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2134  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2135      asclin->IOCR.B.CTS = ctsi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2136  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2137  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2139  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2140  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2141      asclin->DATCON.B.DATLEN = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2142  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2143  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2145  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2146  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2147      asclin->BRG.B.DENOMINATOR = denominator;
	insert	d15,d15,d10,#0,#12
	st.h	[a15]32,d15
.L380:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2148  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2150  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2151  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2152  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2153      asclin->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2154  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2156  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2157  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2158  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2159      asclin->CLC.B.DISR = 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2160  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2161  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2163  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2165      asclin->IOCR.B.DEPTH = __minu(depth, 63);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2166  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2168  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2169  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2170  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2171      asclin->FRAMECON.B.MODE = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2172  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2174  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2175  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2177      asclin->DATCON.B.HO = type;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2178  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2181  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2182  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2183      asclin->FRAMECON.B.IDLE = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2184  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2185  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2187  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2188  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2189      asclin->KRST1.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2190  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2191  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2193  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2194  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2195      asclin->KRST0.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2196  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2198  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2199  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2201      asclin->FRAMECON.B.LEAD = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2202  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2203  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2205  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2206  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2207      asclin->LIN.BTIMER.B.BREAK = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2208  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2209  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2210  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2211  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2212  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2213      asclin->LIN.HTIMER.B.HEADER = timeout;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2214  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2216  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2217  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2218  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2219      asclin->LIN.CON.B.MS = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2220  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2223  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2224  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2225      asclin->DATCON.B.RM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2226  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2227  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2228  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2229  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2230  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2231      asclin->DATCON.B.RESPONSE = __minu(threshold, 256);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2232  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2234  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2235  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2236  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2237      asclin->BRG.B.NUMERATOR = numerator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2238  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2240  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2241  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2242  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2243      asclin->BITCON.B.OVERSAMPLING = ovsFactor;
	ld.bu	d15,[a15]22
.L434:
	insert	d15,d15,d11,#0,#4
	st.b	[a15]22,d15
.L382:
	j	IfxAsclin_setClockSource
.L343:
	
__IfxAsclin_setBaudrateBitFields_function_end:
	.size	IfxAsclin_setBaudrateBitFields,__IfxAsclin_setBaudrateBitFields_function_end-IfxAsclin_setBaudrateBitFields
.L188:
	; End of function
	
	.sdecl	'.text.IfxAsclin..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.IfxAsclin..cocofun_4'
	.align	2
; Function .cocofun_4
.L92:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      return asclin->CSR.B.CON;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      return asclin->FLAGS.B.CE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      return asclin->FLAGS.B.FED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      return asclin->FLAGS.B.FE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      return asclin->FLAGS.B.HT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      return asclin->KRST0.B.RSTSTAT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      return asclin->FLAGS.B.LA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      return asclin->FLAGS.B.LC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      return asclin->FLAGS.B.LP;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      return asclin->CLC.B.DISS;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      return asclin->FLAGS.B.PE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      return asclin->BITCON.B.PRESCALER + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.RED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->IOCR.B.RXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->FLAGS.B.RT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1961  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1962  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1963  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1964  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1965  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1966      return asclin->RXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1967  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1968  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1969  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1970  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1971  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1972      return asclin->FLAGS.B.RFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1973  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1974  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1975  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1976  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1977  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1978      return asclin->RXFIFOCON.B.OUTW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1979  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1980  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1981  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1982  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1983  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1984      return asclin->FLAGS.B.RFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1985  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1986  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1987  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1988  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1989  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1990      return asclin->FLAGS.B.RFU;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1991  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1992  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1993  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1994  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1995  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1996      return asclin->FLAGS.B.RH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1998  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1999  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2000  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2002      return asclin->FLAGS.B.RR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2003  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2004  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2005  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2006  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2007  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2008      return asclin->FLAGS.B.TC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2009  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2010  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2011  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2012  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2013  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2014      return asclin->IOCR.B.TXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2015  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2016  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2017  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2018  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2019  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2020      return asclin->TXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2021  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2023  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2024  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2025  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2026      return asclin->FLAGS.B.TFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2027  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2028  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2029  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2030  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2031  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2032      return asclin->TXFIFOCON.B.INW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2033  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2034  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2035  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2036  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2037  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2038      return asclin->FLAGS.B.TFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2039  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2040  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2041  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2042  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2043  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2044      return asclin->FLAGS.B.TH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2045  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2046  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2047  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2048  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2049  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2050      return asclin->FLAGS.B.TR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2051  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2052  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2053  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2054  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2055  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2056      IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2057      IfxAsclin_enableCts(cts->module, TRUE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2058      IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2059  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2060  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2062  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2063  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2064      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2065      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2066  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2068  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2069  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2070  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2071      IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2072      IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2073  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2074  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2075  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2076  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2077  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2078      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2079      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2080  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2081  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2082  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2083  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2084  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2085      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2086      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2087  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2088  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2089  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2090  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2091  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2092      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2093      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2094  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2095  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2097  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2098  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2099  	return asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2100  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2101  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2103  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2105      asclin->BRD.B.LOWERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2106  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2108  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2109  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2111      asclin->BRD.B.UPPERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2112  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2114  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2115  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2116  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2117      asclin->LIN.CON.B.CSI = csi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2118  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2119  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2121  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2122  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2123      asclin->DATCON.B.CSM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2124  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2125  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2127  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2128  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2129      asclin->IOCR.B.CPOL = cpol;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2130  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2132  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2133  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2134  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2135      asclin->IOCR.B.CTS = ctsi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2136  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2137  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2139  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2140  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2141      asclin->DATCON.B.DATLEN = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2142  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2143  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2145  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2146  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2147      asclin->BRG.B.DENOMINATOR = denominator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2148  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2150  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2151  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2152  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2153      asclin->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2154  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2156  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2157  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2158  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2159      asclin->CLC.B.DISR = 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2160  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2161  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2163  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2165      asclin->IOCR.B.DEPTH = __minu(depth, 63);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2166  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2168  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2169  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2170  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2171      asclin->FRAMECON.B.MODE = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2172  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2174  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2175  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2177      asclin->DATCON.B.HO = type;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2178  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2181  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2182  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2183      asclin->FRAMECON.B.IDLE = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2184  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2185  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2187  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2188  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2189      asclin->KRST1.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2190  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2191  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2193  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2194  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2195      asclin->KRST0.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2196  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2198  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2199  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2201      asclin->FRAMECON.B.LEAD = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2202  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2203  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2205  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2206  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2207      asclin->LIN.BTIMER.B.BREAK = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2208  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2209  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2210  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2211  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2212  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2213      asclin->LIN.HTIMER.B.HEADER = timeout;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2214  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2216  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2217  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2218  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2219      asclin->LIN.CON.B.MS = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2220  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2223  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2224  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2225      asclin->DATCON.B.RM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2226  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2227  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2228  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2229  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2230  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2231      asclin->DATCON.B.RESPONSE = __minu(threshold, 256);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2232  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2234  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2235  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2236  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2237      asclin->BRG.B.NUMERATOR = numerator;
	ld.hu	d15,[a15]34
.L433:
	insert	d15,d15,d9,#0,#12
	st.h	[a15]34,d15
.L432:
	fret
.L218:
	; End of function
	.sdecl	'.text.IfxAsclin.IfxAsclin_setBitTiming',code,cluster('IfxAsclin_setBitTiming')
	.sect	'.text.IfxAsclin.IfxAsclin_setBitTiming'
	.align	2
	
	.global	IfxAsclin_setBitTiming

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   177  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   178  boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   179  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   180      IfxAsclin_ClockSource source = IfxAsclin_getClockSource(asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   181      float32               fOvs;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   182      uint32                d, n, dBest = 1, nBest = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   183      float32               f;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   184  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   185      /* Set the PD frequency */
; Function IfxAsclin_setBitTiming
.L94:
IfxAsclin_setBitTiming:	.type	func
	mov.aa	a15,a4
.L264:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
	ld.bu	d15,[a15]76
.L265:
	sub.a	a10,#24
.L268:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
	and	d15,#31
	st.w	[a10]12,d7
.L269:
	mov	d10,d4

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
	st.w	[a10]16,d15
.L437:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   186  t32               fpd = IfxAsclin_getPdFrequency(asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   187      oversampling = __maxu(oversampling, 4);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   188      samplepoint  = __maxu(samplepoint, 1);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   189      fOvs         = baudrate * oversampling;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   190      float32               relError   = fOvs;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   191      float32               limit      = 0.001 * fOvs;                     // save the error limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   192  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   193      boolean               terminated = FALSE;
	mov	e8,d6,d5
	call	IfxAsclin_getPdFrequency
.L435:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   194      float32               newRelError;                                   //modified by Hassan
	max.u	d15,d8,#4
.L440:
	extr.u	d15,d15,#0,#8
	st.w	[a10]4,d15
.L441:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   195      uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan
	max.u	d15,d9,#1
	st.w	[a10]8,d15
.L271:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   197      d              = (uint32)(fpd / fOvs);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   198      n              = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   199  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   200      dBest          = d;
	mov	d5,#0
.L272:
	ld.w	d15,[a10]4
.L273:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   201      nBest          = n;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   202      adder_facL_min = 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   203      f              = (fpd * n) / d;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   204      relError       = __absf(fOvs - f);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   205  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   206      if (relError <= limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   207      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   208          terminated = TRUE;
	mov	d9,#1
.L274:
	utof	d15,d15
.L275:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   209      }
	mov	d3,d5
.L276:
	mul.f	d4,d10,d15
	ld.w	d15,.2.cnt
.L277:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   210  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   211      for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
	mov	d10,d5
.L438:
	div.f	d0,d2,d4
.L524:
	mul.f	d15,d4,d15
	st.w	[a10],d15
.L443:
	ftouz	d1,d0
.L445:
	utof	d0,d1
.L525:
	mov	d8,d1
.L446:
	div.f	d0,d2,d0
.L447:
	sub.f	d11,d4,d0
.L449:
	cmp.f	d15,d11,d10
.L444:
	jz.t	d15:0,.L31
	insn.t	d11,d11:31,d11:31
.L31:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   212      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   213          if (n == 2)
	ld.w	d0,[a10]
.L448:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   214          {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   215              adder_facL = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   216              adder_facH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   217          }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   218          else
	mov	d13,#2
.L450:
	cmp.f	d15,d11,d0
	and	d15,#3
	ne	d15,d15,#0
.L526:
	cmov	d5,d15,#1
	j	.L33
.L34:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   219          {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   220              adder_facL = (adder_facL_min * n) / nBest;
	jne	d13,#2,.L35
.L527:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   221              adder_facH = adder_facL + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   222          }
	mov	d6,#1
.L451:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   223  
	mov	d12,#1
	j	.L37
.L35:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   224          for (count = adder_facL; count <= adder_facH; count++)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   225          {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   226              f           = (fpd * n) / (n * d + count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   227              newRelError = __absf(fOvs - f);
	mul	d0,d3,d13
.L452:
	div.u	e6,d0,d9
.L453:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   228  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   229              if (relError > (newRelError))
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   230              {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   231                  relError       = newRelError;
	add	d12,d6,#1
	j	.L37
.L38:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   232                  nBest          = n;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   233                  dBest          = (n * d + count);
	madd	d14,d6,d13,d1
.L528:
	utof	d0,d13
.L529:
	mul.f	d0,d2,d0
.L530:
	utof	d15,d14
.L531:
	div.f	d15,d0,d15
.L454:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   234                  adder_facL_min = count;
	sub.f	d0,d4,d15
	cmp.f	d15,d0,d10
.L455:
	jz.t	d15:0,.L40
	insn.t	d0,d0:31,d0:31
.L40:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   235              }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   236          }
	cmp.f	d15,d11,d0
.L532:
	jz.t	d15:2,.L41
.L533:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   237  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   238          if (relError <= limit)
	mov	d11,d0
.L534:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   239          {
	mov	e8,d13,d14
.L535:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   240              break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   241          }
	mov	d3,d6
.L41:
	add	d6,#1
.L37:
	jge.u	d12,d6,.L38
.L536:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   242      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   244      IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   245      asclin->BRG.B.DENOMINATOR = dBest;
	ld.w	d15,[a10]
.L456:
	cmp.f	d15,d11,d15
.L457:
	and	d15,#3
.L537:
	jne	d15,#0,.L42
.L538:
	add	d13,#1
.L33:
	jne	d5,#0,.L43
.L539:
	mul	d15,d13,d1
.L540:
	mov	d0,#4095
.L541:
	jge.u	d0,d15,.L34
.L43:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   246      asclin->BRG.B.NUMERATOR   = nBest;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   247  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   248      /* Set the SHIFT frequency */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   249      asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   251      /* Set the sampling point */
.L42:
	mov	d4,#0
	mov.aa	a4,a15
.L442:
	call	IfxAsclin_setClockSource
.L439:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   252      asclin->BITCON.B.SAMPLEPOINT = samplepoint;
	ld.hu	d15,[a15]32
.L458:
	insert	d15,d15,d8,#0,#12
	st.h	[a15]32,d15
.L436:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   253  
	fcall	.cocofun_4
.L459:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   254      /* Set the median filter */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   255      asclin->BITCON.B.SM = medianFilter ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   256  
	ld.w	d15,[a10]4
.L460:
	ld.bu	d0,[a15]22
.L542:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   257      IfxAsclin_setClockSource(asclin, source);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   258  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   259      return TRUE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   260  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   261  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   262  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   263  void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   264  {
	add	d15,#-1
	mov.aa	a4,a15
.L461:
	insert	d15,d0,d15,#0,#4
	st.b	[a15]22,d15
.L543:
	ld.w	d15,[a10]8
.L463:
	ld.bu	d0,[a15]23
.L544:
	ld.w	d4,[a10]16
.L545:
	insert	d15,d0,d15,#0,#4
	st.b	[a15]23,d15
.L464:
	ld.w	d15,[a10]12
.L465:
	ld.bu	d0,[a15]23
.L546:
	ne	d15,d15,#0
.L466:
	insert	d15,d0,d15,#7,#1
	st.b	[a15]23,d15
.L547:
	call	IfxAsclin_setClockSource
.L462:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   265      asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   266  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   267      /* Waits TW or polls for CSR.CON to change */
	mov	d2,#1
	ret
.L245:
	
__IfxAsclin_setBitTiming_function_end:
	.size	IfxAsclin_setBitTiming,__IfxAsclin_setBitTiming_function_end-IfxAsclin_setBitTiming
.L138:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_setClockSource',code,cluster('IfxAsclin_setClockSource')
	.sect	'.text.IfxAsclin.IfxAsclin_setClockSource'
	.align	2
	
	.global	IfxAsclin_setClockSource

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   268      if (clockSource == IfxAsclin_ClockSource_noClock)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   269      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   270          while (IfxAsclin_getClockStatus(asclin) != 0U)
; Function IfxAsclin_setClockSource
.L96:
IfxAsclin_setClockSource:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   271          {}
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   272      }
	ld.bu	d15,[a4]76
.L610:
	insert	d15,d15,d4,#0,#5
	st.b	[a4]76,d15
.L611:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   273      else
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   274      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   275          while (IfxAsclin_getClockStatus(asclin) != 1U)
	jne	d4,#0,.L45

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   276          {}
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   277      }
.L46:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      return asclin->CSR.B.CON;
	ld.bu	d15,[a4]79
.L392:
	jnz.t	d15:7,.L46
.L612:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   278  ile (IfxAsclin_getClockStatus(asclin) != 1U)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   279          {}
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   280      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   281  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   282  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   283  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   284  uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   285  {
	ret
.L45:
.L48:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  /** \brief Returns the module Index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \return module index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360  IFX_EXTERN sint32 IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      return asclin->CSR.B.CON;
	ld.bu	d15,[a4]79
.L396:
	jz.t	d15:7,.L48
.L613:
	ret
.L388:
	
__IfxAsclin_setClockSource_function_end:
	.size	IfxAsclin_setClockSource,__IfxAsclin_setClockSource_function_end-IfxAsclin_setClockSource
.L193:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_write16',code,cluster('IfxAsclin_write16')
	.sect	'.text.IfxAsclin.IfxAsclin_write16'
	.align	2
	
	.global	IfxAsclin_write16

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   286  rite16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   287  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   288      volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;
; Function IfxAsclin_write16
.L98:
IfxAsclin_write16:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   289  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   290      while ((count > 0))
	lea	a15,[a4]68
.L467:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   291      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   292          txData->U = *data++;
	j	.L49
.L50:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   293          count--;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   294      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   295  
	add	d4,#-1
	ld.hu	d15,[a5+]2
.L618:
	st.w	[a15],d15
.L49:
	jne	d4,#0,.L50
.L619:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   296      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   297  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   298  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   299  
	mov	d2,#0
	ret
.L397:
	
__IfxAsclin_write16_function_end:
	.size	IfxAsclin_write16,__IfxAsclin_write16_function_end-IfxAsclin_write16
.L198:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_write32',code,cluster('IfxAsclin_write32')
	.sect	'.text.IfxAsclin.IfxAsclin_write32'
	.align	2
	
	.global	IfxAsclin_write32

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   300  uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   301  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   302      volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;
; Function IfxAsclin_write32
.L100:
IfxAsclin_write32:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   303  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   304      while ((count > 0))
	lea	a15,[a4]68
.L468:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   305      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   306          txData->U = *data++;
	j	.L52
.L53:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   307          count--;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   308      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   309  
	add	d4,#-1
	ld.w	d15,[a5+]
.L624:
	st.w	[a15],d15
.L52:
	jne	d4,#0,.L53
.L625:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   310      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   311  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   312  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   313  
	mov	d2,#0
	ret
.L403:
	
__IfxAsclin_write32_function_end:
	.size	IfxAsclin_write32,__IfxAsclin_write32_function_end-IfxAsclin_write32
.L203:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_write8',code,cluster('IfxAsclin_write8')
	.sect	'.text.IfxAsclin.IfxAsclin_write8'
	.align	2
	
	.global	IfxAsclin_write8

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   314  uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   315  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   316      volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;
; Function IfxAsclin_write8
.L102:
IfxAsclin_write8:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   317  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   318      while ((count > 0))
	lea	a15,[a4]68
.L469:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   319      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   320          txData->U = *data++;
	j	.L55
.L56:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   321          count--;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   322      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   323  
	add	d4,#-1
	ld.bu	d15,[a5+]
.L630:
	st.w	[a15],d15
.L55:
	jne	d4,#0,.L56
.L631:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   324      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   325  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   327  
	mov	d2,#0
	ret
.L408:
	
__IfxAsclin_write8_function_end:
	.size	IfxAsclin_write8,__IfxAsclin_write8_function_end-IfxAsclin_write8
.L208:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_resetModule',code,cluster('IfxAsclin_resetModule')
	.sect	'.text.IfxAsclin.IfxAsclin_resetModule'
	.align	2
	
	.global	IfxAsclin_resetModule

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   328  void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   329  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   330      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; Function IfxAsclin_resetModule
.L104:
IfxAsclin_resetModule:	.type	func
	mov.aa	a15,a4
.L471:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   331      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   332  
	call	IfxScuWdt_getCpuWatchdogPassword
.L470:
	mov	d8,d2
.L473:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   333      asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L472:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   334      asclin->KRST1.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   335      IfxScuWdt_setCpuEndinit(passwd);
	ld.bu	d15,[a15]244
.L512:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   336  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   337      while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
	mov	d4,d8
.L474:
	or	d15,#1
	st.b	[a15]244,d15
.L513:
	ld.bu	d15,[a15]240
.L514:
	or	d15,#1
	st.b	[a15]240,d15
.L515:
	call	IfxScuWdt_setCpuEndinit

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   338      {}
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   339  
.L58:
	ld.bu	d15,[a15]244
.L516:
	jz.t	d15:1,.L58
.L517:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   340      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   341      asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   342  
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L518:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   343      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   344  }

	mov	d4,d8
	ld.bu	d15,[a15]236
.L475:
	or	d15,#1
	st.b	[a15]236,d15
.L519:


	j	IfxScuWdt_setCpuEndinit
.L240:
	
__IfxAsclin_resetModule_function_end:
	.size	IfxAsclin_resetModule,__IfxAsclin_resetModule_function_end-IfxAsclin_resetModule
.L133:
	; End of function
	
	.calls	'IfxAsclin_enableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxAsclin_enableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxAsclin_enableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getOsc0Frequency'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getPllErayFrequency'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getBaud2Frequency'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getBaud1Frequency'
	.calls	'IfxAsclin_getOvsFrequency','IfxAsclin_getPdFrequency'
	.calls	'IfxAsclin_getPdFrequency','IfxAsclin_getFaFrequency'
	.calls	'IfxAsclin_getShiftFrequency','IfxAsclin_getOvsFrequency'
	.calls	'IfxAsclin_getSrcPointerEr','IfxAsclin_getIndex'
	.calls	'IfxAsclin_getSrcPointerRx','IfxAsclin_getIndex'
	.calls	'IfxAsclin_getSrcPointerTx','IfxAsclin_getIndex'
	.calls	'IfxAsclin_setBaudrateBitFields','IfxAsclin_setClockSource'
	.calls	'IfxAsclin_setBitTiming','IfxAsclin_getPdFrequency'
	.calls	'IfxAsclin_setBitTiming','IfxAsclin_setClockSource'
	.calls	'IfxAsclin_resetModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxAsclin_resetModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxAsclin_resetModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxAsclin_getSrcPointerEr','.cocofun_5'
	.calls	'IfxAsclin_getSrcPointerRx','.cocofun_3'
	.calls	'.cocofun_3','.cocofun_5'
	.calls	'IfxAsclin_getSrcPointerTx','.cocofun_3'
	.calls	'IfxAsclin_setBaudrateBitFields','.cocofun_4'
	.calls	'IfxAsclin_setBitTiming','.cocofun_4'
	.calls	'IfxAsclin_enableAscErrorFlags','',0
	.calls	'IfxAsclin_enableModule','',0
	.calls	'IfxAsclin_getFaFrequency','',0
	.calls	'IfxAsclin_getIndex','',0
	.calls	'IfxAsclin_getOvsFrequency','',0
	.calls	'IfxAsclin_getPdFrequency','',0
	.calls	'IfxAsclin_getShiftFrequency','',0
	.calls	'IfxAsclin_getSrcPointerEr','',0
	.calls	'.cocofun_5','',0
	.calls	'IfxAsclin_getSrcPointerRx','',0
	.calls	'.cocofun_3','',0
	.calls	'IfxAsclin_getSrcPointerTx','',0
	.calls	'IfxAsclin_read16','',0
	.calls	'IfxAsclin_read32','',0
	.calls	'IfxAsclin_read8','',0
	.calls	'IfxAsclin_setBaudrateBitFields','',0
	.calls	'.cocofun_4','',0
	.calls	'IfxAsclin_setBitTiming','',24
	.calls	'IfxAsclin_setClockSource','',0
	.calls	'IfxAsclin_write16','',0
	.calls	'IfxAsclin_write32','',0
	.calls	'IfxAsclin_write8','',0
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuCcu_getBaud1Frequency
	.extern	IfxScuCcu_getBaud2Frequency
	.extern	IfxScuCcu_getOsc0Frequency
	.extern	IfxScuCcu_getPllErayFrequency
	.extern	IfxScuCcu_getSpbFrequency
	.calls	'IfxAsclin_resetModule','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L106:
	.word	93094
	.half	3
	.word	.L107
	.byte	4
.L105:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L108
	.byte	2
	.byte	'unsigned int',0,4,7,2
	.byte	'int',0,4,5
.L244:
	.byte	2
	.byte	'unsigned char',0,1,8
.L242:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,2,239,8,16,4,4
	.byte	'ENDINIT',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'PW',0,2
	.word	196
	.byte	14,0,2,35,0,4
	.byte	'REL',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,2,130,17,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	218
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,2,248,8,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	2,6,2,35,0,4
	.byte	'IR0',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'DR',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'IR1',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'UR',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PAR',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'TCR',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'TCTR',0,1
	.word	179
	.byte	7,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,2,141,17,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	354
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,2,135,9,16,4,4
	.byte	'AE',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'OE',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'IS0',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'DS',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'TO',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'IS1',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'US',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PAS',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'TCS',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'TCT',0,1
	.word	179
	.byte	7,0,2,35,1,4
	.byte	'TIM',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,2,152,17,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	598
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU',0,2,204,17,25,12,6
	.byte	'CON0',0
	.word	314
	.byte	4,2,35,0,6
	.byte	'CON1',0
	.word	558
	.byte	4,2,35,4,6
	.byte	'SR',0
	.word	789
	.byte	4,2,35,8,0,7
	.word	829
	.byte	8
	.word	892
	.byte	9
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,1,130,3,17,1,1,10
	.byte	'watchdog',0,1,130,3,65
	.word	897
	.byte	10
	.byte	'password',0,1,130,3,82
	.word	196
	.byte	11,0,9
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,1,222,3,17,1,1,10
	.byte	'watchdog',0,1,222,3,63
	.word	897
	.byte	10
	.byte	'password',0,1,222,3,80
	.word	196
	.byte	11,0,12
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,1,187,3,19
	.word	196
	.byte	1,1,10
	.byte	'watchdog',0,1,187,3,74
	.word	897
	.byte	11,0,9
	.byte	'__stopPerfCounters',0,3,3,217,1,17,1,1,11,0,2
	.byte	'unsigned long long int',0,8,7,13
	.byte	'void',0,8
	.word	1182
	.byte	12
	.byte	'__ld64',0,3,4,110,19
	.word	1156
	.byte	1,1,10
	.byte	'addr',0,4,110,32
	.word	1188
	.byte	11,0,9
	.byte	'__st64',0,3,4,118,17,1,1,10
	.byte	'addr',0,4,118,30
	.word	1188
	.byte	10
	.byte	'value',0,4,118,43
	.word	1156
	.byte	11,0,14,6,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_1',0,1,15
	.byte	'IfxCpu_ResourceCpu_2',0,2,15
	.byte	'IfxCpu_ResourceCpu_none',0,3,0,12
	.byte	'IfxCpu_getCoreIndex',0,3,5,170,5,31
	.word	1269
	.byte	1,1,11,0,12
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,185,4,20
	.word	179
	.byte	1,1,11,0
.L257:
	.byte	2
	.byte	'unsigned long int',0,4,7,12
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,190,5,19
	.word	1446
	.byte	1,1,10
	.byte	'address',0,5,190,5,55
	.word	1446
	.byte	11,0,12
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,198,5,20
	.word	179
	.byte	1,1,10
	.byte	'address',0,5,198,5,70
	.word	1446
	.byte	11,0,9
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,153,7,17,1,1,10
	.byte	'address',0,5,153,7,56
	.word	1446
	.byte	10
	.byte	'count',0,5,153,7,72
	.word	1446
	.byte	11,0,3
	.byte	'_Ifx_P_OUT_Bits',0,8,143,3,16,4,4
	.byte	'P0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'P2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'P3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'P4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'P5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'P6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'P7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'P8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'P9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'P10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'P11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'P12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'P13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'P14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'P15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,8,250,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	1675
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMR_Bits',0,8,169,2,16,4,4
	.byte	'PS0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'PS2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'PS3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'PS4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'PS5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'PS6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PS7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'PS8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'PS9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'PS10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'PS11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'PS12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'PS13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'PS14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'PS15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'PCL0',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'PCL2',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'PCL3',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'PCL4',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'PCL5',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'PCL6',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'PCL7',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'PCL8',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'PCL9',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'PCL10',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'PCL11',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'PCL12',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'PCL13',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'PCL14',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'PCL15',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,8,184,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	1991
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_ID_Bits',0,8,110,16,4,4
	.byte	'MODREV',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,8,156,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2562
	.byte	4,2,35,0,0,16,4
	.word	179
	.byte	17,3,0,3
	.byte	'_Ifx_P_IOCR0_Bits',0,8,140,1,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	3,5,2,35,0,4
	.byte	'PC0',0,1
	.word	179
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	179
	.byte	3,5,2,35,1,4
	.byte	'PC1',0,1
	.word	179
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	179
	.byte	3,5,2,35,2,4
	.byte	'PC2',0,1
	.word	179
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	3,5,2,35,3,4
	.byte	'PC3',0,1
	.word	179
	.byte	5,0,2,35,3,0,5,8,178,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2690
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IOCR4_Bits',0,8,166,1,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	3,5,2,35,0,4
	.byte	'PC4',0,1
	.word	179
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	179
	.byte	3,5,2,35,1,4
	.byte	'PC5',0,1
	.word	179
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	179
	.byte	3,5,2,35,2,4
	.byte	'PC6',0,1
	.word	179
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	3,5,2,35,3,4
	.byte	'PC7',0,1
	.word	179
	.byte	5,0,2,35,3,0,5,8,200,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2905
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IOCR8_Bits',0,8,179,1,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	3,5,2,35,0,4
	.byte	'PC8',0,1
	.word	179
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	179
	.byte	3,5,2,35,1,4
	.byte	'PC9',0,1
	.word	179
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	179
	.byte	3,5,2,35,2,4
	.byte	'PC10',0,1
	.word	179
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	3,5,2,35,3,4
	.byte	'PC11',0,1
	.word	179
	.byte	5,0,2,35,3,0,5,8,211,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3120
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IOCR12_Bits',0,8,153,1,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	3,5,2,35,0,4
	.byte	'PC12',0,1
	.word	179
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	179
	.byte	3,5,2,35,1,4
	.byte	'PC13',0,1
	.word	179
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	179
	.byte	3,5,2,35,2,4
	.byte	'PC14',0,1
	.word	179
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	3,5,2,35,3,4
	.byte	'PC15',0,1
	.word	179
	.byte	5,0,2,35,3,0,5,8,189,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3337
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IN_Bits',0,8,118,16,4,4
	.byte	'P0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'P2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'P3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'P4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'P5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'P6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'P7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'P8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'P9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'P10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'P11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'P12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'P13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'P14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'P15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,8,167,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3557
	.byte	4,2,35,0,0,16,24
	.word	179
	.byte	17,23,0,3
	.byte	'_Ifx_P_PDR0_Bits',0,8,204,3,16,4,4
	.byte	'PD0',0,1
	.word	179
	.byte	3,5,2,35,0,4
	.byte	'PL0',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'PD1',0,1
	.word	179
	.byte	3,1,2,35,0,4
	.byte	'PL1',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'PD2',0,1
	.word	179
	.byte	3,5,2,35,1,4
	.byte	'PL2',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'PD3',0,1
	.word	179
	.byte	3,1,2,35,1,4
	.byte	'PL3',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'PD4',0,1
	.word	179
	.byte	3,5,2,35,2,4
	.byte	'PL4',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'PD5',0,1
	.word	179
	.byte	3,1,2,35,2,4
	.byte	'PL5',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'PD6',0,1
	.word	179
	.byte	3,5,2,35,3,4
	.byte	'PL6',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'PD7',0,1
	.word	179
	.byte	3,1,2,35,3,4
	.byte	'PL7',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,8,155,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3880
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_PDR1_Bits',0,8,225,3,16,4,4
	.byte	'PD8',0,1
	.word	179
	.byte	3,5,2,35,0,4
	.byte	'PL8',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'PD9',0,1
	.word	179
	.byte	3,1,2,35,0,4
	.byte	'PL9',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'PD10',0,1
	.word	179
	.byte	3,5,2,35,1,4
	.byte	'PL10',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'PD11',0,1
	.word	179
	.byte	3,1,2,35,1,4
	.byte	'PL11',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'PD12',0,1
	.word	179
	.byte	3,5,2,35,2,4
	.byte	'PL12',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'PD13',0,1
	.word	179
	.byte	3,1,2,35,2,4
	.byte	'PL13',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'PD14',0,1
	.word	179
	.byte	3,5,2,35,3,4
	.byte	'PL14',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'PD15',0,1
	.word	179
	.byte	3,1,2,35,3,4
	.byte	'PL15',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,8,166,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4184
	.byte	4,2,35,0,0,16,8
	.word	179
	.byte	17,7,0,3
	.byte	'_Ifx_P_ESR_Bits',0,8,88,16,4,4
	.byte	'EN0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,8,145,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4509
	.byte	4,2,35,0,0,16,12
	.word	179
	.byte	17,11,0,3
	.byte	'_Ifx_P_PDISC_Bits',0,8,182,3,16,4,4
	.byte	'PDIS0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PDIS1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'PDIS2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'PDIS3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'PDIS4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'PDIS5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'PDIS6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PDIS7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'PDIS8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'PDIS9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'PDIS10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'PDIS11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'PDIS12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'PDIS13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'PDIS14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'PDIS15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,8,144,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4849
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_PCSR_Bits',0,8,165,3,16,4,4
	.byte	'SEL0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'SEL1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'SEL2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'SEL3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'SEL4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'SEL5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'SEL6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	196
	.byte	3,6,2,35,0,4
	.byte	'SEL10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'SEL11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,4
	.word	156
	.byte	19,1,2,35,0,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,8,133,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5215
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR0_Bits',0,8,206,2,16,4,4
	.byte	'PS0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'PS2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'PS3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	28,0,2,35,0,0,5,8,206,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5485
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR4_Bits',0,8,227,2,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	4,4,2,35,0,4
	.byte	'PS4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'PS5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'PS6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PS7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	156
	.byte	24,0,2,35,0,0,5,8,228,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5632
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR8_Bits',0,8,238,2,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'PS8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'PS9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'PS10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'PS11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,4
	.word	156
	.byte	20,0,2,35,0,0,5,8,239,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5801
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR12_Bits',0,8,216,2,16,4,4
	.byte	'reserved_0',0,2
	.word	196
	.byte	12,4,2,35,0,4
	.byte	'PS12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'PS13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'PS14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'PS15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,8,217,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5973
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR0_Bits',0,8,232,1,16,4,4
	.byte	'reserved_0',0,2
	.word	196
	.byte	16,0,2,35,0,4
	.byte	'PCL0',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'PCL2',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'PCL3',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'reserved_20',0,2
	.word	196
	.byte	12,0,2,35,2,0,5,8,140,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6148
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR4_Bits',0,8,253,1,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	20,12,2,35,0,4
	.byte	'PCL4',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'PCL5',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'PCL6',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'PCL7',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	8,0,2,35,3,0,5,8,162,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6322
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR8_Bits',0,8,136,2,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	24,8,2,35,0,4
	.byte	'PCL8',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'PCL9',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'PCL10',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'PCL11',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	4,0,2,35,3,0,5,8,173,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6496
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR12_Bits',0,8,243,1,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	28,4,2,35,0,4
	.byte	'PCL12',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'PCL13',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'PCL14',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'PCL15',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,8,151,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6672
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR_Bits',0,8,249,2,16,4,4
	.byte	'PS0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'PS2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'PS3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'PS4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'PS5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'PS6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PS7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'PS8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'PS9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'PS10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'PS11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'PS12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'PS13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'PS14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'PS15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,8,195,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6828
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR_Bits',0,8,147,2,16,4,4
	.byte	'reserved_0',0,2
	.word	196
	.byte	16,0,2,35,0,4
	.byte	'PCL0',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'PCL2',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'PCL3',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'PCL4',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'PCL5',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'PCL6',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'PCL7',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'PCL8',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'PCL9',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'PCL10',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'PCL11',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'PCL12',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'PCL13',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'PCL14',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'PCL15',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,8,129,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7161
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_LPCR0_Bits',0,8,192,1,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	30,0,2,35,0,0,5,8,222,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7509
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_LPCR1_Bits',0,8,200,1,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	30,0,2,35,0,0,3
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,8,208,1,16,4,4
	.byte	'RDIS_CTRL',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'RX_DIS',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'TERM',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'LRXTERM',0,1
	.word	179
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	156
	.byte	24,0,2,35,0,0,5,8,233,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7633
	.byte	4,2,35,0,6
	.byte	'B_P21',0
	.word	7717
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_LPCR2_Bits',0,8,218,1,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'LVDSR',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'LVDSRL',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,1
	.word	179
	.byte	2,4,2,35,1,4
	.byte	'TDIS_CTRL',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'TX_DIS',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'TX_PD',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'TX_PWDPD',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,8,246,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7897
	.byte	4,2,35,0,0,16,76
	.word	179
	.byte	17,75,0,3
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,82,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	32,0,2,35,0,0,5,8,134,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8150
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,45,16,4,4
	.byte	'EN0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,8,251,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8237
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P',0,8,185,6,25,128,2,6
	.byte	'OUT',0
	.word	1951
	.byte	4,2,35,0,6
	.byte	'OMR',0
	.word	2522
	.byte	4,2,35,4,6
	.byte	'ID',0
	.word	2641
	.byte	4,2,35,8,6
	.byte	'reserved_C',0
	.word	2681
	.byte	4,2,35,12,6
	.byte	'IOCR0',0
	.word	2865
	.byte	4,2,35,16,6
	.byte	'IOCR4',0
	.word	3080
	.byte	4,2,35,20,6
	.byte	'IOCR8',0
	.word	3297
	.byte	4,2,35,24,6
	.byte	'IOCR12',0
	.word	3517
	.byte	4,2,35,28,6
	.byte	'reserved_20',0
	.word	2681
	.byte	4,2,35,32,6
	.byte	'IN',0
	.word	3831
	.byte	4,2,35,36,6
	.byte	'reserved_28',0
	.word	3871
	.byte	24,2,35,40,6
	.byte	'PDR0',0
	.word	4144
	.byte	4,2,35,64,6
	.byte	'PDR1',0
	.word	4460
	.byte	4,2,35,68,6
	.byte	'reserved_48',0
	.word	4500
	.byte	8,2,35,72,6
	.byte	'ESR',0
	.word	4800
	.byte	4,2,35,80,6
	.byte	'reserved_54',0
	.word	4840
	.byte	12,2,35,84,6
	.byte	'PDISC',0
	.word	5175
	.byte	4,2,35,96,6
	.byte	'PCSR',0
	.word	5445
	.byte	4,2,35,100,6
	.byte	'reserved_68',0
	.word	4500
	.byte	8,2,35,104,6
	.byte	'OMSR0',0
	.word	5592
	.byte	4,2,35,112,6
	.byte	'OMSR4',0
	.word	5761
	.byte	4,2,35,116,6
	.byte	'OMSR8',0
	.word	5933
	.byte	4,2,35,120,6
	.byte	'OMSR12',0
	.word	6108
	.byte	4,2,35,124,6
	.byte	'OMCR0',0
	.word	6282
	.byte	4,3,35,128,1,6
	.byte	'OMCR4',0
	.word	6456
	.byte	4,3,35,132,1,6
	.byte	'OMCR8',0
	.word	6632
	.byte	4,3,35,136,1,6
	.byte	'OMCR12',0
	.word	6788
	.byte	4,3,35,140,1,6
	.byte	'OMSR',0
	.word	7121
	.byte	4,3,35,144,1,6
	.byte	'OMCR',0
	.word	7469
	.byte	4,3,35,148,1,6
	.byte	'reserved_98',0
	.word	4500
	.byte	8,3,35,152,1,6
	.byte	'LPCR0',0
	.word	7593
	.byte	4,3,35,160,1,6
	.byte	'LPCR1',0
	.word	7842
	.byte	4,3,35,164,1,6
	.byte	'LPCR2',0
	.word	8101
	.byte	4,3,35,168,1,6
	.byte	'reserved_A4',0
	.word	8141
	.byte	76,3,35,172,1,6
	.byte	'ACCEN1',0
	.word	8197
	.byte	4,3,35,248,1,6
	.byte	'ACCEN0',0
	.word	8764
	.byte	4,3,35,252,1,0,7
	.word	8804
	.byte	8
	.word	9407
	.byte	14,7,63,9,1,15
	.byte	'IfxPort_InputMode_undefined',0,127,15
	.byte	'IfxPort_InputMode_noPullDevice',0,0,15
	.byte	'IfxPort_InputMode_pullDown',0,8,15
	.byte	'IfxPort_InputMode_pullUp',0,16,0,9
	.byte	'IfxPort_setPinModeInput',0,3,7,170,4,17,1,1,10
	.byte	'port',0,7,170,4,48
	.word	9412
	.byte	10
	.byte	'pinIndex',0,7,170,4,60
	.word	179
	.byte	10
	.byte	'mode',0,7,170,4,88
	.word	9417
	.byte	11,0,14,7,114,9,1,15
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,15
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,14,7,100,9,1,15
	.byte	'IfxPort_OutputIdx_general',0,128,1,15
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,15
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,15
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,15
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,15
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,15
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,15
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,9
	.byte	'IfxPort_setPinModeOutput',0,3,7,176,4,17,1,1,10
	.byte	'port',0,7,176,4,49
	.word	9412
	.byte	10
	.byte	'pinIndex',0,7,176,4,61
	.word	179
	.byte	10
	.byte	'mode',0,7,176,4,90
	.word	9622
	.byte	10
	.byte	'index',0,7,176,4,114
	.word	9691
	.byte	11,0,14,7,152,1,9,4,15
	.byte	'IfxPort_State_notChanged',0,0,15
	.byte	'IfxPort_State_high',0,1,15
	.byte	'IfxPort_State_low',0,128,128,4,15
	.byte	'IfxPort_State_toggled',0,129,128,4,0,9
	.byte	'IfxPort_setPinState',0,3,7,182,4,17,1,1,10
	.byte	'port',0,7,182,4,44
	.word	9412
	.byte	10
	.byte	'pinIndex',0,7,182,4,56
	.word	179
	.byte	10
	.byte	'action',0,7,182,4,80
	.word	10004
	.byte	11,0,3
	.byte	'_Ifx_SRC_SRCR_Bits',0,10,45,16,4,4
	.byte	'SRPN',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	179
	.byte	2,6,2,35,1,4
	.byte	'SRE',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'TOS',0,1
	.word	179
	.byte	2,3,2,35,1,4
	.byte	'reserved_13',0,1
	.word	179
	.byte	3,0,2,35,1,4
	.byte	'ECC',0,1
	.word	179
	.byte	6,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	179
	.byte	2,0,2,35,2,4
	.byte	'SRR',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'CLRR',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'SETR',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'IOV',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'IOVCLR',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'SWS',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'SWSCLR',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,10,70,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10185
	.byte	4,2,35,0,0,7
	.word	10475
.L315:
	.byte	8
	.word	10514
	.byte	9
	.byte	'IfxSrc_clearRequest',0,3,9,230,1,17,1,1,10
	.byte	'src',0,9,230,1,60
	.word	10519
	.byte	11,0,3
	.byte	'_Ifx_ASCLIN_CLC_Bits',0,12,118,16,4,4
	.byte	'DISR',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'DISS',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'EDIS',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	28,0,2,35,0,0,5,12,222,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10567
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_IOCR_Bits',0,12,169,2,16,4,4
	.byte	'ALTI',0,1
	.word	179
	.byte	3,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'DEPTH',0,2
	.word	196
	.byte	6,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	179
	.byte	6,0,2,35,1,4
	.byte	'CTS',0,1
	.word	179
	.byte	2,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	196
	.byte	7,7,2,35,2,4
	.byte	'RCPOL',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'CPOL',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'SPOL',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'LB',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'CTSEN',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'RXM',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'TXM',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,12,193,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10726
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_ID_Bits',0,12,161,2,16,4,4
	.byte	'MODREV',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	196
	.byte	16,0,2,35,2,0,5,12,182,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11021
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_TXFIFOCON_Bits',0,12,149,3,16,4,4
	.byte	'FLUSH',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'ENO',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	4,2,2,35,0,4
	.byte	'INW',0,1
	.word	179
	.byte	2,0,2,35,0,4
	.byte	'INTLEVEL',0,1
	.word	179
	.byte	4,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	179
	.byte	4,0,2,35,1,4
	.byte	'FILL',0,1
	.word	179
	.byte	5,3,2,35,2,4
	.byte	'reserved_21',0,2
	.word	196
	.byte	11,0,2,35,2,0,5,12,197,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11146
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_RXFIFOCON_Bits',0,12,129,3,16,4,4
	.byte	'FLUSH',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'ENI',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	4,2,2,35,0,4
	.byte	'OUTW',0,1
	.word	179
	.byte	2,0,2,35,0,4
	.byte	'INTLEVEL',0,1
	.word	179
	.byte	4,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	179
	.byte	4,0,2,35,1,4
	.byte	'FILL',0,1
	.word	179
	.byte	5,3,2,35,2,4
	.byte	'reserved_21',0,2
	.word	196
	.byte	10,1,2,35,2,4
	.byte	'BUF',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,12,175,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11371
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_BITCON_Bits',0,12,88,16,4,4
	.byte	'PRESCALER',0,2
	.word	196
	.byte	12,4,2,35,0,4
	.byte	'reserved_12',0,1
	.word	179
	.byte	4,0,2,35,1,4
	.byte	'OVERSAMPLING',0,1
	.word	179
	.byte	4,4,2,35,2,4
	.byte	'reserved_20',0,1
	.word	179
	.byte	4,0,2,35,2,4
	.byte	'SAMPLEPOINT',0,1
	.word	179
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	3,1,2,35,3,4
	.byte	'SM',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,12,189,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11612
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_FRAMECON_Bits',0,12,145,2,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'IDLE',0,2
	.word	196
	.byte	3,7,2,35,0,4
	.byte	'STOP',0,1
	.word	179
	.byte	3,4,2,35,1,4
	.byte	'LEAD',0,1
	.word	179
	.byte	3,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'MODE',0,1
	.word	179
	.byte	2,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	196
	.byte	10,4,2,35,2,4
	.byte	'MSB',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'CEN',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'PEN',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'ODD',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,12,171,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11833
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_DATCON_Bits',0,12,136,1,16,4,4
	.byte	'DATLEN',0,1
	.word	179
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,2
	.word	196
	.byte	9,3,2,35,0,4
	.byte	'HO',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'RM',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'CSM',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'RESPONSE',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	8,0,2,35,3,0,5,12,244,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12098
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_BRG_Bits',0,12,109,16,4,4
	.byte	'DENOMINATOR',0,2
	.word	196
	.byte	12,4,2,35,0,4
	.byte	'reserved_12',0,1
	.word	179
	.byte	4,0,2,35,1,4
	.byte	'NUMERATOR',0,2
	.word	196
	.byte	12,4,2,35,2,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	4,0,2,35,3,0,5,12,211,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12295
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_BRD_Bits',0,12,100,16,4,4
	.byte	'LOWERLIMIT',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'UPPERLIMIT',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'MEASURED',0,2
	.word	196
	.byte	12,4,2,35,2,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	4,0,2,35,3,0,5,12,200,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12452
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_LIN_CON_Bits',0,12,216,2,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	23,9,2,35,0,4
	.byte	'CSI',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'CSEN',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'MS',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'ABD',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	4,0,2,35,3,0,5,12,248,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12606
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_LIN_BTIMER_Bits',0,12,209,2,16,4,4
	.byte	'BREAK',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	156
	.byte	26,0,2,35,0,0,5,12,237,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12806
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_LIN_HTIMER_Bits',0,12,228,2,16,4,4
	.byte	'HEADER',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	156
	.byte	24,0,2,35,0,0,5,12,131,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12920
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_LIN',0,12,216,5,25,12,6
	.byte	'CON',0
	.word	12766
	.byte	4,2,35,0,6
	.byte	'BTIMER',0
	.word	12880
	.byte	4,2,35,4,6
	.byte	'HTIMER',0
	.word	12995
	.byte	4,2,35,8,0,7
	.word	13035
	.byte	3
	.byte	'_Ifx_ASCLIN_FLAGS_Bits',0,12,148,1,16,4,4
	.byte	'TH',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'TR',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'RH',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'RR',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'FED',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'RED',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	196
	.byte	6,3,2,35,0,4
	.byte	'TWRQ',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'THRQ',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'TRRQ',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'PE',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'TC',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'FE',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'HT',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'RT',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'BD',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'LP',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'LA',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'LC',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'CE',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'RFO',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'RFU',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'RFL',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'TFO',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'TFL',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,12,255,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13108
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_FLAGSSET_Bits',0,12,241,1,16,4,4
	.byte	'THS',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'TRS',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'RHS',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'RRS',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'FEDS',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'REDS',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	196
	.byte	6,3,2,35,0,4
	.byte	'TWRQS',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'THRQS',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'TRRQS',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'PES',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'TCS',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'FES',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'HTS',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'RTS',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'BDS',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'LPS',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'LAS',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'LCS',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'CES',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'RFOS',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'RFUS',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'RFLS',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'TFOS',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'TFLS',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,12,160,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13594
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_FLAGSCLEAR_Bits',0,12,180,1,16,4,4
	.byte	'THC',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'TRC',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'RHC',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'RRC',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'FEDC',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'REDC',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	196
	.byte	6,3,2,35,0,4
	.byte	'TWRQC',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'THRQC',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'TRRQC',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'PEC',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'TCC',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'FEC',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'HTC',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'RTC',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'BDC',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'LPC',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'LAC',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'LCC',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'CEC',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'RFOC',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'RFUC',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'RFLC',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'TFOC',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'TFLC',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,12,138,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14107
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_FLAGSENABLE_Bits',0,12,212,1,16,4,4
	.byte	'THE',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'TRE',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'RHE',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'RRE',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'FEDE',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'REDE',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	196
	.byte	9,0,2,35,0,4
	.byte	'PEE',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'TCE',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'FEE',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'HTE',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'RTE',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'BDE',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'LPE',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'ABE',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'LCE',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'CEE',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'RFOE',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'RFUE',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'RFLE',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'TFOE',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'TFLE',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,12,149,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14622
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_TXDATA_Bits',0,12,143,3,16,4,4
	.byte	'DATA',0,4
	.word	156
	.byte	32,0,2,35,0,0,5,12,186,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15087
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_RXDATA_Bits',0,12,245,2,16,4,4
	.byte	'DATA',0,4
	.word	156
	.byte	32,0,2,35,0,0,5,12,153,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15174
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_CSR_Bits',0,12,128,1,16,4,4
	.byte	'CLKSEL',0,1
	.word	179
	.byte	5,3,2,35,0,4
	.byte	'reserved_5',0,4
	.word	156
	.byte	26,1,2,35,0,4
	.byte	'CON',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,12,233,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15261
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_RXDATAD_Bits',0,12,251,2,16,4,4
	.byte	'DATA',0,4
	.word	156
	.byte	32,0,2,35,0,0,5,12,164,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15384
	.byte	4,2,35,0,0,16,148,1
	.word	179
	.byte	17,147,1,0,3
	.byte	'_Ifx_ASCLIN_OCS_Bits',0,12,235,2,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	24,8,2,35,0,4
	.byte	'SUS',0,1
	.word	179
	.byte	4,4,2,35,3,4
	.byte	'SUS_P',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'SUSSTA',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	179
	.byte	2,0,2,35,3,0,5,12,142,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15483
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_KRSTCLR_Bits',0,12,202,2,16,4,4
	.byte	'CLR',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	156
	.byte	31,0,2,35,0,0,5,12,226,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15646
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_KRST1_Bits',0,12,195,2,16,4,4
	.byte	'RST',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	156
	.byte	31,0,2,35,0,0,5,12,215,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15755
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_KRST0_Bits',0,12,187,2,16,4,4
	.byte	'RST',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'RSTSTAT',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	30,0,2,35,0,0,5,12,204,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15862
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_ACCEN1_Bits',0,12,82,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	32,0,2,35,0,0,5,12,178,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15988
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN_ACCEN0_Bits',0,12,45,16,4,4
	.byte	'EN0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	179
	.byte	1,0,2,35,3,0,5,12,167,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16080
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_ASCLIN',0,12,234,5,25,128,2,6
	.byte	'CLC',0
	.word	10686
	.byte	4,2,35,0,6
	.byte	'IOCR',0
	.word	10981
	.byte	4,2,35,4,6
	.byte	'ID',0
	.word	11106
	.byte	4,2,35,8,6
	.byte	'TXFIFOCON',0
	.word	11331
	.byte	4,2,35,12,6
	.byte	'RXFIFOCON',0
	.word	11572
	.byte	4,2,35,16,6
	.byte	'BITCON',0
	.word	11793
	.byte	4,2,35,20,6
	.byte	'FRAMECON',0
	.word	12058
	.byte	4,2,35,24,6
	.byte	'DATCON',0
	.word	12255
	.byte	4,2,35,28,6
	.byte	'BRG',0
	.word	12412
	.byte	4,2,35,32,6
	.byte	'BRD',0
	.word	12566
	.byte	4,2,35,36,6
	.byte	'LIN',0
	.word	13103
	.byte	12,2,35,40,6
	.byte	'FLAGS',0
	.word	13554
	.byte	4,2,35,52,6
	.byte	'FLAGSSET',0
	.word	14067
	.byte	4,2,35,56,6
	.byte	'FLAGSCLEAR',0
	.word	14582
	.byte	4,2,35,60,6
	.byte	'FLAGSENABLE',0
	.word	15047
	.byte	4,2,35,64,6
	.byte	'TXDATA',0
	.word	15134
	.byte	4,2,35,68,6
	.byte	'RXDATA',0
	.word	15221
	.byte	4,2,35,72,6
	.byte	'CSR',0
	.word	15344
	.byte	4,2,35,76,6
	.byte	'RXDATAD',0
	.word	15432
	.byte	4,2,35,80,6
	.byte	'reserved_54',0
	.word	15472
	.byte	148,1,2,35,84,6
	.byte	'OCS',0
	.word	15606
	.byte	4,3,35,232,1,6
	.byte	'KRSTCLR',0
	.word	15715
	.byte	4,3,35,236,1,6
	.byte	'KRST1',0
	.word	15822
	.byte	4,3,35,240,1,6
	.byte	'KRST0',0
	.word	15948
	.byte	4,3,35,244,1,6
	.byte	'ACCEN1',0
	.word	16040
	.byte	4,3,35,248,1,6
	.byte	'ACCEN0',0
	.word	16612
	.byte	4,3,35,252,1,0,7
	.word	16652
.L226:
	.byte	8
	.word	17094
.L371:
	.byte	9
	.byte	'IfxAsclin_setDenominator',0,3,11,225,16,17,1,1
.L373:
	.byte	10
	.byte	'asclin',0,11,225,16,54
	.word	17099
.L375:
	.byte	10
	.byte	'denominator',0,11,225,16,69
	.word	196
.L377:
	.byte	11,0
.L306:
	.byte	9
	.byte	'IfxAsclin_setEnableModuleRequest',0,3,11,237,16,17,1,1
.L309:
	.byte	10
	.byte	'asclin',0,11,237,16,62
	.word	17099
.L311:
	.byte	11,0
.L363:
	.byte	9
	.byte	'IfxAsclin_setNumerator',0,3,11,187,17,17,1,1
.L365:
	.byte	10
	.byte	'asclin',0,11,187,17,52
	.word	17099
.L367:
	.byte	10
	.byte	'numerator',0,11,187,17,67
	.word	196
.L369:
	.byte	11,0
.L248:
	.byte	14,11,208,1,9,1,15
	.byte	'IfxAsclin_OversamplingFactor_4',0,3,15
	.byte	'IfxAsclin_OversamplingFactor_5',0,4,15
	.byte	'IfxAsclin_OversamplingFactor_6',0,5,15
	.byte	'IfxAsclin_OversamplingFactor_7',0,6,15
	.byte	'IfxAsclin_OversamplingFactor_8',0,7,15
	.byte	'IfxAsclin_OversamplingFactor_9',0,8,15
	.byte	'IfxAsclin_OversamplingFactor_10',0,9,15
	.byte	'IfxAsclin_OversamplingFactor_11',0,10,15
	.byte	'IfxAsclin_OversamplingFactor_12',0,11,15
	.byte	'IfxAsclin_OversamplingFactor_13',0,12,15
	.byte	'IfxAsclin_OversamplingFactor_14',0,13,15
	.byte	'IfxAsclin_OversamplingFactor_15',0,14,15
	.byte	'IfxAsclin_OversamplingFactor_16',0,15,0
.L381:
	.byte	9
	.byte	'IfxAsclin_setOversampling',0,3,11,193,17,17,1,1
.L383:
	.byte	10
	.byte	'asclin',0,11,193,17,55
	.word	17099
.L385:
	.byte	10
	.byte	'ovsFactor',0,11,193,17,92
	.word	17303
.L387:
	.byte	11,0
.L355:
	.byte	9
	.byte	'IfxAsclin_setPrescaler',0,3,11,205,17,17,1,1
.L358:
	.byte	10
	.byte	'asclin',0,11,205,17,52
	.word	17099
.L360:
	.byte	10
	.byte	'prescaler',0,11,205,17,67
	.word	196
.L362:
	.byte	11,0
.L229:
	.byte	12
	.byte	'IfxAsclin_getClockSource',0,3,11,204,14,18
	.word	179
	.byte	1,1
.L231:
	.byte	10
	.byte	'asclin',0,11,204,14,55
	.word	17099
.L233:
	.byte	11,0
.L391:
	.byte	12
	.byte	'IfxAsclin_getClockStatus',0,3,11,210,14,20
	.word	179
	.byte	1,1
.L393:
	.byte	10
	.byte	'asclin',0,11,210,14,57
	.word	17099
.L395:
	.byte	11,0,9
	.byte	'IfxAsclin_enableCts',0,3,11,164,13,17,1,1,10
	.byte	'asclin',0,11,164,13,49
	.word	17099
	.byte	10
	.byte	'enable',0,11,164,13,65
	.word	179
	.byte	11,0
.L289:
	.byte	9
	.byte	'IfxAsclin_enableParityErrorFlag',0,3,11,224,13,17,1,1
.L291:
	.byte	10
	.byte	'asclin',0,11,224,13,61
	.word	17099
.L293:
	.byte	10
	.byte	'enable',0,11,224,13,77
	.word	179
.L295:
	.byte	11,0
.L296:
	.byte	9
	.byte	'IfxAsclin_enableRxFifoOverflowFlag',0,3,11,254,13,17,1,1
.L298:
	.byte	10
	.byte	'asclin',0,11,254,13,64
	.word	17099
.L300:
	.byte	10
	.byte	'enable',0,11,254,13,80
	.word	179
.L302:
	.byte	11,0,14,11,103,9,1,15
	.byte	'IfxAsclin_CtsInputSelect_0',0,0,15
	.byte	'IfxAsclin_CtsInputSelect_1',0,1,15
	.byte	'IfxAsclin_CtsInputSelect_2',0,2,15
	.byte	'IfxAsclin_CtsInputSelect_3',0,3,0,9
	.byte	'IfxAsclin_setCtsInput',0,3,11,213,16,17,1,1,10
	.byte	'asclin',0,11,213,16,51
	.word	17099
	.byte	10
	.byte	'ctsi',0,11,213,16,84
	.word	18208
	.byte	11,0,14,11,161,2,9,1,15
	.byte	'IfxAsclin_RxInputSelect_0',0,0,15
	.byte	'IfxAsclin_RxInputSelect_1',0,1,15
	.byte	'IfxAsclin_RxInputSelect_2',0,2,15
	.byte	'IfxAsclin_RxInputSelect_3',0,3,15
	.byte	'IfxAsclin_RxInputSelect_4',0,4,15
	.byte	'IfxAsclin_RxInputSelect_5',0,5,15
	.byte	'IfxAsclin_RxInputSelect_6',0,6,15
	.byte	'IfxAsclin_RxInputSelect_7',0,7,0,9
	.byte	'IfxAsclin_setRxInput',0,3,11,235,17,17,1,1,10
	.byte	'asclin',0,11,235,17,50
	.word	17099
	.byte	10
	.byte	'alti',0,11,235,17,82
	.word	18392
	.byte	11,0,18
	.word	172
	.byte	19
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,20
	.word	18684
	.byte	0,7
	.word	156
	.byte	8
	.word	156
	.byte	21
	.byte	'__cmpswapw',0
	.word	18726
	.byte	1,1,1,1,22
	.byte	'p',0
	.word	18731
	.byte	22
	.byte	'value',0
	.word	156
	.byte	22
	.byte	'compare',0
	.word	156
	.byte	0,21
	.byte	'__maxu',0
	.word	156
	.byte	1,1,1,1,20
	.word	156
	.byte	20
	.word	156
	.byte	0,23
	.word	902
	.byte	24
	.word	942
	.byte	24
	.word	960
	.byte	11,0,23
	.word	980
	.byte	24
	.word	1018
	.byte	24
	.word	1036
	.byte	11,0,25
	.byte	'IfxScuWdt_clearCpuEndinit',0,1,187,1,17,1,1,1,1,10
	.byte	'password',0,1,187,1,50
	.word	196
	.byte	0,25
	.byte	'IfxScuWdt_setCpuEndinit',0,1,209,1,17,1,1,1,1,10
	.byte	'password',0,1,209,1,48
	.word	196
	.byte	0,23
	.word	1056
	.byte	24
	.word	1107
	.byte	11,0,26
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,1,221,2,19
	.word	196
	.byte	1,1,1,1,23
	.word	1127
	.byte	11,0,23
	.word	1193
	.byte	24
	.word	1211
	.byte	11,0,23
	.word	1226
	.byte	24
	.word	1240
	.byte	24
	.word	1253
	.byte	11,0,23
	.word	1370
	.byte	11,0,23
	.word	1404
	.byte	11,0,23
	.word	1467
	.byte	24
	.word	1508
	.byte	11,0,23
	.word	1527
	.byte	24
	.word	1582
	.byte	11,0,23
	.word	1601
	.byte	24
	.word	1641
	.byte	24
	.word	1658
	.byte	11,0,23
	.word	9542
	.byte	24
	.word	9574
	.byte	24
	.word	9588
	.byte	24
	.word	9606
	.byte	11,0,23
	.word	9908
	.byte	24
	.word	9941
	.byte	24
	.word	9955
	.byte	24
	.word	9973
	.byte	24
	.word	9987
	.byte	11,0,23
	.word	10107
	.byte	24
	.word	10135
	.byte	24
	.word	10149
	.byte	24
	.word	10167
	.byte	11,0
.L224:
	.byte	2
	.byte	'float',0,4,4,26
	.byte	'IfxScuCcu_getBaud1Frequency',0,13,197,6,20
	.word	19175
	.byte	1,1,1,1,26
	.byte	'IfxScuCcu_getBaud2Frequency',0,13,203,6,20
	.word	19175
	.byte	1,1,1,1,26
	.byte	'IfxScuCcu_getOsc0Frequency',0,13,245,6,20
	.word	19175
	.byte	1,1,1,1,26
	.byte	'IfxScuCcu_getPllErayFrequency',0,13,129,7,20
	.word	19175
	.byte	1,1,1,1,26
	.byte	'IfxScuCcu_getSpbFrequency',0,13,159,7,20
	.word	19175
	.byte	1,1,1,1,23
	.word	10524
	.byte	24
	.word	10552
	.byte	11,0,23
	.word	17104
	.byte	24
	.word	17137
	.byte	24
	.word	17153
	.byte	11,0,23
	.word	17176
	.byte	24
	.word	17217
	.byte	11,0,23
	.word	17235
	.byte	24
	.word	17266
	.byte	24
	.word	17282
	.byte	11,0,23
	.word	17746
	.byte	24
	.word	17780
	.byte	24
	.word	17796
	.byte	11,0,23
	.word	17817
	.byte	24
	.word	17848
	.byte	24
	.word	17864
	.byte	11,0,23
	.word	17885
	.byte	24
	.word	17922
	.byte	11,0,23
	.word	17940
	.byte	24
	.word	17977
	.byte	11,0,23
	.word	17995
	.byte	24
	.word	18023
	.byte	24
	.word	18039
	.byte	11,0,23
	.word	18057
	.byte	24
	.word	18097
	.byte	24
	.word	18113
	.byte	11,0,23
	.word	18131
	.byte	24
	.word	18174
	.byte	24
	.word	18190
	.byte	11,0,23
	.word	18330
	.byte	24
	.word	18360
	.byte	24
	.word	18376
	.byte	11,0,23
	.word	18623
	.byte	24
	.word	18652
	.byte	24
	.word	18668
	.byte	11,0
.L250:
	.byte	14,11,176,2,9,1,15
	.byte	'IfxAsclin_SamplePointPosition_1',0,1,15
	.byte	'IfxAsclin_SamplePointPosition_2',0,2,15
	.byte	'IfxAsclin_SamplePointPosition_3',0,3,15
	.byte	'IfxAsclin_SamplePointPosition_4',0,4,15
	.byte	'IfxAsclin_SamplePointPosition_5',0,5,15
	.byte	'IfxAsclin_SamplePointPosition_6',0,6,15
	.byte	'IfxAsclin_SamplePointPosition_7',0,7,15
	.byte	'IfxAsclin_SamplePointPosition_8',0,8,15
	.byte	'IfxAsclin_SamplePointPosition_9',0,9,15
	.byte	'IfxAsclin_SamplePointPosition_10',0,10,15
	.byte	'IfxAsclin_SamplePointPosition_11',0,11,15
	.byte	'IfxAsclin_SamplePointPosition_12',0,12,15
	.byte	'IfxAsclin_SamplePointPosition_13',0,13,15
	.byte	'IfxAsclin_SamplePointPosition_14',0,14,15
	.byte	'IfxAsclin_SamplePointPosition_15',0,15,0
.L252:
	.byte	14,11,198,2,9,1,15
	.byte	'IfxAsclin_SamplesPerBit_one',0,0,15
	.byte	'IfxAsclin_SamplesPerBit_three',0,1,0
.L254:
	.byte	14,11,90,9,1,15
	.byte	'IfxAsclin_ClockSource_noClock',0,0,15
	.byte	'IfxAsclin_ClockSource_kernelClock',0,1,15
	.byte	'IfxAsclin_ClockSource_oscillatorClock',0,2,15
	.byte	'IfxAsclin_ClockSource_flexRayClock',0,4,15
	.byte	'IfxAsclin_ClockSource_ascFastClock',0,8,15
	.byte	'IfxAsclin_ClockSource_ascSlowClock',0,16,0
.L312:
	.byte	2
	.byte	'long int',0,4,5
.L326:
	.byte	8
	.word	196
	.byte	7
	.word	15221
.L329:
	.byte	8
	.word	20423
.L333:
	.byte	8
	.word	1446
.L339:
	.byte	8
	.word	179
	.byte	7
	.word	15134
.L401:
	.byte	8
	.word	20443
	.byte	2
	.byte	'short int',0,2,5,27
	.byte	'__wchar_t',0,14,1,1
	.word	20453
	.byte	27
	.byte	'__size_t',0,14,1,1
	.word	156
	.byte	27
	.byte	'__ptrdiff_t',0,14,1,1
	.word	172
	.byte	28,1,8
	.word	20521
	.byte	27
	.byte	'__codeptr',0,14,1,1
	.word	20523
	.byte	14,15,131,11,9,1,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,27
	.byte	'IfxScu_CCUCON0_CLKSEL',0,15,135,11,3
	.word	20546
	.byte	14,15,145,11,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,27
	.byte	'IfxScu_WDTCON1_IR',0,15,150,11,3
	.word	20643
	.byte	27
	.byte	'uint8',0,16,89,24
	.word	179
	.byte	27
	.byte	'sint16',0,16,90,24
	.word	20453
	.byte	27
	.byte	'uint16',0,16,91,24
	.word	196
	.byte	27
	.byte	'sint32',0,16,92,24
	.word	20406
	.byte	27
	.byte	'uint32',0,16,93,24
	.word	1446
	.byte	27
	.byte	'float32',0,16,94,24
	.word	19175
	.byte	27
	.byte	'boolean',0,16,104,24
	.word	179
	.byte	2
	.byte	'long long int',0,8,5,27
	.byte	'sint64',0,17,36,28
	.word	20871
	.byte	27
	.byte	'uint64',0,17,37,28
	.word	1156
	.byte	27
	.byte	'pvoid',0,17,40,28
	.word	1188
	.byte	27
	.byte	'Ifx_TickTime',0,17,43,28
	.word	20871
	.byte	27
	.byte	'Ifx_Priority',0,17,67,16
	.word	196
	.byte	14,17,94,9,1,15
	.byte	'Ifx_RxSel_a',0,0,15
	.byte	'Ifx_RxSel_b',0,1,15
	.byte	'Ifx_RxSel_c',0,2,15
	.byte	'Ifx_RxSel_d',0,3,15
	.byte	'Ifx_RxSel_e',0,4,15
	.byte	'Ifx_RxSel_f',0,5,15
	.byte	'Ifx_RxSel_g',0,6,15
	.byte	'Ifx_RxSel_h',0,7,0,27
	.byte	'Ifx_RxSel',0,17,104,3
	.word	20974
	.byte	3
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,2,45,16,4,4
	.byte	'EN0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_ACCEN0_Bits',0,2,79,3
	.word	21110
	.byte	3
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,2,82,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_SCU_ACCEN1_Bits',0,2,85,3
	.word	21667
	.byte	3
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,2,88,16,4,4
	.byte	'STM0DIS',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'STM1DIS',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'STM2DIS',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,4
	.word	156
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,2,94,3
	.word	21744
	.byte	3
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,2,97,16,4,4
	.byte	'BAUD1DIV',0,1
	.word	179
	.byte	4,4,2,35,0,4
	.byte	'BAUD2DIV',0,1
	.word	179
	.byte	4,0,2,35,0,4
	.byte	'SRIDIV',0,1
	.word	179
	.byte	4,4,2,35,1,4
	.byte	'LPDIV',0,1
	.word	179
	.byte	4,0,2,35,1,4
	.byte	'SPBDIV',0,1
	.word	179
	.byte	4,4,2,35,2,4
	.byte	'FSI2DIV',0,1
	.word	179
	.byte	2,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	179
	.byte	2,0,2,35,2,4
	.byte	'FSIDIV',0,1
	.word	179
	.byte	2,6,2,35,3,4
	.byte	'ADCCLKSEL',0,1
	.word	179
	.byte	2,4,2,35,3,4
	.byte	'CLKSEL',0,1
	.word	179
	.byte	2,2,2,35,3,4
	.byte	'UP',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON0_Bits',0,2,111,3
	.word	21880
	.byte	3
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,2,114,16,4,4
	.byte	'CANDIV',0,1
	.word	179
	.byte	4,4,2,35,0,4
	.byte	'ERAYDIV',0,1
	.word	179
	.byte	4,0,2,35,0,4
	.byte	'STMDIV',0,1
	.word	179
	.byte	4,4,2,35,1,4
	.byte	'GTMDIV',0,1
	.word	179
	.byte	4,0,2,35,1,4
	.byte	'ETHDIV',0,1
	.word	179
	.byte	4,4,2,35,2,4
	.byte	'ASCLINFDIV',0,1
	.word	179
	.byte	4,0,2,35,2,4
	.byte	'ASCLINSDIV',0,1
	.word	179
	.byte	4,4,2,35,3,4
	.byte	'INSEL',0,1
	.word	179
	.byte	2,2,2,35,3,4
	.byte	'UP',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON1_Bits',0,2,126,3
	.word	22158
	.byte	3
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,2,129,1,16,4,4
	.byte	'BBBDIV',0,1
	.word	179
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	26,2,2,35,0,4
	.byte	'UP',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON2_Bits',0,2,135,1,3
	.word	22396
	.byte	3
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,2,138,1,16,4,4
	.byte	'PLLDIV',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'PLLSEL',0,1
	.word	179
	.byte	2,0,2,35,0,4
	.byte	'PLLERAYDIV',0,1
	.word	179
	.byte	6,2,2,35,1,4
	.byte	'PLLERAYSEL',0,1
	.word	179
	.byte	2,0,2,35,1,4
	.byte	'SRIDIV',0,1
	.word	179
	.byte	6,2,2,35,2,4
	.byte	'SRISEL',0,1
	.word	179
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	5,3,2,35,3,4
	.byte	'SLCK',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'UP',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON3_Bits',0,2,150,1,3
	.word	22524
	.byte	3
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,2,153,1,16,4,4
	.byte	'SPBDIV',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'SPBSEL',0,1
	.word	179
	.byte	2,0,2,35,0,4
	.byte	'GTMDIV',0,1
	.word	179
	.byte	6,2,2,35,1,4
	.byte	'GTMSEL',0,1
	.word	179
	.byte	2,0,2,35,1,4
	.byte	'STMDIV',0,1
	.word	179
	.byte	6,2,2,35,2,4
	.byte	'STMSEL',0,1
	.word	179
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	5,3,2,35,3,4
	.byte	'SLCK',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'UP',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON4_Bits',0,2,165,1,3
	.word	22767
	.byte	3
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,2,168,1,16,4,4
	.byte	'MAXDIV',0,1
	.word	179
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	26,2,2,35,0,4
	.byte	'UP',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON5_Bits',0,2,174,1,3
	.word	23002
	.byte	3
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,2,177,1,16,4,4
	.byte	'CPU0DIV',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	156
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON6_Bits',0,2,181,1,3
	.word	23130
	.byte	3
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,2,184,1,16,4,4
	.byte	'CPU1DIV',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	156
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON7_Bits',0,2,188,1,3
	.word	23230
	.byte	3
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,2,191,1,16,4,4
	.byte	'CPU2DIV',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	156
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON8_Bits',0,2,195,1,3
	.word	23330
	.byte	3
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,2,198,1,16,4,4
	.byte	'ADCDIV',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'ADCSEL',0,1
	.word	179
	.byte	2,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	156
	.byte	21,3,2,35,0,4
	.byte	'SLCK',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'UP',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON9_Bits',0,2,206,1,3
	.word	23430
	.byte	3
	.byte	'_Ifx_SCU_CHIPID_Bits',0,2,209,1,16,4,4
	.byte	'CHREV',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'CHTEC',0,1
	.word	179
	.byte	2,0,2,35,0,4
	.byte	'CHID',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'EEA',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'UCODE',0,1
	.word	179
	.byte	7,0,2,35,2,4
	.byte	'FSIZE',0,1
	.word	179
	.byte	4,4,2,35,3,4
	.byte	'SP',0,1
	.word	179
	.byte	2,2,2,35,3,4
	.byte	'SEC',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CHIPID_Bits',0,2,220,1,3
	.word	23592
	.byte	3
	.byte	'_Ifx_SCU_DTSCON_Bits',0,2,223,1,16,4,4
	.byte	'PWD',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'START',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	2,4,2,35,0,4
	.byte	'CAL',0,4
	.word	156
	.byte	20,8,2,35,0,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	7,1,2,35,3,4
	.byte	'SLCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_DTSCON_Bits',0,2,231,1,3
	.word	23800
	.byte	3
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,2,234,1,16,4,4
	.byte	'LOWER',0,2
	.word	196
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	179
	.byte	5,1,2,35,1,4
	.byte	'LLU',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'UPPER',0,2
	.word	196
	.byte	10,6,2,35,2,4
	.byte	'reserved_26',0,1
	.word	179
	.byte	4,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'UOF',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_DTSLIM_Bits',0,2,243,1,3
	.word	23965
	.byte	3
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,2,246,1,16,4,4
	.byte	'RESULT',0,2
	.word	196
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	179
	.byte	4,2,2,35,1,4
	.byte	'RDY',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'BUSY',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,2,253,1,3
	.word	24148
	.byte	3
	.byte	'_Ifx_SCU_EICR_Bits',0,2,128,2,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	4,4,2,35,0,4
	.byte	'EXIS0',0,1
	.word	179
	.byte	3,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'FEN0',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'REN0',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'LDEN0',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'EIEN0',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'INP0',0,1
	.word	179
	.byte	3,1,2,35,1,4
	.byte	'reserved_15',0,4
	.word	156
	.byte	5,12,2,35,0,4
	.byte	'EXIS1',0,1
	.word	179
	.byte	3,1,2,35,2,4
	.byte	'reserved_23',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'FEN1',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'REN1',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'LDEN1',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'EIEN1',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'INP1',0,1
	.word	179
	.byte	3,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EICR_Bits',0,2,147,2,3
	.word	24302
	.byte	3
	.byte	'_Ifx_SCU_EIFR_Bits',0,2,150,2,16,4,4
	.byte	'INTF0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'INTF1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'INTF2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'INTF3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'INTF4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'INTF5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'INTF6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'INTF7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	156
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_EIFR_Bits',0,2,161,2,3
	.word	24666
	.byte	3
	.byte	'_Ifx_SCU_EMSR_Bits',0,2,164,2,16,4,4
	.byte	'POL',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'MODE',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'ENON',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'PSEL',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,2
	.word	196
	.byte	12,0,2,35,0,4
	.byte	'EMSF',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'SEMSF',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	179
	.byte	6,0,2,35,2,4
	.byte	'EMSFM',0,1
	.word	179
	.byte	2,6,2,35,3,4
	.byte	'SEMSFM',0,1
	.word	179
	.byte	2,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_EMSR_Bits',0,2,177,2,3
	.word	24877
	.byte	3
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,2,180,2,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	7,1,2,35,0,4
	.byte	'EDCON',0,2
	.word	196
	.byte	2,7,2,35,0,4
	.byte	'reserved_9',0,4
	.word	156
	.byte	23,0,2,35,0,0,27
	.byte	'Ifx_SCU_ESRCFG_Bits',0,2,185,2,3
	.word	25129
	.byte	3
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,2,188,2,16,4,4
	.byte	'ARI',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'ARC',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_ESROCFG_Bits',0,2,193,2,3
	.word	25247
	.byte	3
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,2,196,2,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	28,4,2,35,0,4
	.byte	'EVR13OFF',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'BPEVR13OFF',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVR13CON_Bits',0,2,203,2,3
	.word	25358
	.byte	3
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,2,206,2,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	28,4,2,35,0,4
	.byte	'EVR33OFF',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'BPEVR33OFF',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVR33CON_Bits',0,2,213,2,3
	.word	25521
	.byte	3
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,2,216,2,16,4,4
	.byte	'ADC13V',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'ADC33V',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'ADCSWDV',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	7,1,2,35,3,4
	.byte	'VAL',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,2,223,2,3
	.word	25684
	.byte	3
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,2,226,2,16,4,4
	.byte	'DVS13TRIM',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'DVS33TRIM',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	7,1,2,35,3,4
	.byte	'VAL',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,2,233,2,3
	.word	25842
	.byte	3
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,2,236,2,16,4,4
	.byte	'EVR13OVMOD',0,1
	.word	179
	.byte	2,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	2,4,2,35,0,4
	.byte	'EVR13UVMOD',0,1
	.word	179
	.byte	2,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	179
	.byte	2,0,2,35,0,4
	.byte	'EVR33OVMOD',0,1
	.word	179
	.byte	2,6,2,35,1,4
	.byte	'reserved_10',0,1
	.word	179
	.byte	2,4,2,35,1,4
	.byte	'EVR33UVMOD',0,1
	.word	179
	.byte	2,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	179
	.byte	2,0,2,35,1,4
	.byte	'SWDOVMOD',0,1
	.word	179
	.byte	2,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	179
	.byte	2,4,2,35,2,4
	.byte	'SWDUVMOD',0,1
	.word	179
	.byte	2,2,2,35,2,4
	.byte	'reserved_22',0,2
	.word	196
	.byte	8,2,2,35,2,4
	.byte	'SLCK',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,2,252,2,3
	.word	26007
	.byte	3
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,2,255,2,16,4,4
	.byte	'OSCTRIM',0,2
	.word	196
	.byte	10,6,2,35,0,4
	.byte	'OSCPTAT',0,1
	.word	179
	.byte	6,0,2,35,1,4
	.byte	'OSCANASEL',0,1
	.word	179
	.byte	4,4,2,35,2,4
	.byte	'HPBGTRIM',0,2
	.word	196
	.byte	7,5,2,35,2,4
	.byte	'HPBGCLKEN',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'OSC3V3',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	179
	.byte	2,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,2,137,3,3
	.word	26375
	.byte	3
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,2,140,3,16,4,4
	.byte	'EVR13OVVAL',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'EVR33OVVAL',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'SWDOVVAL',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	6,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVROVMON_Bits',0,2,148,3,3
	.word	26596
	.byte	3
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,2,151,3,16,4,4
	.byte	'RST13TRIM',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	156
	.byte	16,8,2,35,0,4
	.byte	'RST13OFF',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'BPRST13OFF',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'RST33OFF',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'BPRST33OFF',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'RSTSWDOFF',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'BPRSTSWDOFF',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,2,163,3,3
	.word	26775
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,2,166,3,16,4,4
	.byte	'SD5P',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'SD5I',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'SD5D',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,2,173,3,3
	.word	27040
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,2,176,3,16,4,4
	.byte	'SD33P',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'SD33I',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'SD33D',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,2,183,3,3
	.word	27193
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,2,186,3,16,4,4
	.byte	'CT5REG0',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'CT5REG1',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'CT5REG2',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,2,193,3,3
	.word	27349
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,2,196,3,16,4,4
	.byte	'CT5REG3',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'CT5REG4',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	15,1,2,35,2,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,2,202,3,3
	.word	27511
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,2,205,3,16,4,4
	.byte	'CT33REG0',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'CT33REG1',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'CT33REG2',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,2,212,3,3
	.word	27654
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,2,215,3,16,4,4
	.byte	'CT33REG3',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'CT33REG4',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	15,1,2,35,2,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,2,221,3,3
	.word	27819
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,2,224,3,16,4,4
	.byte	'SDFREQSPRD',0,2
	.word	196
	.byte	16,0,2,35,0,4
	.byte	'SDFREQ',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'SDSTEP',0,1
	.word	179
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	2,2,2,35,3,4
	.byte	'SDSAMPLE',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,2,232,3,3
	.word	27964
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,2,235,3,16,4,4
	.byte	'DRVP',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'SDMINMAXDC',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'DRVN',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'SDLUT',0,1
	.word	179
	.byte	6,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,2,243,3,3
	.word	28145
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,2,246,3,16,4,4
	.byte	'SDPWMPRE',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'SDPID',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'SDVOKLVL',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,2,253,3,3
	.word	28319
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,2,128,4,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'SYNCDIV',0,1
	.word	179
	.byte	3,5,2,35,1,4
	.byte	'reserved_11',0,4
	.word	156
	.byte	20,1,2,35,0,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,2,134,4,3
	.word	28479
	.byte	3
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,2,137,4,16,4,4
	.byte	'EVR13',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'OV13',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'EVR33',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'OV33',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'OVSWD',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'UV13',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'UV33',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'UVSWD',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'EXTPASS13',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'EXTPASS33',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'BGPROK',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'reserved_11',0,4
	.word	156
	.byte	21,0,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,2,151,4,3
	.word	28623
	.byte	3
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,2,154,4,16,4,4
	.byte	'EVR13TRIM',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'SDVOUTSEL',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	14,2,2,35,2,4
	.byte	'SLCK',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,2,161,4,3
	.word	28897
	.byte	3
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,2,164,4,16,4,4
	.byte	'EVR13UVVAL',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'EVR33UVVAL',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'SWDUVVAL',0,1
	.word	179
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	6,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,2,172,4,3
	.word	29052
	.byte	3
	.byte	'_Ifx_SCU_EXTCON_Bits',0,2,175,4,16,4,4
	.byte	'EN0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'SEL0',0,1
	.word	179
	.byte	4,2,2,35,0,4
	.byte	'reserved_6',0,2
	.word	196
	.byte	10,0,2,35,0,4
	.byte	'EN1',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'NSEL',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'SEL1',0,1
	.word	179
	.byte	4,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	179
	.byte	2,0,2,35,2,4
	.byte	'DIV1',0,1
	.word	179
	.byte	8,0,2,35,3,0,27
	.byte	'Ifx_SCU_EXTCON_Bits',0,2,186,4,3
	.word	29231
	.byte	3
	.byte	'_Ifx_SCU_FDR_Bits',0,2,189,4,16,4,4
	.byte	'STEP',0,2
	.word	196
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	179
	.byte	4,2,2,35,1,4
	.byte	'DM',0,1
	.word	179
	.byte	2,0,2,35,1,4
	.byte	'RESULT',0,2
	.word	196
	.byte	10,6,2,35,2,4
	.byte	'reserved_26',0,1
	.word	179
	.byte	5,1,2,35,3,4
	.byte	'DISCLK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_FDR_Bits',0,2,197,4,3
	.word	29449
	.byte	3
	.byte	'_Ifx_SCU_FMR_Bits',0,2,200,4,16,4,4
	.byte	'FS0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'FS1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'FS2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'FS3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'FS4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'FS5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'FS6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'FS7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'FC0',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'FC1',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'FC2',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'FC3',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'FC4',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'FC5',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'FC6',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'FC7',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	8,0,2,35,3,0,27
	.byte	'Ifx_SCU_FMR_Bits',0,2,220,4,3
	.word	29612
	.byte	3
	.byte	'_Ifx_SCU_ID_Bits',0,2,223,4,16,4,4
	.byte	'MODREV',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_ID_Bits',0,2,228,4,3
	.word	29948
	.byte	3
	.byte	'_Ifx_SCU_IGCR_Bits',0,2,231,4,16,4,4
	.byte	'IPEN00',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'IPEN01',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'IPEN02',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'IPEN03',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'IPEN04',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'IPEN05',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'IPEN06',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'IPEN07',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	179
	.byte	5,3,2,35,1,4
	.byte	'GEEN0',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'IGP0',0,1
	.word	179
	.byte	2,0,2,35,1,4
	.byte	'IPEN10',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'IPEN11',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'IPEN12',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'IPEN13',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'IPEN14',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'IPEN15',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'IPEN16',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'IPEN17',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	5,3,2,35,3,4
	.byte	'GEEN1',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'IGP1',0,1
	.word	179
	.byte	2,0,2,35,3,0,27
	.byte	'Ifx_SCU_IGCR_Bits',0,2,255,4,3
	.word	30055
	.byte	3
	.byte	'_Ifx_SCU_IN_Bits',0,2,130,5,16,4,4
	.byte	'P0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_IN_Bits',0,2,135,5,3
	.word	30507
	.byte	3
	.byte	'_Ifx_SCU_IOCR_Bits',0,2,138,5,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	4,4,2,35,0,4
	.byte	'PC0',0,1
	.word	179
	.byte	4,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	179
	.byte	4,4,2,35,1,4
	.byte	'PC1',0,1
	.word	179
	.byte	4,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_IOCR_Bits',0,2,145,5,3
	.word	30606
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,2,148,5,16,4,4
	.byte	'LBISTREQ',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'LBISTREQP',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'PATTERNS',0,2
	.word	196
	.byte	14,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,2,154,5,3
	.word	30756
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,2,157,5,16,4,4
	.byte	'SEED',0,4
	.word	156
	.byte	23,9,2,35,0,4
	.byte	'reserved_23',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'SPLITSH',0,1
	.word	179
	.byte	3,5,2,35,3,4
	.byte	'BODY',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'LBISTFREQU',0,1
	.word	179
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,2,164,5,3
	.word	30905
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,2,167,5,16,4,4
	.byte	'SIGNATURE',0,4
	.word	156
	.byte	24,8,2,35,0,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	7,1,2,35,3,4
	.byte	'LBISTDONE',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,2,172,5,3
	.word	31066
	.byte	3
	.byte	'_Ifx_SCU_LCLCON_Bits',0,2,175,5,16,4,4
	.byte	'reserved_0',0,2
	.word	196
	.byte	16,0,2,35,0,4
	.byte	'LS',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,2
	.word	196
	.byte	14,1,2,35,2,4
	.byte	'LSEN',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_LCLCON_Bits',0,2,181,5,3
	.word	31196
	.byte	3
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,2,184,5,16,4,4
	.byte	'LCLT0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'LCLT1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_LCLTEST_Bits',0,2,189,5,3
	.word	31328
	.byte	3
	.byte	'_Ifx_SCU_MANID_Bits',0,2,192,5,16,4,4
	.byte	'DEPT',0,1
	.word	179
	.byte	5,3,2,35,0,4
	.byte	'MANUF',0,2
	.word	196
	.byte	11,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_MANID_Bits',0,2,197,5,3
	.word	31443
	.byte	3
	.byte	'_Ifx_SCU_OMR_Bits',0,2,200,5,16,4,4
	.byte	'PS0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,2
	.word	196
	.byte	14,0,2,35,0,4
	.byte	'PCL0',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	196
	.byte	14,0,2,35,2,0,27
	.byte	'Ifx_SCU_OMR_Bits',0,2,208,5,3
	.word	31554
	.byte	3
	.byte	'_Ifx_SCU_OSCCON_Bits',0,2,211,5,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PLLLV',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'OSCRES',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'GAINSEL',0,1
	.word	179
	.byte	2,3,2,35,0,4
	.byte	'MODE',0,1
	.word	179
	.byte	2,1,2,35,0,4
	.byte	'SHBY',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'PLLHV',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'X1D',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'X1DEN',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	179
	.byte	4,0,2,35,1,4
	.byte	'OSCVAL',0,1
	.word	179
	.byte	5,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	179
	.byte	2,1,2,35,2,4
	.byte	'APREN',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'CAP0EN',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'CAP1EN',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'CAP2EN',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'CAP3EN',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_OSCCON_Bits',0,2,232,5,3
	.word	31712
	.byte	3
	.byte	'_Ifx_SCU_OUT_Bits',0,2,235,5,16,4,4
	.byte	'P0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_OUT_Bits',0,2,240,5,3
	.word	32124
	.byte	3
	.byte	'_Ifx_SCU_OVCCON_Bits',0,2,243,5,16,4,4
	.byte	'CSEL0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'CSEL1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'CSEL2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,2
	.word	196
	.byte	13,0,2,35,0,4
	.byte	'OVSTRT',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'OVSTP',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'DCINVAL',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	179
	.byte	5,0,2,35,2,4
	.byte	'OVCONF',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'POVCONF',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	179
	.byte	6,0,2,35,3,0,27
	.byte	'Ifx_SCU_OVCCON_Bits',0,2,128,6,3
	.word	32225
	.byte	3
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,2,131,6,16,4,4
	.byte	'OVEN0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'OVEN1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'OVEN2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,4
	.word	156
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,2,137,6,3
	.word	32492
	.byte	3
	.byte	'_Ifx_SCU_PDISC_Bits',0,2,140,6,16,4,4
	.byte	'PDIS0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PDIS1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_PDISC_Bits',0,2,145,6,3
	.word	32628
	.byte	3
	.byte	'_Ifx_SCU_PDR_Bits',0,2,148,6,16,4,4
	.byte	'PD0',0,1
	.word	179
	.byte	3,5,2,35,0,4
	.byte	'PL0',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'PD1',0,1
	.word	179
	.byte	3,1,2,35,0,4
	.byte	'PL1',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	156
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_PDR_Bits',0,2,155,6,3
	.word	32739
	.byte	3
	.byte	'_Ifx_SCU_PDRR_Bits',0,2,158,6,16,4,4
	.byte	'PDR0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PDR1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'PDR2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'PDR3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'PDR4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'PDR5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'PDR6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PDR7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	156
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_PDRR_Bits',0,2,169,6,3
	.word	32872
	.byte	3
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,2,172,6,16,4,4
	.byte	'VCOBYP',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'VCOPWD',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'MODEN',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'SETFINDIS',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'CLRFINDIS',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'OSCDISCDIS',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	196
	.byte	2,7,2,35,0,4
	.byte	'NDIV',0,1
	.word	179
	.byte	7,0,2,35,1,4
	.byte	'PLLPWD',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'RESLD',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	179
	.byte	5,0,2,35,2,4
	.byte	'PDIV',0,1
	.word	179
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_PLLCON0_Bits',0,2,189,6,3
	.word	33075
	.byte	3
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,2,192,6,16,4,4
	.byte	'K2DIV',0,1
	.word	179
	.byte	7,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'K3DIV',0,1
	.word	179
	.byte	7,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'K1DIV',0,1
	.word	179
	.byte	7,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	196
	.byte	9,0,2,35,2,0,27
	.byte	'Ifx_SCU_PLLCON1_Bits',0,2,200,6,3
	.word	33431
	.byte	3
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,2,203,6,16,4,4
	.byte	'MODCFG',0,2
	.word	196
	.byte	16,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_PLLCON2_Bits',0,2,207,6,3
	.word	33609
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,2,210,6,16,4,4
	.byte	'VCOBYP',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'VCOPWD',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	2,4,2,35,0,4
	.byte	'SETFINDIS',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'CLRFINDIS',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'OSCDISCDIS',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	196
	.byte	2,7,2,35,0,4
	.byte	'NDIV',0,1
	.word	179
	.byte	5,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	179
	.byte	2,0,2,35,1,4
	.byte	'PLLPWD',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'RESLD',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	179
	.byte	5,0,2,35,2,4
	.byte	'PDIV',0,1
	.word	179
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,2,227,6,3
	.word	33709
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,2,230,6,16,4,4
	.byte	'K2DIV',0,1
	.word	179
	.byte	7,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'K3DIV',0,1
	.word	179
	.byte	4,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	179
	.byte	4,0,2,35,1,4
	.byte	'K1DIV',0,1
	.word	179
	.byte	7,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	196
	.byte	9,0,2,35,2,0,27
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,2,238,6,3
	.word	34079
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,2,241,6,16,4,4
	.byte	'VCOBYST',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PWDSTAT',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'VCOLOCK',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'FINDIS',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'K1RDY',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'K2RDY',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	156
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,2,250,6,3
	.word	34265
	.byte	3
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,2,253,6,16,4,4
	.byte	'VCOBYST',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'VCOLOCK',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'FINDIS',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'K1RDY',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'K2RDY',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'MODRUN',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	156
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,2,136,7,3
	.word	34463
	.byte	3
	.byte	'_Ifx_SCU_PMCSR_Bits',0,2,139,7,16,4,4
	.byte	'REQSLP',0,1
	.word	179
	.byte	2,6,2,35,0,4
	.byte	'SMUSLP',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	179
	.byte	5,0,2,35,0,4
	.byte	'PMST',0,1
	.word	179
	.byte	3,5,2,35,1,4
	.byte	'reserved_11',0,4
	.word	156
	.byte	21,0,2,35,0,0,27
	.byte	'Ifx_SCU_PMCSR_Bits',0,2,146,7,3
	.word	34696
	.byte	3
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,2,149,7,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'ESR1WKEN',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'PINAWKEN',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'PINBWKEN',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'ESR0DFEN',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'ESR0EDCON',0,1
	.word	179
	.byte	2,1,2,35,0,4
	.byte	'ESR1DFEN',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'ESR1EDCON',0,1
	.word	179
	.byte	2,6,2,35,1,4
	.byte	'PINADFEN',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'PINAEDCON',0,1
	.word	179
	.byte	2,3,2,35,1,4
	.byte	'PINBDFEN',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'PINBEDCON',0,1
	.word	179
	.byte	2,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'STBYRAMSEL',0,1
	.word	179
	.byte	2,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	179
	.byte	2,3,2,35,2,4
	.byte	'TRISTEN',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'TRISTREQ',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'PORSTDF',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'PWRWKEN',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'DCDCSYNC',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'BLNKFIL',0,1
	.word	179
	.byte	3,3,2,35,3,4
	.byte	'ESR0TRIST',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,2,175,7,3
	.word	34848
	.byte	3
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,2,178,7,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'CPUIDLSEL',0,1
	.word	179
	.byte	3,5,2,35,1,4
	.byte	'reserved_11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'IRADIS',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'reserved_13',0,4
	.word	156
	.byte	11,8,2,35,0,4
	.byte	'CPUSEL',0,1
	.word	179
	.byte	3,5,2,35,3,4
	.byte	'STBYEVEN',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'STBYEV',0,1
	.word	179
	.byte	3,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,2,189,7,3
	.word	35396
	.byte	3
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,2,192,7,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	2,6,2,35,0,4
	.byte	'ESR1WKP',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'ESR1OVRUN',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'PINAWKP',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'PINAOVRUN',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'PINBWKP',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PINBOVRUN',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'PWRWKP',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'PORSTDF',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'HWCFGEVR',0,1
	.word	179
	.byte	3,3,2,35,1,4
	.byte	'STBYRAM',0,1
	.word	179
	.byte	2,1,2,35,1,4
	.byte	'TRIST',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	179
	.byte	4,4,2,35,2,4
	.byte	'ESR1WKEN',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'PINAWKEN',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'PINBWKEN',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'PWRWKEN',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'BLNKFIL',0,1
	.word	179
	.byte	3,5,2,35,3,4
	.byte	'ESR0TRIST',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,2,214,7,3
	.word	35641
	.byte	3
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,2,217,7,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	2,6,2,35,0,4
	.byte	'ESR1WKPCLR',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'ESR1OVRUNCLR',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'PINAWKPCLR',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'PINAOVRUNCLR',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'PINBWKPCLR',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PINBOVRUNCLR',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'PWRWKPCLR',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,4
	.word	156
	.byte	23,0,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,2,228,7,3
	.word	36102
	.byte	3
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,2,231,7,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'CLRC',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,2
	.word	196
	.byte	10,4,2,35,0,4
	.byte	'CSS0',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'CSS1',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'CSS2',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'USRINFO',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_RSTCON2_Bits',0,2,241,7,3
	.word	36372
	.byte	3
	.byte	'_Ifx_SCU_RSTCON_Bits',0,2,244,7,16,4,4
	.byte	'ESR0',0,1
	.word	179
	.byte	2,6,2,35,0,4
	.byte	'ESR1',0,1
	.word	179
	.byte	2,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	179
	.byte	2,2,2,35,0,4
	.byte	'SMU',0,1
	.word	179
	.byte	2,0,2,35,0,4
	.byte	'SW',0,1
	.word	179
	.byte	2,6,2,35,1,4
	.byte	'STM0',0,1
	.word	179
	.byte	2,4,2,35,1,4
	.byte	'STM1',0,1
	.word	179
	.byte	2,2,2,35,1,4
	.byte	'STM2',0,1
	.word	179
	.byte	2,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_RSTCON_Bits',0,2,255,7,3
	.word	36581
	.byte	3
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,2,130,8,16,4,4
	.byte	'ESR0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'ESR1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'SMU',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'SW',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'STM0',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'STM1',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'STM2',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'PORST',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'CB0',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'CB1',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'CB3',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	179
	.byte	2,1,2,35,2,4
	.byte	'EVR13',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'EVR33',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'SWD',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	179
	.byte	2,4,2,35,3,4
	.byte	'STBYR',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	179
	.byte	3,0,2,35,3,0,27
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,2,153,8,3
	.word	36792
	.byte	3
	.byte	'_Ifx_SCU_SAFECON_Bits',0,2,156,8,16,4,4
	.byte	'HBT',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	156
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_SCU_SAFECON_Bits',0,2,160,8,3
	.word	37224
	.byte	3
	.byte	'_Ifx_SCU_STSTAT_Bits',0,2,163,8,16,4,4
	.byte	'HWCFG',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'FTM',0,1
	.word	179
	.byte	7,1,2,35,1,4
	.byte	'MODE',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'FCBAE',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'LUDIS',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'TRSTL',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'SPDEN',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	179
	.byte	3,0,2,35,2,4
	.byte	'RAMINT',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'reserved_25',0,1
	.word	179
	.byte	7,0,2,35,3,0,27
	.byte	'Ifx_SCU_STSTAT_Bits',0,2,176,8,3
	.word	37320
	.byte	3
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,2,179,8,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'SWRSTREQ',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,2,184,8,3
	.word	37580
	.byte	3
	.byte	'_Ifx_SCU_SYSCON_Bits',0,2,187,8,16,4,4
	.byte	'CCTRIG0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'RAMINTM',0,1
	.word	179
	.byte	2,4,2,35,0,4
	.byte	'SETLUDIS',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	179
	.byte	3,0,2,35,0,4
	.byte	'DATM',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,4
	.word	156
	.byte	23,0,2,35,0,0,27
	.byte	'Ifx_SCU_SYSCON_Bits',0,2,196,8,3
	.word	37705
	.byte	3
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,2,199,8,16,4,4
	.byte	'ESR0T',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,2,206,8,3
	.word	37902
	.byte	3
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,2,209,8,16,4,4
	.byte	'ESR0T',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,2,216,8,3
	.word	38055
	.byte	3
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,2,219,8,16,4,4
	.byte	'ESR0T',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSET_Bits',0,2,226,8,3
	.word	38208
	.byte	3
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,2,229,8,16,4,4
	.byte	'ESR0T',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,2,236,8,3
	.word	38361
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,2,245,8,3
	.word	218
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,2,132,9,3
	.word	354
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,2,148,9,3
	.word	598
	.byte	3
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,2,151,9,16,4,4
	.byte	'ENDINIT',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'LCK',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'PW',0,2
	.word	196
	.byte	14,0,2,35,0,4
	.byte	'REL',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,2,157,9,3
	.word	38616
	.byte	3
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,2,160,9,16,4,4
	.byte	'CLRIRF',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'IR0',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'DR',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'IR1',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'UR',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PAR',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'TCR',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'TCTR',0,1
	.word	179
	.byte	7,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,2,173,9,3
	.word	38742
	.byte	3
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,2,176,9,16,4,4
	.byte	'AE',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'OE',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'IS0',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'DS',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'TO',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'IS1',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'US',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PAS',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'TCS',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'TCT',0,1
	.word	179
	.byte	7,0,2,35,1,4
	.byte	'TIM',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,2,189,9,3
	.word	38994
	.byte	5,2,197,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	21110
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ACCEN0',0,2,205,9,3
	.word	39213
	.byte	5,2,208,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	21667
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ACCEN1',0,2,216,9,3
	.word	39277
	.byte	5,2,219,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	21744
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ARSTDIS',0,2,227,9,3
	.word	39341
	.byte	5,2,230,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	21880
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON0',0,2,238,9,3
	.word	39406
	.byte	5,2,241,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	22158
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON1',0,2,249,9,3
	.word	39471
	.byte	5,2,252,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	22396
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON2',0,2,132,10,3
	.word	39536
	.byte	5,2,135,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	22524
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON3',0,2,143,10,3
	.word	39601
	.byte	5,2,146,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	22767
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON4',0,2,154,10,3
	.word	39666
	.byte	5,2,157,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23002
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON5',0,2,165,10,3
	.word	39731
	.byte	5,2,168,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23130
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON6',0,2,176,10,3
	.word	39796
	.byte	5,2,179,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23230
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON7',0,2,187,10,3
	.word	39861
	.byte	5,2,190,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23330
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON8',0,2,198,10,3
	.word	39926
	.byte	5,2,201,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23430
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON9',0,2,209,10,3
	.word	39991
	.byte	5,2,212,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23592
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CHIPID',0,2,220,10,3
	.word	40056
	.byte	5,2,223,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23800
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_DTSCON',0,2,231,10,3
	.word	40120
	.byte	5,2,234,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23965
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_DTSLIM',0,2,242,10,3
	.word	40184
	.byte	5,2,245,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24148
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_DTSSTAT',0,2,253,10,3
	.word	40248
	.byte	5,2,128,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24302
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EICR',0,2,136,11,3
	.word	40313
	.byte	5,2,139,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24666
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EIFR',0,2,147,11,3
	.word	40375
	.byte	5,2,150,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24877
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EMSR',0,2,158,11,3
	.word	40437
	.byte	5,2,161,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25129
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ESRCFG',0,2,169,11,3
	.word	40499
	.byte	5,2,172,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25247
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ESROCFG',0,2,180,11,3
	.word	40563
	.byte	5,2,183,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25358
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVR13CON',0,2,191,11,3
	.word	40628
	.byte	5,2,194,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25521
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVR33CON',0,2,202,11,3
	.word	40694
	.byte	5,2,205,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25684
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRADCSTAT',0,2,213,11,3
	.word	40760
	.byte	5,2,216,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25842
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRDVSTAT',0,2,224,11,3
	.word	40828
	.byte	5,2,227,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26007
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRMONCTRL',0,2,235,11,3
	.word	40895
	.byte	5,2,238,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26375
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVROSCCTRL',0,2,246,11,3
	.word	40963
	.byte	5,2,249,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26596
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVROVMON',0,2,129,12,3
	.word	41031
	.byte	5,2,132,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26775
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRRSTCON',0,2,140,12,3
	.word	41097
	.byte	5,2,143,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27040
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,2,151,12,3
	.word	41164
	.byte	5,2,154,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27193
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,2,162,12,3
	.word	41233
	.byte	5,2,165,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27349
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,2,173,12,3
	.word	41302
	.byte	5,2,176,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27511
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,2,184,12,3
	.word	41371
	.byte	5,2,187,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27654
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,2,195,12,3
	.word	41440
	.byte	5,2,198,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27819
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,2,206,12,3
	.word	41509
	.byte	5,2,209,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27964
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL1',0,2,217,12,3
	.word	41578
	.byte	5,2,220,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28145
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL2',0,2,228,12,3
	.word	41646
	.byte	5,2,231,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28319
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL3',0,2,239,12,3
	.word	41714
	.byte	5,2,242,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28479
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL4',0,2,250,12,3
	.word	41782
	.byte	5,2,253,12,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28623
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSTAT',0,2,133,13,3
	.word	41850
	.byte	5,2,136,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28897
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRTRIM',0,2,144,13,3
	.word	41915
	.byte	5,2,147,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29052
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRUVMON',0,2,155,13,3
	.word	41980
	.byte	5,2,158,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29231
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EXTCON',0,2,166,13,3
	.word	42046
	.byte	5,2,169,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29449
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_FDR',0,2,177,13,3
	.word	42110
	.byte	5,2,180,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29612
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_FMR',0,2,188,13,3
	.word	42171
	.byte	5,2,191,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29948
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ID',0,2,199,13,3
	.word	42232
	.byte	5,2,202,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30055
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_IGCR',0,2,210,13,3
	.word	42292
	.byte	5,2,213,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30507
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_IN',0,2,221,13,3
	.word	42354
	.byte	5,2,224,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30606
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_IOCR',0,2,232,13,3
	.word	42414
	.byte	5,2,235,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30756
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LBISTCTRL0',0,2,243,13,3
	.word	42476
	.byte	5,2,246,13,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30905
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LBISTCTRL1',0,2,254,13,3
	.word	42544
	.byte	5,2,129,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31066
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LBISTCTRL2',0,2,137,14,3
	.word	42612
	.byte	5,2,140,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31196
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LCLCON',0,2,148,14,3
	.word	42680
	.byte	5,2,151,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31328
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LCLTEST',0,2,159,14,3
	.word	42744
	.byte	5,2,162,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31443
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_MANID',0,2,170,14,3
	.word	42809
	.byte	5,2,173,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31554
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OMR',0,2,181,14,3
	.word	42872
	.byte	5,2,184,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31712
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OSCCON',0,2,192,14,3
	.word	42933
	.byte	5,2,195,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32124
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OUT',0,2,203,14,3
	.word	42997
	.byte	5,2,206,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32225
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OVCCON',0,2,214,14,3
	.word	43058
	.byte	5,2,217,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32492
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OVCENABLE',0,2,225,14,3
	.word	43122
	.byte	5,2,228,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32628
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PDISC',0,2,236,14,3
	.word	43189
	.byte	5,2,239,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32739
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PDR',0,2,247,14,3
	.word	43252
	.byte	5,2,250,14,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32872
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PDRR',0,2,130,15,3
	.word	43313
	.byte	5,2,133,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33075
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLCON0',0,2,141,15,3
	.word	43375
	.byte	5,2,144,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33431
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLCON1',0,2,152,15,3
	.word	43440
	.byte	5,2,155,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33609
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLCON2',0,2,163,15,3
	.word	43505
	.byte	5,2,166,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33709
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYCON0',0,2,174,15,3
	.word	43570
	.byte	5,2,177,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34079
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYCON1',0,2,185,15,3
	.word	43639
	.byte	5,2,188,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34265
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYSTAT',0,2,196,15,3
	.word	43708
	.byte	5,2,199,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34463
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLSTAT',0,2,207,15,3
	.word	43777
	.byte	5,2,210,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34696
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMCSR',0,2,218,15,3
	.word	43842
	.byte	5,2,221,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34848
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWCR0',0,2,229,15,3
	.word	43905
	.byte	5,2,232,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	35396
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWCR1',0,2,240,15,3
	.word	43970
	.byte	5,2,243,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	35641
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWSTAT',0,2,251,15,3
	.word	44035
	.byte	5,2,254,15,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36102
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWSTATCLR',0,2,134,16,3
	.word	44101
	.byte	5,2,137,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36581
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_RSTCON',0,2,145,16,3
	.word	44170
	.byte	5,2,148,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36372
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_RSTCON2',0,2,156,16,3
	.word	44234
	.byte	5,2,159,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36792
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_RSTSTAT',0,2,167,16,3
	.word	44299
	.byte	5,2,170,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37224
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_SAFECON',0,2,178,16,3
	.word	44364
	.byte	5,2,181,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37320
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_STSTAT',0,2,189,16,3
	.word	44429
	.byte	5,2,192,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37580
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_SWRSTCON',0,2,200,16,3
	.word	44493
	.byte	5,2,203,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37705
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_SYSCON',0,2,211,16,3
	.word	44559
	.byte	5,2,214,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37902
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPCLR',0,2,222,16,3
	.word	44623
	.byte	5,2,225,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38055
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPDIS',0,2,233,16,3
	.word	44688
	.byte	5,2,236,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38208
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSET',0,2,244,16,3
	.word	44753
	.byte	5,2,247,16,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38361
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSTAT',0,2,255,16,3
	.word	44818
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON0',0,2,138,17,3
	.word	314
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON1',0,2,149,17,3
	.word	558
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_SR',0,2,160,17,3
	.word	789
	.byte	5,2,163,17,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38616
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_WDTS_CON0',0,2,171,17,3
	.word	44969
	.byte	5,2,174,17,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38742
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_WDTS_CON1',0,2,182,17,3
	.word	45036
	.byte	5,2,185,17,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38994
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_WDTS_SR',0,2,193,17,3
	.word	45103
	.byte	7
	.word	829
	.byte	27
	.byte	'Ifx_SCU_WDTCPU',0,2,209,17,3
	.word	45168
	.byte	3
	.byte	'_Ifx_SCU_WDTS',0,2,212,17,25,12,6
	.byte	'CON0',0
	.word	44969
	.byte	4,2,35,0,6
	.byte	'CON1',0
	.word	45036
	.byte	4,2,35,4,6
	.byte	'SR',0
	.word	45103
	.byte	4,2,35,8,0,7
	.word	45197
	.byte	27
	.byte	'Ifx_SCU_WDTS',0,2,217,17,3
	.word	45258
	.byte	16,8
	.word	40499
	.byte	17,1,0,16,12
	.word	43842
	.byte	17,2,0,7
	.word	45197
	.byte	16,36
	.word	829
	.byte	17,2,0,7
	.word	45308
	.byte	16,16
	.word	179
	.byte	17,15,0,16,28
	.word	179
	.byte	17,27,0,16,40
	.word	179
	.byte	17,39,0,16,16
	.word	40313
	.byte	17,3,0,16,16
	.word	42292
	.byte	17,3,0,16,180,3
	.word	179
	.byte	17,179,3,0,3
	.byte	'_Ifx_SCU',0,2,230,17,25,128,8,6
	.byte	'reserved_0',0
	.word	4500
	.byte	8,2,35,0,6
	.byte	'ID',0
	.word	42232
	.byte	4,2,35,8,6
	.byte	'reserved_C',0
	.word	2681
	.byte	4,2,35,12,6
	.byte	'OSCCON',0
	.word	42933
	.byte	4,2,35,16,6
	.byte	'PLLSTAT',0
	.word	43777
	.byte	4,2,35,20,6
	.byte	'PLLCON0',0
	.word	43375
	.byte	4,2,35,24,6
	.byte	'PLLCON1',0
	.word	43440
	.byte	4,2,35,28,6
	.byte	'PLLCON2',0
	.word	43505
	.byte	4,2,35,32,6
	.byte	'PLLERAYSTAT',0
	.word	43708
	.byte	4,2,35,36,6
	.byte	'PLLERAYCON0',0
	.word	43570
	.byte	4,2,35,40,6
	.byte	'PLLERAYCON1',0
	.word	43639
	.byte	4,2,35,44,6
	.byte	'CCUCON0',0
	.word	39406
	.byte	4,2,35,48,6
	.byte	'CCUCON1',0
	.word	39471
	.byte	4,2,35,52,6
	.byte	'FDR',0
	.word	42110
	.byte	4,2,35,56,6
	.byte	'EXTCON',0
	.word	42046
	.byte	4,2,35,60,6
	.byte	'CCUCON2',0
	.word	39536
	.byte	4,2,35,64,6
	.byte	'CCUCON3',0
	.word	39601
	.byte	4,2,35,68,6
	.byte	'CCUCON4',0
	.word	39666
	.byte	4,2,35,72,6
	.byte	'CCUCON5',0
	.word	39731
	.byte	4,2,35,76,6
	.byte	'RSTSTAT',0
	.word	44299
	.byte	4,2,35,80,6
	.byte	'reserved_54',0
	.word	2681
	.byte	4,2,35,84,6
	.byte	'RSTCON',0
	.word	44170
	.byte	4,2,35,88,6
	.byte	'ARSTDIS',0
	.word	39341
	.byte	4,2,35,92,6
	.byte	'SWRSTCON',0
	.word	44493
	.byte	4,2,35,96,6
	.byte	'RSTCON2',0
	.word	44234
	.byte	4,2,35,100,6
	.byte	'reserved_68',0
	.word	2681
	.byte	4,2,35,104,6
	.byte	'EVRRSTCON',0
	.word	41097
	.byte	4,2,35,108,6
	.byte	'ESRCFG',0
	.word	45285
	.byte	8,2,35,112,6
	.byte	'ESROCFG',0
	.word	40563
	.byte	4,2,35,120,6
	.byte	'SYSCON',0
	.word	44559
	.byte	4,2,35,124,6
	.byte	'CCUCON6',0
	.word	39796
	.byte	4,3,35,128,1,6
	.byte	'CCUCON7',0
	.word	39861
	.byte	4,3,35,132,1,6
	.byte	'CCUCON8',0
	.word	39926
	.byte	4,3,35,136,1,6
	.byte	'CCUCON9',0
	.word	39991
	.byte	4,3,35,140,1,6
	.byte	'reserved_90',0
	.word	4840
	.byte	12,3,35,144,1,6
	.byte	'PDR',0
	.word	43252
	.byte	4,3,35,156,1,6
	.byte	'IOCR',0
	.word	42414
	.byte	4,3,35,160,1,6
	.byte	'OUT',0
	.word	42997
	.byte	4,3,35,164,1,6
	.byte	'OMR',0
	.word	42872
	.byte	4,3,35,168,1,6
	.byte	'IN',0
	.word	42354
	.byte	4,3,35,172,1,6
	.byte	'EVRSTAT',0
	.word	41850
	.byte	4,3,35,176,1,6
	.byte	'EVRDVSTAT',0
	.word	40828
	.byte	4,3,35,180,1,6
	.byte	'EVR13CON',0
	.word	40628
	.byte	4,3,35,184,1,6
	.byte	'EVR33CON',0
	.word	40694
	.byte	4,3,35,188,1,6
	.byte	'STSTAT',0
	.word	44429
	.byte	4,3,35,192,1,6
	.byte	'reserved_C4',0
	.word	2681
	.byte	4,3,35,196,1,6
	.byte	'PMSWCR0',0
	.word	43905
	.byte	4,3,35,200,1,6
	.byte	'PMSWSTAT',0
	.word	44035
	.byte	4,3,35,204,1,6
	.byte	'PMSWSTATCLR',0
	.word	44101
	.byte	4,3,35,208,1,6
	.byte	'PMCSR',0
	.word	45294
	.byte	12,3,35,212,1,6
	.byte	'DTSSTAT',0
	.word	40248
	.byte	4,3,35,224,1,6
	.byte	'DTSCON',0
	.word	40120
	.byte	4,3,35,228,1,6
	.byte	'PMSWCR1',0
	.word	43970
	.byte	4,3,35,232,1,6
	.byte	'reserved_EC',0
	.word	2681
	.byte	4,3,35,236,1,6
	.byte	'WDTS',0
	.word	45303
	.byte	12,3,35,240,1,6
	.byte	'EMSR',0
	.word	40437
	.byte	4,3,35,252,1,6
	.byte	'WDTCPU',0
	.word	45317
	.byte	36,3,35,128,2,6
	.byte	'TRAPSTAT',0
	.word	44818
	.byte	4,3,35,164,2,6
	.byte	'TRAPSET',0
	.word	44753
	.byte	4,3,35,168,2,6
	.byte	'TRAPCLR',0
	.word	44623
	.byte	4,3,35,172,2,6
	.byte	'TRAPDIS',0
	.word	44688
	.byte	4,3,35,176,2,6
	.byte	'LCLCON0',0
	.word	42680
	.byte	4,3,35,180,2,6
	.byte	'LCLCON1',0
	.word	42680
	.byte	4,3,35,184,2,6
	.byte	'LCLTEST',0
	.word	42744
	.byte	4,3,35,188,2,6
	.byte	'CHIPID',0
	.word	40056
	.byte	4,3,35,192,2,6
	.byte	'MANID',0
	.word	42809
	.byte	4,3,35,196,2,6
	.byte	'reserved_148',0
	.word	4500
	.byte	8,3,35,200,2,6
	.byte	'SAFECON',0
	.word	44364
	.byte	4,3,35,208,2,6
	.byte	'reserved_154',0
	.word	45322
	.byte	16,3,35,212,2,6
	.byte	'LBISTCTRL0',0
	.word	42476
	.byte	4,3,35,228,2,6
	.byte	'LBISTCTRL1',0
	.word	42544
	.byte	4,3,35,232,2,6
	.byte	'LBISTCTRL2',0
	.word	42612
	.byte	4,3,35,236,2,6
	.byte	'reserved_170',0
	.word	45331
	.byte	28,3,35,240,2,6
	.byte	'PDISC',0
	.word	43189
	.byte	4,3,35,140,3,6
	.byte	'reserved_190',0
	.word	4500
	.byte	8,3,35,144,3,6
	.byte	'EVRTRIM',0
	.word	41915
	.byte	4,3,35,152,3,6
	.byte	'EVRADCSTAT',0
	.word	40760
	.byte	4,3,35,156,3,6
	.byte	'EVRUVMON',0
	.word	41980
	.byte	4,3,35,160,3,6
	.byte	'EVROVMON',0
	.word	41031
	.byte	4,3,35,164,3,6
	.byte	'EVRMONCTRL',0
	.word	40895
	.byte	4,3,35,168,3,6
	.byte	'reserved_1AC',0
	.word	2681
	.byte	4,3,35,172,3,6
	.byte	'EVRSDCTRL1',0
	.word	41578
	.byte	4,3,35,176,3,6
	.byte	'EVRSDCTRL2',0
	.word	41646
	.byte	4,3,35,180,3,6
	.byte	'EVRSDCTRL3',0
	.word	41714
	.byte	4,3,35,184,3,6
	.byte	'EVRSDCTRL4',0
	.word	41782
	.byte	4,3,35,188,3,6
	.byte	'EVRSDCOEFF1',0
	.word	41164
	.byte	4,3,35,192,3,6
	.byte	'EVRSDCOEFF2',0
	.word	41233
	.byte	4,3,35,196,3,6
	.byte	'EVRSDCOEFF3',0
	.word	41302
	.byte	4,3,35,200,3,6
	.byte	'EVRSDCOEFF4',0
	.word	41371
	.byte	4,3,35,204,3,6
	.byte	'EVRSDCOEFF5',0
	.word	41440
	.byte	4,3,35,208,3,6
	.byte	'EVRSDCOEFF6',0
	.word	41509
	.byte	4,3,35,212,3,6
	.byte	'EVROSCCTRL',0
	.word	40963
	.byte	4,3,35,216,3,6
	.byte	'reserved_1DC',0
	.word	2681
	.byte	4,3,35,220,3,6
	.byte	'OVCENABLE',0
	.word	43122
	.byte	4,3,35,224,3,6
	.byte	'OVCCON',0
	.word	43058
	.byte	4,3,35,228,3,6
	.byte	'reserved_1E8',0
	.word	45340
	.byte	40,3,35,232,3,6
	.byte	'EICR',0
	.word	45349
	.byte	16,3,35,144,4,6
	.byte	'EIFR',0
	.word	40375
	.byte	4,3,35,160,4,6
	.byte	'FMR',0
	.word	42171
	.byte	4,3,35,164,4,6
	.byte	'PDRR',0
	.word	43313
	.byte	4,3,35,168,4,6
	.byte	'IGCR',0
	.word	45358
	.byte	16,3,35,172,4,6
	.byte	'reserved_23C',0
	.word	2681
	.byte	4,3,35,188,4,6
	.byte	'DTSLIM',0
	.word	40184
	.byte	4,3,35,192,4,6
	.byte	'reserved_244',0
	.word	45367
	.byte	180,3,3,35,196,4,6
	.byte	'ACCEN1',0
	.word	39277
	.byte	4,3,35,248,7,6
	.byte	'ACCEN0',0
	.word	39213
	.byte	4,3,35,252,7,0,7
	.word	45378
	.byte	27
	.byte	'Ifx_SCU',0,2,210,18,3
	.word	47358
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'_Ifx_CPU_A_Bits',0,18,45,16,4,4
	.byte	'ADDR',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_A_Bits',0,18,48,3
	.word	47396
	.byte	3
	.byte	'_Ifx_CPU_BIV_Bits',0,18,51,16,4,4
	.byte	'VSS',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'BIV',0,4
	.word	47380
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_CPU_BIV_Bits',0,18,55,3
	.word	47457
	.byte	3
	.byte	'_Ifx_CPU_BTV_Bits',0,18,58,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'BTV',0,4
	.word	47380
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_CPU_BTV_Bits',0,18,62,3
	.word	47536
	.byte	3
	.byte	'_Ifx_CPU_CCNT_Bits',0,18,65,16,4,4
	.byte	'CountValue',0,4
	.word	47380
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	47380
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_CCNT_Bits',0,18,69,3
	.word	47622
	.byte	3
	.byte	'_Ifx_CPU_CCTRL_Bits',0,18,72,16,4,4
	.byte	'CM',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'CE',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'M1',0,4
	.word	47380
	.byte	3,27,2,35,0,4
	.byte	'M2',0,4
	.word	47380
	.byte	3,24,2,35,0,4
	.byte	'M3',0,4
	.word	47380
	.byte	3,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	47380
	.byte	21,0,2,35,0,0,27
	.byte	'Ifx_CPU_CCTRL_Bits',0,18,80,3
	.word	47711
	.byte	3
	.byte	'_Ifx_CPU_COMPAT_Bits',0,18,83,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'RM',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'SP',0,4
	.word	47380
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	47380
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_COMPAT_Bits',0,18,89,3
	.word	47857
	.byte	3
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,18,92,16,4,4
	.byte	'CORE_ID',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47380
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_CORE_ID_Bits',0,18,96,3
	.word	47984
	.byte	3
	.byte	'_Ifx_CPU_CPR_L_Bits',0,18,99,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'LOWBND',0,4
	.word	47380
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_CPR_L_Bits',0,18,103,3
	.word	48082
	.byte	3
	.byte	'_Ifx_CPU_CPR_U_Bits',0,18,106,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'UPPBND',0,4
	.word	47380
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_CPR_U_Bits',0,18,110,3
	.word	48175
	.byte	3
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,18,113,16,4,4
	.byte	'MOD_REV',0,4
	.word	47380
	.byte	8,24,2,35,0,4
	.byte	'MOD_32B',0,4
	.word	47380
	.byte	8,16,2,35,0,4
	.byte	'MOD',0,4
	.word	47380
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_CPU_ID_Bits',0,18,118,3
	.word	48268
	.byte	3
	.byte	'_Ifx_CPU_CPXE_Bits',0,18,121,16,4,4
	.byte	'XE',0,4
	.word	47380
	.byte	8,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47380
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_CPU_CPXE_Bits',0,18,125,3
	.word	48376
	.byte	3
	.byte	'_Ifx_CPU_CREVT_Bits',0,18,128,1,16,4,4
	.byte	'EVTA',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	47380
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	47380
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	47380
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47380
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_CPU_CREVT_Bits',0,18,136,1,3
	.word	48463
	.byte	3
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,18,139,1,16,4,4
	.byte	'CID',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47380
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_CUS_ID_Bits',0,18,143,1,3
	.word	48617
	.byte	3
	.byte	'_Ifx_CPU_D_Bits',0,18,146,1,16,4,4
	.byte	'DATA',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_D_Bits',0,18,149,1,3
	.word	48711
	.byte	3
	.byte	'_Ifx_CPU_DATR_Bits',0,18,152,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'SBE',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'reserved_4',0,4
	.word	47380
	.byte	5,23,2,35,0,4
	.byte	'CWE',0,4
	.word	47380
	.byte	1,22,2,35,0,4
	.byte	'CFE',0,4
	.word	47380
	.byte	1,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	47380
	.byte	3,18,2,35,0,4
	.byte	'SOE',0,4
	.word	47380
	.byte	1,17,2,35,0,4
	.byte	'SME',0,4
	.word	47380
	.byte	1,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47380
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_DATR_Bits',0,18,163,1,3
	.word	48774
	.byte	3
	.byte	'_Ifx_CPU_DBGSR_Bits',0,18,166,1,16,4,4
	.byte	'DE',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'HALT',0,4
	.word	47380
	.byte	2,29,2,35,0,4
	.byte	'SIH',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'SUSP',0,4
	.word	47380
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	47380
	.byte	1,26,2,35,0,4
	.byte	'PREVSUSP',0,4
	.word	47380
	.byte	1,25,2,35,0,4
	.byte	'PEVT',0,4
	.word	47380
	.byte	1,24,2,35,0,4
	.byte	'EVTSRC',0,4
	.word	47380
	.byte	5,19,2,35,0,4
	.byte	'reserved_13',0,4
	.word	47380
	.byte	19,0,2,35,0,0,27
	.byte	'Ifx_CPU_DBGSR_Bits',0,18,177,1,3
	.word	48992
	.byte	3
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,18,180,1,16,4,4
	.byte	'DTA',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	47380
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_CPU_DBGTCR_Bits',0,18,184,1,3
	.word	49207
	.byte	3
	.byte	'_Ifx_CPU_DCON0_Bits',0,18,187,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'DCBYP',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	47380
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_CPU_DCON0_Bits',0,18,192,1,3
	.word	49301
	.byte	3
	.byte	'_Ifx_CPU_DCON2_Bits',0,18,195,1,16,4,4
	.byte	'DCACHE_SZE',0,4
	.word	47380
	.byte	16,16,2,35,0,4
	.byte	'DSCRATCH_SZE',0,4
	.word	47380
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_DCON2_Bits',0,18,199,1,3
	.word	49417
	.byte	3
	.byte	'_Ifx_CPU_DCX_Bits',0,18,202,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	6,26,2,35,0,4
	.byte	'DCXValue',0,4
	.word	47380
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_CPU_DCX_Bits',0,18,206,1,3
	.word	49518
	.byte	3
	.byte	'_Ifx_CPU_DEADD_Bits',0,18,209,1,16,4,4
	.byte	'ERROR_ADDRESS',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_DEADD_Bits',0,18,212,1,3
	.word	49611
	.byte	3
	.byte	'_Ifx_CPU_DIEAR_Bits',0,18,215,1,16,4,4
	.byte	'TA',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_DIEAR_Bits',0,18,218,1,3
	.word	49691
	.byte	3
	.byte	'_Ifx_CPU_DIETR_Bits',0,18,221,1,16,4,4
	.byte	'IED',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'IE_T',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'IE_C',0,4
	.word	47380
	.byte	1,29,2,35,0,4
	.byte	'IE_S',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'IE_BI',0,4
	.word	47380
	.byte	1,27,2,35,0,4
	.byte	'E_INFO',0,4
	.word	47380
	.byte	6,21,2,35,0,4
	.byte	'IE_DUAL',0,4
	.word	47380
	.byte	1,20,2,35,0,4
	.byte	'IE_SP',0,4
	.word	47380
	.byte	1,19,2,35,0,4
	.byte	'IE_BS',0,4
	.word	47380
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	47380
	.byte	18,0,2,35,0,0,27
	.byte	'Ifx_CPU_DIETR_Bits',0,18,233,1,3
	.word	49760
	.byte	3
	.byte	'_Ifx_CPU_DMS_Bits',0,18,236,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'DMSValue',0,4
	.word	47380
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_CPU_DMS_Bits',0,18,240,1,3
	.word	49989
	.byte	3
	.byte	'_Ifx_CPU_DPR_L_Bits',0,18,243,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'LOWBND',0,4
	.word	47380
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_DPR_L_Bits',0,18,247,1,3
	.word	50082
	.byte	3
	.byte	'_Ifx_CPU_DPR_U_Bits',0,18,250,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'UPPBND',0,4
	.word	47380
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_DPR_U_Bits',0,18,254,1,3
	.word	50177
	.byte	3
	.byte	'_Ifx_CPU_DPRE_Bits',0,18,129,2,16,4,4
	.byte	'RE',0,4
	.word	47380
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47380
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_DPRE_Bits',0,18,133,2,3
	.word	50272
	.byte	3
	.byte	'_Ifx_CPU_DPWE_Bits',0,18,136,2,16,4,4
	.byte	'WE',0,4
	.word	47380
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47380
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_DPWE_Bits',0,18,140,2,3
	.word	50362
	.byte	3
	.byte	'_Ifx_CPU_DSTR_Bits',0,18,143,2,16,4,4
	.byte	'SRE',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'GAE',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'LBE',0,4
	.word	47380
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47380
	.byte	3,26,2,35,0,4
	.byte	'CRE',0,4
	.word	47380
	.byte	1,25,2,35,0,4
	.byte	'reserved_7',0,4
	.word	47380
	.byte	7,18,2,35,0,4
	.byte	'DTME',0,4
	.word	47380
	.byte	1,17,2,35,0,4
	.byte	'LOE',0,4
	.word	47380
	.byte	1,16,2,35,0,4
	.byte	'SDE',0,4
	.word	47380
	.byte	1,15,2,35,0,4
	.byte	'SCE',0,4
	.word	47380
	.byte	1,14,2,35,0,4
	.byte	'CAC',0,4
	.word	47380
	.byte	1,13,2,35,0,4
	.byte	'MPE',0,4
	.word	47380
	.byte	1,12,2,35,0,4
	.byte	'CLE',0,4
	.word	47380
	.byte	1,11,2,35,0,4
	.byte	'reserved_21',0,4
	.word	47380
	.byte	3,8,2,35,0,4
	.byte	'ALN',0,4
	.word	47380
	.byte	1,7,2,35,0,4
	.byte	'reserved_25',0,4
	.word	47380
	.byte	7,0,2,35,0,0,27
	.byte	'Ifx_CPU_DSTR_Bits',0,18,161,2,3
	.word	50452
	.byte	3
	.byte	'_Ifx_CPU_EXEVT_Bits',0,18,164,2,16,4,4
	.byte	'EVTA',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	47380
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	47380
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	47380
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47380
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_CPU_EXEVT_Bits',0,18,172,2,3
	.word	50776
	.byte	3
	.byte	'_Ifx_CPU_FCX_Bits',0,18,175,2,16,4,4
	.byte	'FCXO',0,4
	.word	47380
	.byte	16,16,2,35,0,4
	.byte	'FCXS',0,4
	.word	47380
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	47380
	.byte	12,0,2,35,0,0,27
	.byte	'Ifx_CPU_FCX_Bits',0,18,180,2,3
	.word	50930
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,18,183,2,16,4,4
	.byte	'TST',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'TCL',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	47380
	.byte	6,24,2,35,0,4
	.byte	'RM',0,4
	.word	47380
	.byte	2,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	47380
	.byte	8,14,2,35,0,4
	.byte	'FXE',0,4
	.word	47380
	.byte	1,13,2,35,0,4
	.byte	'FUE',0,4
	.word	47380
	.byte	1,12,2,35,0,4
	.byte	'FZE',0,4
	.word	47380
	.byte	1,11,2,35,0,4
	.byte	'FVE',0,4
	.word	47380
	.byte	1,10,2,35,0,4
	.byte	'FIE',0,4
	.word	47380
	.byte	1,9,2,35,0,4
	.byte	'reserved_23',0,4
	.word	47380
	.byte	3,6,2,35,0,4
	.byte	'FX',0,4
	.word	47380
	.byte	1,5,2,35,0,4
	.byte	'FU',0,4
	.word	47380
	.byte	1,4,2,35,0,4
	.byte	'FZ',0,4
	.word	47380
	.byte	1,3,2,35,0,4
	.byte	'FV',0,4
	.word	47380
	.byte	1,2,2,35,0,4
	.byte	'FI',0,4
	.word	47380
	.byte	1,1,2,35,0,4
	.byte	'reserved_31',0,4
	.word	47380
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,18,202,2,3
	.word	51036
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,18,205,2,16,4,4
	.byte	'OPC',0,4
	.word	47380
	.byte	8,24,2,35,0,4
	.byte	'FMT',0,4
	.word	47380
	.byte	1,23,2,35,0,4
	.byte	'reserved_9',0,4
	.word	47380
	.byte	7,16,2,35,0,4
	.byte	'DREG',0,4
	.word	47380
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	47380
	.byte	12,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,18,212,2,3
	.word	51385
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,18,215,2,16,4,4
	.byte	'PC',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,18,218,2,3
	.word	51545
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,18,221,2,16,4,4
	.byte	'SRC1',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,18,224,2,3
	.word	51626
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,18,227,2,16,4,4
	.byte	'SRC2',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,18,230,2,3
	.word	51713
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,18,233,2,16,4,4
	.byte	'SRC3',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,18,236,2,3
	.word	51800
	.byte	3
	.byte	'_Ifx_CPU_ICNT_Bits',0,18,239,2,16,4,4
	.byte	'CountValue',0,4
	.word	47380
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	47380
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_ICNT_Bits',0,18,243,2,3
	.word	51887
	.byte	3
	.byte	'_Ifx_CPU_ICR_Bits',0,18,246,2,16,4,4
	.byte	'CCPN',0,4
	.word	47380
	.byte	10,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	47380
	.byte	5,17,2,35,0,4
	.byte	'IE',0,4
	.word	47380
	.byte	1,16,2,35,0,4
	.byte	'PIPN',0,4
	.word	47380
	.byte	10,6,2,35,0,4
	.byte	'reserved_26',0,4
	.word	47380
	.byte	6,0,2,35,0,0,27
	.byte	'Ifx_CPU_ICR_Bits',0,18,253,2,3
	.word	51978
	.byte	3
	.byte	'_Ifx_CPU_ISP_Bits',0,18,128,3,16,4,4
	.byte	'ISP',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_ISP_Bits',0,18,131,3,3
	.word	52121
	.byte	3
	.byte	'_Ifx_CPU_LCX_Bits',0,18,134,3,16,4,4
	.byte	'LCXO',0,4
	.word	47380
	.byte	16,16,2,35,0,4
	.byte	'LCXS',0,4
	.word	47380
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	47380
	.byte	12,0,2,35,0,0,27
	.byte	'Ifx_CPU_LCX_Bits',0,18,139,3,3
	.word	52187
	.byte	3
	.byte	'_Ifx_CPU_M1CNT_Bits',0,18,142,3,16,4,4
	.byte	'CountValue',0,4
	.word	47380
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	47380
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_M1CNT_Bits',0,18,146,3,3
	.word	52293
	.byte	3
	.byte	'_Ifx_CPU_M2CNT_Bits',0,18,149,3,16,4,4
	.byte	'CountValue',0,4
	.word	47380
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	47380
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_M2CNT_Bits',0,18,153,3,3
	.word	52386
	.byte	3
	.byte	'_Ifx_CPU_M3CNT_Bits',0,18,156,3,16,4,4
	.byte	'CountValue',0,4
	.word	47380
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	47380
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_M3CNT_Bits',0,18,160,3,3
	.word	52479
	.byte	3
	.byte	'_Ifx_CPU_PC_Bits',0,18,163,3,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'PC',0,4
	.word	47380
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_CPU_PC_Bits',0,18,167,3,3
	.word	52572
	.byte	3
	.byte	'_Ifx_CPU_PCON0_Bits',0,18,170,3,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'PCBYP',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	47380
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_CPU_PCON0_Bits',0,18,175,3,3
	.word	52657
	.byte	3
	.byte	'_Ifx_CPU_PCON1_Bits',0,18,178,3,16,4,4
	.byte	'PCINV',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'PBINV',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	47380
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_CPU_PCON1_Bits',0,18,183,3,3
	.word	52773
	.byte	3
	.byte	'_Ifx_CPU_PCON2_Bits',0,18,186,3,16,4,4
	.byte	'PCACHE_SZE',0,4
	.word	47380
	.byte	16,16,2,35,0,4
	.byte	'PSCRATCH_SZE',0,4
	.word	47380
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_PCON2_Bits',0,18,190,3,3
	.word	52884
	.byte	3
	.byte	'_Ifx_CPU_PCXI_Bits',0,18,193,3,16,4,4
	.byte	'PCXO',0,4
	.word	47380
	.byte	16,16,2,35,0,4
	.byte	'PCXS',0,4
	.word	47380
	.byte	4,12,2,35,0,4
	.byte	'UL',0,4
	.word	47380
	.byte	1,11,2,35,0,4
	.byte	'PIE',0,4
	.word	47380
	.byte	1,10,2,35,0,4
	.byte	'PCPN',0,4
	.word	47380
	.byte	10,0,2,35,0,0,27
	.byte	'Ifx_CPU_PCXI_Bits',0,18,200,3,3
	.word	52985
	.byte	3
	.byte	'_Ifx_CPU_PIEAR_Bits',0,18,203,3,16,4,4
	.byte	'TA',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_PIEAR_Bits',0,18,206,3,3
	.word	53115
	.byte	3
	.byte	'_Ifx_CPU_PIETR_Bits',0,18,209,3,16,4,4
	.byte	'IED',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'IE_T',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'IE_C',0,4
	.word	47380
	.byte	1,29,2,35,0,4
	.byte	'IE_S',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'IE_BI',0,4
	.word	47380
	.byte	1,27,2,35,0,4
	.byte	'E_INFO',0,4
	.word	47380
	.byte	6,21,2,35,0,4
	.byte	'IE_DUAL',0,4
	.word	47380
	.byte	1,20,2,35,0,4
	.byte	'IE_SP',0,4
	.word	47380
	.byte	1,19,2,35,0,4
	.byte	'IE_BS',0,4
	.word	47380
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	47380
	.byte	18,0,2,35,0,0,27
	.byte	'Ifx_CPU_PIETR_Bits',0,18,221,3,3
	.word	53184
	.byte	3
	.byte	'_Ifx_CPU_PMA0_Bits',0,18,224,3,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	13,19,2,35,0,4
	.byte	'DAC',0,4
	.word	47380
	.byte	3,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47380
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_PMA0_Bits',0,18,229,3,3
	.word	53413
	.byte	3
	.byte	'_Ifx_CPU_PMA1_Bits',0,18,232,3,16,4,4
	.byte	'reserved_0',0,4
	.word	47380
	.byte	14,18,2,35,0,4
	.byte	'CAC',0,4
	.word	47380
	.byte	2,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47380
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_PMA1_Bits',0,18,237,3,3
	.word	53526
	.byte	3
	.byte	'_Ifx_CPU_PMA2_Bits',0,18,240,3,16,4,4
	.byte	'PSI',0,4
	.word	47380
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47380
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_PMA2_Bits',0,18,244,3,3
	.word	53639
	.byte	3
	.byte	'_Ifx_CPU_PSTR_Bits',0,18,247,3,16,4,4
	.byte	'FRE',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'FBE',0,4
	.word	47380
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47380
	.byte	9,20,2,35,0,4
	.byte	'FPE',0,4
	.word	47380
	.byte	1,19,2,35,0,4
	.byte	'reserved_13',0,4
	.word	47380
	.byte	1,18,2,35,0,4
	.byte	'FME',0,4
	.word	47380
	.byte	1,17,2,35,0,4
	.byte	'reserved_15',0,4
	.word	47380
	.byte	17,0,2,35,0,0,27
	.byte	'Ifx_CPU_PSTR_Bits',0,18,129,4,3
	.word	53730
	.byte	3
	.byte	'_Ifx_CPU_PSW_Bits',0,18,132,4,16,4,4
	.byte	'CDC',0,4
	.word	47380
	.byte	7,25,2,35,0,4
	.byte	'CDE',0,4
	.word	47380
	.byte	1,24,2,35,0,4
	.byte	'GW',0,4
	.word	47380
	.byte	1,23,2,35,0,4
	.byte	'IS',0,4
	.word	47380
	.byte	1,22,2,35,0,4
	.byte	'IO',0,4
	.word	47380
	.byte	2,20,2,35,0,4
	.byte	'PRS',0,4
	.word	47380
	.byte	2,18,2,35,0,4
	.byte	'S',0,4
	.word	47380
	.byte	1,17,2,35,0,4
	.byte	'reserved_15',0,4
	.word	47380
	.byte	12,5,2,35,0,4
	.byte	'SAV',0,4
	.word	47380
	.byte	1,4,2,35,0,4
	.byte	'AV',0,4
	.word	47380
	.byte	1,3,2,35,0,4
	.byte	'SV',0,4
	.word	47380
	.byte	1,2,2,35,0,4
	.byte	'V',0,4
	.word	47380
	.byte	1,1,2,35,0,4
	.byte	'C',0,4
	.word	47380
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_PSW_Bits',0,18,147,4,3
	.word	53933
	.byte	3
	.byte	'_Ifx_CPU_SEGEN_Bits',0,18,150,4,16,4,4
	.byte	'ADFLIP',0,4
	.word	47380
	.byte	8,24,2,35,0,4
	.byte	'ADTYPE',0,4
	.word	47380
	.byte	2,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	47380
	.byte	21,1,2,35,0,4
	.byte	'AE',0,4
	.word	47380
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_SEGEN_Bits',0,18,156,4,3
	.word	54176
	.byte	3
	.byte	'_Ifx_CPU_SMACON_Bits',0,18,159,4,16,4,4
	.byte	'PC',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'PT',0,4
	.word	47380
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47380
	.byte	5,24,2,35,0,4
	.byte	'DC',0,4
	.word	47380
	.byte	1,23,2,35,0,4
	.byte	'reserved_9',0,4
	.word	47380
	.byte	1,22,2,35,0,4
	.byte	'DT',0,4
	.word	47380
	.byte	1,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	47380
	.byte	13,8,2,35,0,4
	.byte	'IODT',0,4
	.word	47380
	.byte	1,7,2,35,0,4
	.byte	'reserved_25',0,4
	.word	47380
	.byte	7,0,2,35,0,0,27
	.byte	'Ifx_CPU_SMACON_Bits',0,18,171,4,3
	.word	54304
	.byte	3
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,18,174,4,16,4,4
	.byte	'EN',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,18,177,4,3
	.word	54545
	.byte	3
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,18,180,4,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,18,183,4,3
	.word	54628
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,18,186,4,16,4,4
	.byte	'EN',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,18,189,4,3
	.word	54719
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,18,192,4,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,18,195,4,3
	.word	54810
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,18,198,4,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	156
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,18,202,4,3
	.word	54909
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,18,205,4,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	156
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,18,209,4,3
	.word	55016
	.byte	3
	.byte	'_Ifx_CPU_SWEVT_Bits',0,18,212,4,16,4,4
	.byte	'EVTA',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	47380
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	47380
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	47380
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47380
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_CPU_SWEVT_Bits',0,18,220,4,3
	.word	55123
	.byte	3
	.byte	'_Ifx_CPU_SYSCON_Bits',0,18,223,4,16,4,4
	.byte	'FCDSF',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'PROTEN',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'TPROTEN',0,4
	.word	47380
	.byte	1,29,2,35,0,4
	.byte	'IS',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'IT',0,4
	.word	47380
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	47380
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_SYSCON_Bits',0,18,231,4,3
	.word	55277
	.byte	3
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,18,234,4,16,4,4
	.byte	'ASI',0,4
	.word	47380
	.byte	5,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	47380
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,18,238,4,3
	.word	55438
	.byte	3
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,18,241,4,16,4,4
	.byte	'TEXP0',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'TEXP1',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'TEXP2',0,4
	.word	47380
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47380
	.byte	13,16,2,35,0,4
	.byte	'TTRAP',0,4
	.word	47380
	.byte	1,15,2,35,0,4
	.byte	'reserved_17',0,4
	.word	47380
	.byte	15,0,2,35,0,0,27
	.byte	'Ifx_CPU_TPS_CON_Bits',0,18,249,4,3
	.word	55536
	.byte	3
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,18,252,4,16,4,4
	.byte	'Timer',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,18,255,4,3
	.word	55708
	.byte	3
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,18,130,5,16,4,4
	.byte	'ADDR',0,4
	.word	47380
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_TR_ADR_Bits',0,18,133,5,3
	.word	55788
	.byte	3
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,18,136,5,16,4,4
	.byte	'EVTA',0,4
	.word	47380
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	47380
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	47380
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	47380
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47380
	.byte	4,20,2,35,0,4
	.byte	'TYP',0,4
	.word	47380
	.byte	1,19,2,35,0,4
	.byte	'RNG',0,4
	.word	47380
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	47380
	.byte	1,17,2,35,0,4
	.byte	'ASI_EN',0,4
	.word	47380
	.byte	1,16,2,35,0,4
	.byte	'ASI',0,4
	.word	47380
	.byte	5,11,2,35,0,4
	.byte	'reserved_21',0,4
	.word	47380
	.byte	6,5,2,35,0,4
	.byte	'AST',0,4
	.word	47380
	.byte	1,4,2,35,0,4
	.byte	'ALD',0,4
	.word	47380
	.byte	1,3,2,35,0,4
	.byte	'reserved_29',0,4
	.word	47380
	.byte	3,0,2,35,0,0,27
	.byte	'Ifx_CPU_TR_EVT_Bits',0,18,153,5,3
	.word	55861
	.byte	3
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,18,156,5,16,4,4
	.byte	'T0',0,4
	.word	47380
	.byte	1,31,2,35,0,4
	.byte	'T1',0,4
	.word	47380
	.byte	1,30,2,35,0,4
	.byte	'T2',0,4
	.word	47380
	.byte	1,29,2,35,0,4
	.byte	'T3',0,4
	.word	47380
	.byte	1,28,2,35,0,4
	.byte	'T4',0,4
	.word	47380
	.byte	1,27,2,35,0,4
	.byte	'T5',0,4
	.word	47380
	.byte	1,26,2,35,0,4
	.byte	'T6',0,4
	.word	47380
	.byte	1,25,2,35,0,4
	.byte	'T7',0,4
	.word	47380
	.byte	1,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47380
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,18,167,5,3
	.word	56179
	.byte	5,18,175,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47396
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_A',0,18,183,5,3
	.word	56374
	.byte	5,18,186,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47457
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_BIV',0,18,194,5,3
	.word	56433
	.byte	5,18,197,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47536
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_BTV',0,18,205,5,3
	.word	56494
	.byte	5,18,208,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47622
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CCNT',0,18,216,5,3
	.word	56555
	.byte	5,18,219,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47711
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CCTRL',0,18,227,5,3
	.word	56617
	.byte	5,18,230,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47857
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_COMPAT',0,18,238,5,3
	.word	56680
	.byte	5,18,241,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47984
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CORE_ID',0,18,249,5,3
	.word	56744
	.byte	5,18,252,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48082
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CPR_L',0,18,132,6,3
	.word	56809
	.byte	5,18,135,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48175
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CPR_U',0,18,143,6,3
	.word	56872
	.byte	5,18,146,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48268
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CPU_ID',0,18,154,6,3
	.word	56935
	.byte	5,18,157,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48376
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CPXE',0,18,165,6,3
	.word	56999
	.byte	5,18,168,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48463
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CREVT',0,18,176,6,3
	.word	57061
	.byte	5,18,179,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48617
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CUS_ID',0,18,187,6,3
	.word	57124
	.byte	5,18,190,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48711
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_D',0,18,198,6,3
	.word	57188
	.byte	5,18,201,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48774
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DATR',0,18,209,6,3
	.word	57247
	.byte	5,18,212,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48992
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DBGSR',0,18,220,6,3
	.word	57309
	.byte	5,18,223,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49207
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DBGTCR',0,18,231,6,3
	.word	57372
	.byte	5,18,234,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49301
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DCON0',0,18,242,6,3
	.word	57436
	.byte	5,18,245,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49417
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DCON2',0,18,253,6,3
	.word	57499
	.byte	5,18,128,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49518
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DCX',0,18,136,7,3
	.word	57562
	.byte	5,18,139,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49611
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DEADD',0,18,147,7,3
	.word	57623
	.byte	5,18,150,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49691
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DIEAR',0,18,158,7,3
	.word	57686
	.byte	5,18,161,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49760
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DIETR',0,18,169,7,3
	.word	57749
	.byte	5,18,172,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49989
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DMS',0,18,180,7,3
	.word	57812
	.byte	5,18,183,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50082
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DPR_L',0,18,191,7,3
	.word	57873
	.byte	5,18,194,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50177
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DPR_U',0,18,202,7,3
	.word	57936
	.byte	5,18,205,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50272
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DPRE',0,18,213,7,3
	.word	57999
	.byte	5,18,216,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50362
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DPWE',0,18,224,7,3
	.word	58061
	.byte	5,18,227,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50452
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DSTR',0,18,235,7,3
	.word	58123
	.byte	5,18,238,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50776
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_EXEVT',0,18,246,7,3
	.word	58185
	.byte	5,18,249,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50930
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FCX',0,18,129,8,3
	.word	58248
	.byte	5,18,132,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51036
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,18,140,8,3
	.word	58309
	.byte	5,18,143,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51385
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,18,151,8,3
	.word	58379
	.byte	5,18,154,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51545
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,18,162,8,3
	.word	58449
	.byte	5,18,165,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51626
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,18,173,8,3
	.word	58518
	.byte	5,18,176,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51713
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,18,184,8,3
	.word	58589
	.byte	5,18,187,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51800
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,18,195,8,3
	.word	58660
	.byte	5,18,198,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51887
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_ICNT',0,18,206,8,3
	.word	58731
	.byte	5,18,209,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51978
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_ICR',0,18,217,8,3
	.word	58793
	.byte	5,18,220,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52121
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_ISP',0,18,228,8,3
	.word	58854
	.byte	5,18,231,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52187
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_LCX',0,18,239,8,3
	.word	58915
	.byte	5,18,242,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52293
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_M1CNT',0,18,250,8,3
	.word	58976
	.byte	5,18,253,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52386
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_M2CNT',0,18,133,9,3
	.word	59039
	.byte	5,18,136,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52479
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_M3CNT',0,18,144,9,3
	.word	59102
	.byte	5,18,147,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52572
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PC',0,18,155,9,3
	.word	59165
	.byte	5,18,158,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52657
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PCON0',0,18,166,9,3
	.word	59225
	.byte	5,18,169,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52773
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PCON1',0,18,177,9,3
	.word	59288
	.byte	5,18,180,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52884
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PCON2',0,18,188,9,3
	.word	59351
	.byte	5,18,191,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52985
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PCXI',0,18,199,9,3
	.word	59414
	.byte	5,18,202,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53115
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PIEAR',0,18,210,9,3
	.word	59476
	.byte	5,18,213,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53184
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PIETR',0,18,221,9,3
	.word	59539
	.byte	5,18,224,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53413
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PMA0',0,18,232,9,3
	.word	59602
	.byte	5,18,235,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53526
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PMA1',0,18,243,9,3
	.word	59664
	.byte	5,18,246,9,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53639
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PMA2',0,18,254,9,3
	.word	59726
	.byte	5,18,129,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53730
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PSTR',0,18,137,10,3
	.word	59788
	.byte	5,18,140,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53933
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PSW',0,18,148,10,3
	.word	59850
	.byte	5,18,151,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54176
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SEGEN',0,18,159,10,3
	.word	59911
	.byte	5,18,162,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54304
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SMACON',0,18,170,10,3
	.word	59974
	.byte	5,18,173,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54545
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENA',0,18,181,10,3
	.word	60038
	.byte	5,18,184,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54628
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENB',0,18,192,10,3
	.word	60108
	.byte	5,18,195,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54719
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,18,203,10,3
	.word	60178
	.byte	5,18,206,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54810
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,18,214,10,3
	.word	60252
	.byte	5,18,217,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54909
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,18,225,10,3
	.word	60326
	.byte	5,18,228,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55016
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,18,236,10,3
	.word	60396
	.byte	5,18,239,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55123
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SWEVT',0,18,247,10,3
	.word	60466
	.byte	5,18,250,10,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55277
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SYSCON',0,18,130,11,3
	.word	60529
	.byte	5,18,133,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55438
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TASK_ASI',0,18,141,11,3
	.word	60593
	.byte	5,18,144,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55536
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TPS_CON',0,18,152,11,3
	.word	60659
	.byte	5,18,155,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55708
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TPS_TIMER',0,18,163,11,3
	.word	60724
	.byte	5,18,166,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55788
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TR_ADR',0,18,174,11,3
	.word	60791
	.byte	5,18,177,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55861
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TR_EVT',0,18,185,11,3
	.word	60855
	.byte	5,18,188,11,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	56179
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TRIG_ACC',0,18,196,11,3
	.word	60919
	.byte	3
	.byte	'_Ifx_CPU_CPR',0,18,207,11,25,8,6
	.byte	'L',0
	.word	56809
	.byte	4,2,35,0,6
	.byte	'U',0
	.word	56872
	.byte	4,2,35,4,0,7
	.word	60985
	.byte	27
	.byte	'Ifx_CPU_CPR',0,18,211,11,3
	.word	61027
	.byte	3
	.byte	'_Ifx_CPU_DPR',0,18,214,11,25,8,6
	.byte	'L',0
	.word	57873
	.byte	4,2,35,0,6
	.byte	'U',0
	.word	57936
	.byte	4,2,35,4,0,7
	.word	61053
	.byte	27
	.byte	'Ifx_CPU_DPR',0,18,218,11,3
	.word	61095
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN',0,18,221,11,25,16,6
	.byte	'LA',0
	.word	60326
	.byte	4,2,35,0,6
	.byte	'UA',0
	.word	60396
	.byte	4,2,35,4,6
	.byte	'ACCENA',0
	.word	60178
	.byte	4,2,35,8,6
	.byte	'ACCENB',0
	.word	60252
	.byte	4,2,35,12,0,7
	.word	61121
	.byte	27
	.byte	'Ifx_CPU_SPROT_RGN',0,18,227,11,3
	.word	61203
	.byte	16,12
	.word	60724
	.byte	17,2,0,3
	.byte	'_Ifx_CPU_TPS',0,18,230,11,25,16,6
	.byte	'CON',0
	.word	60659
	.byte	4,2,35,0,6
	.byte	'TIMER',0
	.word	61235
	.byte	12,2,35,4,0,7
	.word	61244
	.byte	27
	.byte	'Ifx_CPU_TPS',0,18,234,11,3
	.word	61292
	.byte	3
	.byte	'_Ifx_CPU_TR',0,18,237,11,25,8,6
	.byte	'EVT',0
	.word	60855
	.byte	4,2,35,0,6
	.byte	'ADR',0
	.word	60791
	.byte	4,2,35,4,0,7
	.word	61318
	.byte	27
	.byte	'Ifx_CPU_TR',0,18,241,11,3
	.word	61363
	.byte	27
	.byte	'IfxCpu_ResourceCpu',0,6,89,3
	.word	1269
	.byte	27
	.byte	'Ifx_SRC_SRCR_Bits',0,10,62,3
	.word	10185
	.byte	27
	.byte	'Ifx_SRC_SRCR',0,10,78,3
	.word	10475
	.byte	3
	.byte	'_Ifx_SRC_AGBT',0,10,89,25,4,6
	.byte	'SR',0
	.word	10475
	.byte	4,2,35,0,0,7
	.word	61462
	.byte	27
	.byte	'Ifx_SRC_AGBT',0,10,92,3
	.word	61494
	.byte	3
	.byte	'_Ifx_SRC_ASCLIN',0,10,95,25,12,6
	.byte	'TX',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'RX',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	10475
	.byte	4,2,35,8,0,7
	.word	61520
	.byte	27
	.byte	'Ifx_SRC_ASCLIN',0,10,100,3
	.word	61579
	.byte	3
	.byte	'_Ifx_SRC_BCUSPB',0,10,103,25,4,6
	.byte	'SBSRC',0
	.word	10475
	.byte	4,2,35,0,0,7
	.word	61607
	.byte	27
	.byte	'Ifx_SRC_BCUSPB',0,10,106,3
	.word	61644
	.byte	16,64
	.word	10475
	.byte	17,15,0,3
	.byte	'_Ifx_SRC_CAN',0,10,109,25,64,6
	.byte	'INT',0
	.word	61672
	.byte	64,2,35,0,0,7
	.word	61681
	.byte	27
	.byte	'Ifx_SRC_CAN',0,10,112,3
	.word	61713
	.byte	3
	.byte	'_Ifx_SRC_CCU6',0,10,115,25,16,6
	.byte	'SR0',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	10475
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	10475
	.byte	4,2,35,12,0,7
	.word	61738
	.byte	27
	.byte	'Ifx_SRC_CCU6',0,10,121,3
	.word	61810
	.byte	16,8
	.word	10475
	.byte	17,1,0,3
	.byte	'_Ifx_SRC_CERBERUS',0,10,124,25,8,6
	.byte	'SR',0
	.word	61836
	.byte	8,2,35,0,0,7
	.word	61845
	.byte	27
	.byte	'Ifx_SRC_CERBERUS',0,10,127,3
	.word	61881
	.byte	3
	.byte	'_Ifx_SRC_CIF',0,10,130,1,25,16,6
	.byte	'MI',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'MIEP',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'ISP',0
	.word	10475
	.byte	4,2,35,8,6
	.byte	'MJPEG',0
	.word	10475
	.byte	4,2,35,12,0,7
	.word	61911
	.byte	27
	.byte	'Ifx_SRC_CIF',0,10,136,1,3
	.word	61985
	.byte	3
	.byte	'_Ifx_SRC_CPU',0,10,139,1,25,4,6
	.byte	'SBSRC',0
	.word	10475
	.byte	4,2,35,0,0,7
	.word	62011
	.byte	27
	.byte	'Ifx_SRC_CPU',0,10,142,1,3
	.word	62046
	.byte	16,24
	.word	10475
	.byte	17,5,0,3
	.byte	'_Ifx_SRC_DAM',0,10,145,1,25,24,6
	.byte	'SR',0
	.word	62072
	.byte	24,2,35,0,0,7
	.word	62081
	.byte	27
	.byte	'Ifx_SRC_DAM',0,10,148,1,3
	.word	62113
	.byte	16,128,2
	.word	10475
	.byte	17,63,0,3
	.byte	'_Ifx_SRC_DMA',0,10,151,1,25,144,2,6
	.byte	'ERR',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'reserved_4',0
	.word	4840
	.byte	12,2,35,4,6
	.byte	'CH',0
	.word	62139
	.byte	128,2,2,35,16,0,7
	.word	62149
	.byte	27
	.byte	'Ifx_SRC_DMA',0,10,156,1,3
	.word	62216
	.byte	3
	.byte	'_Ifx_SRC_DSADC',0,10,159,1,25,8,6
	.byte	'SRM',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'SRA',0
	.word	10475
	.byte	4,2,35,4,0,7
	.word	62242
	.byte	27
	.byte	'Ifx_SRC_DSADC',0,10,163,1,3
	.word	62290
	.byte	3
	.byte	'_Ifx_SRC_EMEM',0,10,166,1,25,4,6
	.byte	'SR',0
	.word	10475
	.byte	4,2,35,0,0,7
	.word	62318
	.byte	27
	.byte	'Ifx_SRC_EMEM',0,10,169,1,3
	.word	62351
	.byte	3
	.byte	'_Ifx_SRC_ERAY',0,10,172,1,25,80,6
	.byte	'INT',0
	.word	61836
	.byte	8,2,35,0,6
	.byte	'TINT',0
	.word	61836
	.byte	8,2,35,8,6
	.byte	'NDAT',0
	.word	61836
	.byte	8,2,35,16,6
	.byte	'MBSC',0
	.word	61836
	.byte	8,2,35,24,6
	.byte	'OBUSY',0
	.word	10475
	.byte	4,2,35,32,6
	.byte	'IBUSY',0
	.word	10475
	.byte	4,2,35,36,6
	.byte	'reserved_28',0
	.word	45340
	.byte	40,2,35,40,0,7
	.word	62378
	.byte	27
	.byte	'Ifx_SRC_ERAY',0,10,181,1,3
	.word	62505
	.byte	3
	.byte	'_Ifx_SRC_ETH',0,10,184,1,25,4,6
	.byte	'SR',0
	.word	10475
	.byte	4,2,35,0,0,7
	.word	62532
	.byte	27
	.byte	'Ifx_SRC_ETH',0,10,187,1,3
	.word	62564
	.byte	3
	.byte	'_Ifx_SRC_FCE',0,10,190,1,25,4,6
	.byte	'SR',0
	.word	10475
	.byte	4,2,35,0,0,7
	.word	62590
	.byte	27
	.byte	'Ifx_SRC_FCE',0,10,193,1,3
	.word	62622
	.byte	3
	.byte	'_Ifx_SRC_GPSR',0,10,196,1,25,32,6
	.byte	'SR0',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	10475
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	10475
	.byte	4,2,35,12,6
	.byte	'reserved_10',0
	.word	45322
	.byte	16,2,35,16,0,7
	.word	62648
	.byte	27
	.byte	'Ifx_SRC_GPSR',0,10,203,1,3
	.word	62742
	.byte	3
	.byte	'_Ifx_SRC_GPT12',0,10,206,1,25,48,6
	.byte	'CIRQ',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'T2',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'T3',0
	.word	10475
	.byte	4,2,35,8,6
	.byte	'T4',0
	.word	10475
	.byte	4,2,35,12,6
	.byte	'T5',0
	.word	10475
	.byte	4,2,35,16,6
	.byte	'T6',0
	.word	10475
	.byte	4,2,35,20,6
	.byte	'reserved_18',0
	.word	3871
	.byte	24,2,35,24,0,7
	.word	62769
	.byte	27
	.byte	'Ifx_SRC_GPT12',0,10,215,1,3
	.word	62886
	.byte	16,12
	.word	10475
	.byte	17,2,0,16,32
	.word	10475
	.byte	17,7,0,16,32
	.word	62923
	.byte	17,0,0,16,88
	.word	179
	.byte	17,87,0,16,108
	.word	10475
	.byte	17,26,0,16,96
	.word	179
	.byte	17,95,0,16,128,1
	.word	62923
	.byte	17,3,0,16,128,3
	.word	179
	.byte	17,255,2,0,16,96
	.word	62923
	.byte	17,2,0,16,160,3
	.word	179
	.byte	17,159,3,0,16,16
	.word	10475
	.byte	17,3,0,16,80
	.word	63009
	.byte	17,4,0,16,176,2
	.word	179
	.byte	17,175,2,0,16,48
	.word	179
	.byte	17,47,0,3
	.byte	'_Ifx_SRC_GTM',0,10,218,1,25,208,18,6
	.byte	'AEIIRQ',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'ARUIRQ',0
	.word	62914
	.byte	12,2,35,4,6
	.byte	'reserved_10',0
	.word	2681
	.byte	4,2,35,16,6
	.byte	'BRCIRQ',0
	.word	10475
	.byte	4,2,35,20,6
	.byte	'CMPIRQ',0
	.word	10475
	.byte	4,2,35,24,6
	.byte	'SPEIRQ',0
	.word	61836
	.byte	8,2,35,28,6
	.byte	'reserved_24',0
	.word	4500
	.byte	8,2,35,36,6
	.byte	'PSM',0
	.word	62932
	.byte	32,2,35,44,6
	.byte	'reserved_4C',0
	.word	62941
	.byte	88,2,35,76,6
	.byte	'DPLL',0
	.word	62950
	.byte	108,3,35,164,1,6
	.byte	'reserved_110',0
	.word	62959
	.byte	96,3,35,144,2,6
	.byte	'ERR',0
	.word	10475
	.byte	4,3,35,240,2,6
	.byte	'reserved_174',0
	.word	4840
	.byte	12,3,35,244,2,6
	.byte	'TIM',0
	.word	62968
	.byte	128,1,3,35,128,3,6
	.byte	'reserved_200',0
	.word	62978
	.byte	128,3,3,35,128,4,6
	.byte	'MCS',0
	.word	62968
	.byte	128,1,3,35,128,7,6
	.byte	'reserved_400',0
	.word	62978
	.byte	128,3,3,35,128,8,6
	.byte	'TOM',0
	.word	62989
	.byte	96,3,35,128,11,6
	.byte	'reserved_5E0',0
	.word	62998
	.byte	160,3,3,35,224,11,6
	.byte	'ATOM',0
	.word	63018
	.byte	80,3,35,128,15,6
	.byte	'reserved_7D0',0
	.word	63027
	.byte	176,2,3,35,208,15,6
	.byte	'MCSW0',0
	.word	63009
	.byte	16,3,35,128,18,6
	.byte	'reserved_910',0
	.word	63038
	.byte	48,3,35,144,18,6
	.byte	'MCSW1',0
	.word	63009
	.byte	16,3,35,192,18,0,7
	.word	63047
	.byte	27
	.byte	'Ifx_SRC_GTM',0,10,244,1,3
	.word	63509
	.byte	3
	.byte	'_Ifx_SRC_HSCT',0,10,247,1,25,4,6
	.byte	'SR',0
	.word	10475
	.byte	4,2,35,0,0,7
	.word	63535
	.byte	27
	.byte	'Ifx_SRC_HSCT',0,10,250,1,3
	.word	63568
	.byte	3
	.byte	'_Ifx_SRC_HSM',0,10,253,1,25,8,6
	.byte	'HSM',0
	.word	61836
	.byte	8,2,35,0,0,7
	.word	63595
	.byte	27
	.byte	'Ifx_SRC_HSM',0,10,128,2,3
	.word	63628
	.byte	3
	.byte	'_Ifx_SRC_HSSL',0,10,131,2,25,16,6
	.byte	'COK',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'RDI',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	10475
	.byte	4,2,35,8,6
	.byte	'TRG',0
	.word	10475
	.byte	4,2,35,12,0,7
	.word	63654
	.byte	27
	.byte	'Ifx_SRC_HSSL',0,10,137,2,3
	.word	63727
	.byte	16,56
	.word	179
	.byte	17,55,0,3
	.byte	'_Ifx_SRC_I2C',0,10,140,2,25,80,6
	.byte	'BREQ',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'LBREQ',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'SREQ',0
	.word	10475
	.byte	4,2,35,8,6
	.byte	'LSREQ',0
	.word	10475
	.byte	4,2,35,12,6
	.byte	'ERR',0
	.word	10475
	.byte	4,2,35,16,6
	.byte	'P',0
	.word	10475
	.byte	4,2,35,20,6
	.byte	'reserved_18',0
	.word	63754
	.byte	56,2,35,24,0,7
	.word	63763
	.byte	27
	.byte	'Ifx_SRC_I2C',0,10,149,2,3
	.word	63886
	.byte	3
	.byte	'_Ifx_SRC_LMU',0,10,152,2,25,4,6
	.byte	'SR',0
	.word	10475
	.byte	4,2,35,0,0,7
	.word	63912
	.byte	27
	.byte	'Ifx_SRC_LMU',0,10,155,2,3
	.word	63944
	.byte	3
	.byte	'_Ifx_SRC_MSC',0,10,158,2,25,20,6
	.byte	'SR0',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	10475
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	10475
	.byte	4,2,35,12,6
	.byte	'SR4',0
	.word	10475
	.byte	4,2,35,16,0,7
	.word	63970
	.byte	27
	.byte	'Ifx_SRC_MSC',0,10,165,2,3
	.word	64055
	.byte	3
	.byte	'_Ifx_SRC_PMU',0,10,168,2,25,4,6
	.byte	'SR',0
	.word	10475
	.byte	4,2,35,0,0,7
	.word	64081
	.byte	27
	.byte	'Ifx_SRC_PMU',0,10,171,2,3
	.word	64113
	.byte	3
	.byte	'_Ifx_SRC_PSI5',0,10,174,2,25,32,6
	.byte	'SR',0
	.word	62923
	.byte	32,2,35,0,0,7
	.word	64139
	.byte	27
	.byte	'Ifx_SRC_PSI5',0,10,177,2,3
	.word	64172
	.byte	3
	.byte	'_Ifx_SRC_PSI5S',0,10,180,2,25,32,6
	.byte	'SR',0
	.word	62923
	.byte	32,2,35,0,0,7
	.word	64199
	.byte	27
	.byte	'Ifx_SRC_PSI5S',0,10,183,2,3
	.word	64233
	.byte	3
	.byte	'_Ifx_SRC_QSPI',0,10,186,2,25,24,6
	.byte	'TX',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'RX',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	10475
	.byte	4,2,35,8,6
	.byte	'PT',0
	.word	10475
	.byte	4,2,35,12,6
	.byte	'reserved_10',0
	.word	2681
	.byte	4,2,35,16,6
	.byte	'U',0
	.word	10475
	.byte	4,2,35,20,0,7
	.word	64261
	.byte	27
	.byte	'Ifx_SRC_QSPI',0,10,194,2,3
	.word	64363
	.byte	3
	.byte	'_Ifx_SRC_SCU',0,10,197,2,25,20,6
	.byte	'DTS',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'ERU',0
	.word	63009
	.byte	16,2,35,4,0,7
	.word	64390
	.byte	27
	.byte	'Ifx_SRC_SCU',0,10,201,2,3
	.word	64436
	.byte	16,40
	.word	10475
	.byte	17,9,0,3
	.byte	'_Ifx_SRC_SENT',0,10,204,2,25,40,6
	.byte	'SR',0
	.word	64462
	.byte	40,2,35,0,0,7
	.word	64471
	.byte	27
	.byte	'Ifx_SRC_SENT',0,10,207,2,3
	.word	64504
	.byte	3
	.byte	'_Ifx_SRC_SMU',0,10,210,2,25,12,6
	.byte	'SR',0
	.word	62914
	.byte	12,2,35,0,0,7
	.word	64531
	.byte	27
	.byte	'Ifx_SRC_SMU',0,10,213,2,3
	.word	64563
	.byte	3
	.byte	'_Ifx_SRC_STM',0,10,216,2,25,8,6
	.byte	'SR0',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10475
	.byte	4,2,35,4,0,7
	.word	64589
	.byte	27
	.byte	'Ifx_SRC_STM',0,10,220,2,3
	.word	64635
	.byte	3
	.byte	'_Ifx_SRC_VADCCG',0,10,223,2,25,16,6
	.byte	'SR0',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	10475
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	10475
	.byte	4,2,35,12,0,7
	.word	64661
	.byte	27
	.byte	'Ifx_SRC_VADCCG',0,10,229,2,3
	.word	64736
	.byte	3
	.byte	'_Ifx_SRC_VADCG',0,10,232,2,25,16,6
	.byte	'SR0',0
	.word	10475
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10475
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	10475
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	10475
	.byte	4,2,35,12,0,7
	.word	64765
	.byte	27
	.byte	'Ifx_SRC_VADCG',0,10,238,2,3
	.word	64839
	.byte	3
	.byte	'_Ifx_SRC_XBAR',0,10,241,2,25,4,6
	.byte	'SRC',0
	.word	10475
	.byte	4,2,35,0,0,7
	.word	64867
	.byte	27
	.byte	'Ifx_SRC_XBAR',0,10,244,2,3
	.word	64901
	.byte	16,4
	.word	61462
	.byte	17,0,0,7
	.word	64928
	.byte	3
	.byte	'_Ifx_SRC_GAGBT',0,10,129,3,25,4,6
	.byte	'AGBT',0
	.word	64937
	.byte	4,2,35,0,0,7
	.word	64942
	.byte	27
	.byte	'Ifx_SRC_GAGBT',0,10,132,3,3
	.word	64978
	.byte	16,48
	.word	61520
	.byte	17,3,0,7
	.word	65006
	.byte	3
	.byte	'_Ifx_SRC_GASCLIN',0,10,135,3,25,48,6
	.byte	'ASCLIN',0
	.word	65015
	.byte	48,2,35,0,0,7
	.word	65020
	.byte	27
	.byte	'Ifx_SRC_GASCLIN',0,10,138,3,3
	.word	65060
	.byte	7
	.word	61607
	.byte	3
	.byte	'_Ifx_SRC_GBCU',0,10,141,3,25,4,6
	.byte	'SPB',0
	.word	65090
	.byte	4,2,35,0,0,7
	.word	65095
	.byte	27
	.byte	'Ifx_SRC_GBCU',0,10,144,3,3
	.word	65129
	.byte	16,64
	.word	61681
	.byte	17,0,0,7
	.word	65156
	.byte	3
	.byte	'_Ifx_SRC_GCAN',0,10,147,3,25,64,6
	.byte	'CAN',0
	.word	65165
	.byte	64,2,35,0,0,7
	.word	65170
	.byte	27
	.byte	'Ifx_SRC_GCAN',0,10,150,3,3
	.word	65204
	.byte	16,32
	.word	61738
	.byte	17,1,0,7
	.word	65231
	.byte	3
	.byte	'_Ifx_SRC_GCCU6',0,10,153,3,25,32,6
	.byte	'CCU6',0
	.word	65240
	.byte	32,2,35,0,0,7
	.word	65245
	.byte	27
	.byte	'Ifx_SRC_GCCU6',0,10,156,3,3
	.word	65281
	.byte	7
	.word	61845
	.byte	3
	.byte	'_Ifx_SRC_GCERBERUS',0,10,159,3,25,8,6
	.byte	'CERBERUS',0
	.word	65309
	.byte	8,2,35,0,0,7
	.word	65314
	.byte	27
	.byte	'Ifx_SRC_GCERBERUS',0,10,162,3,3
	.word	65358
	.byte	16,16
	.word	61911
	.byte	17,0,0,7
	.word	65390
	.byte	3
	.byte	'_Ifx_SRC_GCIF',0,10,165,3,25,16,6
	.byte	'CIF',0
	.word	65399
	.byte	16,2,35,0,0,7
	.word	65404
	.byte	27
	.byte	'Ifx_SRC_GCIF',0,10,168,3,3
	.word	65438
	.byte	16,12
	.word	62011
	.byte	17,2,0,7
	.word	65465
	.byte	3
	.byte	'_Ifx_SRC_GCPU',0,10,171,3,25,12,6
	.byte	'CPU',0
	.word	65474
	.byte	12,2,35,0,0,7
	.word	65479
	.byte	27
	.byte	'Ifx_SRC_GCPU',0,10,174,3,3
	.word	65513
	.byte	16,24
	.word	62081
	.byte	17,0,0,7
	.word	65540
	.byte	3
	.byte	'_Ifx_SRC_GDAM',0,10,177,3,25,24,6
	.byte	'DAM',0
	.word	65549
	.byte	24,2,35,0,0,7
	.word	65554
	.byte	27
	.byte	'Ifx_SRC_GDAM',0,10,180,3,3
	.word	65588
	.byte	16,144,2
	.word	62149
	.byte	17,0,0,7
	.word	65615
	.byte	3
	.byte	'_Ifx_SRC_GDMA',0,10,183,3,25,144,2,6
	.byte	'DMA',0
	.word	65625
	.byte	144,2,2,35,0,0,7
	.word	65630
	.byte	27
	.byte	'Ifx_SRC_GDMA',0,10,186,3,3
	.word	65666
	.byte	16,48
	.word	62242
	.byte	17,5,0,7
	.word	65693
	.byte	3
	.byte	'_Ifx_SRC_GDSADC',0,10,189,3,25,48,6
	.byte	'DSADC',0
	.word	65702
	.byte	48,2,35,0,0,7
	.word	65707
	.byte	27
	.byte	'Ifx_SRC_GDSADC',0,10,192,3,3
	.word	65745
	.byte	16,4
	.word	62318
	.byte	17,0,0,7
	.word	65774
	.byte	3
	.byte	'_Ifx_SRC_GEMEM',0,10,195,3,25,4,6
	.byte	'EMEM',0
	.word	65783
	.byte	4,2,35,0,0,7
	.word	65788
	.byte	27
	.byte	'Ifx_SRC_GEMEM',0,10,198,3,3
	.word	65824
	.byte	16,80
	.word	62378
	.byte	17,0,0,7
	.word	65852
	.byte	3
	.byte	'_Ifx_SRC_GERAY',0,10,201,3,25,80,6
	.byte	'ERAY',0
	.word	65861
	.byte	80,2,35,0,0,7
	.word	65866
	.byte	27
	.byte	'Ifx_SRC_GERAY',0,10,204,3,3
	.word	65902
	.byte	16,4
	.word	62532
	.byte	17,0,0,7
	.word	65930
	.byte	3
	.byte	'_Ifx_SRC_GETH',0,10,207,3,25,4,6
	.byte	'ETH',0
	.word	65939
	.byte	4,2,35,0,0,7
	.word	65944
	.byte	27
	.byte	'Ifx_SRC_GETH',0,10,210,3,3
	.word	65978
	.byte	16,4
	.word	62590
	.byte	17,0,0,7
	.word	66005
	.byte	3
	.byte	'_Ifx_SRC_GFCE',0,10,213,3,25,4,6
	.byte	'FCE',0
	.word	66014
	.byte	4,2,35,0,0,7
	.word	66019
	.byte	27
	.byte	'Ifx_SRC_GFCE',0,10,216,3,3
	.word	66053
	.byte	16,96
	.word	62648
	.byte	17,2,0,7
	.word	66080
	.byte	3
	.byte	'_Ifx_SRC_GGPSR',0,10,219,3,25,96,6
	.byte	'GPSR',0
	.word	66089
	.byte	96,2,35,0,0,7
	.word	66094
	.byte	27
	.byte	'Ifx_SRC_GGPSR',0,10,222,3,3
	.word	66130
	.byte	16,48
	.word	62769
	.byte	17,0,0,7
	.word	66158
	.byte	3
	.byte	'_Ifx_SRC_GGPT12',0,10,225,3,25,48,6
	.byte	'GPT12',0
	.word	66167
	.byte	48,2,35,0,0,7
	.word	66172
	.byte	27
	.byte	'Ifx_SRC_GGPT12',0,10,228,3,3
	.word	66210
	.byte	16,208,18
	.word	63047
	.byte	17,0,0,7
	.word	66239
	.byte	3
	.byte	'_Ifx_SRC_GGTM',0,10,231,3,25,208,18,6
	.byte	'GTM',0
	.word	66249
	.byte	208,18,2,35,0,0,7
	.word	66254
	.byte	27
	.byte	'Ifx_SRC_GGTM',0,10,234,3,3
	.word	66290
	.byte	16,4
	.word	63535
	.byte	17,0,0,7
	.word	66317
	.byte	3
	.byte	'_Ifx_SRC_GHSCT',0,10,237,3,25,4,6
	.byte	'HSCT',0
	.word	66326
	.byte	4,2,35,0,0,7
	.word	66331
	.byte	27
	.byte	'Ifx_SRC_GHSCT',0,10,240,3,3
	.word	66367
	.byte	16,8
	.word	63595
	.byte	17,0,0,7
	.word	66395
	.byte	3
	.byte	'_Ifx_SRC_GHSM',0,10,243,3,25,8,6
	.byte	'HSM',0
	.word	66404
	.byte	8,2,35,0,0,7
	.word	66409
	.byte	27
	.byte	'Ifx_SRC_GHSM',0,10,246,3,3
	.word	66443
	.byte	16,64
	.word	63654
	.byte	17,3,0,7
	.word	66470
	.byte	3
	.byte	'_Ifx_SRC_GHSSL',0,10,249,3,25,68,6
	.byte	'HSSL',0
	.word	66479
	.byte	64,2,35,0,6
	.byte	'EXI',0
	.word	10475
	.byte	4,2,35,64,0,7
	.word	66484
	.byte	27
	.byte	'Ifx_SRC_GHSSL',0,10,253,3,3
	.word	66533
	.byte	16,80
	.word	63763
	.byte	17,0,0,7
	.word	66561
	.byte	3
	.byte	'_Ifx_SRC_GI2C',0,10,128,4,25,80,6
	.byte	'I2C',0
	.word	66570
	.byte	80,2,35,0,0,7
	.word	66575
	.byte	27
	.byte	'Ifx_SRC_GI2C',0,10,131,4,3
	.word	66609
	.byte	16,4
	.word	63912
	.byte	17,0,0,7
	.word	66636
	.byte	3
	.byte	'_Ifx_SRC_GLMU',0,10,134,4,25,4,6
	.byte	'LMU',0
	.word	66645
	.byte	4,2,35,0,0,7
	.word	66650
	.byte	27
	.byte	'Ifx_SRC_GLMU',0,10,137,4,3
	.word	66684
	.byte	16,40
	.word	63970
	.byte	17,1,0,7
	.word	66711
	.byte	3
	.byte	'_Ifx_SRC_GMSC',0,10,140,4,25,40,6
	.byte	'MSC',0
	.word	66720
	.byte	40,2,35,0,0,7
	.word	66725
	.byte	27
	.byte	'Ifx_SRC_GMSC',0,10,143,4,3
	.word	66759
	.byte	16,8
	.word	64081
	.byte	17,1,0,7
	.word	66786
	.byte	3
	.byte	'_Ifx_SRC_GPMU',0,10,146,4,25,8,6
	.byte	'PMU',0
	.word	66795
	.byte	8,2,35,0,0,7
	.word	66800
	.byte	27
	.byte	'Ifx_SRC_GPMU',0,10,149,4,3
	.word	66834
	.byte	16,32
	.word	64139
	.byte	17,0,0,7
	.word	66861
	.byte	3
	.byte	'_Ifx_SRC_GPSI5',0,10,152,4,25,32,6
	.byte	'PSI5',0
	.word	66870
	.byte	32,2,35,0,0,7
	.word	66875
	.byte	27
	.byte	'Ifx_SRC_GPSI5',0,10,155,4,3
	.word	66911
	.byte	16,32
	.word	64199
	.byte	17,0,0,7
	.word	66939
	.byte	3
	.byte	'_Ifx_SRC_GPSI5S',0,10,158,4,25,32,6
	.byte	'PSI5S',0
	.word	66948
	.byte	32,2,35,0,0,7
	.word	66953
	.byte	27
	.byte	'Ifx_SRC_GPSI5S',0,10,161,4,3
	.word	66991
	.byte	16,96
	.word	64261
	.byte	17,3,0,7
	.word	67020
	.byte	3
	.byte	'_Ifx_SRC_GQSPI',0,10,164,4,25,96,6
	.byte	'QSPI',0
	.word	67029
	.byte	96,2,35,0,0,7
	.word	67034
	.byte	27
	.byte	'Ifx_SRC_GQSPI',0,10,167,4,3
	.word	67070
	.byte	7
	.word	64390
	.byte	3
	.byte	'_Ifx_SRC_GSCU',0,10,170,4,25,20,6
	.byte	'SCU',0
	.word	67098
	.byte	20,2,35,0,0,7
	.word	67103
	.byte	27
	.byte	'Ifx_SRC_GSCU',0,10,173,4,3
	.word	67137
	.byte	16,40
	.word	64471
	.byte	17,0,0,7
	.word	67164
	.byte	3
	.byte	'_Ifx_SRC_GSENT',0,10,176,4,25,40,6
	.byte	'SENT',0
	.word	67173
	.byte	40,2,35,0,0,7
	.word	67178
	.byte	27
	.byte	'Ifx_SRC_GSENT',0,10,179,4,3
	.word	67214
	.byte	16,12
	.word	64531
	.byte	17,0,0,7
	.word	67242
	.byte	3
	.byte	'_Ifx_SRC_GSMU',0,10,182,4,25,12,6
	.byte	'SMU',0
	.word	67251
	.byte	12,2,35,0,0,7
	.word	67256
	.byte	27
	.byte	'Ifx_SRC_GSMU',0,10,185,4,3
	.word	67290
	.byte	16,24
	.word	64589
	.byte	17,2,0,7
	.word	67317
	.byte	3
	.byte	'_Ifx_SRC_GSTM',0,10,188,4,25,24,6
	.byte	'STM',0
	.word	67326
	.byte	24,2,35,0,0,7
	.word	67331
	.byte	27
	.byte	'Ifx_SRC_GSTM',0,10,191,4,3
	.word	67365
	.byte	16,128,1
	.word	64765
	.byte	17,7,0,7
	.word	67392
	.byte	16,160,1
	.word	179
	.byte	17,159,1,0,16,32
	.word	64661
	.byte	17,1,0,7
	.word	67418
	.byte	3
	.byte	'_Ifx_SRC_GVADC',0,10,194,4,25,192,2,6
	.byte	'G',0
	.word	67402
	.byte	128,1,2,35,0,6
	.byte	'reserved_80',0
	.word	67407
	.byte	160,1,3,35,128,1,6
	.byte	'CG',0
	.word	67427
	.byte	32,3,35,160,2,0,7
	.word	67432
	.byte	27
	.byte	'Ifx_SRC_GVADC',0,10,199,4,3
	.word	67503
	.byte	7
	.word	64867
	.byte	3
	.byte	'_Ifx_SRC_GXBAR',0,10,202,4,25,4,6
	.byte	'XBAR',0
	.word	67531
	.byte	4,2,35,0,0,7
	.word	67536
	.byte	27
	.byte	'Ifx_SRC_GXBAR',0,10,205,4,3
	.word	67572
	.byte	14,5,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,27
	.byte	'IfxCpu_CounterMode',0,5,122,3
	.word	67600
	.byte	29,5,132,1,9,6,6
	.byte	'counter',0
	.word	1446
	.byte	4,2,35,0,6
	.byte	'overlfow',0
	.word	179
	.byte	1,2,35,4,0,27
	.byte	'IfxCpu_Counter',0,5,136,1,3
	.word	67687
	.byte	29,5,144,1,9,32,6
	.byte	'instruction',0
	.word	67687
	.byte	6,2,35,0,6
	.byte	'clock',0
	.word	67687
	.byte	6,2,35,6,6
	.byte	'counter1',0
	.word	67687
	.byte	6,2,35,12,6
	.byte	'counter2',0
	.word	67687
	.byte	6,2,35,18,6
	.byte	'counter3',0
	.word	67687
	.byte	6,2,35,24,0,27
	.byte	'IfxCpu_Perf',0,5,151,1,3
	.word	67753
	.byte	3
	.byte	'_Ifx_STM_ACCEN0_Bits',0,19,45,16,4,4
	.byte	'EN0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_STM_ACCEN0_Bits',0,19,79,3
	.word	67871
	.byte	3
	.byte	'_Ifx_STM_ACCEN1_Bits',0,19,82,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_ACCEN1_Bits',0,19,85,3
	.word	68428
	.byte	3
	.byte	'_Ifx_STM_CAP_Bits',0,19,88,16,4,4
	.byte	'STMCAP63_32',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_CAP_Bits',0,19,91,3
	.word	68505
	.byte	3
	.byte	'_Ifx_STM_CAPSV_Bits',0,19,94,16,4,4
	.byte	'STMCAP63_32',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_CAPSV_Bits',0,19,97,3
	.word	68577
	.byte	3
	.byte	'_Ifx_STM_CLC_Bits',0,19,100,16,4,4
	.byte	'DISR',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'DISS',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'EDIS',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_STM_CLC_Bits',0,19,107,3
	.word	68653
	.byte	3
	.byte	'_Ifx_STM_CMCON_Bits',0,19,110,16,4,4
	.byte	'MSIZE0',0,1
	.word	179
	.byte	5,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	179
	.byte	3,0,2,35,0,4
	.byte	'MSTART0',0,1
	.word	179
	.byte	5,3,2,35,1,4
	.byte	'reserved_13',0,1
	.word	179
	.byte	3,0,2,35,1,4
	.byte	'MSIZE1',0,1
	.word	179
	.byte	5,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	179
	.byte	3,0,2,35,2,4
	.byte	'MSTART1',0,1
	.word	179
	.byte	5,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	179
	.byte	3,0,2,35,3,0,27
	.byte	'Ifx_STM_CMCON_Bits',0,19,120,3
	.word	68794
	.byte	3
	.byte	'_Ifx_STM_CMP_Bits',0,19,123,16,4,4
	.byte	'CMPVAL',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_CMP_Bits',0,19,126,3
	.word	69012
	.byte	3
	.byte	'_Ifx_STM_ICR_Bits',0,19,129,1,16,4,4
	.byte	'CMP0EN',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'CMP0IR',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'CMP0OS',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'CMP1EN',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'CMP1IR',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'CMP1OS',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,4
	.word	156
	.byte	25,0,2,35,0,0,27
	.byte	'Ifx_STM_ICR_Bits',0,19,139,1,3
	.word	69079
	.byte	3
	.byte	'_Ifx_STM_ID_Bits',0,19,142,1,16,4,4
	.byte	'MODREV',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_STM_ID_Bits',0,19,147,1,3
	.word	69282
	.byte	3
	.byte	'_Ifx_STM_ISCR_Bits',0,19,150,1,16,4,4
	.byte	'CMP0IRR',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'CMP0IRS',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'CMP1IRR',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'CMP1IRS',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_STM_ISCR_Bits',0,19,157,1,3
	.word	69389
	.byte	3
	.byte	'_Ifx_STM_KRST0_Bits',0,19,160,1,16,4,4
	.byte	'RST',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'RSTSTAT',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_STM_KRST0_Bits',0,19,165,1,3
	.word	69540
	.byte	3
	.byte	'_Ifx_STM_KRST1_Bits',0,19,168,1,16,4,4
	.byte	'RST',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	156
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_STM_KRST1_Bits',0,19,172,1,3
	.word	69651
	.byte	3
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,19,175,1,16,4,4
	.byte	'CLR',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	156
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_STM_KRSTCLR_Bits',0,19,179,1,3
	.word	69743
	.byte	3
	.byte	'_Ifx_STM_OCS_Bits',0,19,182,1,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	24,8,2,35,0,4
	.byte	'SUS',0,1
	.word	179
	.byte	4,4,2,35,3,4
	.byte	'SUS_P',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'SUSSTA',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	179
	.byte	2,0,2,35,3,0,27
	.byte	'Ifx_STM_OCS_Bits',0,19,189,1,3
	.word	69839
	.byte	3
	.byte	'_Ifx_STM_TIM0_Bits',0,19,192,1,16,4,4
	.byte	'STM31_0',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM0_Bits',0,19,195,1,3
	.word	69985
	.byte	3
	.byte	'_Ifx_STM_TIM0SV_Bits',0,19,198,1,16,4,4
	.byte	'STM31_0',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM0SV_Bits',0,19,201,1,3
	.word	70057
	.byte	3
	.byte	'_Ifx_STM_TIM1_Bits',0,19,204,1,16,4,4
	.byte	'STM35_4',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM1_Bits',0,19,207,1,3
	.word	70133
	.byte	3
	.byte	'_Ifx_STM_TIM2_Bits',0,19,210,1,16,4,4
	.byte	'STM39_8',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM2_Bits',0,19,213,1,3
	.word	70205
	.byte	3
	.byte	'_Ifx_STM_TIM3_Bits',0,19,216,1,16,4,4
	.byte	'STM43_12',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM3_Bits',0,19,219,1,3
	.word	70277
	.byte	3
	.byte	'_Ifx_STM_TIM4_Bits',0,19,222,1,16,4,4
	.byte	'STM47_16',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM4_Bits',0,19,225,1,3
	.word	70350
	.byte	3
	.byte	'_Ifx_STM_TIM5_Bits',0,19,228,1,16,4,4
	.byte	'STM51_20',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM5_Bits',0,19,231,1,3
	.word	70423
	.byte	3
	.byte	'_Ifx_STM_TIM6_Bits',0,19,234,1,16,4,4
	.byte	'STM63_32',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM6_Bits',0,19,237,1,3
	.word	70496
	.byte	5,19,245,1,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	67871
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_ACCEN0',0,19,253,1,3
	.word	70569
	.byte	5,19,128,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68428
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_ACCEN1',0,19,136,2,3
	.word	70633
	.byte	5,19,139,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68505
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_CAP',0,19,147,2,3
	.word	70697
	.byte	5,19,150,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68577
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_CAPSV',0,19,158,2,3
	.word	70758
	.byte	5,19,161,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68653
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_CLC',0,19,169,2,3
	.word	70821
	.byte	5,19,172,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68794
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_CMCON',0,19,180,2,3
	.word	70882
	.byte	5,19,183,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69012
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_CMP',0,19,191,2,3
	.word	70945
	.byte	5,19,194,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69079
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_ICR',0,19,202,2,3
	.word	71006
	.byte	5,19,205,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69282
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_ID',0,19,213,2,3
	.word	71067
	.byte	5,19,216,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69389
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_ISCR',0,19,224,2,3
	.word	71127
	.byte	5,19,227,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69540
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_KRST0',0,19,235,2,3
	.word	71189
	.byte	5,19,238,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69651
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_KRST1',0,19,246,2,3
	.word	71252
	.byte	5,19,249,2,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69743
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_KRSTCLR',0,19,129,3,3
	.word	71315
	.byte	5,19,132,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69839
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_OCS',0,19,140,3,3
	.word	71380
	.byte	5,19,143,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69985
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM0',0,19,151,3,3
	.word	71441
	.byte	5,19,154,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70057
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM0SV',0,19,162,3,3
	.word	71503
	.byte	5,19,165,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70133
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM1',0,19,173,3,3
	.word	71567
	.byte	5,19,176,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70205
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM2',0,19,184,3,3
	.word	71629
	.byte	5,19,187,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70277
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM3',0,19,195,3,3
	.word	71691
	.byte	5,19,198,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70350
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM4',0,19,206,3,3
	.word	71753
	.byte	5,19,209,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70423
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM5',0,19,217,3,3
	.word	71815
	.byte	5,19,220,3,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70496
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM6',0,19,228,3,3
	.word	71877
	.byte	3
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,20,45,16,4,4
	.byte	'EN0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,20,79,3
	.word	71939
	.byte	3
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,20,82,16,4,4
	.byte	'reserved_0',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,20,85,3
	.word	72500
	.byte	3
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,20,88,16,4,4
	.byte	'SEL',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	179
	.byte	2,0,2,35,0,4
	.byte	'CLR',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'DIS',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,4
	.word	156
	.byte	22,0,2,35,0,0,27
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,20,95,3
	.word	72581
	.byte	3
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,20,98,16,4,4
	.byte	'VLD0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'VLD1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'VLD2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'VLD3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'VLD4',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'VLD5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'VLD6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'VLD7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'VLD8',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'VLD9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,4
	.word	156
	.byte	22,0,2,35,0,0,27
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,20,111,3
	.word	72734
	.byte	3
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,20,114,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	156
	.byte	19,8,2,35,0,4
	.byte	'ERR',0,1
	.word	179
	.byte	6,2,2,35,3,4
	.byte	'VLD',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'CLR',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,20,121,3
	.word	72982
	.byte	3
	.byte	'_Ifx_FLASH_COMM0_Bits',0,20,124,16,4,4
	.byte	'STATUS',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	156
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_FLASH_COMM0_Bits',0,20,128,1,3
	.word	73128
	.byte	3
	.byte	'_Ifx_FLASH_COMM1_Bits',0,20,131,1,16,4,4
	.byte	'STATUS',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'DATA',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_COMM1_Bits',0,20,136,1,3
	.word	73226
	.byte	3
	.byte	'_Ifx_FLASH_COMM2_Bits',0,20,139,1,16,4,4
	.byte	'STATUS',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'DATA',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_COMM2_Bits',0,20,144,1,3
	.word	73342
	.byte	3
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,20,147,1,16,4,4
	.byte	'RCODE',0,4
	.word	156
	.byte	22,10,2,35,0,4
	.byte	'reserved_22',0,2
	.word	196
	.byte	8,2,2,35,2,4
	.byte	'EDCERRINJ',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'ECCORDIS',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_ECCRD_Bits',0,20,153,1,3
	.word	73458
	.byte	3
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,20,156,1,16,4,4
	.byte	'RCODE',0,4
	.word	156
	.byte	22,10,2,35,0,4
	.byte	'reserved_22',0,2
	.word	196
	.byte	8,2,2,35,2,4
	.byte	'EDCERRINJ',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'ECCORDIS',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_ECCRP_Bits',0,20,162,1,3
	.word	73598
	.byte	3
	.byte	'_Ifx_FLASH_ECCW_Bits',0,20,165,1,16,4,4
	.byte	'WCODE',0,4
	.word	156
	.byte	22,10,2,35,0,4
	.byte	'reserved_22',0,2
	.word	196
	.byte	8,2,2,35,2,4
	.byte	'DECENCDIS',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'PECENCDIS',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_ECCW_Bits',0,20,171,1,3
	.word	73738
	.byte	3
	.byte	'_Ifx_FLASH_FCON_Bits',0,20,174,1,16,4,4
	.byte	'WSPFLASH',0,1
	.word	179
	.byte	4,4,2,35,0,4
	.byte	'WSECPF',0,1
	.word	179
	.byte	2,2,2,35,0,4
	.byte	'WSDFLASH',0,2
	.word	196
	.byte	6,4,2,35,0,4
	.byte	'WSECDF',0,1
	.word	179
	.byte	3,1,2,35,1,4
	.byte	'IDLE',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'ESLDIS',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'SLEEP',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'NSAFECC',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'STALL',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'RES21',0,1
	.word	179
	.byte	2,2,2,35,2,4
	.byte	'RES23',0,1
	.word	179
	.byte	2,0,2,35,2,4
	.byte	'VOPERM',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'SQERM',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'PROERM',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	179
	.byte	3,2,2,35,3,4
	.byte	'PR5V',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'EOBM',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_FCON_Bits',0,20,193,1,3
	.word	73877
	.byte	3
	.byte	'_Ifx_FLASH_FPRO_Bits',0,20,196,1,16,4,4
	.byte	'PROINP',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'PRODISP',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'PROIND',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'PRODISD',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'PROINHSMCOTP',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'RES5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'PROINOTP',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'RES7',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'PROINDBG',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'PRODISDBG',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'PROINHSM',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'reserved_11',0,1
	.word	179
	.byte	5,0,2,35,1,4
	.byte	'DCFP',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'DDFP',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'DDFPX',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'DDFD',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'ENPE',0,1
	.word	179
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	179
	.byte	8,0,2,35,3,0,27
	.byte	'Ifx_FLASH_FPRO_Bits',0,20,218,1,3
	.word	74239
	.byte	3
	.byte	'_Ifx_FLASH_FSR_Bits',0,20,221,1,16,4,4
	.byte	'FABUSY',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'D0BUSY',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'D1BUSY',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'P0BUSY',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'P1BUSY',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'RES5',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'RES6',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'PROG',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'ERASE',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'PFPAGE',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'DFPAGE',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'OPER',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'SQER',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'PROER',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'PFSBER',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'PFDBER',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'PFMBER',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'RES17',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'DFSBER',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'DFDBER',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'DFTBER',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'DFMBER',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'SRIADDERR',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	196
	.byte	2,7,2,35,2,4
	.byte	'PVER',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'EVER',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'SPND',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'SLM',0,1
	.word	179
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	179
	.byte	1,2,2,35,3,4
	.byte	'ORIER',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_FSR_Bits',0,20,254,1,3
	.word	74680
	.byte	3
	.byte	'_Ifx_FLASH_HSMFCON_Bits',0,20,129,2,16,4,4
	.byte	'LCKHSMUCB',0,1
	.word	179
	.byte	2,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	156
	.byte	22,8,2,35,0,4
	.byte	'VOPERM',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'SQERM',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	179
	.byte	5,1,2,35,3,4
	.byte	'EOBM',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_HSMFCON_Bits',0,20,137,2,3
	.word	75288
	.byte	3
	.byte	'_Ifx_FLASH_HSMFSR_Bits',0,20,140,2,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	2,6,2,35,0,4
	.byte	'D1BUSY',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	179
	.byte	4,1,2,35,0,4
	.byte	'PROG',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'ERASE',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'DFPAGE',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'OPER',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'SQER',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'reserved_13',0,4
	.word	156
	.byte	12,7,2,35,0,4
	.byte	'PVER',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'EVER',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'SPND',0,1
	.word	179
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	179
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_FLASH_HSMFSR_Bits',0,20,156,2,3
	.word	75468
	.byte	3
	.byte	'_Ifx_FLASH_HSMMARD_Bits',0,20,159,2,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'SELD1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'SPND',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'SPNDERR',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,4
	.word	156
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMMARD_Bits',0,20,167,2,3
	.word	75790
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRAD_Bits',0,20,170,2,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	3,5,2,35,0,4
	.byte	'ADD',0,4
	.word	156
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRAD_Bits',0,20,174,2,3
	.word	75971
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRCT_Bits',0,20,177,2,16,4,4
	.byte	'STRT',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'STP',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'BUSY',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'DONE',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'ERR',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	179
	.byte	3,0,2,35,0,4
	.byte	'EOBM',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	179
	.byte	7,0,2,35,1,4
	.byte	'CNT',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_HSMRRCT_Bits',0,20,188,2,3
	.word	76071
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRD0_Bits',0,20,191,2,16,4,4
	.byte	'DATA',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRD0_Bits',0,20,194,2,3
	.word	76287
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRD1_Bits',0,20,197,2,16,4,4
	.byte	'DATA',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRD1_Bits',0,20,200,2,3
	.word	76366
	.byte	3
	.byte	'_Ifx_FLASH_ID_Bits',0,20,203,2,16,4,4
	.byte	'MOD_REV',0,1
	.word	179
	.byte	8,0,2,35,0,4
	.byte	'MOD_TYPE',0,1
	.word	179
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_ID_Bits',0,20,208,2,3
	.word	76445
	.byte	3
	.byte	'_Ifx_FLASH_MARD_Bits',0,20,211,2,16,4,4
	.byte	'HMARGIN',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'SELD0',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'SPND',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'SPNDERR',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,2
	.word	196
	.byte	10,1,2,35,0,4
	.byte	'TRAPDIS',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_MARD_Bits',0,20,221,2,3
	.word	76558
	.byte	3
	.byte	'_Ifx_FLASH_MARP_Bits',0,20,224,2,16,4,4
	.byte	'SELP0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'SELP1',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'RES2',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'RES3',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,2
	.word	196
	.byte	11,1,2,35,0,4
	.byte	'TRAPDIS',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_MARP_Bits',0,20,233,2,3
	.word	76772
	.byte	3
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,20,236,2,16,4,4
	.byte	'L',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'NSAFECC',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'RAMIN',0,1
	.word	179
	.byte	2,4,2,35,0,4
	.byte	'RAMINSEL',0,1
	.word	179
	.byte	4,0,2,35,0,4
	.byte	'OSCCFG',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'MODE',0,1
	.word	179
	.byte	2,5,2,35,1,4
	.byte	'APREN',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'CAP0EN',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'CAP1EN',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'CAP2EN',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'CAP3EN',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'ESR0CNT',0,2
	.word	196
	.byte	12,4,2,35,2,4
	.byte	'RES29',0,1
	.word	179
	.byte	2,2,2,35,3,4
	.byte	'RES30',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'RPRO',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_PROCOND_Bits',0,20,253,2,3
	.word	76959
	.byte	3
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,20,128,3,16,4,4
	.byte	'OCDSDIS',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'DBGIFLCK',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'EDM',0,1
	.word	179
	.byte	2,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	156
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,20,134,3,3
	.word	77283
	.byte	3
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,20,137,3,16,4,4
	.byte	'HSMDBGDIS',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'DBGIFLCK',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'TSTIFLCK',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'HSMTSTDIS',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'RES15',0,2
	.word	196
	.byte	12,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,20,145,3,3
	.word	77426
	.byte	3
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,20,148,3,16,4,4
	.byte	'HSMBOOTEN',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'SSWWAIT',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'HSMDX',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'HSM6X',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'HSM16X',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'HSM17X',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'S6ROM',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'HSMENPINS',0,2
	.word	196
	.byte	2,7,2,35,0,4
	.byte	'HSMENRES',0,1
	.word	179
	.byte	2,5,2,35,1,4
	.byte	'DESTDBG',0,1
	.word	179
	.byte	2,3,2,35,1,4
	.byte	'BLKFLAN',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	179
	.byte	2,0,2,35,1,4
	.byte	'S16ROM',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'S17ROM',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	196
	.byte	14,0,2,35,2,0,27
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,20,165,3,3
	.word	77615
	.byte	3
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,20,168,3,16,4,4
	.byte	'S0ROM',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'S1ROM',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'S2ROM',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'S3ROM',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'S4ROM',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'S5ROM',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'S6ROM',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'S7ROM',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'S8ROM',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'S9ROM',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'S10ROM',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'S11ROM',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'S12ROM',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'S13ROM',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'S14ROM',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'S15ROM',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'S16ROM',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'S17ROM',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'S18ROM',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'S19ROM',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'S20ROM',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'S21ROM',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'S22ROM',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'S23ROM',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'S24ROM',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'S25ROM',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'S26ROM',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	179
	.byte	2,3,2,35,3,4
	.byte	'BML',0,1
	.word	179
	.byte	2,1,2,35,3,4
	.byte	'TP',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,20,200,3,3
	.word	77978
	.byte	3
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,20,203,3,16,4,4
	.byte	'S0L',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'S1L',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'S2L',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'S3L',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'S4L',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'S5L',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'S6L',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'S7L',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'S8L',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'S9L',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'S10L',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'S11L',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'S12L',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'S13L',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'S14L',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'S15L',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'S16L',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'S17L',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'S18L',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'S19L',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'S20L',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'S21L',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'S22L',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'S23L',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'S24L',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'S25L',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'S26L',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	179
	.byte	4,1,2,35,3,4
	.byte	'RPRO',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_PROCONP_Bits',0,20,234,3,3
	.word	78573
	.byte	3
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,20,237,3,16,4,4
	.byte	'S0WOP',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'S1WOP',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'S2WOP',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'S3WOP',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'S4WOP',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'S5WOP',0,1
	.word	179
	.byte	1,2,2,35,0,4
	.byte	'S6WOP',0,1
	.word	179
	.byte	1,1,2,35,0,4
	.byte	'S7WOP',0,1
	.word	179
	.byte	1,0,2,35,0,4
	.byte	'S8WOP',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'S9WOP',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'S10WOP',0,1
	.word	179
	.byte	1,5,2,35,1,4
	.byte	'S11WOP',0,1
	.word	179
	.byte	1,4,2,35,1,4
	.byte	'S12WOP',0,1
	.word	179
	.byte	1,3,2,35,1,4
	.byte	'S13WOP',0,1
	.word	179
	.byte	1,2,2,35,1,4
	.byte	'S14WOP',0,1
	.word	179
	.byte	1,1,2,35,1,4
	.byte	'S15WOP',0,1
	.word	179
	.byte	1,0,2,35,1,4
	.byte	'S16WOP',0,1
	.word	179
	.byte	1,7,2,35,2,4
	.byte	'S17WOP',0,1
	.word	179
	.byte	1,6,2,35,2,4
	.byte	'S18WOP',0,1
	.word	179
	.byte	1,5,2,35,2,4
	.byte	'S19WOP',0,1
	.word	179
	.byte	1,4,2,35,2,4
	.byte	'S20WOP',0,1
	.word	179
	.byte	1,3,2,35,2,4
	.byte	'S21WOP',0,1
	.word	179
	.byte	1,2,2,35,2,4
	.byte	'S22WOP',0,1
	.word	179
	.byte	1,1,2,35,2,4
	.byte	'S23WOP',0,1
	.word	179
	.byte	1,0,2,35,2,4
	.byte	'S24WOP',0,1
	.word	179
	.byte	1,7,2,35,3,4
	.byte	'S25WOP',0,1
	.word	179
	.byte	1,6,2,35,3,4
	.byte	'S26WOP',0,1
	.word	179
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	179
	.byte	4,1,2,35,3,4
	.byte	'DATM',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,20,140,4,3
	.word	79097
	.byte	3
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,20,143,4,16,4,4
	.byte	'TAG',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	156
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,20,147,4,3
	.word	79679
	.byte	3
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,20,150,4,16,4,4
	.byte	'TAG',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	156
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,20,154,4,3
	.word	79781
	.byte	3
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,20,157,4,16,4,4
	.byte	'TAG',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	156
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,20,161,4,3
	.word	79883
	.byte	3
	.byte	'_Ifx_FLASH_RRAD_Bits',0,20,164,4,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	3,5,2,35,0,4
	.byte	'ADD',0,4
	.word	156
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RRAD_Bits',0,20,168,4,3
	.word	79985
	.byte	3
	.byte	'_Ifx_FLASH_RRCT_Bits',0,20,171,4,16,4,4
	.byte	'STRT',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'STP',0,1
	.word	179
	.byte	1,6,2,35,0,4
	.byte	'BUSY',0,1
	.word	179
	.byte	1,5,2,35,0,4
	.byte	'DONE',0,1
	.word	179
	.byte	1,4,2,35,0,4
	.byte	'ERR',0,1
	.word	179
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	179
	.byte	3,0,2,35,0,4
	.byte	'EOBM',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	179
	.byte	7,0,2,35,1,4
	.byte	'CNT',0,2
	.word	196
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_RRCT_Bits',0,20,182,4,3
	.word	80079
	.byte	3
	.byte	'_Ifx_FLASH_RRD0_Bits',0,20,185,4,16,4,4
	.byte	'DATA',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RRD0_Bits',0,20,188,4,3
	.word	80289
	.byte	3
	.byte	'_Ifx_FLASH_RRD1_Bits',0,20,191,4,16,4,4
	.byte	'DATA',0,4
	.word	156
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RRD1_Bits',0,20,194,4,3
	.word	80362
	.byte	3
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,20,197,4,16,4,4
	.byte	'SEL',0,1
	.word	179
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	179
	.byte	2,0,2,35,0,4
	.byte	'CLR',0,1
	.word	179
	.byte	1,7,2,35,1,4
	.byte	'DIS',0,1
	.word	179
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,4
	.word	156
	.byte	22,0,2,35,0,0,27
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,20,204,4,3
	.word	80435
	.byte	3
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,20,207,4,16,4,4
	.byte	'VLD0',0,1
	.word	179
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	156
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,20,211,4,3
	.word	80590
	.byte	3
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,20,214,4,16,4,4
	.byte	'reserved_0',0,1
	.word	179
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	156
	.byte	19,8,2,35,0,4
	.byte	'ERR',0,1
	.word	179
	.byte	6,2,2,35,3,4
	.byte	'VLD',0,1
	.word	179
	.byte	1,1,2,35,3,4
	.byte	'CLR',0,1
	.word	179
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,20,221,4,3
	.word	80695
	.byte	5,20,229,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	71939
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ACCEN0',0,20,237,4,3
	.word	80843
	.byte	5,20,240,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	72500
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ACCEN1',0,20,248,4,3
	.word	80909
	.byte	5,20,251,4,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	72581
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_CBAB_CFG',0,20,131,5,3
	.word	80975
	.byte	5,20,134,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	72734
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_CBAB_STAT',0,20,142,5,3
	.word	81043
	.byte	5,20,145,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	72982
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_CBAB_TOP',0,20,153,5,3
	.word	81112
	.byte	5,20,156,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73128
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_COMM0',0,20,164,5,3
	.word	81180
	.byte	5,20,167,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73226
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_COMM1',0,20,175,5,3
	.word	81245
	.byte	5,20,178,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73342
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_COMM2',0,20,186,5,3
	.word	81310
	.byte	5,20,189,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73458
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ECCRD',0,20,197,5,3
	.word	81375
	.byte	5,20,200,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73598
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ECCRP',0,20,208,5,3
	.word	81440
	.byte	5,20,211,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73738
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ECCW',0,20,219,5,3
	.word	81505
	.byte	5,20,222,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73877
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_FCON',0,20,230,5,3
	.word	81569
	.byte	5,20,233,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	74239
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_FPRO',0,20,241,5,3
	.word	81633
	.byte	5,20,244,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	74680
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_FSR',0,20,252,5,3
	.word	81697
	.byte	5,20,255,5,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	75288
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMFCON',0,20,135,6,3
	.word	81760
	.byte	5,20,138,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	75468
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMFSR',0,20,146,6,3
	.word	81827
	.byte	5,20,149,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	75790
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMMARD',0,20,157,6,3
	.word	81893
	.byte	5,20,160,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	75971
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRAD',0,20,168,6,3
	.word	81960
	.byte	5,20,171,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76071
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRCT',0,20,179,6,3
	.word	82027
	.byte	5,20,182,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76287
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRD0',0,20,190,6,3
	.word	82094
	.byte	5,20,193,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76366
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRD1',0,20,201,6,3
	.word	82161
	.byte	5,20,204,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76445
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ID',0,20,212,6,3
	.word	82228
	.byte	5,20,215,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76558
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_MARD',0,20,223,6,3
	.word	82290
	.byte	5,20,226,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76772
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_MARP',0,20,234,6,3
	.word	82354
	.byte	5,20,237,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76959
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCOND',0,20,245,6,3
	.word	82418
	.byte	5,20,248,6,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	77283
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONDBG',0,20,128,7,3
	.word	82485
	.byte	5,20,131,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	77426
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONHSM',0,20,139,7,3
	.word	82554
	.byte	5,20,142,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	77615
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,20,150,7,3
	.word	82623
	.byte	5,20,153,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	77978
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONOTP',0,20,161,7,3
	.word	82696
	.byte	5,20,164,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	78573
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONP',0,20,172,7,3
	.word	82765
	.byte	5,20,175,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	79097
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONWOP',0,20,183,7,3
	.word	82832
	.byte	5,20,186,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	79679
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG0',0,20,194,7,3
	.word	82901
	.byte	5,20,197,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	79781
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG1',0,20,205,7,3
	.word	82969
	.byte	5,20,208,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	79883
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG2',0,20,216,7,3
	.word	83037
	.byte	5,20,219,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	79985
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RRAD',0,20,227,7,3
	.word	83105
	.byte	5,20,230,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80079
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RRCT',0,20,238,7,3
	.word	83169
	.byte	5,20,241,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80289
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RRD0',0,20,249,7,3
	.word	83233
	.byte	5,20,252,7,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80362
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RRD1',0,20,132,8,3
	.word	83297
	.byte	5,20,135,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80435
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_UBAB_CFG',0,20,143,8,3
	.word	83361
	.byte	5,20,146,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80590
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_UBAB_STAT',0,20,154,8,3
	.word	83429
	.byte	5,20,157,8,9,4,6
	.byte	'U',0
	.word	156
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	172
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80695
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_UBAB_TOP',0,20,165,8,3
	.word	83498
	.byte	3
	.byte	'_Ifx_FLASH_CBAB',0,20,176,8,25,12,6
	.byte	'CFG',0
	.word	80975
	.byte	4,2,35,0,6
	.byte	'STAT',0
	.word	81043
	.byte	4,2,35,4,6
	.byte	'TOP',0
	.word	81112
	.byte	4,2,35,8,0,7
	.word	83566
	.byte	27
	.byte	'Ifx_FLASH_CBAB',0,20,181,8,3
	.word	83629
	.byte	3
	.byte	'_Ifx_FLASH_RDB',0,20,184,8,25,12,6
	.byte	'CFG0',0
	.word	82901
	.byte	4,2,35,0,6
	.byte	'CFG1',0
	.word	82969
	.byte	4,2,35,4,6
	.byte	'CFG2',0
	.word	83037
	.byte	4,2,35,8,0,7
	.word	83658
	.byte	27
	.byte	'Ifx_FLASH_RDB',0,20,189,8,3
	.word	83722
	.byte	3
	.byte	'_Ifx_FLASH_UBAB',0,20,192,8,25,12,6
	.byte	'CFG',0
	.word	83361
	.byte	4,2,35,0,6
	.byte	'STAT',0
	.word	83429
	.byte	4,2,35,4,6
	.byte	'TOP',0
	.word	83498
	.byte	4,2,35,8,0,7
	.word	83750
	.byte	27
	.byte	'Ifx_FLASH_UBAB',0,20,197,8,3
	.word	83813
	.byte	27
	.byte	'Ifx_P_ACCEN0_Bits',0,8,79,3
	.word	8237
	.byte	27
	.byte	'Ifx_P_ACCEN1_Bits',0,8,85,3
	.word	8150
	.byte	27
	.byte	'Ifx_P_ESR_Bits',0,8,107,3
	.word	4509
	.byte	27
	.byte	'Ifx_P_ID_Bits',0,8,115,3
	.word	2562
	.byte	27
	.byte	'Ifx_P_IN_Bits',0,8,137,1,3
	.word	3557
	.byte	27
	.byte	'Ifx_P_IOCR0_Bits',0,8,150,1,3
	.word	2690
	.byte	27
	.byte	'Ifx_P_IOCR12_Bits',0,8,163,1,3
	.word	3337
	.byte	27
	.byte	'Ifx_P_IOCR4_Bits',0,8,176,1,3
	.word	2905
	.byte	27
	.byte	'Ifx_P_IOCR8_Bits',0,8,189,1,3
	.word	3120
	.byte	27
	.byte	'Ifx_P_LPCR0_Bits',0,8,197,1,3
	.word	7509
	.byte	27
	.byte	'Ifx_P_LPCR1_Bits',0,8,205,1,3
	.word	7633
	.byte	27
	.byte	'Ifx_P_LPCR1_P21_Bits',0,8,215,1,3
	.word	7717
	.byte	27
	.byte	'Ifx_P_LPCR2_Bits',0,8,229,1,3
	.word	7897
	.byte	27
	.byte	'Ifx_P_OMCR0_Bits',0,8,240,1,3
	.word	6148
	.byte	27
	.byte	'Ifx_P_OMCR12_Bits',0,8,250,1,3
	.word	6672
	.byte	27
	.byte	'Ifx_P_OMCR4_Bits',0,8,133,2,3
	.word	6322
	.byte	27
	.byte	'Ifx_P_OMCR8_Bits',0,8,144,2,3
	.word	6496
	.byte	27
	.byte	'Ifx_P_OMCR_Bits',0,8,166,2,3
	.word	7161
	.byte	27
	.byte	'Ifx_P_OMR_Bits',0,8,203,2,3
	.word	1991
	.byte	27
	.byte	'Ifx_P_OMSR0_Bits',0,8,213,2,3
	.word	5485
	.byte	27
	.byte	'Ifx_P_OMSR12_Bits',0,8,224,2,3
	.word	5973
	.byte	27
	.byte	'Ifx_P_OMSR4_Bits',0,8,235,2,3
	.word	5632
	.byte	27
	.byte	'Ifx_P_OMSR8_Bits',0,8,246,2,3
	.word	5801
	.byte	27
	.byte	'Ifx_P_OMSR_Bits',0,8,140,3,3
	.word	6828
	.byte	27
	.byte	'Ifx_P_OUT_Bits',0,8,162,3,3
	.word	1675
	.byte	27
	.byte	'Ifx_P_PCSR_Bits',0,8,179,3,3
	.word	5215
	.byte	27
	.byte	'Ifx_P_PDISC_Bits',0,8,201,3,3
	.word	4849
	.byte	27
	.byte	'Ifx_P_PDR0_Bits',0,8,222,3,3
	.word	3880
	.byte	27
	.byte	'Ifx_P_PDR1_Bits',0,8,243,3,3
	.word	4184
	.byte	27
	.byte	'Ifx_P_ACCEN0',0,8,131,4,3
	.word	8764
	.byte	27
	.byte	'Ifx_P_ACCEN1',0,8,142,4,3
	.word	8197
	.byte	27
	.byte	'Ifx_P_ESR',0,8,153,4,3
	.word	4800
	.byte	27
	.byte	'Ifx_P_ID',0,8,164,4,3
	.word	2641
	.byte	27
	.byte	'Ifx_P_IN',0,8,175,4,3
	.word	3831
	.byte	27
	.byte	'Ifx_P_IOCR0',0,8,186,4,3
	.word	2865
	.byte	27
	.byte	'Ifx_P_IOCR12',0,8,197,4,3
	.word	3517
	.byte	27
	.byte	'Ifx_P_IOCR4',0,8,208,4,3
	.word	3080
	.byte	27
	.byte	'Ifx_P_IOCR8',0,8,219,4,3
	.word	3297
	.byte	27
	.byte	'Ifx_P_LPCR0',0,8,230,4,3
	.word	7593
	.byte	27
	.byte	'Ifx_P_LPCR1',0,8,243,4,3
	.word	7842
	.byte	27
	.byte	'Ifx_P_LPCR2',0,8,254,4,3
	.word	8101
	.byte	27
	.byte	'Ifx_P_OMCR',0,8,137,5,3
	.word	7469
	.byte	27
	.byte	'Ifx_P_OMCR0',0,8,148,5,3
	.word	6282
	.byte	27
	.byte	'Ifx_P_OMCR12',0,8,159,5,3
	.word	6788
	.byte	27
	.byte	'Ifx_P_OMCR4',0,8,170,5,3
	.word	6456
	.byte	27
	.byte	'Ifx_P_OMCR8',0,8,181,5,3
	.word	6632
	.byte	27
	.byte	'Ifx_P_OMR',0,8,192,5,3
	.word	2522
	.byte	27
	.byte	'Ifx_P_OMSR',0,8,203,5,3
	.word	7121
	.byte	27
	.byte	'Ifx_P_OMSR0',0,8,214,5,3
	.word	5592
	.byte	27
	.byte	'Ifx_P_OMSR12',0,8,225,5,3
	.word	6108
	.byte	27
	.byte	'Ifx_P_OMSR4',0,8,236,5,3
	.word	5761
	.byte	27
	.byte	'Ifx_P_OMSR8',0,8,247,5,3
	.word	5933
	.byte	27
	.byte	'Ifx_P_OUT',0,8,130,6,3
	.word	1951
	.byte	27
	.byte	'Ifx_P_PCSR',0,8,141,6,3
	.word	5445
	.byte	27
	.byte	'Ifx_P_PDISC',0,8,152,6,3
	.word	5175
	.byte	27
	.byte	'Ifx_P_PDR0',0,8,163,6,3
	.word	4144
	.byte	27
	.byte	'Ifx_P_PDR1',0,8,174,6,3
	.word	4460
	.byte	7
	.word	8804
	.byte	27
	.byte	'Ifx_P',0,8,223,6,3
	.word	85160
	.byte	27
	.byte	'IfxPort_InputMode',0,7,69,3
	.word	9417
	.byte	27
	.byte	'IfxPort_OutputIdx',0,7,110,3
	.word	9691
	.byte	27
	.byte	'IfxPort_OutputMode',0,7,118,3
	.word	9622
	.byte	14,7,124,9,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,15
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,15
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,15
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,15
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,15
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,15
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,15
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,15
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,27
	.byte	'IfxPort_PadDriver',0,7,138,1,3
	.word	85259
	.byte	27
	.byte	'IfxPort_State',0,7,158,1,3
	.word	10004
	.byte	29,7,170,1,9,8,6
	.byte	'port',0
	.word	9412
	.byte	4,2,35,0,6
	.byte	'pinIndex',0
	.word	179
	.byte	1,2,35,4,0,27
	.byte	'IfxPort_Pin',0,7,174,1,3
	.word	85723
	.byte	30,1,1,8
	.word	85783
	.byte	27
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,13,129,1,16
	.word	85786
	.byte	29,13,197,5,9,8,6
	.byte	'value',0
	.word	1446
	.byte	4,2,35,0,6
	.byte	'mask',0
	.word	1446
	.byte	4,2,35,4,0,27
	.byte	'IfxScuCcu_CcuconRegConfig',0,13,201,5,3
	.word	85831
	.byte	29,13,206,5,9,8,6
	.byte	'pDivider',0
	.word	179
	.byte	1,2,35,0,6
	.byte	'nDivider',0
	.word	179
	.byte	1,2,35,1,6
	.byte	'k2Initial',0
	.word	179
	.byte	1,2,35,2,6
	.byte	'waitTime',0
	.word	19175
	.byte	4,2,35,4,0,27
	.byte	'IfxScuCcu_InitialStepConfig',0,13,212,5,3
	.word	85902
	.byte	29,13,216,5,9,12,6
	.byte	'k2Step',0
	.word	179
	.byte	1,2,35,0,6
	.byte	'waitTime',0
	.word	19175
	.byte	4,2,35,2,6
	.byte	'hookFunction',0
	.word	85791
	.byte	4,2,35,8,0,27
	.byte	'IfxScuCcu_PllStepsConfig',0,13,221,5,3
	.word	86019
	.byte	8
	.word	85783
	.byte	29,13,229,5,9,56,6
	.byte	'ccucon0',0
	.word	85831
	.byte	8,2,35,0,6
	.byte	'ccucon1',0
	.word	85831
	.byte	8,2,35,8,6
	.byte	'ccucon2',0
	.word	85831
	.byte	8,2,35,16,6
	.byte	'ccucon5',0
	.word	85831
	.byte	8,2,35,24,6
	.byte	'ccucon6',0
	.word	85831
	.byte	8,2,35,32,6
	.byte	'ccucon7',0
	.word	85831
	.byte	8,2,35,40,6
	.byte	'ccucon8',0
	.word	85831
	.byte	8,2,35,48,0,27
	.byte	'IfxScuCcu_ClockDistributionConfig',0,13,238,5,3
	.word	86121
	.byte	29,13,242,5,9,8,6
	.byte	'value',0
	.word	1446
	.byte	4,2,35,0,6
	.byte	'mask',0
	.word	1446
	.byte	4,2,35,4,0,27
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,13,246,5,3
	.word	86290
	.byte	8
	.word	86019
	.byte	29,13,251,5,9,16,6
	.byte	'numOfPllDividerSteps',0
	.word	179
	.byte	1,2,35,0,6
	.byte	'pllDividerStep',0
	.word	86366
	.byte	4,2,35,4,6
	.byte	'pllInitialStep',0
	.word	85902
	.byte	8,2,35,8,0,27
	.byte	'IfxScuCcu_SysPllConfig',0,13,128,6,3
	.word	86371
	.byte	27
	.byte	'Ifx_ASCLIN_ACCEN0_Bits',0,12,79,3
	.word	16080
	.byte	27
	.byte	'Ifx_ASCLIN_ACCEN1_Bits',0,12,85,3
	.word	15988
	.byte	27
	.byte	'Ifx_ASCLIN_BITCON_Bits',0,12,97,3
	.word	11612
	.byte	27
	.byte	'Ifx_ASCLIN_BRD_Bits',0,12,106,3
	.word	12452
	.byte	27
	.byte	'Ifx_ASCLIN_BRG_Bits',0,12,115,3
	.word	12295
	.byte	27
	.byte	'Ifx_ASCLIN_CLC_Bits',0,12,125,3
	.word	10567
	.byte	27
	.byte	'Ifx_ASCLIN_CSR_Bits',0,12,133,1,3
	.word	15261
	.byte	27
	.byte	'Ifx_ASCLIN_DATCON_Bits',0,12,145,1,3
	.word	12098
	.byte	27
	.byte	'Ifx_ASCLIN_FLAGS_Bits',0,12,177,1,3
	.word	13108
	.byte	27
	.byte	'Ifx_ASCLIN_FLAGSCLEAR_Bits',0,12,209,1,3
	.word	14107
	.byte	27
	.byte	'Ifx_ASCLIN_FLAGSENABLE_Bits',0,12,238,1,3
	.word	14622
	.byte	27
	.byte	'Ifx_ASCLIN_FLAGSSET_Bits',0,12,142,2,3
	.word	13594
	.byte	27
	.byte	'Ifx_ASCLIN_FRAMECON_Bits',0,12,158,2,3
	.word	11833
	.byte	27
	.byte	'Ifx_ASCLIN_ID_Bits',0,12,166,2,3
	.word	11021
	.byte	27
	.byte	'Ifx_ASCLIN_IOCR_Bits',0,12,184,2,3
	.word	10726
	.byte	27
	.byte	'Ifx_ASCLIN_KRST0_Bits',0,12,192,2,3
	.word	15862
	.byte	27
	.byte	'Ifx_ASCLIN_KRST1_Bits',0,12,199,2,3
	.word	15755
	.byte	27
	.byte	'Ifx_ASCLIN_KRSTCLR_Bits',0,12,206,2,3
	.word	15646
	.byte	27
	.byte	'Ifx_ASCLIN_LIN_BTIMER_Bits',0,12,213,2,3
	.word	12806
	.byte	27
	.byte	'Ifx_ASCLIN_LIN_CON_Bits',0,12,225,2,3
	.word	12606
	.byte	27
	.byte	'Ifx_ASCLIN_LIN_HTIMER_Bits',0,12,232,2,3
	.word	12920
	.byte	27
	.byte	'Ifx_ASCLIN_OCS_Bits',0,12,242,2,3
	.word	15483
	.byte	27
	.byte	'Ifx_ASCLIN_RXDATA_Bits',0,12,248,2,3
	.word	15174
	.byte	27
	.byte	'Ifx_ASCLIN_RXDATAD_Bits',0,12,254,2,3
	.word	15384
	.byte	27
	.byte	'Ifx_ASCLIN_RXFIFOCON_Bits',0,12,140,3,3
	.word	11371
	.byte	27
	.byte	'Ifx_ASCLIN_TXDATA_Bits',0,12,146,3,3
	.word	15087
	.byte	27
	.byte	'Ifx_ASCLIN_TXFIFOCON_Bits',0,12,159,3,3
	.word	11146
	.byte	27
	.byte	'Ifx_ASCLIN_ACCEN0',0,12,175,3,3
	.word	16612
	.byte	27
	.byte	'Ifx_ASCLIN_ACCEN1',0,12,186,3,3
	.word	16040
	.byte	27
	.byte	'Ifx_ASCLIN_BITCON',0,12,197,3,3
	.word	11793
	.byte	27
	.byte	'Ifx_ASCLIN_BRD',0,12,208,3,3
	.word	12566
	.byte	27
	.byte	'Ifx_ASCLIN_BRG',0,12,219,3,3
	.word	12412
	.byte	27
	.byte	'Ifx_ASCLIN_CLC',0,12,230,3,3
	.word	10686
	.byte	27
	.byte	'Ifx_ASCLIN_CSR',0,12,241,3,3
	.word	15344
	.byte	27
	.byte	'Ifx_ASCLIN_DATCON',0,12,252,3,3
	.word	12255
	.byte	27
	.byte	'Ifx_ASCLIN_FLAGS',0,12,135,4,3
	.word	13554
	.byte	27
	.byte	'Ifx_ASCLIN_FLAGSCLEAR',0,12,146,4,3
	.word	14582
	.byte	27
	.byte	'Ifx_ASCLIN_FLAGSENABLE',0,12,157,4,3
	.word	15047
	.byte	27
	.byte	'Ifx_ASCLIN_FLAGSSET',0,12,168,4,3
	.word	14067
	.byte	27
	.byte	'Ifx_ASCLIN_FRAMECON',0,12,179,4,3
	.word	12058
	.byte	27
	.byte	'Ifx_ASCLIN_ID',0,12,190,4,3
	.word	11106
	.byte	27
	.byte	'Ifx_ASCLIN_IOCR',0,12,201,4,3
	.word	10981
	.byte	27
	.byte	'Ifx_ASCLIN_KRST0',0,12,212,4,3
	.word	15948
	.byte	27
	.byte	'Ifx_ASCLIN_KRST1',0,12,223,4,3
	.word	15822
	.byte	27
	.byte	'Ifx_ASCLIN_KRSTCLR',0,12,234,4,3
	.word	15715
	.byte	27
	.byte	'Ifx_ASCLIN_LIN_BTIMER',0,12,245,4,3
	.word	12880
	.byte	27
	.byte	'Ifx_ASCLIN_LIN_CON',0,12,128,5,3
	.word	12766
	.byte	27
	.byte	'Ifx_ASCLIN_LIN_HTIMER',0,12,139,5,3
	.word	12995
	.byte	27
	.byte	'Ifx_ASCLIN_OCS',0,12,150,5,3
	.word	15606
	.byte	27
	.byte	'Ifx_ASCLIN_RXDATA',0,12,161,5,3
	.word	15221
	.byte	27
	.byte	'Ifx_ASCLIN_RXDATAD',0,12,172,5,3
	.word	15432
	.byte	27
	.byte	'Ifx_ASCLIN_RXFIFOCON',0,12,183,5,3
	.word	11572
	.byte	27
	.byte	'Ifx_ASCLIN_TXDATA',0,12,194,5,3
	.word	15134
	.byte	27
	.byte	'Ifx_ASCLIN_TXFIFOCON',0,12,205,5,3
	.word	11331
	.byte	7
	.word	13035
	.byte	27
	.byte	'Ifx_ASCLIN_LIN',0,12,221,5,3
	.word	88087
	.byte	7
	.word	16652
	.byte	27
	.byte	'Ifx_ASCLIN',0,12,134,6,3
	.word	88116
	.byte	14,21,49,9,1,15
	.byte	'IfxSrc_Tos_cpu0',0,0,15
	.byte	'IfxSrc_Tos_cpu1',0,1,15
	.byte	'IfxSrc_Tos_cpu2',0,2,15
	.byte	'IfxSrc_Tos_dma',0,3,0,27
	.byte	'IfxSrc_Tos',0,21,55,3
	.word	88141
	.byte	29,22,39,15,16,6
	.byte	'module',0
	.word	17099
	.byte	4,2,35,0,6
	.byte	'pin',0
	.word	85723
	.byte	8,2,35,4,6
	.byte	'select',0
	.word	20974
	.byte	1,2,35,12,0,18
	.word	88237
	.byte	27
	.byte	'IfxAsclin_Cts_In',0,22,44,3
	.word	88288
	.byte	29,22,47,15,16,6
	.byte	'module',0
	.word	17099
	.byte	4,2,35,0,6
	.byte	'pin',0
	.word	85723
	.byte	8,2,35,4,6
	.byte	'select',0
	.word	20974
	.byte	1,2,35,12,0,18
	.word	88318
	.byte	27
	.byte	'IfxAsclin_Rx_In',0,22,52,3
	.word	88369
	.byte	29,22,55,15,16,6
	.byte	'module',0
	.word	17099
	.byte	4,2,35,0,6
	.byte	'pin',0
	.word	85723
	.byte	8,2,35,4,6
	.byte	'select',0
	.word	9691
	.byte	1,2,35,12,0,18
	.word	88398
	.byte	27
	.byte	'IfxAsclin_Rts_Out',0,22,60,3
	.word	88449
	.byte	29,22,63,15,16,6
	.byte	'module',0
	.word	17099
	.byte	4,2,35,0,6
	.byte	'pin',0
	.word	85723
	.byte	8,2,35,4,6
	.byte	'select',0
	.word	9691
	.byte	1,2,35,12,0,18
	.word	88480
	.byte	27
	.byte	'IfxAsclin_Sclk_Out',0,22,68,3
	.word	88531
	.byte	29,22,71,15,16,6
	.byte	'module',0
	.word	17099
	.byte	4,2,35,0,6
	.byte	'pin',0
	.word	85723
	.byte	8,2,35,4,6
	.byte	'select',0
	.word	9691
	.byte	1,2,35,12,0,18
	.word	88563
	.byte	27
	.byte	'IfxAsclin_Slso_Out',0,22,76,3
	.word	88614
	.byte	29,22,79,15,16,6
	.byte	'module',0
	.word	17099
	.byte	4,2,35,0,6
	.byte	'pin',0
	.word	85723
	.byte	8,2,35,4,6
	.byte	'select',0
	.word	9691
	.byte	1,2,35,12,0,18
	.word	88646
	.byte	27
	.byte	'IfxAsclin_Tx_Out',0,22,84,3
	.word	88697
	.byte	14,11,62,9,1,15
	.byte	'IfxAsclin_Checksum_classic',0,0,15
	.byte	'IfxAsclin_Checksum_enhanced',0,1,0,27
	.byte	'IfxAsclin_Checksum',0,11,66,3
	.word	88727
	.byte	14,11,71,9,1,15
	.byte	'IfxAsclin_ChecksumInjection_notWritten',0,0,15
	.byte	'IfxAsclin_ChecksumInjection_written',0,1,0,27
	.byte	'IfxAsclin_ChecksumInjection',0,11,75,3
	.word	88819
	.byte	14,11,81,9,1,15
	.byte	'IfxAsclin_ClockPolarity_idleLow',0,0,15
	.byte	'IfxAsclin_ClockPolarity_idleHigh',0,1,0,27
	.byte	'IfxAsclin_ClockPolarity',0,11,85,3
	.word	88940
	.byte	27
	.byte	'IfxAsclin_ClockSource',0,11,98,3
	.word	20181
	.byte	27
	.byte	'IfxAsclin_CtsInputSelect',0,11,109,3
	.word	18208
	.byte	14,11,114,9,1,15
	.byte	'IfxAsclin_DataLength_1',0,0,15
	.byte	'IfxAsclin_DataLength_2',0,1,15
	.byte	'IfxAsclin_DataLength_3',0,2,15
	.byte	'IfxAsclin_DataLength_4',0,3,15
	.byte	'IfxAsclin_DataLength_5',0,4,15
	.byte	'IfxAsclin_DataLength_6',0,5,15
	.byte	'IfxAsclin_DataLength_7',0,6,15
	.byte	'IfxAsclin_DataLength_8',0,7,15
	.byte	'IfxAsclin_DataLength_9',0,8,15
	.byte	'IfxAsclin_DataLength_10',0,9,15
	.byte	'IfxAsclin_DataLength_11',0,10,15
	.byte	'IfxAsclin_DataLength_12',0,11,15
	.byte	'IfxAsclin_DataLength_13',0,12,15
	.byte	'IfxAsclin_DataLength_14',0,13,15
	.byte	'IfxAsclin_DataLength_15',0,14,15
	.byte	'IfxAsclin_DataLength_16',0,15,0,27
	.byte	'IfxAsclin_DataLength',0,11,132,1,3
	.word	89110
	.byte	14,11,137,1,9,1,15
	.byte	'IfxAsclin_FrameMode_initialise',0,0,15
	.byte	'IfxAsclin_FrameMode_asc',0,1,15
	.byte	'IfxAsclin_FrameMode_spi',0,2,15
	.byte	'IfxAsclin_FrameMode_lin',0,3,0,27
	.byte	'IfxAsclin_FrameMode',0,11,143,1,3
	.word	89553
	.byte	14,11,148,1,9,1,15
	.byte	'IfxAsclin_HeaderResponseSelect_headerAndResponse',0,0,15
	.byte	'IfxAsclin_HeaderResponseSelect_headerOnly',0,1,0,27
	.byte	'IfxAsclin_HeaderResponseSelect',0,11,152,1,3
	.word	89700
	.byte	14,11,159,1,9,1,15
	.byte	'IfxAsclin_IdleDelay_0',0,0,15
	.byte	'IfxAsclin_IdleDelay_1',0,1,15
	.byte	'IfxAsclin_IdleDelay_2',0,2,15
	.byte	'IfxAsclin_IdleDelay_3',0,3,15
	.byte	'IfxAsclin_IdleDelay_4',0,4,15
	.byte	'IfxAsclin_IdleDelay_5',0,5,15
	.byte	'IfxAsclin_IdleDelay_6',0,6,15
	.byte	'IfxAsclin_IdleDelay_7',0,7,0,27
	.byte	'IfxAsclin_IdleDelay',0,11,169,1,3
	.word	89842
	.byte	14,11,175,1,9,1,15
	.byte	'IfxAsclin_LeadDelay_0',0,0,15
	.byte	'IfxAsclin_LeadDelay_1',0,1,15
	.byte	'IfxAsclin_LeadDelay_2',0,2,15
	.byte	'IfxAsclin_LeadDelay_3',0,3,15
	.byte	'IfxAsclin_LeadDelay_4',0,4,15
	.byte	'IfxAsclin_LeadDelay_5',0,5,15
	.byte	'IfxAsclin_LeadDelay_6',0,6,15
	.byte	'IfxAsclin_LeadDelay_7',0,7,0,27
	.byte	'IfxAsclin_LeadDelay',0,11,185,1,3
	.word	90070
	.byte	14,11,190,1,9,1,15
	.byte	'IfxAsclin_LinMode_slave',0,0,15
	.byte	'IfxAsclin_LinMode_master',0,1,0,27
	.byte	'IfxAsclin_LinMode',0,11,194,1,3
	.word	90298
	.byte	14,11,199,1,9,1,15
	.byte	'IfxAsclin_LinResponseTimeoutMode_frameTimeout',0,0,15
	.byte	'IfxAsclin_LinResponseTimeoutMode_responseTimeout',0,1,0,27
	.byte	'IfxAsclin_LinResponseTimeoutMode',0,11,203,1,3
	.word	90385
	.byte	27
	.byte	'IfxAsclin_OversamplingFactor',0,11,223,1,3
	.word	17303
	.byte	14,11,228,1,9,1,15
	.byte	'IfxAsclin_ParityType_even',0,0,15
	.byte	'IfxAsclin_ParityType_odd',0,1,0,27
	.byte	'IfxAsclin_ParityType',0,11,232,1,3
	.word	90571
	.byte	14,11,237,1,9,1,15
	.byte	'IfxAsclin_ReceiveBufferMode_rxFifo',0,0,15
	.byte	'IfxAsclin_ReceiveBufferMode_rxBuffer',0,1,0,27
	.byte	'IfxAsclin_ReceiveBufferMode',0,11,241,1,3
	.word	90663
	.byte	14,11,246,1,9,1,15
	.byte	'IfxAsclin_RtsCtsPolarity_activeHigh',0,0,15
	.byte	'IfxAsclin_RtsCtsPolarity_activeLow',0,1,0,27
	.byte	'IfxAsclin_RtsCtsPolarity',0,11,250,1,3
	.word	90783
	.byte	14,11,255,1,9,1,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_1',0,0,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_2',0,1,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_3',0,2,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_4',0,3,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_5',0,4,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_6',0,5,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_7',0,6,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_8',0,7,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_9',0,8,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_10',0,9,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_11',0,10,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_12',0,11,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_13',0,12,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_14',0,13,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_15',0,14,15
	.byte	'IfxAsclin_RxFifoInterruptLevel_16',0,15,0,27
	.byte	'IfxAsclin_RxFifoInterruptLevel',0,11,145,2,3
	.word	90899
	.byte	14,11,150,2,9,1,15
	.byte	'IfxAsclin_RxFifoOutletWidth_0',0,0,15
	.byte	'IfxAsclin_RxFifoOutletWidth_1',0,1,15
	.byte	'IfxAsclin_RxFifoOutletWidth_2',0,2,15
	.byte	'IfxAsclin_RxFifoOutletWidth_3',0,3,0,27
	.byte	'IfxAsclin_RxFifoOutletWidth',0,11,156,2,3
	.word	91513
	.byte	27
	.byte	'IfxAsclin_RxInputSelect',0,11,171,2,3
	.word	18392
	.byte	27
	.byte	'IfxAsclin_SamplePointPosition',0,11,193,2,3
	.word	19589
	.byte	27
	.byte	'IfxAsclin_SamplesPerBit',0,11,202,2,3
	.word	20112
	.byte	14,11,208,2,9,1,15
	.byte	'IfxAsclin_ShiftDirection_lsbFirst',0,0,15
	.byte	'IfxAsclin_ShiftDirection_msbFirst',0,1,0,27
	.byte	'IfxAsclin_ShiftDirection',0,11,212,2,3
	.word	91790
	.byte	14,11,218,2,9,1,15
	.byte	'IfxAsclin_SlavePolarity_idleLow',0,0,15
	.byte	'IfxAsclin_SlavePolarity_idlehigh',0,1,0,27
	.byte	'IfxAsclin_SlavePolarity',0,11,222,2,3
	.word	91903
	.byte	14,11,227,2,9,1,15
	.byte	'IfxAsclin_SleepMode_enable',0,0,15
	.byte	'IfxAsclin_SleepMode_disable',0,1,0,27
	.byte	'IfxAsclin_SleepMode',0,11,231,2,3
	.word	92012
	.byte	14,11,244,2,9,1,15
	.byte	'IfxAsclin_StopBit_0',0,0,15
	.byte	'IfxAsclin_StopBit_1',0,1,15
	.byte	'IfxAsclin_StopBit_2',0,2,15
	.byte	'IfxAsclin_StopBit_3',0,3,15
	.byte	'IfxAsclin_StopBit_4',0,4,15
	.byte	'IfxAsclin_StopBit_5',0,5,15
	.byte	'IfxAsclin_StopBit_6',0,6,15
	.byte	'IfxAsclin_StopBit_7',0,7,0,27
	.byte	'IfxAsclin_StopBit',0,11,254,2,3
	.word	92107
	.byte	14,11,131,3,9,1,15
	.byte	'IfxAsclin_TxFifoInletWidth_0',0,0,15
	.byte	'IfxAsclin_TxFifoInletWidth_1',0,1,15
	.byte	'IfxAsclin_TxFifoInletWidth_2',0,2,15
	.byte	'IfxAsclin_TxFifoInletWidth_3',0,3,0,27
	.byte	'IfxAsclin_TxFifoInletWidth',0,11,137,3,3
	.word	92317
	.byte	14,11,142,3,9,1,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_0',0,0,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_1',0,1,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_2',0,2,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_3',0,3,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_4',0,4,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_5',0,5,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_6',0,6,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_7',0,7,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_8',0,8,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_9',0,9,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_10',0,10,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_11',0,11,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_12',0,12,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_13',0,13,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_14',0,14,15
	.byte	'IfxAsclin_TxFifoInterruptLevel_15',0,15,0,27
	.byte	'IfxAsclin_TxFifoInterruptLevel',0,11,160,3,3
	.word	92484
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L107:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,19,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,4,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,5,23,1,58,15,59,15,57,15,11,15,0,0,6,13,0,3,8,73
	.byte	19,11,15,56,9,0,0,7,53,0,73,19,0,0,8,15,0,73,19,0,0,9,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0
	.byte	10,5,0,3,8,58,15,59,15,57,15,73,19,0,0,11,11,0,0,0,12,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39
	.byte	12,0,0,13,59,0,3,8,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0,0
	.byte	17,33,0,47,15,0,0,18,38,0,73,19,0,0,19,46,1,3,8,54,15,39,12,63,12,60,12,0,0,20,5,0,73,19,0,0,21,46,1,3
	.byte	8,73,19,54,15,39,12,63,12,60,12,0,0,22,5,0,3,8,73,19,0,0,23,46,1,49,19,0,0,24,5,0,49,19,0,0,25,46,1,3
	.byte	8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,26,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12
	.byte	60,12,0,0,27,22,0,3,8,58,15,59,15,57,15,73,19,0,0,28,21,0,54,15,0,0,29,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,30,21,0,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L108:
	.word	.L477-.L476
.L476:
	.half	3
	.word	.L479-.L478
.L478:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0
	.byte	'IfxCpu_cfg.h',0,2,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Port\\Std\\IfxPort.h',0,0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Src\\Std\\IfxSrc.h',0,0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0
	.byte	'IfxAsclin_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuCcu.h',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'IfxScu_cfg.h',0,2,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Platform_Types.h',0,0
	.byte	0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Ifx_Types.h',0,0,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'IfxStm_regdef.h',0,1,0,0
	.byte	'IfxFlash_regdef.h',0,1,0,0
	.byte	'IfxSrc_cfg.h',0,2,0,0
	.byte	'IfxAsclin_PinMap.h',0,3,0,0,0
.L479:
.L477:
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_info'
.L109:
	.word	298
	.half	3
	.word	.L110
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L112,.L111
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_getFaFrequency',0,1,51,9
	.word	.L224
	.byte	1,1,1
	.word	.L64,.L225,.L63
	.byte	4
	.byte	'asclin',0,1,51,46
	.word	.L226,.L227
	.byte	5
	.word	.L64,.L225
	.byte	6
	.byte	'frequency',0,1,53,27
	.word	.L224,.L228
	.byte	7
	.word	.L229,.L64,.L230
	.byte	8
	.word	.L231,.L232
	.byte	9
	.word	.L233,.L64,.L230
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_abbrev'
.L110:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_line'
.L111:
	.word	.L481-.L480
.L480:
	.half	3
	.word	.L483-.L482
.L482:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L483:
	.byte	4,2,5,25,7,0,5,2
	.word	.L64
	.byte	3,205,14,1,4,1,5,10,9
	.half	.L230-.L64
	.byte	3,239,113,1,7,9
	.half	.L484-.L230
	.byte	3,3,1,7,9
	.half	.L485-.L484
	.byte	3,3,1,7,9
	.half	.L486-.L485
	.byte	3,3,1,9
	.half	.L487-.L486
	.byte	3,3,1,5,46,9
	.half	.L2-.L487
	.byte	3,117,1,5,47,7,9
	.half	.L3-.L2
	.byte	3,3,1,5,50,7,9
	.half	.L4-.L3
	.byte	3,3,1,5,48,7,9
	.half	.L5-.L4
	.byte	3,3,1,7,9
	.half	.L6-.L5
	.byte	3,3,1,5,19,7,9
	.half	.L7-.L6
	.byte	3,3,1,5,1,3,5,1,7,9
	.half	.L113-.L7
	.byte	0,1,1
.L481:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_ranges'
.L112:
	.word	-1,.L64,0,.L113-.L64,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_info'
.L114:
	.word	240
	.half	3
	.word	.L115
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L117,.L116
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_getOvsFrequency',0,1,95,9
	.word	.L224
	.byte	1,1,1
	.word	.L68,.L234,.L67
	.byte	4
	.byte	'asclin',0,1,95,47
	.word	.L226,.L235
	.byte	5
	.word	.L68,.L234
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_abbrev'
.L115:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_line'
.L116:
	.word	.L489-.L488
.L488:
	.half	3
	.word	.L491-.L490
.L490:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L491:
	.byte	5,9,7,0,5,2
	.word	.L68
	.byte	3,222,0,1,5,38,9
	.half	.L420-.L68
	.byte	3,2,1,5,61,9
	.half	.L419-.L420
	.byte	1,5,88,9
	.half	.L492-.L419
	.byte	1,5,61,9
	.half	.L493-.L492
	.byte	1,5,46,9
	.half	.L494-.L493
	.byte	1,5,88,9
	.half	.L495-.L494
	.byte	1,5,73,9
	.half	.L496-.L495
	.byte	1,5,1,3,1,1,7,9
	.half	.L118-.L496
	.byte	0,1,1
.L489:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_ranges'
.L117:
	.word	-1,.L68,0,.L118-.L68,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_info'
.L119:
	.word	239
	.half	3
	.word	.L120
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L122,.L121
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_getPdFrequency',0,1,101,9
	.word	.L224
	.byte	1,1,1
	.word	.L70,.L236,.L69
	.byte	4
	.byte	'asclin',0,1,101,46
	.word	.L226,.L237
	.byte	5
	.word	.L70,.L236
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_abbrev'
.L120:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_line'
.L121:
	.word	.L498-.L497
.L497:
	.half	3
	.word	.L500-.L499
.L499:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L500:
	.byte	5,9,7,0,5,2
	.word	.L70
	.byte	3,228,0,1,5,37,9
	.half	.L422-.L70
	.byte	3,2,1,5,64,9
	.half	.L421-.L422
	.byte	1,5,75,9
	.half	.L501-.L421
	.byte	1,5,45,9
	.half	.L502-.L501
	.byte	1,5,1,3,1,1,7,9
	.half	.L123-.L502
	.byte	0,1,1
.L498:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_ranges'
.L122:
	.word	-1,.L70,0,.L123-.L70,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_info'
.L124:
	.word	242
	.half	3
	.word	.L125
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L127,.L126
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_getShiftFrequency',0,1,107,9
	.word	.L224
	.byte	1,1,1
	.word	.L72,.L238,.L71
	.byte	4
	.byte	'asclin',0,1,107,49
	.word	.L226,.L239
	.byte	5
	.word	.L72,.L238
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_abbrev'
.L125:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_line'
.L126:
	.word	.L504-.L503
.L503:
	.half	3
	.word	.L506-.L505
.L505:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L506:
	.byte	5,9,7,0,5,2
	.word	.L72
	.byte	3,234,0,1,5,38,9
	.half	.L424-.L72
	.byte	3,2,1,5,64,9
	.half	.L423-.L424
	.byte	1,5,46,9
	.half	.L507-.L423
	.byte	1,5,1,3,1,1,7,9
	.half	.L128-.L507
	.byte	0,1,1
.L504:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_ranges'
.L127:
	.word	-1,.L72,0,.L128-.L72,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_info'
.L129:
	.word	255
	.half	3
	.word	.L130
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L132,.L131
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_resetModule',0,1,202,2,6,1,1,1
	.word	.L104,.L240,.L103
	.byte	4
	.byte	'asclin',0,1,202,2,40
	.word	.L226,.L241
	.byte	5
	.word	.L104,.L240
	.byte	6
	.byte	'passwd',0,1,204,2,12
	.word	.L242,.L243
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_abbrev'
.L130:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_line'
.L131:
	.word	.L509-.L508
.L508:
	.half	3
	.word	.L511-.L510
.L510:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L511:
	.byte	5,6,7,0,5,2
	.word	.L104
	.byte	3,201,2,1,5,53,9
	.half	.L471-.L104
	.byte	3,2,1,5,19,9
	.half	.L470-.L471
	.byte	1,5,31,9
	.half	.L473-.L470
	.byte	3,1,1,5,20,9
	.half	.L472-.L473
	.byte	3,2,1,5,29,9
	.half	.L512-.L472
	.byte	3,2,1,5,25,9
	.half	.L474-.L512
	.byte	3,126,1,5,20,9
	.half	.L513-.L474
	.byte	3,1,1,5,25,9
	.half	.L514-.L513
	.byte	1,5,29,9
	.half	.L515-.L514
	.byte	3,1,1,5,32,9
	.half	.L58-.L515
	.byte	3,2,1,5,40,9
	.half	.L516-.L58
	.byte	1,5,31,7,9
	.half	.L517-.L516
	.byte	3,3,1,5,29,9
	.half	.L518-.L517
	.byte	3,3,1,5,22,3,126,1,5,27,9
	.half	.L475-.L518
	.byte	1,5,29,9
	.half	.L519-.L475
	.byte	3,2,1,5,1,7,9
	.half	.L133-.L519
	.byte	3,1,0,1,1
.L509:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_ranges'
.L132:
	.word	-1,.L104,0,.L133-.L104,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_info'
.L134:
	.word	700
	.half	3
	.word	.L135
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L137,.L136
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_setBitTiming',0,1,185,1,9
	.word	.L244
	.byte	1,1,1
	.word	.L94,.L245,.L93
	.byte	4
	.byte	'asclin',0,1,185,1,44
	.word	.L226,.L246
	.byte	4
	.byte	'baudrate',0,1,185,1,60
	.word	.L224,.L247
	.byte	4
	.byte	'oversampling',0,1,185,1,99
	.word	.L248,.L249
	.byte	4
	.byte	'samplepoint',0,1,185,1,143,1
	.word	.L250,.L251
	.byte	4
	.byte	'medianFilter',0,1,185,1,180,1
	.word	.L252,.L253
	.byte	5
	.word	.L94,.L245
	.byte	6
	.byte	'source',0,1,187,1,27
	.word	.L254,.L255
	.byte	6
	.byte	'fOvs',0,1,188,1,27
	.word	.L224,.L256
	.byte	6
	.byte	'd',0,1,189,1,27
	.word	.L257,.L258
	.byte	6
	.byte	'n',0,1,189,1,30
	.word	.L257,.L259
	.byte	6
	.byte	'dBest',0,1,189,1,33
	.word	.L257,.L260
	.byte	6
	.byte	'nBest',0,1,189,1,44
	.word	.L257,.L261
	.byte	6
	.byte	'f',0,1,190,1,27
	.word	.L224,.L262
	.byte	6
	.byte	'fpd',0,1,193,1,27
	.word	.L224,.L263
	.byte	7
	.word	.L229,.L264,.L265
	.byte	8
	.word	.L231,.L266
	.byte	9
	.word	.L233,.L267
	.byte	0,7
	.word	.L229,.L268,.L269
	.byte	8
	.word	.L231,.L266
	.byte	0,10
	.word	.L270
	.byte	6
	.byte	'relError',0,1,197,1,27
	.word	.L224,.L278
	.byte	6
	.byte	'limit',0,1,198,1,27
	.word	.L224,.L279
	.byte	6
	.byte	'terminated',0,1,200,1,27
	.word	.L244,.L280
	.byte	6
	.byte	'adder_facL',0,1,202,1,27
	.word	.L257,.L281
	.byte	6
	.byte	'adder_facH',0,1,202,1,39
	.word	.L257,.L282
	.byte	6
	.byte	'adder_facL_min',0,1,202,1,51
	.word	.L257,.L283
	.byte	6
	.byte	'count',0,1,202,1,67
	.word	.L257,.L284
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_abbrev'
.L135:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85
	.byte	6,0,0,10,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_line'
.L136:
	.word	.L521-.L520
.L520:
	.half	3
	.word	.L523-.L522
.L522:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L523:
	.byte	5,9,7,0,5,2
	.word	.L94
	.byte	3,184,1,1,4,2,5,25,9
	.half	.L264-.L94
	.byte	3,149,13,1,4,1,5,9,9
	.half	.L265-.L264
	.byte	3,235,114,1,4,2,5,25,9
	.half	.L268-.L265
	.byte	3,149,13,1,4,1,5,9,3,235,114,1,4,2,5,25,9
	.half	.L269-.L268
	.byte	3,149,13,1,4,1,5,9,9
	.half	.L437-.L269
	.byte	3,235,114,1,5,58,3,8,1,5,26,9
	.half	.L435-.L437
	.byte	3,1,1,9
	.half	.L441-.L435
	.byte	3,1,1,5,38,9
	.half	.L271-.L441
	.byte	3,5,1,5,31,9
	.half	.L272-.L271
	.byte	3,124,1,5,20,9
	.half	.L273-.L272
	.byte	3,12,1,5,31,9
	.half	.L274-.L273
	.byte	3,116,1,5,20,9
	.half	.L275-.L274
	.byte	3,13,1,5,29,9
	.half	.L276-.L275
	.byte	3,115,1,5,40,3,2,1,5,22,9
	.half	.L277-.L276
	.byte	3,13,1,5,35,9
	.half	.L438-.L277
	.byte	3,121,1,5,46,9
	.half	.L524-.L438
	.byte	3,122,1,5,22,9
	.half	.L443-.L524
	.byte	3,6,1,5,34,9
	.half	.L445-.L443
	.byte	3,6,1,5,20,9
	.half	.L525-.L445
	.byte	3,125,1,5,32,9
	.half	.L446-.L525
	.byte	3,3,1,5,22,9
	.half	.L447-.L446
	.byte	3,1,1,5,18,9
	.half	.L31-.L447
	.byte	3,2,1,5,12,9
	.half	.L448-.L31
	.byte	3,5,1,5,18,9
	.half	.L450-.L448
	.byte	3,123,1,5,20,9
	.half	.L526-.L450
	.byte	3,2,1,5,54,3,3,1,5,9,9
	.half	.L34-.L526
	.byte	3,2,1,5,24,7,9
	.half	.L527-.L34
	.byte	3,2,1,9
	.half	.L451-.L527
	.byte	3,1,1,5,27,3,127,1,5,42,9
	.half	.L35-.L451
	.byte	3,5,1,5,47,9
	.half	.L452-.L35
	.byte	1,5,37,9
	.half	.L453-.L452
	.byte	3,1,1,5,53,3,3,1,5,46,9
	.half	.L38-.L453
	.byte	3,2,1,5,34,9
	.half	.L528-.L38
	.byte	1,5,32,9
	.half	.L529-.L528
	.byte	1,5,46,9
	.half	.L530-.L529
	.byte	1,5,37,9
	.half	.L531-.L530
	.byte	1,5,27,9
	.half	.L454-.L531
	.byte	3,1,1,5,26,9
	.half	.L40-.L454
	.byte	3,2,1,5,13,9
	.half	.L532-.L40
	.byte	1,5,32,7,9
	.half	.L533-.L532
	.byte	3,2,1,9
	.half	.L534-.L533
	.byte	3,1,1,9
	.half	.L535-.L534
	.byte	3,2,1,5,60,9
	.half	.L41-.L535
	.byte	3,118,1,5,53,9
	.half	.L37-.L41
	.byte	1,5,22,7,9
	.half	.L536-.L37
	.byte	3,14,1,5,9,9
	.half	.L537-.L536
	.byte	1,5,57,7,9
	.half	.L538-.L537
	.byte	3,101,1,5,20,9
	.half	.L33-.L538
	.byte	1,5,39,7,9
	.half	.L539-.L33
	.byte	1,5,47,9
	.half	.L540-.L539
	.byte	1,5,44,9
	.half	.L541-.L540
	.byte	1,5,38,7,9
	.half	.L42-.L541
	.byte	3,33,1,5,18,9
	.half	.L439-.L42
	.byte	3,1,1,5,31,9
	.half	.L458-.L439
	.byte	1,5,18,9
	.half	.L436-.L458
	.byte	3,1,1,5,50,9
	.half	.L459-.L436
	.byte	3,3,1,5,21,9
	.half	.L460-.L459
	.byte	1,5,50,9
	.half	.L542-.L460
	.byte	1,5,38,3,8,1,5,35,9
	.half	.L461-.L542
	.byte	3,120,1,5,34,9
	.half	.L543-.L461
	.byte	3,3,1,5,21,9
	.half	.L463-.L543
	.byte	1,5,38,9
	.half	.L544-.L463
	.byte	3,5,1,5,34,9
	.half	.L545-.L544
	.byte	3,123,1,5,27,9
	.half	.L464-.L545
	.byte	3,3,1,5,21,9
	.half	.L465-.L464
	.byte	1,5,27,9
	.half	.L546-.L465
	.byte	1,5,25,9
	.half	.L466-.L546
	.byte	1,5,38,9
	.half	.L547-.L466
	.byte	3,2,1,5,12,9
	.half	.L462-.L547
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L138-.L462
	.byte	0,1,1
.L521:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_ranges'
.L137:
	.word	-1,.L94,0,.L138-.L94,0,0
.L267:
	.word	-1,.L94,.L264-.L94,.L265-.L94,.L268-.L94,.L269-.L94,0,0
.L270:
	.word	-1,.L94,.L271-.L94,.L272-.L94,.L273-.L94,.L274-.L94,.L275-.L94,.L276-.L94,.L277-.L94,.L245-.L94,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_info'
.L139:
	.word	375
	.half	3
	.word	.L140
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L142,.L141
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_enableAscErrorFlags',0,1,35,6,1,1,1
	.word	.L60,.L285,.L59
	.byte	4
	.byte	'asclin',0,1,35,48
	.word	.L226,.L286
	.byte	4
	.byte	'parEnable',0,1,35,64
	.word	.L244,.L287
	.byte	4
	.byte	'rfoEnable',0,1,35,83
	.word	.L244,.L288
	.byte	5
	.word	.L60,.L285
	.byte	6
	.word	.L289,.L60,.L290
	.byte	7
	.word	.L291,.L292
	.byte	7
	.word	.L293,.L294
	.byte	8
	.word	.L295,.L60,.L290
	.byte	0,6
	.word	.L296,.L290,.L297
	.byte	7
	.word	.L298,.L299
	.byte	7
	.word	.L300,.L301
	.byte	8
	.word	.L302,.L290,.L297
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_abbrev'
.L140:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_line'
.L141:
	.word	.L549-.L548
.L548:
	.half	3
	.word	.L551-.L550
.L550:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L551:
	.byte	4,2,5,26,7,0,5,2
	.word	.L60
	.byte	3,225,13,1,5,33,9
	.half	.L552-.L60
	.byte	1,5,31,9
	.half	.L553-.L552
	.byte	1,5,26,9
	.half	.L290-.L553
	.byte	3,30,1,5,34,9
	.half	.L554-.L290
	.byte	1,5,32,9
	.half	.L555-.L554
	.byte	1,4,1,5,1,9
	.half	.L297-.L555
	.byte	3,167,114,1,7,9
	.half	.L143-.L297
	.byte	0,1,1
.L549:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_ranges'
.L142:
	.word	-1,.L60,0,.L143-.L60,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_info'
.L144:
	.word	286
	.half	3
	.word	.L145
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L147,.L146
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_enableModule',0,1,42,6,1,1,1
	.word	.L62,.L303,.L61
	.byte	4
	.byte	'asclin',0,1,42,41
	.word	.L226,.L304
	.byte	5
	.word	.L62,.L303
	.byte	6
	.byte	'psw',0,1,44,12
	.word	.L242,.L305
	.byte	7
	.word	.L306,.L307,.L308
	.byte	8
	.word	.L309,.L310
	.byte	9
	.word	.L311,.L307,.L308
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_abbrev'
.L145:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_line'
.L146:
	.word	.L557-.L556
.L556:
	.half	3
	.word	.L559-.L558
.L558:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L559:
	.byte	5,6,7,0,5,2
	.word	.L62
	.byte	3,41,1,5,50,9
	.half	.L414-.L62
	.byte	3,2,1,5,16,9
	.half	.L413-.L414
	.byte	1,5,31,9
	.half	.L416-.L413
	.byte	3,1,1,5,29,9
	.half	.L415-.L416
	.byte	3,2,1,4,2,5,18,3,192,16,1,5,24,9
	.half	.L307-.L415
	.byte	1,4,1,5,29,9
	.half	.L308-.L307
	.byte	3,192,111,1,5,1,7,9
	.half	.L148-.L308
	.byte	3,1,0,1,1
.L557:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_ranges'
.L147:
	.word	-1,.L62,0,.L148-.L62,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_info'
.L149:
	.word	233
	.half	3
	.word	.L150
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L152,.L151
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_getIndex',0,1,85,8
	.word	.L312
	.byte	1,1,1
	.word	.L66,.L313,.L65
	.byte	4
	.byte	'asclin',0,1,85,39
	.word	.L226,.L314
	.byte	5
	.word	.L66,.L313
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_abbrev'
.L150:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_line'
.L151:
	.word	.L561-.L560
.L560:
	.half	3
	.word	.L563-.L562
.L562:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L563:
	.byte	5,38,7,0,5,2
	.word	.L66
	.byte	3,216,0,1,5,48,9
	.half	.L417-.L66
	.byte	1,5,46,9
	.half	.L564-.L417
	.byte	1,5,29,9
	.half	.L418-.L564
	.byte	3,1,1,5,1,3,2,1,7,9
	.half	.L153-.L418
	.byte	0,1,1
.L561:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_ranges'
.L152:
	.word	-1,.L66,0,.L153-.L66,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_info'
.L154:
	.word	236
	.half	3
	.word	.L155
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L157,.L156
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_getSrcPointerEr',0,1,113,24
	.word	.L315
	.byte	1,1,1
	.word	.L74,.L316,.L73
	.byte	4
	.byte	'asclin',0,1,113,62
	.word	.L226,.L317
	.byte	5
	.word	.L318
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_abbrev'
.L155:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_line'
.L156:
	.word	.L566-.L565
.L565:
	.half	3
	.word	.L568-.L567
.L567:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L568:
	.byte	5,57,7,0,5,2
	.word	.L74
	.byte	3,242,0,1,5,37,9
	.half	.L569-.L74
	.byte	1,5,65,9
	.half	.L425-.L569
	.byte	1,5,1,9
	.half	.L570-.L425
	.byte	3,1,1,7,9
	.half	.L158-.L570
	.byte	0,1,1
.L566:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_ranges'
.L157:
	.word	-1,.L74,0,.L158-.L74,0,0
.L318:
	.word	-1,.L74,0,.L316-.L74,-1,.L76,0,.L223-.L76,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_info'
.L159:
	.word	236
	.half	3
	.word	.L160
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L162,.L161
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_getSrcPointerRx',0,1,119,24
	.word	.L315
	.byte	1,1,1
	.word	.L78,.L319,.L77
	.byte	4
	.byte	'asclin',0,1,119,62
	.word	.L226,.L320
	.byte	5
	.word	.L321
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_abbrev'
.L160:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_line'
.L161:
	.word	.L572-.L571
.L571:
	.half	3
	.word	.L574-.L573
.L573:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L574:
	.byte	5,57,7,0,5,2
	.word	.L78
	.byte	3,248,0,1,5,37,9
	.half	.L575-.L78
	.byte	1,5,65,9
	.half	.L426-.L575
	.byte	1,5,1,9
	.half	.L576-.L426
	.byte	3,1,1,7,9
	.half	.L163-.L576
	.byte	0,1,1
.L572:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_ranges'
.L162:
	.word	-1,.L78,0,.L163-.L78,0,0
.L321:
	.word	-1,.L78,0,.L319-.L78,-1,.L80,0,.L213-.L80,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_info'
.L164:
	.word	240
	.half	3
	.word	.L165
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L167,.L166
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_getSrcPointerTx',0,1,125,24
	.word	.L315
	.byte	1,1,1
	.word	.L82,.L322,.L81
	.byte	4
	.byte	'asclin',0,1,125,62
	.word	.L226,.L323
	.byte	5
	.word	.L82,.L322
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_abbrev'
.L165:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_line'
.L166:
	.word	.L578-.L577
.L577:
	.half	3
	.word	.L580-.L579
.L579:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L580:
	.byte	5,57,7,0,5,2
	.word	.L82
	.byte	3,254,0,1,5,37,9
	.half	.L581-.L82
	.byte	1,5,1,9
	.half	.L427-.L581
	.byte	3,1,1,7,9
	.half	.L168-.L427
	.byte	0,1,1
.L578:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_ranges'
.L167:
	.word	-1,.L82,0,.L168-.L82,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_info'
.L169:
	.word	291
	.half	3
	.word	.L170
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L172,.L171
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_read16',0,1,131,1,8
	.word	.L257
	.byte	1,1,1
	.word	.L84,.L324,.L83
	.byte	4
	.byte	'asclin',0,1,131,1,37
	.word	.L226,.L325
	.byte	4
	.byte	'data',0,1,131,1,53
	.word	.L326,.L327
	.byte	4
	.byte	'count',0,1,131,1,66
	.word	.L257,.L328
	.byte	5
	.word	.L84,.L324
	.byte	6
	.byte	'rxData',0,1,133,1,33
	.word	.L329,.L330
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_abbrev'
.L170:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_line'
.L171:
	.word	.L583-.L582
.L582:
	.half	3
	.word	.L585-.L584
.L584:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L585:
	.byte	5,79,7,0,5,2
	.word	.L84
	.byte	3,132,1,1,5,21,9
	.half	.L428-.L84
	.byte	3,2,1,5,14,9
	.half	.L22-.L428
	.byte	3,3,1,5,33,3,127,1,5,17,9
	.half	.L586-.L22
	.byte	1,5,21,9
	.half	.L21-.L586
	.byte	3,126,1,5,12,7,9
	.half	.L587-.L21
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L173-.L587
	.byte	0,1,1
.L583:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_ranges'
.L172:
	.word	-1,.L84,0,.L173-.L84,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_info'
.L174:
	.word	291
	.half	3
	.word	.L175
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L177,.L176
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_read32',0,1,145,1,8
	.word	.L257
	.byte	1,1,1
	.word	.L86,.L331,.L85
	.byte	4
	.byte	'asclin',0,1,145,1,37
	.word	.L226,.L332
	.byte	4
	.byte	'data',0,1,145,1,53
	.word	.L333,.L334
	.byte	4
	.byte	'count',0,1,145,1,66
	.word	.L257,.L335
	.byte	5
	.word	.L86,.L331
	.byte	6
	.byte	'rxData',0,1,147,1,33
	.word	.L329,.L336
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_abbrev'
.L175:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_line'
.L176:
	.word	.L589-.L588
.L588:
	.half	3
	.word	.L591-.L590
.L590:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L591:
	.byte	5,79,7,0,5,2
	.word	.L86
	.byte	3,146,1,1,5,21,9
	.half	.L429-.L86
	.byte	3,2,1,5,14,9
	.half	.L25-.L429
	.byte	3,3,1,5,25,3,127,1,5,17,9
	.half	.L592-.L25
	.byte	1,5,21,9
	.half	.L24-.L592
	.byte	3,126,1,5,12,7,9
	.half	.L593-.L24
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L178-.L593
	.byte	0,1,1
.L589:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_ranges'
.L177:
	.word	-1,.L86,0,.L178-.L86,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_info'
.L179:
	.word	290
	.half	3
	.word	.L180
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L182,.L181
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_read8',0,1,159,1,8
	.word	.L257
	.byte	1,1,1
	.word	.L88,.L337,.L87
	.byte	4
	.byte	'asclin',0,1,159,1,36
	.word	.L226,.L338
	.byte	4
	.byte	'data',0,1,159,1,51
	.word	.L339,.L340
	.byte	4
	.byte	'count',0,1,159,1,64
	.word	.L257,.L341
	.byte	5
	.word	.L88,.L337
	.byte	6
	.byte	'rxData',0,1,161,1,33
	.word	.L329,.L342
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_abbrev'
.L180:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_line'
.L181:
	.word	.L595-.L594
.L594:
	.half	3
	.word	.L597-.L596
.L596:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L597:
	.byte	5,79,7,0,5,2
	.word	.L88
	.byte	3,160,1,1,5,21,9
	.half	.L430-.L88
	.byte	3,2,1,5,14,9
	.half	.L28-.L430
	.byte	3,3,1,5,32,3,127,1,5,17,9
	.half	.L598-.L28
	.byte	1,5,21,9
	.half	.L27-.L598
	.byte	3,126,1,5,12,7,9
	.half	.L599-.L27
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L183-.L599
	.byte	0,1,1
.L595:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_ranges'
.L182:
	.word	-1,.L88,0,.L183-.L88,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_info'
.L184:
	.word	601
	.half	3
	.word	.L185
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L187,.L186
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_setBaudrateBitFields',0,1,173,1,6,1,1,1
	.word	.L90,.L343,.L89
	.byte	4
	.byte	'asclin',0,1,173,1,49
	.word	.L226,.L344
	.byte	4
	.byte	'prescaler',0,1,173,1,64
	.word	.L242,.L345
	.byte	4
	.byte	'numerator',0,1,173,1,82
	.word	.L242,.L346
	.byte	4
	.byte	'denominator',0,1,173,1,100
	.word	.L242,.L347
	.byte	4
	.byte	'oversampling',0,1,173,1,142,1
	.word	.L248,.L348
	.byte	5
	.word	.L90,.L343
	.byte	6
	.word	.L229,.L349,.L350
	.byte	7
	.word	.L231,.L351
	.byte	8
	.word	.L233,.L352
	.byte	0,6
	.word	.L229,.L353,.L354
	.byte	7
	.word	.L231,.L351
	.byte	0,6
	.word	.L355,.L356,.L357
	.byte	7
	.word	.L358,.L359
	.byte	7
	.word	.L360,.L361
	.byte	9
	.word	.L362,.L356,.L357
	.byte	0,6
	.word	.L363,.L357,.L364
	.byte	7
	.word	.L365,.L366
	.byte	7
	.word	.L367,.L368
	.byte	8
	.word	.L369,.L370
	.byte	0,6
	.word	.L371,.L364,.L372
	.byte	7
	.word	.L373,.L374
	.byte	7
	.word	.L375,.L376
	.byte	8
	.word	.L377,.L378
	.byte	0,6
	.word	.L371,.L379,.L380
	.byte	7
	.word	.L373,.L374
	.byte	7
	.word	.L375,.L376
	.byte	0,6
	.word	.L381,.L380,.L382
	.byte	7
	.word	.L383,.L384
	.byte	7
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L380,.L382
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_abbrev'
.L185:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,85,6,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_line'
.L186:
	.word	.L601-.L600
.L600:
	.half	3
	.word	.L603-.L602
.L602:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L603:
	.byte	5,6,7,0,5,2
	.word	.L90
	.byte	3,172,1,1,4,2,5,25,9
	.half	.L349-.L90
	.byte	3,161,13,1,4,1,5,6,9
	.half	.L350-.L349
	.byte	3,223,114,1,4,2,5,25,9
	.half	.L353-.L350
	.byte	3,161,13,1,4,1,5,38,9
	.half	.L354-.L353
	.byte	3,226,114,1,5,6,9
	.half	.L431-.L354
	.byte	3,125,1,5,38,3,3,1,4,2,5,21,9
	.half	.L356-.L431
	.byte	3,159,16,1,5,44,9
	.half	.L604-.L356
	.byte	1,5,32,9
	.half	.L605-.L604
	.byte	1,5,18,9
	.half	.L357-.L605
	.byte	3,110,1,9
	.half	.L364-.L357
	.byte	3,166,127,1,4,1,5,65,9
	.half	.L372-.L364
	.byte	3,204,112,1,4,2,5,31,9
	.half	.L379-.L372
	.byte	3,180,15,1,5,21,9
	.half	.L380-.L379
	.byte	3,224,0,1,5,35,9
	.half	.L434-.L380
	.byte	1,4,1,5,65,9
	.half	.L382-.L434
	.byte	3,236,111,1,5,1,7,9
	.half	.L188-.L382
	.byte	3,7,0,1,1
.L601:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_ranges'
.L187:
	.word	-1,.L90,0,.L188-.L90,0,0
.L352:
	.word	-1,.L90,.L349-.L90,.L350-.L90,.L353-.L90,.L354-.L90,0,0
.L370:
	.word	-1,.L90,.L357-.L90,.L364-.L90,-1,.L92,0,.L218-.L92,0,0
.L378:
	.word	-1,.L90,.L364-.L90,.L372-.L90,.L379-.L90,.L380-.L90,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_info'
.L189:
	.word	335
	.half	3
	.word	.L190
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L192,.L191
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_setClockSource',0,1,142,2,6,1,1,1
	.word	.L96,.L388,.L95
	.byte	4
	.byte	'asclin',0,1,142,2,43
	.word	.L226,.L389
	.byte	4
	.byte	'clockSource',0,1,142,2,73
	.word	.L254,.L390
	.byte	5
	.word	.L96,.L388
	.byte	6
	.word	.L391,.L46,.L392
	.byte	7
	.word	.L393,.L394
	.byte	8
	.word	.L395,.L46,.L392
	.byte	0,6
	.word	.L391,.L48,.L396
	.byte	7
	.word	.L393,.L394
	.byte	8
	.word	.L395,.L48,.L396
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_abbrev'
.L190:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_line'
.L191:
	.word	.L607-.L606
.L606:
	.half	3
	.word	.L609-.L608
.L608:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L609:
	.byte	5,18,7,0,5,2
	.word	.L96
	.byte	3,143,2,1,5,26,9
	.half	.L610-.L96
	.byte	1,5,5,9
	.half	.L611-.L610
	.byte	3,3,1,4,2,5,25,7,9
	.half	.L46-.L611
	.byte	3,193,12,1,4,1,5,54,9
	.half	.L392-.L46
	.byte	3,193,115,1,5,1,7,9
	.half	.L612-.L392
	.byte	3,8,1,4,2,5,25,7,9
	.half	.L48-.L612
	.byte	3,183,12,1,4,1,5,54,9
	.half	.L396-.L48
	.byte	3,198,115,1,5,1,7,9
	.half	.L613-.L396
	.byte	3,3,1,7,9
	.half	.L193-.L613
	.byte	0,1,1
.L607:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_ranges'
.L192:
	.word	-1,.L96,0,.L193-.L96,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_info'
.L194:
	.word	292
	.half	3
	.word	.L195
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L197,.L196
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_write16',0,1,160,2,8
	.word	.L257
	.byte	1,1,1
	.word	.L98,.L397,.L97
	.byte	4
	.byte	'asclin',0,1,160,2,38
	.word	.L226,.L398
	.byte	4
	.byte	'data',0,1,160,2,54
	.word	.L326,.L399
	.byte	4
	.byte	'count',0,1,160,2,67
	.word	.L257,.L400
	.byte	5
	.word	.L98,.L397
	.byte	6
	.byte	'txData',0,1,162,2,33
	.word	.L401,.L402
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_abbrev'
.L195:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_line'
.L196:
	.word	.L615-.L614
.L614:
	.half	3
	.word	.L617-.L616
.L616:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L617:
	.byte	5,79,7,0,5,2
	.word	.L98
	.byte	3,161,2,1,5,23,9
	.half	.L467-.L98
	.byte	3,2,1,5,14,9
	.half	.L50-.L467
	.byte	3,3,1,5,21,3,127,1,5,19,9
	.half	.L618-.L50
	.byte	1,5,23,9
	.half	.L49-.L618
	.byte	3,126,1,5,12,7,9
	.half	.L619-.L49
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L198-.L619
	.byte	0,1,1
.L615:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_ranges'
.L197:
	.word	-1,.L98,0,.L198-.L98,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_info'
.L199:
	.word	292
	.half	3
	.word	.L200
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L202,.L201
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_write32',0,1,174,2,8
	.word	.L257
	.byte	1,1,1
	.word	.L100,.L403,.L99
	.byte	4
	.byte	'asclin',0,1,174,2,38
	.word	.L226,.L404
	.byte	4
	.byte	'data',0,1,174,2,54
	.word	.L333,.L405
	.byte	4
	.byte	'count',0,1,174,2,67
	.word	.L257,.L406
	.byte	5
	.word	.L100,.L403
	.byte	6
	.byte	'txData',0,1,176,2,33
	.word	.L401,.L407
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_abbrev'
.L200:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_line'
.L201:
	.word	.L621-.L620
.L620:
	.half	3
	.word	.L623-.L622
.L622:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L623:
	.byte	5,79,7,0,5,2
	.word	.L100
	.byte	3,175,2,1,5,23,9
	.half	.L468-.L100
	.byte	3,2,1,5,14,9
	.half	.L53-.L468
	.byte	3,3,1,5,21,3,127,1,5,19,9
	.half	.L624-.L53
	.byte	1,5,23,9
	.half	.L52-.L624
	.byte	3,126,1,5,12,7,9
	.half	.L625-.L52
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L203-.L625
	.byte	0,1,1
.L621:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_ranges'
.L202:
	.word	-1,.L100,0,.L203-.L100,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_info'
.L204:
	.word	291
	.half	3
	.word	.L205
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L207,.L206
	.byte	2
	.word	.L105
	.byte	3
	.byte	'IfxAsclin_write8',0,1,188,2,8
	.word	.L257
	.byte	1,1,1
	.word	.L102,.L408,.L101
	.byte	4
	.byte	'asclin',0,1,188,2,37
	.word	.L226,.L409
	.byte	4
	.byte	'data',0,1,188,2,52
	.word	.L339,.L410
	.byte	4
	.byte	'count',0,1,188,2,65
	.word	.L257,.L411
	.byte	5
	.word	.L102,.L408
	.byte	6
	.byte	'txData',0,1,190,2,33
	.word	.L401,.L412
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_abbrev'
.L205:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_line'
.L206:
	.word	.L627-.L626
.L626:
	.half	3
	.word	.L629-.L628
.L628:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L629:
	.byte	5,79,7,0,5,2
	.word	.L102
	.byte	3,189,2,1,5,23,9
	.half	.L469-.L102
	.byte	3,2,1,5,14,9
	.half	.L56-.L469
	.byte	3,3,1,5,21,3,127,1,5,19,9
	.half	.L630-.L56
	.byte	1,5,23,9
	.half	.L55-.L630
	.byte	3,126,1,5,12,7,9
	.half	.L631-.L55
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L208-.L631
	.byte	0,1,1
.L627:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_ranges'
.L207:
	.word	-1,.L102,0,.L208-.L102,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L209:
	.word	190
	.half	3
	.word	.L210
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L212,.L211
	.byte	2
	.word	.L105
	.byte	3
	.byte	'.cocofun_3',0,1,119,24,1
	.word	.L80,.L213,.L79
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L210:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L211:
	.word	.L633-.L632
.L632:
	.half	3
	.word	.L635-.L634
.L634:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L635:
	.byte	5,37,7,0,5,2
	.word	.L80
	.byte	3,248,0,1,9
	.half	.L213-.L80
	.byte	0,1,1,5,37,0,5,2
	.word	.L80
	.byte	3,248,0,1,9
	.half	.L636-.L80
	.byte	3,6,1,9
	.half	.L637-.L636
	.byte	3,122,1,7,9
	.half	.L213-.L637
	.byte	0,1,1
.L633:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L212:
	.word	-1,.L80,0,.L213-.L80,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L214:
	.word	191
	.half	3
	.word	.L215
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L217,.L216
	.byte	2
	.word	.L105
	.byte	3
	.byte	'.cocofun_4',0,1,173,1,6,1
	.word	.L92,.L218,.L91
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L215:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L216:
	.word	.L639-.L638
.L638:
	.half	3
	.word	.L641-.L640
.L640:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L641:
	.byte	4,2,5,18,7,0,5,2
	.word	.L92
	.byte	3,188,17,1,5,29,9
	.half	.L433-.L92
	.byte	1,9
	.half	.L218-.L433
	.byte	0,1,1,5,18,0,5,2
	.word	.L92
	.byte	3,252,1,1,5,31,9
	.half	.L433-.L92
	.byte	1,4,2,5,29,9
	.half	.L432-.L433
	.byte	3,192,15,1,7,9
	.half	.L218-.L432
	.byte	0,1,1
.L639:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L217:
	.word	-1,.L92,0,.L218-.L92,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L219:
	.word	190
	.half	3
	.word	.L220
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L222,.L221
	.byte	2
	.word	.L105
	.byte	3
	.byte	'.cocofun_5',0,1,113,24,1
	.word	.L76,.L223,.L75
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L220:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L221:
	.word	.L643-.L642
.L642:
	.half	3
	.word	.L645-.L644
.L644:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L645:
	.byte	5,37,7,0,5,2
	.word	.L76
	.byte	3,242,0,1,9
	.half	.L223-.L76
	.byte	0,1,1,5,37,0,5,2
	.word	.L76
	.byte	3,248,0,1,9
	.half	.L646-.L76
	.byte	3,122,1,7,9
	.half	.L223-.L646
	.byte	0,1,1,5,37,0,5,2
	.word	.L76
	.byte	3,254,0,1,9
	.half	.L646-.L76
	.byte	3,116,1,7,9
	.half	.L223-.L646
	.byte	0,1,1
.L643:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L222:
	.word	-1,.L76,0,.L223-.L76,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L79:
	.word	-1,.L80,0,.L213-.L80
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L91:
	.word	-1,.L92,0,.L218-.L92
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L75:
	.word	-1,.L76,0,.L223-.L76
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_loc'
.L59:
	.word	-1,.L60,0,.L285-.L60
	.half	2
	.byte	138,0
	.word	0,0
.L286:
	.word	-1,.L60,0,.L285-.L60
	.half	1
	.byte	100
	.word	0,0
.L292:
	.word	0,0
.L299:
	.word	0,0
.L294:
	.word	0,0
.L301:
	.word	0,0
.L287:
	.word	-1,.L60,0,.L285-.L60
	.half	1
	.byte	84
	.word	0,0
.L288:
	.word	-1,.L60,0,.L285-.L60
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_loc'
.L61:
	.word	-1,.L62,0,.L303-.L62
	.half	2
	.byte	138,0
	.word	0,0
.L304:
	.word	-1,.L62,0,.L413-.L62
	.half	1
	.byte	100
	.word	.L414-.L62,.L303-.L62
	.half	1
	.byte	111
	.word	0,0
.L310:
	.word	0,0
.L305:
	.word	-1,.L62,.L413-.L62,.L415-.L62
	.half	1
	.byte	82
	.word	.L416-.L62,.L303-.L62
	.half	1
	.byte	95
	.word	.L307-.L62,.L303-.L62
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_loc'
.L63:
	.word	-1,.L64,0,.L225-.L64
	.half	2
	.byte	138,0
	.word	0,0
.L227:
	.word	-1,.L64,0,.L225-.L64
	.half	1
	.byte	100
	.word	0,0
.L232:
	.word	0,0
.L228:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_loc'
.L65:
	.word	-1,.L66,0,.L313-.L66
	.half	2
	.byte	138,0
	.word	0,0
.L314:
	.word	-1,.L66,0,.L313-.L66
	.half	1
	.byte	100
	.word	.L417-.L66,.L418-.L66
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_loc'
.L67:
	.word	-1,.L68,0,.L234-.L68
	.half	2
	.byte	138,0
	.word	0,0
.L235:
	.word	-1,.L68,0,.L419-.L68
	.half	1
	.byte	100
	.word	.L420-.L68,.L234-.L68
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_loc'
.L69:
	.word	-1,.L70,0,.L236-.L70
	.half	2
	.byte	138,0
	.word	0,0
.L237:
	.word	-1,.L70,0,.L421-.L70
	.half	1
	.byte	100
	.word	.L422-.L70,.L236-.L70
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_loc'
.L71:
	.word	-1,.L72,0,.L238-.L72
	.half	2
	.byte	138,0
	.word	0,0
.L239:
	.word	-1,.L72,0,.L423-.L72
	.half	1
	.byte	100
	.word	.L424-.L72,.L238-.L72
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_loc'
.L73:
	.word	-1,.L74,0,.L316-.L74
	.half	2
	.byte	138,0
	.word	0,0
.L317:
	.word	-1,.L74,0,.L425-.L74
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_loc'
.L77:
	.word	-1,.L78,0,.L319-.L78
	.half	2
	.byte	138,0
	.word	0,0
.L320:
	.word	-1,.L78,0,.L426-.L78
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_loc'
.L81:
	.word	-1,.L82,0,.L322-.L82
	.half	2
	.byte	138,0
	.word	0,0
.L323:
	.word	-1,.L82,0,.L427-.L82
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_loc'
.L83:
	.word	-1,.L84,0,.L324-.L84
	.half	2
	.byte	138,0
	.word	0,0
.L325:
	.word	-1,.L84,0,.L324-.L84
	.half	1
	.byte	100
	.word	0,0
.L328:
	.word	-1,.L84,0,.L324-.L84
	.half	1
	.byte	84
	.word	0,0
.L327:
	.word	-1,.L84,0,.L324-.L84
	.half	1
	.byte	101
	.word	0,0
.L330:
	.word	-1,.L84,.L428-.L84,.L324-.L84
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_loc'
.L85:
	.word	-1,.L86,0,.L331-.L86
	.half	2
	.byte	138,0
	.word	0,0
.L332:
	.word	-1,.L86,0,.L331-.L86
	.half	1
	.byte	100
	.word	0,0
.L335:
	.word	-1,.L86,0,.L331-.L86
	.half	1
	.byte	84
	.word	0,0
.L334:
	.word	-1,.L86,0,.L331-.L86
	.half	1
	.byte	101
	.word	0,0
.L336:
	.word	-1,.L86,.L429-.L86,.L331-.L86
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_loc'
.L87:
	.word	-1,.L88,0,.L337-.L88
	.half	2
	.byte	138,0
	.word	0,0
.L338:
	.word	-1,.L88,0,.L337-.L88
	.half	1
	.byte	100
	.word	0,0
.L341:
	.word	-1,.L88,0,.L337-.L88
	.half	1
	.byte	84
	.word	0,0
.L340:
	.word	-1,.L88,0,.L337-.L88
	.half	1
	.byte	101
	.word	0,0
.L342:
	.word	-1,.L88,.L430-.L88,.L337-.L88
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_loc'
.L103:
	.word	-1,.L104,0,.L240-.L104
	.half	2
	.byte	138,0
	.word	0,0
.L241:
	.word	-1,.L104,0,.L470-.L104
	.half	1
	.byte	100
	.word	.L471-.L104,.L240-.L104
	.half	1
	.byte	111
	.word	0,0
.L243:
	.word	-1,.L104,.L470-.L104,.L472-.L104
	.half	1
	.byte	82
	.word	.L473-.L104,.L240-.L104
	.half	1
	.byte	88
	.word	.L474-.L104,.L58-.L104
	.half	1
	.byte	84
	.word	.L475-.L104,.L240-.L104
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_loc'
.L89:
	.word	-1,.L90,0,.L343-.L90
	.half	2
	.byte	138,0
	.word	0,0
.L344:
	.word	-1,.L90,0,.L356-.L90
	.half	1
	.byte	100
	.word	.L349-.L90,.L357-.L90
	.half	1
	.byte	111
	.word	.L92-.L90,.L432-.L90
	.half	1
	.byte	111
	.word	.L364-.L90,.L343-.L90
	.half	1
	.byte	111
	.word	.L379-.L90,.L343-.L90
	.half	1
	.byte	100
	.word	0,0
.L351:
	.word	0,0
.L374:
	.word	0,0
.L366:
	.word	0,0
.L384:
	.word	0,0
.L359:
	.word	0,0
.L347:
	.word	-1,.L90,0,.L356-.L90
	.half	1
	.byte	86
	.word	.L379-.L90,.L380-.L90
	.half	1
	.byte	90
	.word	0,0
.L376:
	.word	0,0
.L346:
	.word	-1,.L90,0,.L356-.L90
	.half	1
	.byte	85
	.word	.L433-.L90,.L432-.L90
	.half	1
	.byte	89
	.word	0,0
.L368:
	.word	0,0
.L348:
	.word	-1,.L90,0,.L356-.L90
	.half	1
	.byte	87
	.word	.L434-.L90,.L382-.L90
	.half	1
	.byte	91
	.word	0,0
.L386:
	.word	0,0
.L345:
	.word	-1,.L90,0,.L431-.L90
	.half	1
	.byte	84
	.word	0,0
.L361:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_loc'
.L93:
	.word	-1,.L94,0,.L268-.L94
	.half	2
	.byte	138,0
	.word	.L268-.L94,.L245-.L94
	.half	2
	.byte	138,24
	.word	.L245-.L94,.L245-.L94
	.half	2
	.byte	138,0
	.word	0,0
.L282:
	.word	-1,.L94,.L38-.L94,.L33-.L94
	.half	1
	.byte	92
	.word	0,0
.L281:
	.word	-1,.L94,.L451-.L94,.L35-.L94
	.half	1
	.byte	86
	.word	.L453-.L94,.L33-.L94
	.half	1
	.byte	86
	.word	0,0
.L283:
	.word	-1,.L94,.L276-.L94,.L439-.L94
	.half	1
	.byte	83
	.word	0,0
.L246:
	.word	-1,.L94,0,.L435-.L94
	.half	1
	.byte	100
	.word	.L264-.L94,.L436-.L94
	.half	1
	.byte	111
	.word	.L442-.L94,.L439-.L94
	.half	1
	.byte	100
	.word	.L92-.L94,.L218-.L94
	.half	1
	.byte	111
	.word	.L459-.L94,.L245-.L94
	.half	1
	.byte	111
	.word	.L461-.L94,.L462-.L94
	.half	1
	.byte	100
	.word	0,0
.L266:
	.word	0,0
.L247:
	.word	-1,.L94,0,.L435-.L94
	.half	1
	.byte	84
	.word	.L437-.L94,.L438-.L94
	.half	1
	.byte	90
	.word	0,0
.L284:
	.word	0,0
.L258:
	.word	-1,.L94,.L445-.L94,.L439-.L94
	.half	1
	.byte	81
	.word	0,0
.L260:
	.word	-1,.L94,.L446-.L94,.L34-.L94
	.half	1
	.byte	88
	.word	.L458-.L94,.L436-.L94
	.half	1
	.byte	88
	.word	0,0
.L262:
	.word	-1,.L94,.L447-.L94,.L448-.L94
	.half	5
	.byte	144,32,157,32,0
	.word	.L454-.L94,.L455-.L94
	.half	1
	.byte	95
	.word	0,0
.L256:
	.word	-1,.L94,.L277-.L94,.L442-.L94
	.half	1
	.byte	84
	.word	0,0
.L263:
	.word	-1,.L94,.L435-.L94,.L439-.L94
	.half	1
	.byte	82
	.word	0,0
.L279:
	.word	-1,.L94,.L443-.L94,.L444-.L94
	.half	1
	.byte	95
	.word	.L443-.L94,.L436-.L94
	.half	2
	.byte	145,104
	.word	.L448-.L94,.L34-.L94
	.half	5
	.byte	144,32,157,32,0
	.word	.L456-.L94,.L457-.L94
	.half	1
	.byte	95
	.word	.L92-.L94,.L218-.L94
	.half	2
	.byte	145,104
	.word	.L459-.L94,.L245-.L94
	.half	2
	.byte	145,104
	.word	0,0
.L253:
	.word	-1,.L94,0,.L435-.L94
	.half	1
	.byte	87
	.word	.L269-.L94,.L436-.L94
	.half	2
	.byte	145,116
	.word	.L92-.L94,.L218-.L94
	.half	2
	.byte	145,116
	.word	.L459-.L94,.L245-.L94
	.half	2
	.byte	145,116
	.word	.L465-.L94,.L466-.L94
	.half	1
	.byte	95
	.word	0,0
.L259:
	.word	-1,.L94,.L450-.L94,.L436-.L94
	.half	1
	.byte	93
	.word	.L92-.L94,.L218-.L94
	.half	1
	.byte	93
	.word	.L459-.L94,.L245-.L94
	.half	1
	.byte	93
	.word	0,0
.L261:
	.word	-1,.L94,.L274-.L94,.L34-.L94
	.half	1
	.byte	89
	.word	.L452-.L94,.L453-.L94
	.half	1
	.byte	89
	.word	.L433-.L94,.L433-.L94
	.half	1
	.byte	89
	.word	0,0
.L249:
	.word	-1,.L94,0,.L435-.L94
	.half	1
	.byte	85
	.word	.L435-.L94,.L440-.L94
	.half	1
	.byte	88
	.word	.L441-.L94,.L271-.L94
	.half	1
	.byte	95
	.word	.L441-.L94,.L436-.L94
	.half	2
	.byte	145,108
	.word	.L273-.L94,.L275-.L94
	.half	1
	.byte	95
	.word	.L92-.L94,.L218-.L94
	.half	2
	.byte	145,108
	.word	.L459-.L94,.L245-.L94
	.half	2
	.byte	145,108
	.word	.L460-.L94,.L461-.L94
	.half	1
	.byte	95
	.word	0,0
.L278:
	.word	-1,.L94,.L449-.L94,.L436-.L94
	.half	1
	.byte	91
	.word	.L92-.L94,.L218-.L94
	.half	1
	.byte	91
	.word	.L459-.L94,.L245-.L94
	.half	1
	.byte	91
	.word	0,0
.L251:
	.word	-1,.L94,0,.L435-.L94
	.half	1
	.byte	86
	.word	.L441-.L94,.L271-.L94
	.half	1
	.byte	89
	.word	.L271-.L94,.L436-.L94
	.half	2
	.byte	145,112
	.word	.L271-.L94,.L273-.L94
	.half	1
	.byte	95
	.word	.L92-.L94,.L218-.L94
	.half	2
	.byte	145,112
	.word	.L459-.L94,.L245-.L94
	.half	2
	.byte	145,112
	.word	.L463-.L94,.L464-.L94
	.half	1
	.byte	95
	.word	0,0
.L255:
	.word	0,0
.L280:
	.word	-1,.L94,.L272-.L94,.L439-.L94
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_loc'
.L95:
	.word	-1,.L96,0,.L388-.L96
	.half	2
	.byte	138,0
	.word	0,0
.L389:
	.word	-1,.L96,0,.L388-.L96
	.half	1
	.byte	100
	.word	0,0
.L394:
	.word	0,0
.L390:
	.word	-1,.L96,0,.L388-.L96
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_loc'
.L97:
	.word	-1,.L98,0,.L397-.L98
	.half	2
	.byte	138,0
	.word	0,0
.L398:
	.word	-1,.L98,0,.L397-.L98
	.half	1
	.byte	100
	.word	0,0
.L400:
	.word	-1,.L98,0,.L397-.L98
	.half	1
	.byte	84
	.word	0,0
.L399:
	.word	-1,.L98,0,.L397-.L98
	.half	1
	.byte	101
	.word	0,0
.L402:
	.word	-1,.L98,.L467-.L98,.L397-.L98
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_loc'
.L99:
	.word	-1,.L100,0,.L403-.L100
	.half	2
	.byte	138,0
	.word	0,0
.L404:
	.word	-1,.L100,0,.L403-.L100
	.half	1
	.byte	100
	.word	0,0
.L406:
	.word	-1,.L100,0,.L403-.L100
	.half	1
	.byte	84
	.word	0,0
.L405:
	.word	-1,.L100,0,.L403-.L100
	.half	1
	.byte	101
	.word	0,0
.L407:
	.word	-1,.L100,.L468-.L100,.L403-.L100
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_loc'
.L101:
	.word	-1,.L102,0,.L408-.L102
	.half	2
	.byte	138,0
	.word	0,0
.L409:
	.word	-1,.L102,0,.L408-.L102
	.half	1
	.byte	100
	.word	0,0
.L411:
	.word	-1,.L102,0,.L408-.L102
	.half	1
	.byte	84
	.word	0,0
.L410:
	.word	-1,.L102,0,.L408-.L102
	.half	1
	.byte	101
	.word	0,0
.L412:
	.word	-1,.L102,.L469-.L102,.L408-.L102
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L647:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_frame'
	.word	24
	.word	.L647,.L60,.L285-.L60
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L647,.L62,.L303-.L62
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L647,.L64,.L225-.L64
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_frame'
	.word	24
	.word	.L647,.L66,.L313-.L66
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L647,.L68,.L234-.L68
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L647,.L70,.L236-.L70
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L647,.L72,.L238-.L72
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_frame'
	.word	12
	.word	.L647,.L74,.L316-.L74
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_frame'
	.word	12
	.word	.L647,.L78,.L319-.L78
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_frame'
	.word	12
	.word	.L647,.L82,.L322-.L82
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_frame'
	.word	20
	.word	.L647,.L84,.L324-.L84
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_frame'
	.word	20
	.word	.L647,.L86,.L331-.L86
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_frame'
	.word	20
	.word	.L647,.L88,.L337-.L88
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_frame'
	.word	12
	.word	.L647,.L90,.L343-.L90
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_frame'
	.word	36
	.word	.L647,.L94,.L245-.L94
	.byte	4
	.word	(.L268-.L94)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L245-.L268)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_frame'
	.word	24
	.word	.L647,.L96,.L388-.L96
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_frame'
	.word	20
	.word	.L647,.L98,.L397-.L98
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_frame'
	.word	20
	.word	.L647,.L100,.L403-.L100
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_frame'
	.word	20
	.word	.L647,.L102,.L408-.L102
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L647,.L104,.L240-.L104
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L648:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L648,.L76,.L223-.L76
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L648,.L80,.L213-.L80
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L648,.L92,.L218-.L92
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
