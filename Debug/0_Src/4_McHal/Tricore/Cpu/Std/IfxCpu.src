	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Cpu\\Std\\.IfxCpu.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc27xc -D__CPU_TC27XC__ --core=tc1.6.x --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\2_CDrv\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.src ..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c'

	
$TC16X
	.sdecl	'.zrodata.IfxCpu..1.cnt',data,rom
	.sect	'.zrodata.IfxCpu..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	-268214060
	.sdecl	'.zrodata.IfxCpu..2.cnt',data,rom
	.sect	'.zrodata.IfxCpu..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	279470273
	
	.sdecl	'.text.IfxCpu.IfxCpu_acquireMutex',code,cluster('IfxCpu_acquireMutex')
	.sect	'.text.IfxCpu.IfxCpu_acquireMutex'
	.align	2
	
	.global	IfxCpu_acquireMutex

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     2   * \file IfxCpu.c
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     4   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     5   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     7   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    10   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    15   * products.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    22   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    23   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    24   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    25  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    26  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    27  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    28  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    29  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    30  #include "IfxCpu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    31  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    32  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    33  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    34  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    35  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    36  boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock)
; Function IfxCpu_acquireMutex
.L47:
IfxCpu_acquireMutex:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    37  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    38      boolean         retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    39      volatile uint32 spinLockVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    40  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    41      retVal      = FALSE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    42  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    43      spinLockVal = 1UL;
	mov	d15,#1
	sub.a	a10,#8
.L225:
	st.w	[a10],d15
.L326:
	mov	d2,#0
.L226:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    44      spinLockVal =
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    45          (uint32)__cmpAndSwap(((unsigned int *)lock), spinLockVal, 0);
	ld.w	d0,[a10]
	mov	d1,d2
	cmpswap.w	[a4]0,e0
.L327:
	st.w	[a10],d0
.L328:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    46  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    47      /* Check if the SpinLock WAS set before the attempt to acquire spinlock */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    48      if (spinLockVal == 0)
	ld.w	d15,[a10]
.L329:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    49      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    50          retVal = TRUE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    51      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    52  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    53      return retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    54  }
	cmovn	d2,d15,#1
	ret
.L191:
	
__IfxCpu_acquireMutex_function_end:
	.size	IfxCpu_acquireMutex,__IfxCpu_acquireMutex_function_end-IfxCpu_acquireMutex
.L108:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getAddress',code,cluster('IfxCpu_getAddress')
	.sect	'.text.IfxCpu.IfxCpu_getAddress'
	.align	2
	
	.global	IfxCpu_getAddress

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    55  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    56  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    57  Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; Function IfxCpu_getAddress
.L49:
IfxCpu_getAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    58  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    59      Ifx_CPU *module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    60  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    61      if (cpu < IfxCpu_ResourceCpu_none)
	jge.u	d4,#3,.L4
.L278:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    62      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    63          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
	movh.a	a15,#@his(IfxCpu_cfg_indexMap)
	lea	a15,[a15]@los(IfxCpu_cfg_indexMap)
.L279:
	addsc.a	a15,a15,d4,#3
.L280:
	ld.a	a2,[a15]
.L227:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    64      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    65      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    66      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    67          module = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    68      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    69  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    70      return module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    71  }
	ret
.L4:
	mov.a	a2,#0
.L228:
	ret
.L135:
	
__IfxCpu_getAddress_function_end:
	.size	IfxCpu_getAddress,__IfxCpu_getAddress_function_end-IfxCpu_getAddress
.L78:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getCoreMode',code,cluster('IfxCpu_getCoreMode')
	.sect	'.text.IfxCpu.IfxCpu_getCoreMode'
	.align	2
	
	.global	IfxCpu_getCoreMode

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    72  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    73  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    74  IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu)
; Function IfxCpu_getCoreMode
.L51:
IfxCpu_getCoreMode:	.type	func
	mov.aa	a15,a4
.L230:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    75  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    76      IfxCpu_CoreMode    cpuMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    77      Ifx_CPU_DBGSR      dbgsr;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    78      IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
	call	IfxCpu_getIndex
.L229:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    79  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    80      cpuMode = IfxCpu_CoreMode_unknown;
	mov	d0,#5
.L147:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L232:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L148:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    81  cpu as the host for this call */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    82      if (IfxCpu_getCoreIndex() != index)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    83      {                           /*status request is for other cpu than the host */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    84          dbgsr = cpu->DBGSR;
	jeq	d15,d2,.L7
.L285:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    85      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    86      else
	movh.a	a3,#1
	add.a	a3,a15
	ld.w	d15,[a3]-768
.L233:
	j	.L8
.L7:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    87      {                           /*status request is for same cpu as the host */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    88          dbgsr.U = __mfcr(CPU_DBGSR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    89      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    90  
	mfcr	d15,#64768
.L8:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    91      /*Check if the requested CPU is in DBG HALT mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    92      if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_halt)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    93      {                           /*CPU is in DBG HALT mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    94          cpuMode = IfxCpu_CoreMode_halt;
	extr.u	d15,d15,#1,#2
.L234:
	jne	d15,#1,.L9
.L286:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    95      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    96      else
	mov	d0,#0
	j	.L10
.L9:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    97      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    98          if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_run)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    99          {                       /*CPU is in DBG RUNNING mode now check PMCSR status */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   100              Ifx_SCU_PMCSR *pmcsr_val;
	jne	d15,#0,.L11
.L152:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   101  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   102              pmcsr_val = (Ifx_SCU_PMCSR *)&MODULE_SCU.PMCSR[index];
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   103  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   104              if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
	ld.w	d15,.1.cnt
	mov.a	a15,d15
.L231:
	addsc.a	a15,a15,d2,#2
.L235:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   105              {                   /*Cpu is in normal run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   106                  cpuMode = IfxCpu_CoreMode_run;
	ld.bu	d15,[a15]1
	and	d15,#7
.L287:
	jne	d15,#1,.L12
.L288:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   107              }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   108              else
	mov	d0,#1
	j	.L13
.L12:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   109              {                   /*Cpu is not in run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   110                  if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   111                  {               /*Cpu is in idle mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   112                      cpuMode = IfxCpu_CoreMode_idle;
	jne	d15,#3,.L14
.L289:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   113                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   114              }
	mov	d0,#2
.L11:
.L14:
.L13:
.L10:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   115          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   116          else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   117          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   118              cpuMode = IfxCpu_CoreMode_unknown;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   119          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   120      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   121  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   122      return cpuMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   123  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   124  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   125  
	mov	d2,d0
	ret
.L140:
	
__IfxCpu_getCoreMode_function_end:
	.size	IfxCpu_getCoreMode,__IfxCpu_getCoreMode_function_end-IfxCpu_getCoreMode
.L83:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getIndex',code,cluster('IfxCpu_getIndex')
	.sect	'.text.IfxCpu.IfxCpu_getIndex'
	.align	2
	
	.global	IfxCpu_getIndex

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   126  IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   127  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   128      IfxCpu_ResourceCpu result;
; Function IfxCpu_getIndex
.L53:
IfxCpu_getIndex:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   129      uint32             index;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   130      result = IfxCpu_ResourceCpu_none;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   131  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   132      for (index = 0; index < IFXCPU_NUM_MODULES; index++)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   133      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   134          if (IfxCpu_cfg_indexMap[index].module == cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   135          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   136              result = (IfxCpu_ResourceCpu)IfxCpu_cfg_indexMap[index].index;
	mov	d2,#3
	movh.a	a15,#@his(IfxCpu_cfg_indexMap)
.L236:
	lea	a15,[a15]@los(IfxCpu_cfg_indexMap)
.L294:
	mov.a	a2,#2
.L17:
	ld.a	a5,[a15]
.L295:
	jne.a	a5,a4,.L18
.L296:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   137              break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   138          }
	ld.w	d15,[a15]4
.L297:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   139      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   140  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   141      return result;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   142  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   143  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   144  
	extr.u	d2,d15,#0,#8
	ret
.L18:
	lea	a15,[a15]8
	loop	a2,.L17
.L298:
	ret
.L155:
	
__IfxCpu_getIndex_function_end:
	.size	IfxCpu_getIndex,__IfxCpu_getIndex_function_end-IfxCpu_getIndex
.L88:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getRandomValue',code,cluster('IfxCpu_getRandomValue')
	.sect	'.text.IfxCpu.IfxCpu_getRandomValue'
	.align	2
	
	.global	IfxCpu_getRandomValue

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   145  uint32 IfxCpu_getRandomValue(uint32 *seed)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   146  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   147      /*************************************************************************
; Function IfxCpu_getRandomValue
.L55:
IfxCpu_getRandomValue:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   148       * the choice of a and m is important for a long period of the LCG
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   149       * with a =  279470273 and
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   150       *       m = 4294967291
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   151       * a maximum period of 2^32-5 is given
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   152       * values for a:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   153       * 0x5EB0A82F = 1588635695
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   154       * 0x48E7211F = 1223106847
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   155       * 0x10a860c1 =  279470273
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   156       ***************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   157      uint32 x = *seed;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   158  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   159      /* a seed of 0 is not allowed, and therefore will be changed to a valid value */
	ld.w	d0,[a4]
.L213:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   160      if (x == 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   161      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   162          x = 42;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   163      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   164  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   165      uint32 a = 0x10a860c1;  // 279470273
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   166      uint32 m = 0xfffffffb;  // 4294967291
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   167      uint32 result;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   168  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   169      //__asm(a,m,x,tmp1,tmp2              );
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   170      //EhEl = a * x;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   171      //result = e14 %  m;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   172      // %0 result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   173      // %1 a
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   174      // %2 x
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   175      // %3 m
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   176  /* *INDENT-OFF* */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   177  #ifdef __GNUC__
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   178       __asm("      mul.u     %%e14,%1,%2       # d15 = Eh; d14 = El    \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   179           "        mov       %%d12,%%d14       #   e12 = El            \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   180           "        mov       %%d13, 0          #                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   181           "        madd.u    %%e14,%%e12,%%d15, 5 # e14 = El + 5 * d15    \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   182           " cmp_m: jge.u     %%d14,%3,sub_m    #                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   183           "        jz        %%d15,done        #                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   184           " sub_m: subx      %%d14,%%d14,%3    #  e12=e12-m            \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   185           "        subc      %%d15,%%d15,%%d13 # d13=d13-0             \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   186           "        loopu     cmp_m             #                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   187           " done:  mov       %0,%%d14          #                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   188           : "=d"(result) : "d"(a), "d"(x), "d"(m) : "d12","d13","d14","d15");
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   189  #elif __TASKING__
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   190       __asm("      mul.u     e14,%1,%2      ; d15 = Eh; d14 = El    \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   191           "        mov       d12,d14        ;   e12 = El            \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   192           "        mov       d13,#0         ;                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   193           "        madd.u    e14,e12,d15,#5 ; e14 = El + 5 * d15    \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   194           " cmp_m: jge.u     d14,%3,sub_m   ;                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   195           "        jz        d15,done       ;                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   196           " sub_m: subx      d14,d14,%3     ;  e12=e12-m            \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   197           "        subc      d15,d15,d13    ; d13=d13-0             \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   198           "        loopu     cmp_m          ;                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   199           " done:  mov       %0,d14         ;                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   200           : "=d"(result) : "d"(a), "d"(x), "d"(m) : "e14","e12");
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   201  #else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   202       asm("        mul.u     %%e14,%1,%2       # d15 = Eh; d14 = El    \n"
	mov	d2,#-5
	ld.w	d1,.2.cnt
.L214:
	sel	d0,d0,d0,#42
.L215:
	
	      mul.u     e14,d1,d0      ; d15 = Eh; d14 = El    
        mov       d12,d14        ;   e12 = El            
        mov       d13,#0         ;                       
        madd.u    e14,e12,d15,#5 ; e14 = El + 5 * d15    
 cmp_m: jge.u     d14,d2,sub_m   ;                       
        jz        d15,done       ;                       
 sub_m: subx      d14,d14,d2     ;  e12=e12-m            
        subc      d15,d15,d13    ; d13=d13-0             
        loopu     cmp_m          ;                       
 done:  mov       d2,d14         ;                       

.L237:
	
.L353:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   203           "        mov       %%d12,%%d14       #   e12 = El            \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   204           "        mov       %%d13, 0          #                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   205           "        madd.u    %%e14,%%e12,%%d15, 5 # e14 = El + 5 * d15 \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   206           " .cmp_m:                                                      \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   207           "        jge.u     %%d14,%3,.sub_m                             \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   208           "        jz        %%d15,.done        #                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   209           " .sub_m:  \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   210           "        subx      %%d14,%%d14,%3    #  e12=e12-m            \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   211           "        subc      %%d15,%%d15,%%d13 # d13=d13-0             \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   212           "        loopu     .cmp_m             #                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   213           " .done:  \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   214           "        mov       %0,%%d14          #                       \n"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   215           : "=r"(result) : "r"(a), "r"(x), "r"(m));
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   216  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   217  /* *INDENT-ON* */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   218      * seed = result; // to simplify seed passing
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   219  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   220      return result;
	st.w	[a4],d2
.L354:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   221  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   222  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   223  
	ret
.L208:
	
__IfxCpu_getRandomValue_function_end:
	.size	IfxCpu_getRandomValue,__IfxCpu_getRandomValue_function_end-IfxCpu_getRandomValue
.L128:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getRandomValueWithinRange',code,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.text.IfxCpu.IfxCpu_getRandomValueWithinRange'
	.align	2
	
	.global	IfxCpu_getRandomValueWithinRange

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   224  uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   225  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   226      uint32 new_value = IfxCpu_getRandomValue(seed);
; Function IfxCpu_getRandomValueWithinRange
.L57:
IfxCpu_getRandomValueWithinRange:	.type	func
	mov	d8,d4
.L239:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   227  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   228      /* swap min/max if required */
	mov	d15,d5
	call	IfxCpu_getRandomValue
.L238:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   229      if (min > max)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   230      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   231          unsigned swap = max;
	jge.u	d15,d8,.L23
.L222:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   232          max = min;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   233          min = swap;
	mov	d0,d15
.L241:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   234      }
	mov	d15,d8
.L359:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   235  
	mov	d8,d0
.L23:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   236      /* special case */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   237      if ((min == 0) && (max == 0xffffffff))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   238      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   239          return new_value;
	jne	d8,#0,.L24
.L360:
	jeq	d15,#-1,.L26
.L24:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   240      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   241  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   242      /* return value within range */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   243      return (new_value % (max - min + 1)) + min;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   244  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   245  
	sub	d15,d8
.L240:
	add	d15,#1
.L361:
	div.u	e0,d2,d15
.L362:
	add	d2,d1,d8

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   246  
.L26:
	ret
.L217:
	
__IfxCpu_getRandomValueWithinRange_function_end:
	.size	IfxCpu_getRandomValueWithinRange,__IfxCpu_getRandomValueWithinRange_function_end-IfxCpu_getRandomValueWithinRange
.L133:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_releaseMutex',code,cluster('IfxCpu_releaseMutex')
	.sect	'.text.IfxCpu.IfxCpu_releaseMutex'
	.align	2
	
	.global	IfxCpu_releaseMutex

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   247  void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   248  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   249      /*Reset the SpinLock*/
; Function IfxCpu_releaseMutex
.L59:
IfxCpu_releaseMutex:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   250      *lock = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   251  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   252  
	mov	d15,#0
	st.w	[a4],d15
.L334:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   253  
	ret
.L197:
	
__IfxCpu_releaseMutex_function_end:
	.size	IfxCpu_releaseMutex,__IfxCpu_releaseMutex_function_end-IfxCpu_releaseMutex
.L113:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_resetSpinLock',code,cluster('IfxCpu_resetSpinLock')
	.sect	'.text.IfxCpu.IfxCpu_resetSpinLock'
	.align	2
	
	.global	IfxCpu_resetSpinLock

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   254  void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   255  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   256      /*Reset the SpinLock*/
; Function IfxCpu_resetSpinLock
.L61:
IfxCpu_resetSpinLock:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   257      *lock = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   258  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   259  
	mov	d15,#0
	st.w	[a4],d15
.L339:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   260  
	ret
.L199:
	
__IfxCpu_resetSpinLock_function_end:
	.size	IfxCpu_resetSpinLock,__IfxCpu_resetSpinLock_function_end-IfxCpu_resetSpinLock
.L118:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_setCoreMode',code,cluster('IfxCpu_setCoreMode')
	.sect	'.text.IfxCpu.IfxCpu_setCoreMode'
	.align	2
	
	.global	IfxCpu_setCoreMode

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   261  boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   262  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   263      // this switch is only temporary required
; Function IfxCpu_setCoreMode
.L63:
IfxCpu_setCoreMode:	.type	func
	mov.aa	a15,a4
.L243:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   264      // once the IfxCan driver is generated via lldgen, we will vary the code without #ifdef
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   265  #ifdef IFX_TC27x
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   266  /* FIXME Copied from old TC27xA code, check that this is up to date code */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   267      IfxCpu_CoreMode     cpuMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   268      boolean             RetVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   269      IfxScu_PMCSR_REQSLP modeSet;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   271      RetVal  = TRUE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   272  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   273      modeSet = IfxScu_PMCSR_REQSLP_Idle;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   274  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   275      /* Check the mode the CPU is in */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   276      cpuMode = IfxCpu_getCoreMode(cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   277  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   278      /* if requested mode is same as current mode nothing to do */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   279      if (cpuMode != mode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   280      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   281          /* transition from halt to Run */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   282          if (IfxCpu_CoreMode_halt == cpuMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   283          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   284              if (IfxCpu_CoreMode_run == mode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   285              {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   286                  Ifx_CPU_DBGSR dbgsr;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   287  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   288                  if (IfxCpu_getCoreIndex() != IfxCpu_getIndex(cpu))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   289                  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   290                      cpu->DBGSR.B.HALT = 0x2;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   291                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   292                  else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   293                  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   294                      dbgsr.U      = __mfcr(CPU_DBGSR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   295                      dbgsr.B.HALT = 0x2;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   296                      __mtcr(CPU_DBGSR, dbgsr.U);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   297                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   298              }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   299              else                /* cannot go to any other mode e.g. IfxCpu_CoreMode_idle */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   300              {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   301                  RetVal = FALSE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   302              }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   303          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   304          /* From Run to Idle or vice versa */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   305          else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   306          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   307              if (IfxCpu_CoreMode_run == cpuMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   308              {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   309                  if (IfxCpu_CoreMode_idle == mode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   310                  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   311                      modeSet = IfxScu_PMCSR_REQSLP_Idle;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   312                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   313                  else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   314                  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   315                      RetVal = FALSE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   316                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   317              }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   318              /* idle to Run */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   319              else if (IfxCpu_CoreMode_idle == cpuMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   320              {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   321                  if (IfxCpu_CoreMode_run == mode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   322                  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   323                      modeSet = IfxScu_PMCSR_REQSLP_Run;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   324                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   325                  else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   326                  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   327                      RetVal = FALSE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   328                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   329              }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   330              else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   331              {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   332                  RetVal = FALSE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   333              }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   334  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   335              if (TRUE == RetVal)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   336              {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   337                  /* To take care of the Work Around in A step
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   338                   * In A Step the PMCSR is Cpu Endinit protected
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   339                   * in B step it is by safety endinit*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   340                  uint16          password;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   341                  uint32          wdtCon0_Val;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   342                  Ifx_SCU_WDTCPU *watchdog;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   343                  watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];    /* FIXME access to the watchdog of an other CPU, this might not work! */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   344                  password = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   345                  IfxScuWdt_clearCpuEndinit(password);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   346                  /*  password access   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   347                  watchdog->CON0.U                                        = (password << 2U) | 0x1U;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   348                  /* modify access, E=0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   349                  watchdog->CON0.U                                        = (password << 2U) | 0x2U;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   350                  /* password access in advance */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   351                  watchdog->CON0.U                                        = (password << 2U) | 0x1U;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   352                  /* prepare write value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   353                  wdtCon0_Val                                             = ((0x0000U) << 16U) | (password << 2U) | (0x3U);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   354                  MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = modeSet;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   355                  /* modify access, E=1, reload WDT */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   356                  watchdog->CON0.U                                        = wdtCon0_Val;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   357                  IfxScuWdt_setCpuEndinit(password);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   358              }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   359          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   360      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   361  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   362      return RetVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   363  #else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   364      uint8              reqslp;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   365      boolean            retValue;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   366      IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   368      /*Modes such as HALT, SLEEP and STBY are not handled at CPU level */
	mov	d15,d4
	call	IfxCpu_getIndex
.L242:
	mov	d8,d2
.L246:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   369      retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   370                  || (mode == IfxCpu_CoreMode_stby)) ? FALSE : TRUE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   371  
	jeq	d15,#0,.L28
.L303:
	jeq	d15,#3,.L29
.L304:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   372      reqslp = (mode == IfxCpu_CoreMode_idle) ? IfxScu_PMCSR_REQSLP_Idle : IfxScu_PMCSR_REQSLP_Run;
	jne	d15,#4,.L30
.L29:
.L28:
	mov	d9,#0
	j	.L31
.L30:
	mov	d9,#1
.L31:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   373  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   374      if (retValue == TRUE)
	eq	d10,d15,#2
.L248:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   375      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   376          /*Check if the same core is requesting to change the core run mode */
	jeq	d9,#0,.L32
.L167:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L168:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   377          {                       /*Request is for the other core */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   378              /*To access PMCSR of other CPUs handle the safety EndInit protection */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   379              uint16 safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   380              IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   381              MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = reqslp;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   382              IfxScuWdt_setSafetyEndinit(safetyWdtPw);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   383  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   384              cpu->DBGSR.B.HALT = 2; /*reset the HALT bit, if it is already done it is no harm in writing again */
	ld.w	d0,.1.cnt
.L170:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L171:
	mov.a	a12,d0
.L174:
	jeq	d15,d8,.L33
.L175:
	call	IfxScuWdt_getSafetyWatchdogPassword
.L245:
	mov	d8,d2
.L247:
	mov	d4,d8
	call	IfxScuWdt_clearSafetyEndinit
.L249:
	mov.aa	a4,a15
.L250:
	call	IfxCpu_getIndex
.L251:
	addsc.a	a2,a12,d2,#2
.L305:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   385  *reset the HALT bit, if it is already done it is no harm in writing again */
	mov	d4,d8
.L252:
	ld.bu	d0,[a2]
	insert	d15,d0,d10,#0,#2
	st.b	[a2],d15
.L306:
	call	IfxScuWdt_setSafetyEndinit
.L253:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   386          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   387          else
	movh.a	a3,#1
	add.a	a3,a15
.L307:
	ld.w	d15,[a3]-768
.L308:
	insert	d15,d15,#2,#1,#2
	st.w	[a3]-768,d15
.L176:
	j	.L34
.L33:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   388          {                          /*Request is for self, this request normally only for halt, otherwise the core is already running anyway! */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   389              /*To access PMCSR of self handle the cpu EndInit protection */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   390              uint16 cpuWdtPw = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   391              IfxScuWdt_clearCpuEndinit(cpuWdtPw);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   392              MODULE_SCU.PMCSR[(uint32)index].B.REQSLP = reqslp;
	call	IfxScuWdt_getCpuWatchdogPassword
.L254:
	mov	d15,d2
.L256:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   393              IfxScuWdt_setCpuEndinit(cpuWdtPw);
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L255:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   394          }
	addsc.a	a15,a12,d8,#2
.L244:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   395      }
	mov	d4,d15
.L257:
	ld.bu	d0,[a15]
.L309:
	insert	d0,d0,d10,#0,#2
	st.b	[a15],d0
.L310:
	call	IfxScuWdt_setCpuEndinit
.L34:
.L32:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   396  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   397      return retValue;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   398  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   399  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   400  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   401  
	mov	d2,d9
	ret
.L161:
	
__IfxCpu_setCoreMode_function_end:
	.size	IfxCpu_setCoreMode,__IfxCpu_setCoreMode_function_end-IfxCpu_setCoreMode
.L93:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_setProgramCounter',code,cluster('IfxCpu_setProgramCounter')
	.sect	'.text.IfxCpu.IfxCpu_setProgramCounter'
	.align	2
	
	.global	IfxCpu_setProgramCounter

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   402  boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   403  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   404      boolean retVal = TRUE;
; Function IfxCpu_setProgramCounter
.L65:
IfxCpu_setProgramCounter:	.type	func
	mov.aa	a15,a4
.L258:
	mov	d8,d4
.L259:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   405  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   406      if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
	mov	d9,#1
.L184:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L261:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d4,d15,#7

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   407     if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   408      {
	call	IfxCpu_getAddress
.L185:
	jne.a	a15,a2,.L36
.L315:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   409          retVal = FALSE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   410      }
	mov	d9,#0
	j	.L37
.L36:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   411      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   412      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   413          cpu->PC.B.PC = programCounter >> 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   414      }
	movh.a	a3,#1
	add.a	a3,a15
.L316:
	sh	d8,#-1
	ld.w	d15,[+a3]-504
.L260:
	movh.a	a3,#1
	insert	d15,d15,d8,#1,#31
	add.a	a3,a15
	st.w	[+a3]-504,d15
.L37:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   415  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   416      return retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   417  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   418  
	mov	d2,d9
	ret
.L180:
	
__IfxCpu_setProgramCounter_function_end:
	.size	IfxCpu_setProgramCounter,__IfxCpu_setProgramCounter_function_end-IfxCpu_setProgramCounter
.L98:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_setSpinLock',code,cluster('IfxCpu_setSpinLock')
	.sect	'.text.IfxCpu.IfxCpu_setSpinLock'
	.align	2
	
	.global	IfxCpu_setSpinLock

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   419  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   420  boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   421  {
; Function IfxCpu_setSpinLock
.L67:
IfxCpu_setSpinLock:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   422      boolean         retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   423      volatile uint32 spinLockVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   424  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   425      retVal = FALSE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   426  
	mov	d2,#0
	sub.a	a10,#8
.L262:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   427      do
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   428      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   429          spinLockVal = 1UL;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   430          spinLockVal =
	mov	d0,#1

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   431              (uint32)__cmpAndSwap(((unsigned int *)lock), spinLockVal, 0);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   432  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   433          /* Check if the SpinLock WAS set before the attempt to acquire spinlock */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   434          if (spinLockVal == 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   435          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   436              retVal = TRUE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   437          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   438          else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   439          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   440              timeoutCount--;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   441          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   442      } while ((retVal == FALSE) && (timeoutCount > 0));
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   443  
.L39:
	st.w	[a10],d0
.L344:
	mov	d7,#0
	ld.w	d6,[a10]
	cmpswap.w	[a4]0,e6
.L345:
	st.w	[a10],d6
.L346:
	ld.w	d15,[a10]
.L347:
	jne	d15,#0,.L40
.L348:
	mov	d2,d0
	j	.L41
.L40:
	add	d4,#-1
.L41:
	jne	d2,#0,.L42
.L263:
	jne	d4,#0,.L39
.L42:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   444      return retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   445  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   446  
	ret
.L202:
	
__IfxCpu_setSpinLock_function_end:
	.size	IfxCpu_setSpinLock,__IfxCpu_setSpinLock_function_end-IfxCpu_setSpinLock
.L123:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_startCore',code,cluster('IfxCpu_startCore')
	.sect	'.text.IfxCpu.IfxCpu_startCore'
	.align	2
	
	.global	IfxCpu_startCore

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   447  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   448  boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   449  {
; Function IfxCpu_startCore
.L69:
IfxCpu_startCore:	.type	func
	mov.aa	a15,a4
.L265:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   450      boolean retVal = TRUE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   451  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   452      /* Set the PC for Core 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   453      retVal &= IfxCpu_setProgramCounter(cpu, programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   454      /* Get the mode for Core 1 and set it to RUNNING */
	call	IfxCpu_setProgramCounter
.L264:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   455  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   456      /* Core not running already */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   457      if (IfxCpu_getCoreMode(cpu) == IfxCpu_CoreMode_halt)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   458      {
	mov	d15,d2
	mov.aa	a4,a15
.L267:
	call	IfxCpu_getCoreMode
.L266:
	jne	d2,#0,.L44
.L321:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   459          retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   460      }
	mov	d4,#1
	mov.aa	a4,a15
.L268:
	call	IfxCpu_setCoreMode
.L269:
	and	d15,d2
.L44:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   461  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   462      return retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   463  }

	mov	d2,d15


	ret
.L187:
	
__IfxCpu_startCore_function_end:
	.size	IfxCpu_startCore,__IfxCpu_startCore_function_end-IfxCpu_startCore
.L103:
	; End of function
	
	.calls	'IfxCpu_getCoreMode','IfxCpu_getIndex'
	.calls	'IfxCpu_getRandomValueWithinRange','IfxCpu_getRandomValue'
	.calls	'IfxCpu_setCoreMode','IfxCpu_getIndex'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_setCpuEndinit'
	.calls	'IfxCpu_setProgramCounter','IfxCpu_getAddress'
	.calls	'IfxCpu_startCore','IfxCpu_setProgramCounter'
	.calls	'IfxCpu_startCore','IfxCpu_getCoreMode'
	.calls	'IfxCpu_startCore','IfxCpu_setCoreMode'
	.calls	'IfxCpu_acquireMutex','',8
	.calls	'IfxCpu_getAddress','',0
	.calls	'IfxCpu_getCoreMode','',0
	.calls	'IfxCpu_getIndex','',0
	.calls	'IfxCpu_getRandomValue','',0
	.calls	'IfxCpu_getRandomValueWithinRange','',0
	.calls	'IfxCpu_releaseMutex','',0
	.calls	'IfxCpu_resetSpinLock','',0
	.calls	'IfxCpu_setCoreMode','',0
	.calls	'IfxCpu_setProgramCounter','',0
	.calls	'IfxCpu_setSpinLock','',8
	.extern	IfxCpu_cfg_indexMap
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_clearSafetyEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_setSafetyEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.calls	'IfxCpu_startCore','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L71:
	.word	50200
	.half	3
	.word	.L72
	.byte	4
.L70:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L73
	.byte	2
	.byte	'__stopPerfCounters',0,3,1,217,1,17,1,1,3,0,4
	.byte	'unsigned long long int',0,8,7,5
	.byte	'void',0,6
	.word	205
	.byte	7
	.byte	'__ld64',0,3,2,110,19
	.word	179
	.byte	1,1,8
	.byte	'addr',0,2,110,32
	.word	211
	.byte	3,0,2
	.byte	'__st64',0,3,2,118,17,1,1,8
	.byte	'addr',0,2,118,30
	.word	211
	.byte	8
	.byte	'value',0,2,118,43
	.word	179
	.byte	3,0
.L223:
	.byte	4
	.byte	'unsigned int',0,4,7,4
	.byte	'int',0,4,5
.L160:
	.byte	4
	.byte	'unsigned char',0,1,8
.L177:
	.byte	4
	.byte	'unsigned short int',0,2,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,239,8,16,4,10
	.byte	'ENDINIT',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'PW',0,2
	.word	332
	.byte	14,0,2,35,0,10
	.byte	'REL',0,2
	.word	332
	.byte	16,0,2,35,2,0,11,4,130,17,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	354
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,248,8,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	2,6,2,35,0,10
	.byte	'IR0',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	315
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	16,0,2,35,2,0,11,4,141,17,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	490
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,135,9,16,4,10
	.byte	'AE',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	315
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	332
	.byte	16,0,2,35,2,0,11,4,152,17,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	734
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU',0,4,204,17,25,12,12
	.byte	'CON0',0
	.word	450
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	694
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	925
	.byte	4,2,35,8,0,13
	.word	965
	.byte	6
	.word	1028
	.byte	2
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,130,3,17,1,1,8
	.byte	'watchdog',0,3,130,3,65
	.word	1033
	.byte	8
	.byte	'password',0,3,130,3,82
	.word	332
	.byte	3,0,2
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,222,3,17,1,1,8
	.byte	'watchdog',0,3,222,3,63
	.word	1033
	.byte	8
	.byte	'password',0,3,222,3,80
	.word	332
	.byte	3,0,7
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,187,3,19
	.word	332
	.byte	1,1,8
	.byte	'watchdog',0,3,187,3,74
	.word	1033
	.byte	3,0
.L136:
	.byte	14,6,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_1',0,1,15
	.byte	'IfxCpu_ResourceCpu_2',0,2,15
	.byte	'IfxCpu_ResourceCpu_none',0,3,0
.L146:
	.byte	7
	.byte	'IfxCpu_getCoreIndex',0,3,5,170,5,31
	.word	1263
	.byte	1,1
.L149:
	.byte	3,0,7
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,185,4,20
	.word	315
	.byte	1,1,3,0
.L158:
	.byte	4
	.byte	'unsigned long int',0,4,7,7
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,190,5,19
	.word	1440
	.byte	1,1,8
	.byte	'address',0,5,190,5,55
	.word	1440
	.byte	3,0,7
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,198,5,20
	.word	315
	.byte	1,1,8
	.byte	'address',0,5,198,5,70
	.word	1440
	.byte	3,0,2
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,153,7,17,1,1,8
	.byte	'address',0,5,153,7,56
	.word	1440
	.byte	8
	.byte	'count',0,5,153,7,72
	.word	1440
	.byte	3,0,16
	.word	308
	.byte	17
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,18
	.word	1669
	.byte	0,13
	.word	292
	.byte	6
	.word	292
	.byte	19
	.byte	'__cmpswapw',0
	.word	1711
	.byte	1,1,1,1,20
	.byte	'p',0
	.word	1716
	.byte	20
	.byte	'value',0
	.word	292
	.byte	20
	.byte	'compare',0
	.word	292
	.byte	0,13
	.word	308
	.byte	19
	.byte	'__mfcr',0
	.word	1773
	.byte	1,1,1,1,18
	.word	308
	.byte	0,21
	.word	150
	.byte	3,0,21
	.word	216
	.byte	22
	.word	234
	.byte	3,0,21
	.word	249
	.byte	22
	.word	263
	.byte	22
	.word	276
	.byte	3,0,21
	.word	1038
	.byte	22
	.word	1078
	.byte	22
	.word	1096
	.byte	3,0,21
	.word	1116
	.byte	22
	.word	1154
	.byte	22
	.word	1172
	.byte	3,0,23
	.byte	'IfxScuWdt_clearCpuEndinit',0,3,187,1,17,1,1,1,1,8
	.byte	'password',0,3,187,1,50
	.word	332
	.byte	0,23
	.byte	'IfxScuWdt_clearSafetyEndinit',0,3,199,1,17,1,1,1,1,8
	.byte	'password',0,3,199,1,53
	.word	332
	.byte	0,23
	.byte	'IfxScuWdt_setCpuEndinit',0,3,209,1,17,1,1,1,1,8
	.byte	'password',0,3,209,1,48
	.word	332
	.byte	0,23
	.byte	'IfxScuWdt_setSafetyEndinit',0,3,219,1,17,1,1,1,1,8
	.byte	'password',0,3,219,1,51
	.word	332
	.byte	0,21
	.word	1192
	.byte	22
	.word	1243
	.byte	3,0,24
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,221,2,19
	.word	332
	.byte	1,1,1,1,24
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,3,230,2,19
	.word	332
	.byte	1,1,1,1,21
	.word	1364
	.byte	3,0,25,176,32
	.word	315
	.byte	26,175,32,0,4
	.byte	'unsigned int',0,4,7,9
	.byte	'_Ifx_CPU_SEGEN_Bits',0,7,150,4,16,4,10
	.byte	'ADFLIP',0,4
	.word	2213
	.byte	8,24,2,35,0,10
	.byte	'ADTYPE',0,4
	.word	2213
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	2213
	.byte	21,1,2,35,0,10
	.byte	'AE',0,4
	.word	2213
	.byte	1,0,2,35,0,0,11,7,151,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2229
	.byte	4,2,35,0,0,25,208,223,1
	.word	315
	.byte	26,207,223,1,0,9
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,7,234,4,16,4,10
	.byte	'ASI',0,4
	.word	2213
	.byte	5,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	2213
	.byte	27,0,2,35,0,0,11,7,133,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2382
	.byte	4,2,35,0,0,25,248,1
	.word	315
	.byte	26,247,1,0,9
	.byte	'_Ifx_CPU_PMA0_Bits',0,7,224,3,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	13,19,2,35,0,10
	.byte	'DAC',0,4
	.word	2213
	.byte	3,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	2213
	.byte	16,0,2,35,0,0,11,7,224,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2500
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PMA1_Bits',0,7,232,3,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	14,18,2,35,0,10
	.byte	'CAC',0,4
	.word	2213
	.byte	2,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	2213
	.byte	16,0,2,35,0,0,11,7,235,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2626
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PMA2_Bits',0,7,240,3,16,4,10
	.byte	'PSI',0,4
	.word	2213
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	2213
	.byte	16,0,2,35,0,0,11,7,246,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2752
	.byte	4,2,35,0,0,25,244,29
	.word	315
	.byte	26,243,29,0,9
	.byte	'_Ifx_CPU_DCON2_Bits',0,7,195,1,16,4,10
	.byte	'DCACHE_SZE',0,4
	.word	2213
	.byte	16,16,2,35,0,10
	.byte	'DSCRATCH_SZE',0,4
	.word	2213
	.byte	16,0,2,35,0,0,11,7,245,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2867
	.byte	4,2,35,0,0,25,8
	.word	315
	.byte	26,7,0,9
	.byte	'_Ifx_CPU_SMACON_Bits',0,7,159,4,16,4,10
	.byte	'PC',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'PT',0,4
	.word	2213
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	2213
	.byte	5,24,2,35,0,10
	.byte	'DC',0,4
	.word	2213
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	2213
	.byte	1,22,2,35,0,10
	.byte	'DT',0,4
	.word	2213
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	2213
	.byte	13,8,2,35,0,10
	.byte	'IODT',0,4
	.word	2213
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	2213
	.byte	7,0,2,35,0,0,11,7,162,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2989
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DSTR_Bits',0,7,143,2,16,4,10
	.byte	'SRE',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'GAE',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'LBE',0,4
	.word	2213
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	2213
	.byte	3,26,2,35,0,10
	.byte	'CRE',0,4
	.word	2213
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	2213
	.byte	7,18,2,35,0,10
	.byte	'DTME',0,4
	.word	2213
	.byte	1,17,2,35,0,10
	.byte	'LOE',0,4
	.word	2213
	.byte	1,16,2,35,0,10
	.byte	'SDE',0,4
	.word	2213
	.byte	1,15,2,35,0,10
	.byte	'SCE',0,4
	.word	2213
	.byte	1,14,2,35,0,10
	.byte	'CAC',0,4
	.word	2213
	.byte	1,13,2,35,0,10
	.byte	'MPE',0,4
	.word	2213
	.byte	1,12,2,35,0,10
	.byte	'CLE',0,4
	.word	2213
	.byte	1,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	2213
	.byte	3,8,2,35,0,10
	.byte	'ALN',0,4
	.word	2213
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	2213
	.byte	7,0,2,35,0,0,11,7,227,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3241
	.byte	4,2,35,0,0,25,4
	.word	315
	.byte	26,3,0,9
	.byte	'_Ifx_CPU_DATR_Bits',0,7,152,1,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'SBE',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'reserved_4',0,4
	.word	2213
	.byte	5,23,2,35,0,10
	.byte	'CWE',0,4
	.word	2213
	.byte	1,22,2,35,0,10
	.byte	'CFE',0,4
	.word	2213
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	2213
	.byte	3,18,2,35,0,10
	.byte	'SOE',0,4
	.word	2213
	.byte	1,17,2,35,0,10
	.byte	'SME',0,4
	.word	2213
	.byte	1,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	2213
	.byte	16,0,2,35,0,0,11,7,201,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3587
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DEADD_Bits',0,7,209,1,16,4,10
	.byte	'ERROR_ADDRESS',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,139,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3818
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DIEAR_Bits',0,7,215,1,16,4,10
	.byte	'TA',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,150,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3910
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DIETR_Bits',0,7,221,1,16,4,10
	.byte	'IED',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	2213
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	2213
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	2213
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	2213
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	2213
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	2213
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	2213
	.byte	18,0,2,35,0,0,11,7,161,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3991
	.byte	4,2,35,0,0,25,24
	.word	315
	.byte	26,23,0,9
	.byte	'_Ifx_CPU_DCON0_Bits',0,7,187,1,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'DCBYP',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	2213
	.byte	30,0,2,35,0,0,11,7,234,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4241
	.byte	4,2,35,0,0,25,188,3
	.word	315
	.byte	26,187,3,0,9
	.byte	'_Ifx_CPU_PSTR_Bits',0,7,247,3,16,4,10
	.byte	'FRE',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'FBE',0,4
	.word	2213
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	2213
	.byte	9,20,2,35,0,10
	.byte	'FPE',0,4
	.word	2213
	.byte	1,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	2213
	.byte	1,18,2,35,0,10
	.byte	'FME',0,4
	.word	2213
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	2213
	.byte	17,0,2,35,0,0,11,7,129,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4380
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PCON1_Bits',0,7,178,3,16,4,10
	.byte	'PCINV',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'PBINV',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	2213
	.byte	30,0,2,35,0,0,11,7,169,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4596
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PCON2_Bits',0,7,186,3,16,4,10
	.byte	'PCACHE_SZE',0,4
	.word	2213
	.byte	16,16,2,35,0,10
	.byte	'PSCRATCH_SZE',0,4
	.word	2213
	.byte	16,0,2,35,0,0,11,7,180,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4719
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PCON0_Bits',0,7,170,3,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'PCBYP',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	2213
	.byte	30,0,2,35,0,0,11,7,158,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4832
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PIEAR_Bits',0,7,203,3,16,4,10
	.byte	'TA',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,202,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4960
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PIETR_Bits',0,7,209,3,16,4,10
	.byte	'IED',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	2213
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	2213
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	2213
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	2213
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	2213
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	2213
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	2213
	.byte	18,0,2,35,0,0,11,7,213,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5041
	.byte	4,2,35,0,0,25,232,3
	.word	315
	.byte	26,231,3,0,9
	.byte	'_Ifx_CPU_COMPAT_Bits',0,7,83,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'RM',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'SP',0,4
	.word	2213
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	2213
	.byte	27,0,2,35,0,0,11,7,230,5,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5293
	.byte	4,2,35,0,0,25,252,23
	.word	315
	.byte	26,251,23,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,7,183,2,16,4,10
	.byte	'TST',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'TCL',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	2213
	.byte	6,24,2,35,0,10
	.byte	'RM',0,4
	.word	2213
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	2213
	.byte	8,14,2,35,0,10
	.byte	'FXE',0,4
	.word	2213
	.byte	1,13,2,35,0,10
	.byte	'FUE',0,4
	.word	2213
	.byte	1,12,2,35,0,10
	.byte	'FZE',0,4
	.word	2213
	.byte	1,11,2,35,0,10
	.byte	'FVE',0,4
	.word	2213
	.byte	1,10,2,35,0,10
	.byte	'FIE',0,4
	.word	2213
	.byte	1,9,2,35,0,10
	.byte	'reserved_23',0,4
	.word	2213
	.byte	3,6,2,35,0,10
	.byte	'FX',0,4
	.word	2213
	.byte	1,5,2,35,0,10
	.byte	'FU',0,4
	.word	2213
	.byte	1,4,2,35,0,10
	.byte	'FZ',0,4
	.word	2213
	.byte	1,3,2,35,0,10
	.byte	'FV',0,4
	.word	2213
	.byte	1,2,2,35,0,10
	.byte	'FI',0,4
	.word	2213
	.byte	1,1,2,35,0,10
	.byte	'reserved_31',0,4
	.word	2213
	.byte	1,0,2,35,0,0,11,7,132,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5443
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,7,215,2,16,4,10
	.byte	'PC',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,154,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5797
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,7,205,2,16,4,10
	.byte	'OPC',0,4
	.word	2213
	.byte	8,24,2,35,0,10
	.byte	'FMT',0,4
	.word	2213
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	2213
	.byte	7,16,2,35,0,10
	.byte	'DREG',0,4
	.word	2213
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	2213
	.byte	12,0,2,35,0,0,11,7,143,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5884
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,7,221,2,16,4,10
	.byte	'SRC1',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,165,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6049
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,7,227,2,16,4,10
	.byte	'SRC2',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,176,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6140
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,7,233,2,16,4,10
	.byte	'SRC3',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,187,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6231
	.byte	4,2,35,0,0,25,228,63
	.word	315
	.byte	26,227,63,0,9
	.byte	'_Ifx_CPU_DPR_L_Bits',0,7,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	2213
	.byte	29,0,2,35,0,0,11,7,183,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6333
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DPR_U_Bits',0,7,250,1,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	2213
	.byte	29,0,2,35,0,0,11,7,194,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6440
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DPR',0,7,214,11,25,8,12
	.byte	'L',0
	.word	6400
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	6507
	.byte	4,2,35,4,0,25,128,1
	.word	6547
	.byte	26,15,0,13
	.word	6589
	.byte	25,128,31
	.word	315
	.byte	26,255,30,0,9
	.byte	'_Ifx_CPU_CPR_L_Bits',0,7,99,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	2213
	.byte	29,0,2,35,0,0,11,7,252,5,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6615
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CPR_U_Bits',0,7,106,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	2213
	.byte	29,0,2,35,0,0,11,7,135,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6721
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CPR',0,7,207,11,25,8,12
	.byte	'L',0
	.word	6681
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	6787
	.byte	4,2,35,4,0,25,64
	.word	6827
	.byte	26,7,0,13
	.word	6869
	.byte	25,192,31
	.word	315
	.byte	26,191,31,0,9
	.byte	'_Ifx_CPU_CPXE_Bits',0,7,121,16,4,10
	.byte	'XE',0,4
	.word	2213
	.byte	8,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	2213
	.byte	24,0,2,35,0,0,11,7,157,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6894
	.byte	4,2,35,0,0,25,16
	.word	6955
	.byte	26,3,0,9
	.byte	'_Ifx_CPU_DPRE_Bits',0,7,129,2,16,4,10
	.byte	'RE',0,4
	.word	2213
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	2213
	.byte	16,0,2,35,0,0,11,7,205,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7004
	.byte	4,2,35,0,0,25,16
	.word	7067
	.byte	26,3,0,9
	.byte	'_Ifx_CPU_DPWE_Bits',0,7,136,2,16,4,10
	.byte	'WE',0,4
	.word	2213
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	2213
	.byte	16,0,2,35,0,0,11,7,216,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7116
	.byte	4,2,35,0,0,25,16
	.word	7179
	.byte	26,3,0,25,208,7
	.word	315
	.byte	26,207,7,0,9
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,7,241,4,16,4,10
	.byte	'TEXP0',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'TEXP1',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'TEXP2',0,4
	.word	2213
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	2213
	.byte	13,16,2,35,0,10
	.byte	'TTRAP',0,4
	.word	2213
	.byte	1,15,2,35,0,10
	.byte	'reserved_17',0,4
	.word	2213
	.byte	15,0,2,35,0,0,11,7,144,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7239
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,7,252,4,16,4,10
	.byte	'Timer',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,155,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7421
	.byte	4,2,35,0,0,25,12
	.word	7469
	.byte	26,2,0,9
	.byte	'_Ifx_CPU_TPS',0,7,230,11,25,16,12
	.byte	'CON',0
	.word	7381
	.byte	4,2,35,0,12
	.byte	'TIMER',0
	.word	7509
	.byte	12,2,35,4,0,13
	.word	7518
	.byte	25,240,23
	.word	315
	.byte	26,239,23,0,9
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,7,136,5,16,4,10
	.byte	'EVTA',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	2213
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	2213
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	2213
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	2213
	.byte	4,20,2,35,0,10
	.byte	'TYP',0,4
	.word	2213
	.byte	1,19,2,35,0,10
	.byte	'RNG',0,4
	.word	2213
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	2213
	.byte	1,17,2,35,0,10
	.byte	'ASI_EN',0,4
	.word	2213
	.byte	1,16,2,35,0,10
	.byte	'ASI',0,4
	.word	2213
	.byte	5,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	2213
	.byte	6,5,2,35,0,10
	.byte	'AST',0,4
	.word	2213
	.byte	1,4,2,35,0,10
	.byte	'ALD',0,4
	.word	2213
	.byte	1,3,2,35,0,10
	.byte	'reserved_29',0,4
	.word	2213
	.byte	3,0,2,35,0,0,11,7,177,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7582
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,7,130,5,16,4,10
	.byte	'ADDR',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,166,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7911
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_TR',0,7,237,11,25,8,12
	.byte	'EVT',0
	.word	7871
	.byte	4,2,35,0,12
	.byte	'ADR',0
	.word	7955
	.byte	4,2,35,4,0,25,64
	.word	7995
	.byte	26,7,0,13
	.word	8040
	.byte	25,192,23
	.word	315
	.byte	26,191,23,0,9
	.byte	'_Ifx_CPU_CCTRL_Bits',0,7,72,16,4,10
	.byte	'CM',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'CE',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'M1',0,4
	.word	2213
	.byte	3,27,2,35,0,10
	.byte	'M2',0,4
	.word	2213
	.byte	3,24,2,35,0,10
	.byte	'M3',0,4
	.word	2213
	.byte	3,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	2213
	.byte	21,0,2,35,0,0,11,7,219,5,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8065
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CCNT_Bits',0,7,65,16,4,10
	.byte	'CountValue',0,4
	.word	2213
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	2213
	.byte	1,0,2,35,0,0,11,7,208,5,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8224
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_ICNT_Bits',0,7,239,2,16,4,10
	.byte	'CountValue',0,4
	.word	2213
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	2213
	.byte	1,0,2,35,0,0,11,7,198,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8327
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_M1CNT_Bits',0,7,142,3,16,4,10
	.byte	'CountValue',0,4
	.word	2213
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	2213
	.byte	1,0,2,35,0,0,11,7,242,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8431
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_M2CNT_Bits',0,7,149,3,16,4,10
	.byte	'CountValue',0,4
	.word	2213
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	2213
	.byte	1,0,2,35,0,0,11,7,253,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8536
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_M3CNT_Bits',0,7,156,3,16,4,10
	.byte	'CountValue',0,4
	.word	2213
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	2213
	.byte	1,0,2,35,0,0,11,7,136,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8641
	.byte	4,2,35,0,0,25,232,1
	.word	315
	.byte	26,231,1,0,9
	.byte	'_Ifx_CPU_DBGSR_Bits',0,7,166,1,16,4,10
	.byte	'DE',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'HALT',0,4
	.word	2213
	.byte	2,29,2,35,0,10
	.byte	'SIH',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'SUSP',0,4
	.word	2213
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	2213
	.byte	1,26,2,35,0,10
	.byte	'PREVSUSP',0,4
	.word	2213
	.byte	1,25,2,35,0,10
	.byte	'PEVT',0,4
	.word	2213
	.byte	1,24,2,35,0,10
	.byte	'EVTSRC',0,4
	.word	2213
	.byte	5,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	2213
	.byte	19,0,2,35,0,0
.L143:
	.byte	11,7,212,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8757
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_EXEVT_Bits',0,7,164,2,16,4,10
	.byte	'EVTA',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	2213
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	2213
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	2213
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	2213
	.byte	24,0,2,35,0,0,11,7,238,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8984
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CREVT_Bits',0,7,128,1,16,4,10
	.byte	'EVTA',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	2213
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	2213
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	2213
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	2213
	.byte	24,0,2,35,0,0,11,7,168,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9150
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_SWEVT_Bits',0,7,212,4,16,4,10
	.byte	'EVTA',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	2213
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	2213
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	2213
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	2213
	.byte	24,0,2,35,0,0,11,7,239,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9316
	.byte	4,2,35,0,0,25,28
	.word	315
	.byte	26,27,0,9
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,7,156,5,16,4,10
	.byte	'T0',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'T1',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'T2',0,4
	.word	2213
	.byte	1,29,2,35,0,10
	.byte	'T3',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'T4',0,4
	.word	2213
	.byte	1,27,2,35,0,10
	.byte	'T5',0,4
	.word	2213
	.byte	1,26,2,35,0,10
	.byte	'T6',0,4
	.word	2213
	.byte	1,25,2,35,0,10
	.byte	'T7',0,4
	.word	2213
	.byte	1,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	2213
	.byte	24,0,2,35,0,0,11,7,188,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9491
	.byte	4,2,35,0,0,25,12
	.word	315
	.byte	26,11,0,9
	.byte	'_Ifx_CPU_DMS_Bits',0,7,236,1,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'DMSValue',0,4
	.word	2213
	.byte	31,0,2,35,0,0,11,7,172,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9704
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DCX_Bits',0,7,202,1,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	6,26,2,35,0,10
	.byte	'DCXValue',0,4
	.word	2213
	.byte	26,0,2,35,0,0,11,7,128,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9811
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,7,180,1,16,4,10
	.byte	'DTA',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	2213
	.byte	31,0,2,35,0,0,11,7,223,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9918
	.byte	4,2,35,0,0,25,180,1
	.word	315
	.byte	26,179,1,0,9
	.byte	'_Ifx_CPU_PCXI_Bits',0,7,193,3,16,4,10
	.byte	'PCXO',0,4
	.word	2213
	.byte	16,16,2,35,0,10
	.byte	'PCXS',0,4
	.word	2213
	.byte	4,12,2,35,0,10
	.byte	'UL',0,4
	.word	2213
	.byte	1,11,2,35,0,10
	.byte	'PIE',0,4
	.word	2213
	.byte	1,10,2,35,0,10
	.byte	'PCPN',0,4
	.word	2213
	.byte	10,0,2,35,0,0,11,7,191,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10034
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PSW_Bits',0,7,132,4,16,4,10
	.byte	'CDC',0,4
	.word	2213
	.byte	7,25,2,35,0,10
	.byte	'CDE',0,4
	.word	2213
	.byte	1,24,2,35,0,10
	.byte	'GW',0,4
	.word	2213
	.byte	1,23,2,35,0,10
	.byte	'IS',0,4
	.word	2213
	.byte	1,22,2,35,0,10
	.byte	'IO',0,4
	.word	2213
	.byte	2,20,2,35,0,10
	.byte	'PRS',0,4
	.word	2213
	.byte	2,18,2,35,0,10
	.byte	'S',0,4
	.word	2213
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	2213
	.byte	12,5,2,35,0,10
	.byte	'SAV',0,4
	.word	2213
	.byte	1,4,2,35,0,10
	.byte	'AV',0,4
	.word	2213
	.byte	1,3,2,35,0,10
	.byte	'SV',0,4
	.word	2213
	.byte	1,2,2,35,0,10
	.byte	'V',0,4
	.word	2213
	.byte	1,1,2,35,0,10
	.byte	'C',0,4
	.word	2213
	.byte	1,0,2,35,0,0,11,7,140,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10177
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PC_Bits',0,7,163,3,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'PC',0,4
	.word	2213
	.byte	31,0,2,35,0,0,11,7,147,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10434
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_SYSCON_Bits',0,7,223,4,16,4,10
	.byte	'FCDSF',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'PROTEN',0,4
	.word	2213
	.byte	1,30,2,35,0,10
	.byte	'TPROTEN',0,4
	.word	2213
	.byte	1,29,2,35,0,10
	.byte	'IS',0,4
	.word	2213
	.byte	1,28,2,35,0,10
	.byte	'IT',0,4
	.word	2213
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	2213
	.byte	27,0,2,35,0,0,11,7,250,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10534
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,7,113,16,4,10
	.byte	'MOD_REV',0,4
	.word	2213
	.byte	8,24,2,35,0,10
	.byte	'MOD_32B',0,4
	.word	2213
	.byte	8,16,2,35,0,10
	.byte	'MOD',0,4
	.word	2213
	.byte	16,0,2,35,0,0,11,7,146,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10706
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,7,92,16,4,10
	.byte	'CORE_ID',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	2213
	.byte	29,0,2,35,0,0
.L150:
	.byte	11,7,241,5,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10826
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_BIV_Bits',0,7,51,16,4,10
	.byte	'VSS',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'BIV',0,4
	.word	2213
	.byte	31,0,2,35,0,0,11,7,186,5,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10935
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_BTV_Bits',0,7,58,16,4,10
	.byte	'reserved_0',0,4
	.word	2213
	.byte	1,31,2,35,0,10
	.byte	'BTV',0,4
	.word	2213
	.byte	31,0,2,35,0,0,11,7,197,5,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11029
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_ISP_Bits',0,7,128,3,16,4,10
	.byte	'ISP',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,220,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11130
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_ICR_Bits',0,7,246,2,16,4,10
	.byte	'CCPN',0,4
	.word	2213
	.byte	10,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	2213
	.byte	5,17,2,35,0,10
	.byte	'IE',0,4
	.word	2213
	.byte	1,16,2,35,0,10
	.byte	'PIPN',0,4
	.word	2213
	.byte	10,6,2,35,0,10
	.byte	'reserved_26',0,4
	.word	2213
	.byte	6,0,2,35,0,0,11,7,209,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11210
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FCX_Bits',0,7,175,2,16,4,10
	.byte	'FCXO',0,4
	.word	2213
	.byte	16,16,2,35,0,10
	.byte	'FCXS',0,4
	.word	2213
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	2213
	.byte	12,0,2,35,0,0,11,7,249,7,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11367
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_LCX_Bits',0,7,134,3,16,4,10
	.byte	'LCXO',0,4
	.word	2213
	.byte	16,16,2,35,0,10
	.byte	'LCXS',0,4
	.word	2213
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	2213
	.byte	12,0,2,35,0,0,11,7,231,8,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11487
	.byte	4,2,35,0,0,25,16
	.word	315
	.byte	26,15,0,9
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,7,139,1,16,4,10
	.byte	'CID',0,4
	.word	2213
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	2213
	.byte	29,0,2,35,0,0,11,7,179,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11616
	.byte	4,2,35,0,0,25,172,1
	.word	315
	.byte	26,171,1,0,9
	.byte	'_Ifx_CPU_D_Bits',0,7,146,1,16,4,10
	.byte	'DATA',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,190,6,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11732
	.byte	4,2,35,0,0,25,64
	.word	11771
	.byte	26,15,0,25,64
	.word	315
	.byte	26,63,0,9
	.byte	'_Ifx_CPU_A_Bits',0,7,45,16,4,10
	.byte	'ADDR',0,4
	.word	2213
	.byte	32,0,2,35,0,0,11,7,175,5,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11829
	.byte	4,2,35,0,0,25,64
	.word	11867
	.byte	26,15,0,9
	.byte	'_Ifx_CPU',0,7,254,11,25,128,128,4,12
	.byte	'reserved_0',0
	.word	2202
	.byte	176,32,2,35,0,12
	.byte	'SEGEN',0
	.word	2329
	.byte	4,3,35,176,32,12
	.byte	'reserved_1034',0
	.word	2369
	.byte	208,223,1,3,35,180,32,12
	.byte	'TASK_ASI',0
	.word	2449
	.byte	4,4,35,132,128,2,12
	.byte	'reserved_8008',0
	.word	2489
	.byte	248,1,4,35,136,128,2,12
	.byte	'PMA0',0
	.word	2586
	.byte	4,4,35,128,130,2,12
	.byte	'PMA1',0
	.word	2712
	.byte	4,4,35,132,130,2,12
	.byte	'PMA2',0
	.word	2816
	.byte	4,4,35,136,130,2,12
	.byte	'reserved_810C',0
	.word	2856
	.byte	244,29,4,35,140,130,2,12
	.byte	'DCON2',0
	.word	2940
	.byte	4,4,35,128,160,2,12
	.byte	'reserved_9004',0
	.word	2980
	.byte	8,4,35,132,160,2,12
	.byte	'SMACON',0
	.word	3201
	.byte	4,4,35,140,160,2,12
	.byte	'DSTR',0
	.word	3538
	.byte	4,4,35,144,160,2,12
	.byte	'reserved_9014',0
	.word	3578
	.byte	4,4,35,148,160,2,12
	.byte	'DATR',0
	.word	3778
	.byte	4,4,35,152,160,2,12
	.byte	'DEADD',0
	.word	3870
	.byte	4,4,35,156,160,2,12
	.byte	'DIEAR',0
	.word	3951
	.byte	4,4,35,160,160,2,12
	.byte	'DIETR',0
	.word	4192
	.byte	4,4,35,164,160,2,12
	.byte	'reserved_9028',0
	.word	4232
	.byte	24,4,35,168,160,2,12
	.byte	'DCON0',0
	.word	4329
	.byte	4,4,35,192,160,2,12
	.byte	'reserved_9044',0
	.word	4369
	.byte	188,3,4,35,196,160,2,12
	.byte	'PSTR',0
	.word	4556
	.byte	4,4,35,128,164,2,12
	.byte	'PCON1',0
	.word	4679
	.byte	4,4,35,132,164,2,12
	.byte	'PCON2',0
	.word	4792
	.byte	4,4,35,136,164,2,12
	.byte	'PCON0',0
	.word	4920
	.byte	4,4,35,140,164,2,12
	.byte	'PIEAR',0
	.word	5001
	.byte	4,4,35,144,164,2,12
	.byte	'PIETR',0
	.word	5242
	.byte	4,4,35,148,164,2,12
	.byte	'reserved_9218',0
	.word	5282
	.byte	232,3,4,35,152,164,2,12
	.byte	'COMPAT',0
	.word	5392
	.byte	4,4,35,128,168,2,12
	.byte	'reserved_9404',0
	.word	5432
	.byte	252,23,4,35,132,168,2,12
	.byte	'FPU_TRAP_CON',0
	.word	5757
	.byte	4,4,35,128,192,2,12
	.byte	'FPU_TRAP_PC',0
	.word	5844
	.byte	4,4,35,132,192,2,12
	.byte	'FPU_TRAP_OPC',0
	.word	6009
	.byte	4,4,35,136,192,2,12
	.byte	'reserved_A00C',0
	.word	3578
	.byte	4,4,35,140,192,2,12
	.byte	'FPU_TRAP_SRC1',0
	.word	6100
	.byte	4,4,35,144,192,2,12
	.byte	'FPU_TRAP_SRC2',0
	.word	6191
	.byte	4,4,35,148,192,2,12
	.byte	'FPU_TRAP_SRC3',0
	.word	6282
	.byte	4,4,35,152,192,2,12
	.byte	'reserved_A01C',0
	.word	6322
	.byte	228,63,4,35,156,192,2,12
	.byte	'DPR',0
	.word	6599
	.byte	128,1,4,35,128,128,3,12
	.byte	'reserved_C080',0
	.word	6604
	.byte	128,31,4,35,128,129,3,12
	.byte	'CPR',0
	.word	6878
	.byte	64,4,35,128,160,3,12
	.byte	'reserved_D040',0
	.word	6883
	.byte	192,31,4,35,192,160,3,12
	.byte	'CPXE',0
	.word	6995
	.byte	16,4,35,128,192,3,12
	.byte	'DPRE',0
	.word	7107
	.byte	16,4,35,144,192,3,12
	.byte	'DPWE',0
	.word	7219
	.byte	16,4,35,160,192,3,12
	.byte	'reserved_E030',0
	.word	7228
	.byte	208,7,4,35,176,192,3,12
	.byte	'TPS',0
	.word	7566
	.byte	16,4,35,128,200,3,12
	.byte	'reserved_E410',0
	.word	7571
	.byte	240,23,4,35,144,200,3,12
	.byte	'TR',0
	.word	8049
	.byte	64,4,35,128,224,3,12
	.byte	'reserved_F040',0
	.word	8054
	.byte	192,23,4,35,192,224,3,12
	.byte	'CCTRL',0
	.word	8184
	.byte	4,4,35,128,248,3,12
	.byte	'CCNT',0
	.word	8287
	.byte	4,4,35,132,248,3,12
	.byte	'ICNT',0
	.word	8391
	.byte	4,4,35,136,248,3,12
	.byte	'M1CNT',0
	.word	8496
	.byte	4,4,35,140,248,3,12
	.byte	'M2CNT',0
	.word	8601
	.byte	4,4,35,144,248,3,12
	.byte	'M3CNT',0
	.word	8706
	.byte	4,4,35,148,248,3,12
	.byte	'reserved_FC18',0
	.word	8746
	.byte	232,1,4,35,152,248,3,12
	.byte	'DBGSR',0
	.word	8944
	.byte	4,4,35,128,250,3,12
	.byte	'reserved_FD04',0
	.word	3578
	.byte	4,4,35,132,250,3,12
	.byte	'EXEVT',0
	.word	9110
	.byte	4,4,35,136,250,3,12
	.byte	'CREVT',0
	.word	9276
	.byte	4,4,35,140,250,3,12
	.byte	'SWEVT',0
	.word	9442
	.byte	4,4,35,144,250,3,12
	.byte	'reserved_FD14',0
	.word	9482
	.byte	28,4,35,148,250,3,12
	.byte	'TRIG_ACC',0
	.word	9655
	.byte	4,4,35,176,250,3,12
	.byte	'reserved_FD34',0
	.word	9695
	.byte	12,4,35,180,250,3,12
	.byte	'DMS',0
	.word	9771
	.byte	4,4,35,192,250,3,12
	.byte	'DCX',0
	.word	9878
	.byte	4,4,35,196,250,3,12
	.byte	'DBGTCR',0
	.word	9983
	.byte	4,4,35,200,250,3,12
	.byte	'reserved_FD4C',0
	.word	10023
	.byte	180,1,4,35,204,250,3,12
	.byte	'PCXI',0
	.word	10137
	.byte	4,4,35,128,252,3,12
	.byte	'PSW',0
	.word	10394
	.byte	4,4,35,132,252,3,12
	.byte	'PC',0
	.word	10494
	.byte	4,4,35,136,252,3,12
	.byte	'reserved_FE0C',0
	.word	2980
	.byte	8,4,35,140,252,3,12
	.byte	'SYSCON',0
	.word	10666
	.byte	4,4,35,148,252,3,12
	.byte	'CPU_ID',0
	.word	10786
	.byte	4,4,35,152,252,3,12
	.byte	'CORE_ID',0
	.word	10895
	.byte	4,4,35,156,252,3,12
	.byte	'BIV',0
	.word	10989
	.byte	4,4,35,160,252,3,12
	.byte	'BTV',0
	.word	11090
	.byte	4,4,35,164,252,3,12
	.byte	'ISP',0
	.word	11170
	.byte	4,4,35,168,252,3,12
	.byte	'ICR',0
	.word	11327
	.byte	4,4,35,172,252,3,12
	.byte	'reserved_FE30',0
	.word	2980
	.byte	8,4,35,176,252,3,12
	.byte	'FCX',0
	.word	11447
	.byte	4,4,35,184,252,3,12
	.byte	'LCX',0
	.word	11567
	.byte	4,4,35,188,252,3,12
	.byte	'reserved_FE40',0
	.word	11607
	.byte	16,4,35,192,252,3,12
	.byte	'CUS_ID',0
	.word	11681
	.byte	4,4,35,208,252,3,12
	.byte	'reserved_FE54',0
	.word	11721
	.byte	172,1,4,35,212,252,3,12
	.byte	'D',0
	.word	11811
	.byte	64,4,35,128,254,3,12
	.byte	'reserved_FF40',0
	.word	11820
	.byte	64,4,35,192,254,3,12
	.byte	'A',0
	.word	11907
	.byte	64,4,35,128,255,3,12
	.byte	'reserved_FFC0',0
	.word	11820
	.byte	64,4,35,192,255,3,0,13
	.word	11916
.L134:
	.byte	6
	.word	13707
.L139:
	.byte	14,5,106,9,1,15
	.byte	'IfxCpu_CoreMode_halt',0,0,15
	.byte	'IfxCpu_CoreMode_run',0,1,15
	.byte	'IfxCpu_CoreMode_idle',0,2,15
	.byte	'IfxCpu_CoreMode_sleep',0,3,15
	.byte	'IfxCpu_CoreMode_stby',0,4,15
	.byte	'IfxCpu_CoreMode_unknown',0,5,0,9
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,139,7,16,4,10
	.byte	'REQSLP',0,1
	.word	315
	.byte	2,6,2,35,0,10
	.byte	'SMUSLP',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	315
	.byte	5,0,2,35,0,10
	.byte	'PMST',0,1
	.word	315
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	292
	.byte	21,0,2,35,0,0,11,4,210,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13864
	.byte	4,2,35,0,0
.L153:
	.byte	6
	.word	13988
	.byte	21
	.word	1398
	.byte	3,0,21
	.word	1461
	.byte	22
	.word	1502
	.byte	3,0,21
	.word	1521
	.byte	22
	.word	1576
	.byte	3,0,21
	.word	1595
	.byte	22
	.word	1635
	.byte	22
	.word	1652
	.byte	3,0
.L192:
	.byte	6
	.word	292
.L195:
	.byte	13
	.word	1440
.L200:
	.byte	6
	.word	292
.L206:
	.byte	13
	.word	1440
.L209:
	.byte	6
	.word	1440
	.byte	4
	.byte	'short int',0,2,5,27
	.byte	'__wchar_t',0,8,1,1
	.word	14106
	.byte	27
	.byte	'__size_t',0,8,1,1
	.word	292
	.byte	27
	.byte	'__ptrdiff_t',0,8,1,1
	.word	308
	.byte	28,1,6
	.word	14174
	.byte	27
	.byte	'__codeptr',0,8,1,1
	.word	14176
	.byte	27
	.byte	'uint8',0,9,89,24
	.word	315
	.byte	27
	.byte	'sint16',0,9,90,24
	.word	14106
	.byte	27
	.byte	'uint16',0,9,91,24
	.word	332
	.byte	4
	.byte	'long int',0,4,5,27
	.byte	'sint32',0,9,92,24
	.word	14243
	.byte	27
	.byte	'uint32',0,9,93,24
	.word	1440
	.byte	4
	.byte	'float',0,4,4,27
	.byte	'float32',0,9,94,24
	.word	14285
	.byte	27
	.byte	'boolean',0,9,104,24
	.word	315
	.byte	4
	.byte	'long long int',0,8,5,27
	.byte	'sint64',0,10,36,28
	.word	14326
	.byte	27
	.byte	'uint64',0,10,37,28
	.word	179
	.byte	27
	.byte	'pvoid',0,10,40,28
	.word	211
	.byte	27
	.byte	'Ifx_TickTime',0,10,43,28
	.word	14326
	.byte	13
	.word	205
	.byte	6
	.word	14408
	.byte	29,10,107,9,8,12
	.byte	'module',0
	.word	14413
	.byte	4,2,35,0,12
	.byte	'index',0
	.word	14243
	.byte	4,2,35,4,0,27
	.byte	'IfxModule_IndexMap',0,10,111,3
	.word	14418
	.byte	27
	.byte	'Ifx_CPU_A_Bits',0,7,48,3
	.word	11829
	.byte	27
	.byte	'Ifx_CPU_BIV_Bits',0,7,55,3
	.word	10935
	.byte	27
	.byte	'Ifx_CPU_BTV_Bits',0,7,62,3
	.word	11029
	.byte	27
	.byte	'Ifx_CPU_CCNT_Bits',0,7,69,3
	.word	8224
	.byte	27
	.byte	'Ifx_CPU_CCTRL_Bits',0,7,80,3
	.word	8065
	.byte	27
	.byte	'Ifx_CPU_COMPAT_Bits',0,7,89,3
	.word	5293
	.byte	27
	.byte	'Ifx_CPU_CORE_ID_Bits',0,7,96,3
	.word	10826
	.byte	27
	.byte	'Ifx_CPU_CPR_L_Bits',0,7,103,3
	.word	6615
	.byte	27
	.byte	'Ifx_CPU_CPR_U_Bits',0,7,110,3
	.word	6721
	.byte	27
	.byte	'Ifx_CPU_CPU_ID_Bits',0,7,118,3
	.word	10706
	.byte	27
	.byte	'Ifx_CPU_CPXE_Bits',0,7,125,3
	.word	6894
	.byte	27
	.byte	'Ifx_CPU_CREVT_Bits',0,7,136,1,3
	.word	9150
	.byte	27
	.byte	'Ifx_CPU_CUS_ID_Bits',0,7,143,1,3
	.word	11616
	.byte	27
	.byte	'Ifx_CPU_D_Bits',0,7,149,1,3
	.word	11732
	.byte	27
	.byte	'Ifx_CPU_DATR_Bits',0,7,163,1,3
	.word	3587
	.byte	27
	.byte	'Ifx_CPU_DBGSR_Bits',0,7,177,1,3
	.word	8757
	.byte	27
	.byte	'Ifx_CPU_DBGTCR_Bits',0,7,184,1,3
	.word	9918
	.byte	27
	.byte	'Ifx_CPU_DCON0_Bits',0,7,192,1,3
	.word	4241
	.byte	27
	.byte	'Ifx_CPU_DCON2_Bits',0,7,199,1,3
	.word	2867
	.byte	27
	.byte	'Ifx_CPU_DCX_Bits',0,7,206,1,3
	.word	9811
	.byte	27
	.byte	'Ifx_CPU_DEADD_Bits',0,7,212,1,3
	.word	3818
	.byte	27
	.byte	'Ifx_CPU_DIEAR_Bits',0,7,218,1,3
	.word	3910
	.byte	27
	.byte	'Ifx_CPU_DIETR_Bits',0,7,233,1,3
	.word	3991
	.byte	27
	.byte	'Ifx_CPU_DMS_Bits',0,7,240,1,3
	.word	9704
	.byte	27
	.byte	'Ifx_CPU_DPR_L_Bits',0,7,247,1,3
	.word	6333
	.byte	27
	.byte	'Ifx_CPU_DPR_U_Bits',0,7,254,1,3
	.word	6440
	.byte	27
	.byte	'Ifx_CPU_DPRE_Bits',0,7,133,2,3
	.word	7004
	.byte	27
	.byte	'Ifx_CPU_DPWE_Bits',0,7,140,2,3
	.word	7116
	.byte	27
	.byte	'Ifx_CPU_DSTR_Bits',0,7,161,2,3
	.word	3241
	.byte	27
	.byte	'Ifx_CPU_EXEVT_Bits',0,7,172,2,3
	.word	8984
	.byte	27
	.byte	'Ifx_CPU_FCX_Bits',0,7,180,2,3
	.word	11367
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,7,202,2,3
	.word	5443
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,7,212,2,3
	.word	5884
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,7,218,2,3
	.word	5797
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,7,224,2,3
	.word	6049
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,7,230,2,3
	.word	6140
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,7,236,2,3
	.word	6231
	.byte	27
	.byte	'Ifx_CPU_ICNT_Bits',0,7,243,2,3
	.word	8327
	.byte	27
	.byte	'Ifx_CPU_ICR_Bits',0,7,253,2,3
	.word	11210
	.byte	27
	.byte	'Ifx_CPU_ISP_Bits',0,7,131,3,3
	.word	11130
	.byte	27
	.byte	'Ifx_CPU_LCX_Bits',0,7,139,3,3
	.word	11487
	.byte	27
	.byte	'Ifx_CPU_M1CNT_Bits',0,7,146,3,3
	.word	8431
	.byte	27
	.byte	'Ifx_CPU_M2CNT_Bits',0,7,153,3,3
	.word	8536
	.byte	27
	.byte	'Ifx_CPU_M3CNT_Bits',0,7,160,3,3
	.word	8641
	.byte	27
	.byte	'Ifx_CPU_PC_Bits',0,7,167,3,3
	.word	10434
	.byte	27
	.byte	'Ifx_CPU_PCON0_Bits',0,7,175,3,3
	.word	4832
	.byte	27
	.byte	'Ifx_CPU_PCON1_Bits',0,7,183,3,3
	.word	4596
	.byte	27
	.byte	'Ifx_CPU_PCON2_Bits',0,7,190,3,3
	.word	4719
	.byte	27
	.byte	'Ifx_CPU_PCXI_Bits',0,7,200,3,3
	.word	10034
	.byte	27
	.byte	'Ifx_CPU_PIEAR_Bits',0,7,206,3,3
	.word	4960
	.byte	27
	.byte	'Ifx_CPU_PIETR_Bits',0,7,221,3,3
	.word	5041
	.byte	27
	.byte	'Ifx_CPU_PMA0_Bits',0,7,229,3,3
	.word	2500
	.byte	27
	.byte	'Ifx_CPU_PMA1_Bits',0,7,237,3,3
	.word	2626
	.byte	27
	.byte	'Ifx_CPU_PMA2_Bits',0,7,244,3,3
	.word	2752
	.byte	27
	.byte	'Ifx_CPU_PSTR_Bits',0,7,129,4,3
	.word	4380
	.byte	27
	.byte	'Ifx_CPU_PSW_Bits',0,7,147,4,3
	.word	10177
	.byte	27
	.byte	'Ifx_CPU_SEGEN_Bits',0,7,156,4,3
	.word	2229
	.byte	27
	.byte	'Ifx_CPU_SMACON_Bits',0,7,171,4,3
	.word	2989
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,7,174,4,16,4,10
	.byte	'EN',0,4
	.word	292
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,7,177,4,3
	.word	16105
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,7,180,4,16,4,10
	.byte	'reserved_0',0,4
	.word	292
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,7,183,4,3
	.word	16188
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,7,186,4,16,4,10
	.byte	'EN',0,4
	.word	292
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,7,189,4,3
	.word	16279
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,7,192,4,16,4,10
	.byte	'reserved_0',0,4
	.word	292
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,7,195,4,3
	.word	16370
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,7,198,4,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	292
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,7,202,4,3
	.word	16469
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,7,205,4,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	292
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,7,209,4,3
	.word	16576
	.byte	27
	.byte	'Ifx_CPU_SWEVT_Bits',0,7,220,4,3
	.word	9316
	.byte	27
	.byte	'Ifx_CPU_SYSCON_Bits',0,7,231,4,3
	.word	10534
	.byte	27
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,7,238,4,3
	.word	2382
	.byte	27
	.byte	'Ifx_CPU_TPS_CON_Bits',0,7,249,4,3
	.word	7239
	.byte	27
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,7,255,4,3
	.word	7421
	.byte	27
	.byte	'Ifx_CPU_TR_ADR_Bits',0,7,133,5,3
	.word	7911
	.byte	27
	.byte	'Ifx_CPU_TR_EVT_Bits',0,7,153,5,3
	.word	7582
	.byte	27
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,7,167,5,3
	.word	9491
	.byte	27
	.byte	'Ifx_CPU_A',0,7,183,5,3
	.word	11867
	.byte	27
	.byte	'Ifx_CPU_BIV',0,7,194,5,3
	.word	10989
	.byte	27
	.byte	'Ifx_CPU_BTV',0,7,205,5,3
	.word	11090
	.byte	27
	.byte	'Ifx_CPU_CCNT',0,7,216,5,3
	.word	8287
	.byte	27
	.byte	'Ifx_CPU_CCTRL',0,7,227,5,3
	.word	8184
	.byte	27
	.byte	'Ifx_CPU_COMPAT',0,7,238,5,3
	.word	5392
	.byte	27
	.byte	'Ifx_CPU_CORE_ID',0,7,249,5,3
	.word	10895
	.byte	27
	.byte	'Ifx_CPU_CPR_L',0,7,132,6,3
	.word	6681
	.byte	27
	.byte	'Ifx_CPU_CPR_U',0,7,143,6,3
	.word	6787
	.byte	27
	.byte	'Ifx_CPU_CPU_ID',0,7,154,6,3
	.word	10786
	.byte	27
	.byte	'Ifx_CPU_CPXE',0,7,165,6,3
	.word	6955
	.byte	27
	.byte	'Ifx_CPU_CREVT',0,7,176,6,3
	.word	9276
	.byte	27
	.byte	'Ifx_CPU_CUS_ID',0,7,187,6,3
	.word	11681
	.byte	27
	.byte	'Ifx_CPU_D',0,7,198,6,3
	.word	11771
	.byte	27
	.byte	'Ifx_CPU_DATR',0,7,209,6,3
	.word	3778
	.byte	27
	.byte	'Ifx_CPU_DBGSR',0,7,220,6,3
	.word	8944
	.byte	27
	.byte	'Ifx_CPU_DBGTCR',0,7,231,6,3
	.word	9983
	.byte	27
	.byte	'Ifx_CPU_DCON0',0,7,242,6,3
	.word	4329
	.byte	27
	.byte	'Ifx_CPU_DCON2',0,7,253,6,3
	.word	2940
	.byte	27
	.byte	'Ifx_CPU_DCX',0,7,136,7,3
	.word	9878
	.byte	27
	.byte	'Ifx_CPU_DEADD',0,7,147,7,3
	.word	3870
	.byte	27
	.byte	'Ifx_CPU_DIEAR',0,7,158,7,3
	.word	3951
	.byte	27
	.byte	'Ifx_CPU_DIETR',0,7,169,7,3
	.word	4192
	.byte	27
	.byte	'Ifx_CPU_DMS',0,7,180,7,3
	.word	9771
	.byte	27
	.byte	'Ifx_CPU_DPR_L',0,7,191,7,3
	.word	6400
	.byte	27
	.byte	'Ifx_CPU_DPR_U',0,7,202,7,3
	.word	6507
	.byte	27
	.byte	'Ifx_CPU_DPRE',0,7,213,7,3
	.word	7067
	.byte	27
	.byte	'Ifx_CPU_DPWE',0,7,224,7,3
	.word	7179
	.byte	27
	.byte	'Ifx_CPU_DSTR',0,7,235,7,3
	.word	3538
	.byte	27
	.byte	'Ifx_CPU_EXEVT',0,7,246,7,3
	.word	9110
	.byte	27
	.byte	'Ifx_CPU_FCX',0,7,129,8,3
	.word	11447
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,7,140,8,3
	.word	5757
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,7,151,8,3
	.word	6009
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,7,162,8,3
	.word	5844
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,7,173,8,3
	.word	6100
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,7,184,8,3
	.word	6191
	.byte	27
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,7,195,8,3
	.word	6282
	.byte	27
	.byte	'Ifx_CPU_ICNT',0,7,206,8,3
	.word	8391
	.byte	27
	.byte	'Ifx_CPU_ICR',0,7,217,8,3
	.word	11327
	.byte	27
	.byte	'Ifx_CPU_ISP',0,7,228,8,3
	.word	11170
	.byte	27
	.byte	'Ifx_CPU_LCX',0,7,239,8,3
	.word	11567
	.byte	27
	.byte	'Ifx_CPU_M1CNT',0,7,250,8,3
	.word	8496
	.byte	27
	.byte	'Ifx_CPU_M2CNT',0,7,133,9,3
	.word	8601
	.byte	27
	.byte	'Ifx_CPU_M3CNT',0,7,144,9,3
	.word	8706
	.byte	27
	.byte	'Ifx_CPU_PC',0,7,155,9,3
	.word	10494
	.byte	27
	.byte	'Ifx_CPU_PCON0',0,7,166,9,3
	.word	4920
	.byte	27
	.byte	'Ifx_CPU_PCON1',0,7,177,9,3
	.word	4679
	.byte	27
	.byte	'Ifx_CPU_PCON2',0,7,188,9,3
	.word	4792
	.byte	27
	.byte	'Ifx_CPU_PCXI',0,7,199,9,3
	.word	10137
	.byte	27
	.byte	'Ifx_CPU_PIEAR',0,7,210,9,3
	.word	5001
	.byte	27
	.byte	'Ifx_CPU_PIETR',0,7,221,9,3
	.word	5242
	.byte	27
	.byte	'Ifx_CPU_PMA0',0,7,232,9,3
	.word	2586
	.byte	27
	.byte	'Ifx_CPU_PMA1',0,7,243,9,3
	.word	2712
	.byte	27
	.byte	'Ifx_CPU_PMA2',0,7,254,9,3
	.word	2816
	.byte	27
	.byte	'Ifx_CPU_PSTR',0,7,137,10,3
	.word	4556
	.byte	27
	.byte	'Ifx_CPU_PSW',0,7,148,10,3
	.word	10394
	.byte	27
	.byte	'Ifx_CPU_SEGEN',0,7,159,10,3
	.word	2329
	.byte	27
	.byte	'Ifx_CPU_SMACON',0,7,170,10,3
	.word	3201
	.byte	11,7,173,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16105
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENA',0,7,181,10,3
	.word	18266
	.byte	11,7,184,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16188
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENB',0,7,192,10,3
	.word	18336
	.byte	11,7,195,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16279
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,7,203,10,3
	.word	18406
	.byte	11,7,206,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16370
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,7,214,10,3
	.word	18480
	.byte	11,7,217,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16469
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,7,225,10,3
	.word	18554
	.byte	11,7,228,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16576
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,7,236,10,3
	.word	18624
	.byte	27
	.byte	'Ifx_CPU_SWEVT',0,7,247,10,3
	.word	9442
	.byte	27
	.byte	'Ifx_CPU_SYSCON',0,7,130,11,3
	.word	10666
	.byte	27
	.byte	'Ifx_CPU_TASK_ASI',0,7,141,11,3
	.word	2449
	.byte	27
	.byte	'Ifx_CPU_TPS_CON',0,7,152,11,3
	.word	7381
	.byte	27
	.byte	'Ifx_CPU_TPS_TIMER',0,7,163,11,3
	.word	7469
	.byte	27
	.byte	'Ifx_CPU_TR_ADR',0,7,174,11,3
	.word	7955
	.byte	27
	.byte	'Ifx_CPU_TR_EVT',0,7,185,11,3
	.word	7871
	.byte	27
	.byte	'Ifx_CPU_TRIG_ACC',0,7,196,11,3
	.word	9655
	.byte	13
	.word	6827
	.byte	27
	.byte	'Ifx_CPU_CPR',0,7,211,11,3
	.word	18893
	.byte	13
	.word	6547
	.byte	27
	.byte	'Ifx_CPU_DPR',0,7,218,11,3
	.word	18919
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN',0,7,221,11,25,16,12
	.byte	'LA',0
	.word	18554
	.byte	4,2,35,0,12
	.byte	'UA',0
	.word	18624
	.byte	4,2,35,4,12
	.byte	'ACCENA',0
	.word	18406
	.byte	4,2,35,8,12
	.byte	'ACCENB',0
	.word	18480
	.byte	4,2,35,12,0,13
	.word	18945
	.byte	27
	.byte	'Ifx_CPU_SPROT_RGN',0,7,227,11,3
	.word	19027
	.byte	13
	.word	7518
	.byte	27
	.byte	'Ifx_CPU_TPS',0,7,234,11,3
	.word	19059
	.byte	13
	.word	7995
	.byte	27
	.byte	'Ifx_CPU_TR',0,7,241,11,3
	.word	19085
	.byte	13
	.word	11916
	.byte	27
	.byte	'Ifx_CPU',0,7,218,12,3
	.word	19110
	.byte	27
	.byte	'IfxCpu_ResourceCpu',0,6,89,3
	.word	1263
	.byte	25,24
	.word	14418
	.byte	26,2,0,16
	.word	19159
	.byte	30
	.byte	'IfxCpu_cfg_indexMap',0,6,95,37
	.word	19168
	.byte	1,1,9
	.byte	'_Ifx_SRC_SRCR_Bits',0,11,45,16,4,10
	.byte	'SRPN',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	315
	.byte	2,6,2,35,1,10
	.byte	'SRE',0,1
	.word	315
	.byte	1,5,2,35,1,10
	.byte	'TOS',0,1
	.word	315
	.byte	2,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	315
	.byte	3,0,2,35,1,10
	.byte	'ECC',0,1
	.word	315
	.byte	6,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	315
	.byte	2,0,2,35,2,10
	.byte	'SRR',0,1
	.word	315
	.byte	1,7,2,35,3,10
	.byte	'CLRR',0,1
	.word	315
	.byte	1,6,2,35,3,10
	.byte	'SETR',0,1
	.word	315
	.byte	1,5,2,35,3,10
	.byte	'IOV',0,1
	.word	315
	.byte	1,4,2,35,3,10
	.byte	'IOVCLR',0,1
	.word	315
	.byte	1,3,2,35,3,10
	.byte	'SWS',0,1
	.word	315
	.byte	1,2,2,35,3,10
	.byte	'SWSCLR',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SRC_SRCR_Bits',0,11,62,3
	.word	19203
	.byte	11,11,70,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19203
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SRC_SRCR',0,11,78,3
	.word	19519
	.byte	9
	.byte	'_Ifx_SRC_AGBT',0,11,89,25,4,12
	.byte	'SR',0
	.word	19519
	.byte	4,2,35,0,0,13
	.word	19579
	.byte	27
	.byte	'Ifx_SRC_AGBT',0,11,92,3
	.word	19611
	.byte	9
	.byte	'_Ifx_SRC_ASCLIN',0,11,95,25,12,12
	.byte	'TX',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	19519
	.byte	4,2,35,8,0,13
	.word	19637
	.byte	27
	.byte	'Ifx_SRC_ASCLIN',0,11,100,3
	.word	19696
	.byte	9
	.byte	'_Ifx_SRC_BCUSPB',0,11,103,25,4,12
	.byte	'SBSRC',0
	.word	19519
	.byte	4,2,35,0,0,13
	.word	19724
	.byte	27
	.byte	'Ifx_SRC_BCUSPB',0,11,106,3
	.word	19761
	.byte	25,64
	.word	19519
	.byte	26,15,0,9
	.byte	'_Ifx_SRC_CAN',0,11,109,25,64,12
	.byte	'INT',0
	.word	19789
	.byte	64,2,35,0,0,13
	.word	19798
	.byte	27
	.byte	'Ifx_SRC_CAN',0,11,112,3
	.word	19830
	.byte	9
	.byte	'_Ifx_SRC_CCU6',0,11,115,25,16,12
	.byte	'SR0',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	19519
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	19519
	.byte	4,2,35,12,0,13
	.word	19855
	.byte	27
	.byte	'Ifx_SRC_CCU6',0,11,121,3
	.word	19927
	.byte	25,8
	.word	19519
	.byte	26,1,0,9
	.byte	'_Ifx_SRC_CERBERUS',0,11,124,25,8,12
	.byte	'SR',0
	.word	19953
	.byte	8,2,35,0,0,13
	.word	19962
	.byte	27
	.byte	'Ifx_SRC_CERBERUS',0,11,127,3
	.word	19998
	.byte	9
	.byte	'_Ifx_SRC_CIF',0,11,130,1,25,16,12
	.byte	'MI',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'MIEP',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'ISP',0
	.word	19519
	.byte	4,2,35,8,12
	.byte	'MJPEG',0
	.word	19519
	.byte	4,2,35,12,0,13
	.word	20028
	.byte	27
	.byte	'Ifx_SRC_CIF',0,11,136,1,3
	.word	20102
	.byte	9
	.byte	'_Ifx_SRC_CPU',0,11,139,1,25,4,12
	.byte	'SBSRC',0
	.word	19519
	.byte	4,2,35,0,0,13
	.word	20128
	.byte	27
	.byte	'Ifx_SRC_CPU',0,11,142,1,3
	.word	20163
	.byte	25,24
	.word	19519
	.byte	26,5,0,9
	.byte	'_Ifx_SRC_DAM',0,11,145,1,25,24,12
	.byte	'SR',0
	.word	20189
	.byte	24,2,35,0,0,13
	.word	20198
	.byte	27
	.byte	'Ifx_SRC_DAM',0,11,148,1,3
	.word	20230
	.byte	25,128,2
	.word	19519
	.byte	26,63,0,9
	.byte	'_Ifx_SRC_DMA',0,11,151,1,25,144,2,12
	.byte	'ERR',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	9695
	.byte	12,2,35,4,12
	.byte	'CH',0
	.word	20256
	.byte	128,2,2,35,16,0,13
	.word	20266
	.byte	27
	.byte	'Ifx_SRC_DMA',0,11,156,1,3
	.word	20333
	.byte	9
	.byte	'_Ifx_SRC_DSADC',0,11,159,1,25,8,12
	.byte	'SRM',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'SRA',0
	.word	19519
	.byte	4,2,35,4,0,13
	.word	20359
	.byte	27
	.byte	'Ifx_SRC_DSADC',0,11,163,1,3
	.word	20407
	.byte	9
	.byte	'_Ifx_SRC_EMEM',0,11,166,1,25,4,12
	.byte	'SR',0
	.word	19519
	.byte	4,2,35,0,0,13
	.word	20435
	.byte	27
	.byte	'Ifx_SRC_EMEM',0,11,169,1,3
	.word	20468
	.byte	25,40
	.word	315
	.byte	26,39,0,9
	.byte	'_Ifx_SRC_ERAY',0,11,172,1,25,80,12
	.byte	'INT',0
	.word	19953
	.byte	8,2,35,0,12
	.byte	'TINT',0
	.word	19953
	.byte	8,2,35,8,12
	.byte	'NDAT',0
	.word	19953
	.byte	8,2,35,16,12
	.byte	'MBSC',0
	.word	19953
	.byte	8,2,35,24,12
	.byte	'OBUSY',0
	.word	19519
	.byte	4,2,35,32,12
	.byte	'IBUSY',0
	.word	19519
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	20495
	.byte	40,2,35,40,0,13
	.word	20504
	.byte	27
	.byte	'Ifx_SRC_ERAY',0,11,181,1,3
	.word	20631
	.byte	9
	.byte	'_Ifx_SRC_ETH',0,11,184,1,25,4,12
	.byte	'SR',0
	.word	19519
	.byte	4,2,35,0,0,13
	.word	20658
	.byte	27
	.byte	'Ifx_SRC_ETH',0,11,187,1,3
	.word	20690
	.byte	9
	.byte	'_Ifx_SRC_FCE',0,11,190,1,25,4,12
	.byte	'SR',0
	.word	19519
	.byte	4,2,35,0,0,13
	.word	20716
	.byte	27
	.byte	'Ifx_SRC_FCE',0,11,193,1,3
	.word	20748
	.byte	9
	.byte	'_Ifx_SRC_GPSR',0,11,196,1,25,32,12
	.byte	'SR0',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	19519
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	19519
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	11607
	.byte	16,2,35,16,0,13
	.word	20774
	.byte	27
	.byte	'Ifx_SRC_GPSR',0,11,203,1,3
	.word	20868
	.byte	9
	.byte	'_Ifx_SRC_GPT12',0,11,206,1,25,48,12
	.byte	'CIRQ',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'T2',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'T3',0
	.word	19519
	.byte	4,2,35,8,12
	.byte	'T4',0
	.word	19519
	.byte	4,2,35,12,12
	.byte	'T5',0
	.word	19519
	.byte	4,2,35,16,12
	.byte	'T6',0
	.word	19519
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	4232
	.byte	24,2,35,24,0,13
	.word	20895
	.byte	27
	.byte	'Ifx_SRC_GPT12',0,11,215,1,3
	.word	21012
	.byte	25,12
	.word	19519
	.byte	26,2,0,25,32
	.word	19519
	.byte	26,7,0,25,32
	.word	21049
	.byte	26,0,0,25,88
	.word	315
	.byte	26,87,0,25,108
	.word	19519
	.byte	26,26,0,25,96
	.word	315
	.byte	26,95,0,25,128,1
	.word	21049
	.byte	26,3,0,25,128,3
	.word	315
	.byte	26,255,2,0,25,96
	.word	21049
	.byte	26,2,0,25,160,3
	.word	315
	.byte	26,159,3,0,25,16
	.word	19519
	.byte	26,3,0,25,80
	.word	21135
	.byte	26,4,0,25,176,2
	.word	315
	.byte	26,175,2,0,25,48
	.word	315
	.byte	26,47,0,9
	.byte	'_Ifx_SRC_GTM',0,11,218,1,25,208,18,12
	.byte	'AEIIRQ',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'ARUIRQ',0
	.word	21040
	.byte	12,2,35,4,12
	.byte	'reserved_10',0
	.word	3578
	.byte	4,2,35,16,12
	.byte	'BRCIRQ',0
	.word	19519
	.byte	4,2,35,20,12
	.byte	'CMPIRQ',0
	.word	19519
	.byte	4,2,35,24,12
	.byte	'SPEIRQ',0
	.word	19953
	.byte	8,2,35,28,12
	.byte	'reserved_24',0
	.word	2980
	.byte	8,2,35,36,12
	.byte	'PSM',0
	.word	21058
	.byte	32,2,35,44,12
	.byte	'reserved_4C',0
	.word	21067
	.byte	88,2,35,76,12
	.byte	'DPLL',0
	.word	21076
	.byte	108,3,35,164,1,12
	.byte	'reserved_110',0
	.word	21085
	.byte	96,3,35,144,2,12
	.byte	'ERR',0
	.word	19519
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	9695
	.byte	12,3,35,244,2,12
	.byte	'TIM',0
	.word	21094
	.byte	128,1,3,35,128,3,12
	.byte	'reserved_200',0
	.word	21104
	.byte	128,3,3,35,128,4,12
	.byte	'MCS',0
	.word	21094
	.byte	128,1,3,35,128,7,12
	.byte	'reserved_400',0
	.word	21104
	.byte	128,3,3,35,128,8,12
	.byte	'TOM',0
	.word	21115
	.byte	96,3,35,128,11,12
	.byte	'reserved_5E0',0
	.word	21124
	.byte	160,3,3,35,224,11,12
	.byte	'ATOM',0
	.word	21144
	.byte	80,3,35,128,15,12
	.byte	'reserved_7D0',0
	.word	21153
	.byte	176,2,3,35,208,15,12
	.byte	'MCSW0',0
	.word	21135
	.byte	16,3,35,128,18,12
	.byte	'reserved_910',0
	.word	21164
	.byte	48,3,35,144,18,12
	.byte	'MCSW1',0
	.word	21135
	.byte	16,3,35,192,18,0,13
	.word	21173
	.byte	27
	.byte	'Ifx_SRC_GTM',0,11,244,1,3
	.word	21635
	.byte	9
	.byte	'_Ifx_SRC_HSCT',0,11,247,1,25,4,12
	.byte	'SR',0
	.word	19519
	.byte	4,2,35,0,0,13
	.word	21661
	.byte	27
	.byte	'Ifx_SRC_HSCT',0,11,250,1,3
	.word	21694
	.byte	9
	.byte	'_Ifx_SRC_HSM',0,11,253,1,25,8,12
	.byte	'HSM',0
	.word	19953
	.byte	8,2,35,0,0,13
	.word	21721
	.byte	27
	.byte	'Ifx_SRC_HSM',0,11,128,2,3
	.word	21754
	.byte	9
	.byte	'_Ifx_SRC_HSSL',0,11,131,2,25,16,12
	.byte	'COK',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'RDI',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	19519
	.byte	4,2,35,8,12
	.byte	'TRG',0
	.word	19519
	.byte	4,2,35,12,0,13
	.word	21780
	.byte	27
	.byte	'Ifx_SRC_HSSL',0,11,137,2,3
	.word	21853
	.byte	25,56
	.word	315
	.byte	26,55,0,9
	.byte	'_Ifx_SRC_I2C',0,11,140,2,25,80,12
	.byte	'BREQ',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'LBREQ',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'SREQ',0
	.word	19519
	.byte	4,2,35,8,12
	.byte	'LSREQ',0
	.word	19519
	.byte	4,2,35,12,12
	.byte	'ERR',0
	.word	19519
	.byte	4,2,35,16,12
	.byte	'P',0
	.word	19519
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	21880
	.byte	56,2,35,24,0,13
	.word	21889
	.byte	27
	.byte	'Ifx_SRC_I2C',0,11,149,2,3
	.word	22012
	.byte	9
	.byte	'_Ifx_SRC_LMU',0,11,152,2,25,4,12
	.byte	'SR',0
	.word	19519
	.byte	4,2,35,0,0,13
	.word	22038
	.byte	27
	.byte	'Ifx_SRC_LMU',0,11,155,2,3
	.word	22070
	.byte	9
	.byte	'_Ifx_SRC_MSC',0,11,158,2,25,20,12
	.byte	'SR0',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	19519
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	19519
	.byte	4,2,35,12,12
	.byte	'SR4',0
	.word	19519
	.byte	4,2,35,16,0,13
	.word	22096
	.byte	27
	.byte	'Ifx_SRC_MSC',0,11,165,2,3
	.word	22181
	.byte	9
	.byte	'_Ifx_SRC_PMU',0,11,168,2,25,4,12
	.byte	'SR',0
	.word	19519
	.byte	4,2,35,0,0,13
	.word	22207
	.byte	27
	.byte	'Ifx_SRC_PMU',0,11,171,2,3
	.word	22239
	.byte	9
	.byte	'_Ifx_SRC_PSI5',0,11,174,2,25,32,12
	.byte	'SR',0
	.word	21049
	.byte	32,2,35,0,0,13
	.word	22265
	.byte	27
	.byte	'Ifx_SRC_PSI5',0,11,177,2,3
	.word	22298
	.byte	9
	.byte	'_Ifx_SRC_PSI5S',0,11,180,2,25,32,12
	.byte	'SR',0
	.word	21049
	.byte	32,2,35,0,0,13
	.word	22325
	.byte	27
	.byte	'Ifx_SRC_PSI5S',0,11,183,2,3
	.word	22359
	.byte	9
	.byte	'_Ifx_SRC_QSPI',0,11,186,2,25,24,12
	.byte	'TX',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	19519
	.byte	4,2,35,8,12
	.byte	'PT',0
	.word	19519
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	3578
	.byte	4,2,35,16,12
	.byte	'U',0
	.word	19519
	.byte	4,2,35,20,0,13
	.word	22387
	.byte	27
	.byte	'Ifx_SRC_QSPI',0,11,194,2,3
	.word	22489
	.byte	9
	.byte	'_Ifx_SRC_SCU',0,11,197,2,25,20,12
	.byte	'DTS',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'ERU',0
	.word	21135
	.byte	16,2,35,4,0,13
	.word	22516
	.byte	27
	.byte	'Ifx_SRC_SCU',0,11,201,2,3
	.word	22562
	.byte	25,40
	.word	19519
	.byte	26,9,0,9
	.byte	'_Ifx_SRC_SENT',0,11,204,2,25,40,12
	.byte	'SR',0
	.word	22588
	.byte	40,2,35,0,0,13
	.word	22597
	.byte	27
	.byte	'Ifx_SRC_SENT',0,11,207,2,3
	.word	22630
	.byte	9
	.byte	'_Ifx_SRC_SMU',0,11,210,2,25,12,12
	.byte	'SR',0
	.word	21040
	.byte	12,2,35,0,0,13
	.word	22657
	.byte	27
	.byte	'Ifx_SRC_SMU',0,11,213,2,3
	.word	22689
	.byte	9
	.byte	'_Ifx_SRC_STM',0,11,216,2,25,8,12
	.byte	'SR0',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19519
	.byte	4,2,35,4,0,13
	.word	22715
	.byte	27
	.byte	'Ifx_SRC_STM',0,11,220,2,3
	.word	22761
	.byte	9
	.byte	'_Ifx_SRC_VADCCG',0,11,223,2,25,16,12
	.byte	'SR0',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	19519
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	19519
	.byte	4,2,35,12,0,13
	.word	22787
	.byte	27
	.byte	'Ifx_SRC_VADCCG',0,11,229,2,3
	.word	22862
	.byte	9
	.byte	'_Ifx_SRC_VADCG',0,11,232,2,25,16,12
	.byte	'SR0',0
	.word	19519
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19519
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	19519
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	19519
	.byte	4,2,35,12,0,13
	.word	22891
	.byte	27
	.byte	'Ifx_SRC_VADCG',0,11,238,2,3
	.word	22965
	.byte	9
	.byte	'_Ifx_SRC_XBAR',0,11,241,2,25,4,12
	.byte	'SRC',0
	.word	19519
	.byte	4,2,35,0,0,13
	.word	22993
	.byte	27
	.byte	'Ifx_SRC_XBAR',0,11,244,2,3
	.word	23027
	.byte	25,4
	.word	19579
	.byte	26,0,0,13
	.word	23054
	.byte	9
	.byte	'_Ifx_SRC_GAGBT',0,11,129,3,25,4,12
	.byte	'AGBT',0
	.word	23063
	.byte	4,2,35,0,0,13
	.word	23068
	.byte	27
	.byte	'Ifx_SRC_GAGBT',0,11,132,3,3
	.word	23104
	.byte	25,48
	.word	19637
	.byte	26,3,0,13
	.word	23132
	.byte	9
	.byte	'_Ifx_SRC_GASCLIN',0,11,135,3,25,48,12
	.byte	'ASCLIN',0
	.word	23141
	.byte	48,2,35,0,0,13
	.word	23146
	.byte	27
	.byte	'Ifx_SRC_GASCLIN',0,11,138,3,3
	.word	23186
	.byte	13
	.word	19724
	.byte	9
	.byte	'_Ifx_SRC_GBCU',0,11,141,3,25,4,12
	.byte	'SPB',0
	.word	23216
	.byte	4,2,35,0,0,13
	.word	23221
	.byte	27
	.byte	'Ifx_SRC_GBCU',0,11,144,3,3
	.word	23255
	.byte	25,64
	.word	19798
	.byte	26,0,0,13
	.word	23282
	.byte	9
	.byte	'_Ifx_SRC_GCAN',0,11,147,3,25,64,12
	.byte	'CAN',0
	.word	23291
	.byte	64,2,35,0,0,13
	.word	23296
	.byte	27
	.byte	'Ifx_SRC_GCAN',0,11,150,3,3
	.word	23330
	.byte	25,32
	.word	19855
	.byte	26,1,0,13
	.word	23357
	.byte	9
	.byte	'_Ifx_SRC_GCCU6',0,11,153,3,25,32,12
	.byte	'CCU6',0
	.word	23366
	.byte	32,2,35,0,0,13
	.word	23371
	.byte	27
	.byte	'Ifx_SRC_GCCU6',0,11,156,3,3
	.word	23407
	.byte	13
	.word	19962
	.byte	9
	.byte	'_Ifx_SRC_GCERBERUS',0,11,159,3,25,8,12
	.byte	'CERBERUS',0
	.word	23435
	.byte	8,2,35,0,0,13
	.word	23440
	.byte	27
	.byte	'Ifx_SRC_GCERBERUS',0,11,162,3,3
	.word	23484
	.byte	25,16
	.word	20028
	.byte	26,0,0,13
	.word	23516
	.byte	9
	.byte	'_Ifx_SRC_GCIF',0,11,165,3,25,16,12
	.byte	'CIF',0
	.word	23525
	.byte	16,2,35,0,0,13
	.word	23530
	.byte	27
	.byte	'Ifx_SRC_GCIF',0,11,168,3,3
	.word	23564
	.byte	25,12
	.word	20128
	.byte	26,2,0,13
	.word	23591
	.byte	9
	.byte	'_Ifx_SRC_GCPU',0,11,171,3,25,12,12
	.byte	'CPU',0
	.word	23600
	.byte	12,2,35,0,0,13
	.word	23605
	.byte	27
	.byte	'Ifx_SRC_GCPU',0,11,174,3,3
	.word	23639
	.byte	25,24
	.word	20198
	.byte	26,0,0,13
	.word	23666
	.byte	9
	.byte	'_Ifx_SRC_GDAM',0,11,177,3,25,24,12
	.byte	'DAM',0
	.word	23675
	.byte	24,2,35,0,0,13
	.word	23680
	.byte	27
	.byte	'Ifx_SRC_GDAM',0,11,180,3,3
	.word	23714
	.byte	25,144,2
	.word	20266
	.byte	26,0,0,13
	.word	23741
	.byte	9
	.byte	'_Ifx_SRC_GDMA',0,11,183,3,25,144,2,12
	.byte	'DMA',0
	.word	23751
	.byte	144,2,2,35,0,0,13
	.word	23756
	.byte	27
	.byte	'Ifx_SRC_GDMA',0,11,186,3,3
	.word	23792
	.byte	25,48
	.word	20359
	.byte	26,5,0,13
	.word	23819
	.byte	9
	.byte	'_Ifx_SRC_GDSADC',0,11,189,3,25,48,12
	.byte	'DSADC',0
	.word	23828
	.byte	48,2,35,0,0,13
	.word	23833
	.byte	27
	.byte	'Ifx_SRC_GDSADC',0,11,192,3,3
	.word	23871
	.byte	25,4
	.word	20435
	.byte	26,0,0,13
	.word	23900
	.byte	9
	.byte	'_Ifx_SRC_GEMEM',0,11,195,3,25,4,12
	.byte	'EMEM',0
	.word	23909
	.byte	4,2,35,0,0,13
	.word	23914
	.byte	27
	.byte	'Ifx_SRC_GEMEM',0,11,198,3,3
	.word	23950
	.byte	25,80
	.word	20504
	.byte	26,0,0,13
	.word	23978
	.byte	9
	.byte	'_Ifx_SRC_GERAY',0,11,201,3,25,80,12
	.byte	'ERAY',0
	.word	23987
	.byte	80,2,35,0,0,13
	.word	23992
	.byte	27
	.byte	'Ifx_SRC_GERAY',0,11,204,3,3
	.word	24028
	.byte	25,4
	.word	20658
	.byte	26,0,0,13
	.word	24056
	.byte	9
	.byte	'_Ifx_SRC_GETH',0,11,207,3,25,4,12
	.byte	'ETH',0
	.word	24065
	.byte	4,2,35,0,0,13
	.word	24070
	.byte	27
	.byte	'Ifx_SRC_GETH',0,11,210,3,3
	.word	24104
	.byte	25,4
	.word	20716
	.byte	26,0,0,13
	.word	24131
	.byte	9
	.byte	'_Ifx_SRC_GFCE',0,11,213,3,25,4,12
	.byte	'FCE',0
	.word	24140
	.byte	4,2,35,0,0,13
	.word	24145
	.byte	27
	.byte	'Ifx_SRC_GFCE',0,11,216,3,3
	.word	24179
	.byte	25,96
	.word	20774
	.byte	26,2,0,13
	.word	24206
	.byte	9
	.byte	'_Ifx_SRC_GGPSR',0,11,219,3,25,96,12
	.byte	'GPSR',0
	.word	24215
	.byte	96,2,35,0,0,13
	.word	24220
	.byte	27
	.byte	'Ifx_SRC_GGPSR',0,11,222,3,3
	.word	24256
	.byte	25,48
	.word	20895
	.byte	26,0,0,13
	.word	24284
	.byte	9
	.byte	'_Ifx_SRC_GGPT12',0,11,225,3,25,48,12
	.byte	'GPT12',0
	.word	24293
	.byte	48,2,35,0,0,13
	.word	24298
	.byte	27
	.byte	'Ifx_SRC_GGPT12',0,11,228,3,3
	.word	24336
	.byte	25,208,18
	.word	21173
	.byte	26,0,0,13
	.word	24365
	.byte	9
	.byte	'_Ifx_SRC_GGTM',0,11,231,3,25,208,18,12
	.byte	'GTM',0
	.word	24375
	.byte	208,18,2,35,0,0,13
	.word	24380
	.byte	27
	.byte	'Ifx_SRC_GGTM',0,11,234,3,3
	.word	24416
	.byte	25,4
	.word	21661
	.byte	26,0,0,13
	.word	24443
	.byte	9
	.byte	'_Ifx_SRC_GHSCT',0,11,237,3,25,4,12
	.byte	'HSCT',0
	.word	24452
	.byte	4,2,35,0,0,13
	.word	24457
	.byte	27
	.byte	'Ifx_SRC_GHSCT',0,11,240,3,3
	.word	24493
	.byte	25,8
	.word	21721
	.byte	26,0,0,13
	.word	24521
	.byte	9
	.byte	'_Ifx_SRC_GHSM',0,11,243,3,25,8,12
	.byte	'HSM',0
	.word	24530
	.byte	8,2,35,0,0,13
	.word	24535
	.byte	27
	.byte	'Ifx_SRC_GHSM',0,11,246,3,3
	.word	24569
	.byte	25,64
	.word	21780
	.byte	26,3,0,13
	.word	24596
	.byte	9
	.byte	'_Ifx_SRC_GHSSL',0,11,249,3,25,68,12
	.byte	'HSSL',0
	.word	24605
	.byte	64,2,35,0,12
	.byte	'EXI',0
	.word	19519
	.byte	4,2,35,64,0,13
	.word	24610
	.byte	27
	.byte	'Ifx_SRC_GHSSL',0,11,253,3,3
	.word	24659
	.byte	25,80
	.word	21889
	.byte	26,0,0,13
	.word	24687
	.byte	9
	.byte	'_Ifx_SRC_GI2C',0,11,128,4,25,80,12
	.byte	'I2C',0
	.word	24696
	.byte	80,2,35,0,0,13
	.word	24701
	.byte	27
	.byte	'Ifx_SRC_GI2C',0,11,131,4,3
	.word	24735
	.byte	25,4
	.word	22038
	.byte	26,0,0,13
	.word	24762
	.byte	9
	.byte	'_Ifx_SRC_GLMU',0,11,134,4,25,4,12
	.byte	'LMU',0
	.word	24771
	.byte	4,2,35,0,0,13
	.word	24776
	.byte	27
	.byte	'Ifx_SRC_GLMU',0,11,137,4,3
	.word	24810
	.byte	25,40
	.word	22096
	.byte	26,1,0,13
	.word	24837
	.byte	9
	.byte	'_Ifx_SRC_GMSC',0,11,140,4,25,40,12
	.byte	'MSC',0
	.word	24846
	.byte	40,2,35,0,0,13
	.word	24851
	.byte	27
	.byte	'Ifx_SRC_GMSC',0,11,143,4,3
	.word	24885
	.byte	25,8
	.word	22207
	.byte	26,1,0,13
	.word	24912
	.byte	9
	.byte	'_Ifx_SRC_GPMU',0,11,146,4,25,8,12
	.byte	'PMU',0
	.word	24921
	.byte	8,2,35,0,0,13
	.word	24926
	.byte	27
	.byte	'Ifx_SRC_GPMU',0,11,149,4,3
	.word	24960
	.byte	25,32
	.word	22265
	.byte	26,0,0,13
	.word	24987
	.byte	9
	.byte	'_Ifx_SRC_GPSI5',0,11,152,4,25,32,12
	.byte	'PSI5',0
	.word	24996
	.byte	32,2,35,0,0,13
	.word	25001
	.byte	27
	.byte	'Ifx_SRC_GPSI5',0,11,155,4,3
	.word	25037
	.byte	25,32
	.word	22325
	.byte	26,0,0,13
	.word	25065
	.byte	9
	.byte	'_Ifx_SRC_GPSI5S',0,11,158,4,25,32,12
	.byte	'PSI5S',0
	.word	25074
	.byte	32,2,35,0,0,13
	.word	25079
	.byte	27
	.byte	'Ifx_SRC_GPSI5S',0,11,161,4,3
	.word	25117
	.byte	25,96
	.word	22387
	.byte	26,3,0,13
	.word	25146
	.byte	9
	.byte	'_Ifx_SRC_GQSPI',0,11,164,4,25,96,12
	.byte	'QSPI',0
	.word	25155
	.byte	96,2,35,0,0,13
	.word	25160
	.byte	27
	.byte	'Ifx_SRC_GQSPI',0,11,167,4,3
	.word	25196
	.byte	13
	.word	22516
	.byte	9
	.byte	'_Ifx_SRC_GSCU',0,11,170,4,25,20,12
	.byte	'SCU',0
	.word	25224
	.byte	20,2,35,0,0,13
	.word	25229
	.byte	27
	.byte	'Ifx_SRC_GSCU',0,11,173,4,3
	.word	25263
	.byte	25,40
	.word	22597
	.byte	26,0,0,13
	.word	25290
	.byte	9
	.byte	'_Ifx_SRC_GSENT',0,11,176,4,25,40,12
	.byte	'SENT',0
	.word	25299
	.byte	40,2,35,0,0,13
	.word	25304
	.byte	27
	.byte	'Ifx_SRC_GSENT',0,11,179,4,3
	.word	25340
	.byte	25,12
	.word	22657
	.byte	26,0,0,13
	.word	25368
	.byte	9
	.byte	'_Ifx_SRC_GSMU',0,11,182,4,25,12,12
	.byte	'SMU',0
	.word	25377
	.byte	12,2,35,0,0,13
	.word	25382
	.byte	27
	.byte	'Ifx_SRC_GSMU',0,11,185,4,3
	.word	25416
	.byte	25,24
	.word	22715
	.byte	26,2,0,13
	.word	25443
	.byte	9
	.byte	'_Ifx_SRC_GSTM',0,11,188,4,25,24,12
	.byte	'STM',0
	.word	25452
	.byte	24,2,35,0,0,13
	.word	25457
	.byte	27
	.byte	'Ifx_SRC_GSTM',0,11,191,4,3
	.word	25491
	.byte	25,128,1
	.word	22891
	.byte	26,7,0,13
	.word	25518
	.byte	25,160,1
	.word	315
	.byte	26,159,1,0,25,32
	.word	22787
	.byte	26,1,0,13
	.word	25544
	.byte	9
	.byte	'_Ifx_SRC_GVADC',0,11,194,4,25,192,2,12
	.byte	'G',0
	.word	25528
	.byte	128,1,2,35,0,12
	.byte	'reserved_80',0
	.word	25533
	.byte	160,1,3,35,128,1,12
	.byte	'CG',0
	.word	25553
	.byte	32,3,35,160,2,0,13
	.word	25558
	.byte	27
	.byte	'Ifx_SRC_GVADC',0,11,199,4,3
	.word	25629
	.byte	13
	.word	22993
	.byte	9
	.byte	'_Ifx_SRC_GXBAR',0,11,202,4,25,4,12
	.byte	'XBAR',0
	.word	25657
	.byte	4,2,35,0,0,13
	.word	25662
	.byte	27
	.byte	'Ifx_SRC_GXBAR',0,11,205,4,3
	.word	25698
	.byte	9
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,10
	.byte	'EN0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	315
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	315
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	315
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	315
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	315
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	315
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	315
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	315
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	315
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	315
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	315
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	315
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	315
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	315
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	315
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	315
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	315
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	315
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	315
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	25726
	.byte	9
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,10
	.byte	'reserved_0',0,4
	.word	292
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	26283
	.byte	9
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,10
	.byte	'STM0DIS',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'STM1DIS',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'STM2DIS',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	292
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	26360
	.byte	9
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,10
	.byte	'BAUD1DIV',0,1
	.word	315
	.byte	4,4,2,35,0,10
	.byte	'BAUD2DIV',0,1
	.word	315
	.byte	4,0,2,35,0,10
	.byte	'SRIDIV',0,1
	.word	315
	.byte	4,4,2,35,1,10
	.byte	'LPDIV',0,1
	.word	315
	.byte	4,0,2,35,1,10
	.byte	'SPBDIV',0,1
	.word	315
	.byte	4,4,2,35,2,10
	.byte	'FSI2DIV',0,1
	.word	315
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	315
	.byte	2,0,2,35,2,10
	.byte	'FSIDIV',0,1
	.word	315
	.byte	2,6,2,35,3,10
	.byte	'ADCCLKSEL',0,1
	.word	315
	.byte	2,4,2,35,3,10
	.byte	'CLKSEL',0,1
	.word	315
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	26496
	.byte	9
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,10
	.byte	'CANDIV',0,1
	.word	315
	.byte	4,4,2,35,0,10
	.byte	'ERAYDIV',0,1
	.word	315
	.byte	4,0,2,35,0,10
	.byte	'STMDIV',0,1
	.word	315
	.byte	4,4,2,35,1,10
	.byte	'GTMDIV',0,1
	.word	315
	.byte	4,0,2,35,1,10
	.byte	'ETHDIV',0,1
	.word	315
	.byte	4,4,2,35,2,10
	.byte	'ASCLINFDIV',0,1
	.word	315
	.byte	4,0,2,35,2,10
	.byte	'ASCLINSDIV',0,1
	.word	315
	.byte	4,4,2,35,3,10
	.byte	'INSEL',0,1
	.word	315
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	26774
	.byte	9
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,10
	.byte	'BBBDIV',0,1
	.word	315
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	292
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	27012
	.byte	9
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,10
	.byte	'PLLDIV',0,1
	.word	315
	.byte	6,2,2,35,0,10
	.byte	'PLLSEL',0,1
	.word	315
	.byte	2,0,2,35,0,10
	.byte	'PLLERAYDIV',0,1
	.word	315
	.byte	6,2,2,35,1,10
	.byte	'PLLERAYSEL',0,1
	.word	315
	.byte	2,0,2,35,1,10
	.byte	'SRIDIV',0,1
	.word	315
	.byte	6,2,2,35,2,10
	.byte	'SRISEL',0,1
	.word	315
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	5,3,2,35,3,10
	.byte	'SLCK',0,1
	.word	315
	.byte	1,2,2,35,3,10
	.byte	'UP',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,150,1,3
	.word	27140
	.byte	9
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,153,1,16,4,10
	.byte	'SPBDIV',0,1
	.word	315
	.byte	6,2,2,35,0,10
	.byte	'SPBSEL',0,1
	.word	315
	.byte	2,0,2,35,0,10
	.byte	'GTMDIV',0,1
	.word	315
	.byte	6,2,2,35,1,10
	.byte	'GTMSEL',0,1
	.word	315
	.byte	2,0,2,35,1,10
	.byte	'STMDIV',0,1
	.word	315
	.byte	6,2,2,35,2,10
	.byte	'STMSEL',0,1
	.word	315
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	5,3,2,35,3,10
	.byte	'SLCK',0,1
	.word	315
	.byte	1,2,2,35,3,10
	.byte	'UP',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,165,1,3
	.word	27383
	.byte	9
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,168,1,16,4,10
	.byte	'MAXDIV',0,1
	.word	315
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	292
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,174,1,3
	.word	27618
	.byte	9
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,177,1,16,4,10
	.byte	'CPU0DIV',0,1
	.word	315
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	292
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,181,1,3
	.word	27746
	.byte	9
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,184,1,16,4,10
	.byte	'CPU1DIV',0,1
	.word	315
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	292
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,188,1,3
	.word	27846
	.byte	9
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,191,1,16,4,10
	.byte	'CPU2DIV',0,1
	.word	315
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	292
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,195,1,3
	.word	27946
	.byte	9
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,4,198,1,16,4,10
	.byte	'ADCDIV',0,1
	.word	315
	.byte	6,2,2,35,0,10
	.byte	'ADCSEL',0,1
	.word	315
	.byte	2,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	292
	.byte	21,3,2,35,0,10
	.byte	'SLCK',0,1
	.word	315
	.byte	1,2,2,35,3,10
	.byte	'UP',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON9_Bits',0,4,206,1,3
	.word	28046
	.byte	9
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,209,1,16,4,10
	.byte	'CHREV',0,1
	.word	315
	.byte	6,2,2,35,0,10
	.byte	'CHTEC',0,1
	.word	315
	.byte	2,0,2,35,0,10
	.byte	'CHID',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'EEA',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'UCODE',0,1
	.word	315
	.byte	7,0,2,35,2,10
	.byte	'FSIZE',0,1
	.word	315
	.byte	4,4,2,35,3,10
	.byte	'SP',0,1
	.word	315
	.byte	2,2,2,35,3,10
	.byte	'SEC',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,220,1,3
	.word	28208
	.byte	9
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,223,1,16,4,10
	.byte	'PWD',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'START',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	315
	.byte	2,4,2,35,0,10
	.byte	'CAL',0,4
	.word	292
	.byte	20,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	7,1,2,35,3,10
	.byte	'SLCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,231,1,3
	.word	28416
	.byte	9
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,234,1,16,4,10
	.byte	'LOWER',0,2
	.word	332
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	315
	.byte	5,1,2,35,1,10
	.byte	'LLU',0,1
	.word	315
	.byte	1,0,2,35,1,10
	.byte	'UPPER',0,2
	.word	332
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	315
	.byte	4,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'UOF',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,243,1,3
	.word	28581
	.byte	9
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,246,1,16,4,10
	.byte	'RESULT',0,2
	.word	332
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	315
	.byte	4,2,2,35,1,10
	.byte	'RDY',0,1
	.word	315
	.byte	1,1,2,35,1,10
	.byte	'BUSY',0,1
	.word	315
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,253,1,3
	.word	28764
	.byte	9
	.byte	'_Ifx_SCU_EICR_Bits',0,4,128,2,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	4,4,2,35,0,10
	.byte	'EXIS0',0,1
	.word	315
	.byte	3,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'FEN0',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'REN0',0,1
	.word	315
	.byte	1,6,2,35,1,10
	.byte	'LDEN0',0,1
	.word	315
	.byte	1,5,2,35,1,10
	.byte	'EIEN0',0,1
	.word	315
	.byte	1,4,2,35,1,10
	.byte	'INP0',0,1
	.word	315
	.byte	3,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	292
	.byte	5,12,2,35,0,10
	.byte	'EXIS1',0,1
	.word	315
	.byte	3,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	315
	.byte	1,0,2,35,2,10
	.byte	'FEN1',0,1
	.word	315
	.byte	1,7,2,35,3,10
	.byte	'REN1',0,1
	.word	315
	.byte	1,6,2,35,3,10
	.byte	'LDEN1',0,1
	.word	315
	.byte	1,5,2,35,3,10
	.byte	'EIEN1',0,1
	.word	315
	.byte	1,4,2,35,3,10
	.byte	'INP1',0,1
	.word	315
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EICR_Bits',0,4,147,2,3
	.word	28918
	.byte	9
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,150,2,16,4,10
	.byte	'INTF0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'INTF1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'INTF2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'INTF3',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'INTF4',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'INTF5',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'INTF6',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'INTF7',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	292
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_EIFR_Bits',0,4,161,2,3
	.word	29282
	.byte	9
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,164,2,16,4,10
	.byte	'POL',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'MODE',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'ENON',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'PSEL',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	332
	.byte	12,0,2,35,0,10
	.byte	'EMSF',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'SEMSF',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	315
	.byte	6,0,2,35,2,10
	.byte	'EMSFM',0,1
	.word	315
	.byte	2,6,2,35,3,10
	.byte	'SEMSFM',0,1
	.word	315
	.byte	2,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	315
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_EMSR_Bits',0,4,177,2,3
	.word	29493
	.byte	9
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,180,2,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	7,1,2,35,0,10
	.byte	'EDCON',0,2
	.word	332
	.byte	2,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	292
	.byte	23,0,2,35,0,0,27
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,185,2,3
	.word	29745
	.byte	9
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,188,2,16,4,10
	.byte	'ARI',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'ARC',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	292
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,193,2,3
	.word	29863
	.byte	9
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,196,2,16,4,10
	.byte	'reserved_0',0,4
	.word	292
	.byte	28,4,2,35,0,10
	.byte	'EVR13OFF',0,1
	.word	315
	.byte	1,3,2,35,3,10
	.byte	'BPEVR13OFF',0,1
	.word	315
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,203,2,3
	.word	29974
	.byte	9
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,4,206,2,16,4,10
	.byte	'reserved_0',0,4
	.word	292
	.byte	28,4,2,35,0,10
	.byte	'EVR33OFF',0,1
	.word	315
	.byte	1,3,2,35,3,10
	.byte	'BPEVR33OFF',0,1
	.word	315
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVR33CON_Bits',0,4,213,2,3
	.word	30137
	.byte	9
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,216,2,16,4,10
	.byte	'ADC13V',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'ADC33V',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'ADCSWDV',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,223,2,3
	.word	30300
	.byte	9
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,4,226,2,16,4,10
	.byte	'DVS13TRIM',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'DVS33TRIM',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,4,233,2,3
	.word	30458
	.byte	9
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,236,2,16,4,10
	.byte	'EVR13OVMOD',0,1
	.word	315
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	315
	.byte	2,4,2,35,0,10
	.byte	'EVR13UVMOD',0,1
	.word	315
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	315
	.byte	2,0,2,35,0,10
	.byte	'EVR33OVMOD',0,1
	.word	315
	.byte	2,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	315
	.byte	2,4,2,35,1,10
	.byte	'EVR33UVMOD',0,1
	.word	315
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	315
	.byte	2,0,2,35,1,10
	.byte	'SWDOVMOD',0,1
	.word	315
	.byte	2,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	315
	.byte	2,4,2,35,2,10
	.byte	'SWDUVMOD',0,1
	.word	315
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	332
	.byte	8,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,252,2,3
	.word	30623
	.byte	9
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,4,255,2,16,4,10
	.byte	'OSCTRIM',0,2
	.word	332
	.byte	10,6,2,35,0,10
	.byte	'OSCPTAT',0,1
	.word	315
	.byte	6,0,2,35,1,10
	.byte	'OSCANASEL',0,1
	.word	315
	.byte	4,4,2,35,2,10
	.byte	'HPBGTRIM',0,2
	.word	332
	.byte	7,5,2,35,2,10
	.byte	'HPBGCLKEN',0,1
	.word	315
	.byte	1,4,2,35,3,10
	.byte	'OSC3V3',0,1
	.word	315
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	315
	.byte	2,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,4,137,3,3
	.word	30991
	.byte	9
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,140,3,16,4,10
	.byte	'EVR13OVVAL',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'EVR33OVVAL',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'SWDOVVAL',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,148,3,3
	.word	31212
	.byte	9
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,151,3,16,4,10
	.byte	'RST13TRIM',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	292
	.byte	16,8,2,35,0,10
	.byte	'RST13OFF',0,1
	.word	315
	.byte	1,7,2,35,3,10
	.byte	'BPRST13OFF',0,1
	.word	315
	.byte	1,6,2,35,3,10
	.byte	'RST33OFF',0,1
	.word	315
	.byte	1,5,2,35,3,10
	.byte	'BPRST33OFF',0,1
	.word	315
	.byte	1,4,2,35,3,10
	.byte	'RSTSWDOFF',0,1
	.word	315
	.byte	1,3,2,35,3,10
	.byte	'BPRSTSWDOFF',0,1
	.word	315
	.byte	1,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,163,3,3
	.word	31391
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,4,166,3,16,4,10
	.byte	'SD5P',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'SD5I',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'SD5D',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,4,173,3,3
	.word	31656
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,176,3,16,4,10
	.byte	'SD33P',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'SD33I',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'SD33D',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,183,3,3
	.word	31809
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,4,186,3,16,4,10
	.byte	'CT5REG0',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'CT5REG1',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'CT5REG2',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,4,193,3,3
	.word	31965
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,4,196,3,16,4,10
	.byte	'CT5REG3',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'CT5REG4',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	15,1,2,35,2,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,4,202,3,3
	.word	32127
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,4,205,3,16,4,10
	.byte	'CT33REG0',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'CT33REG1',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'CT33REG2',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,4,212,3,3
	.word	32270
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,4,215,3,16,4,10
	.byte	'CT33REG3',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'CT33REG4',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	15,1,2,35,2,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,4,221,3,3
	.word	32435
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,224,3,16,4,10
	.byte	'SDFREQSPRD',0,2
	.word	332
	.byte	16,0,2,35,0,10
	.byte	'SDFREQ',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'SDSTEP',0,1
	.word	315
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	315
	.byte	2,2,2,35,3,10
	.byte	'SDSAMPLE',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,232,3,3
	.word	32580
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,235,3,16,4,10
	.byte	'DRVP',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'SDMINMAXDC',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'DRVN',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'SDLUT',0,1
	.word	315
	.byte	6,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,243,3,3
	.word	32761
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,246,3,16,4,10
	.byte	'SDPWMPRE',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'SDPID',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'SDVOKLVL',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,253,3,3
	.word	32935
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,4,128,4,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'SYNCDIV',0,1
	.word	315
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	292
	.byte	20,1,2,35,0,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,4,134,4,3
	.word	33095
	.byte	9
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,137,4,16,4,10
	.byte	'EVR13',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'OV13',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'EVR33',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'OV33',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'OVSWD',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'UV13',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'UV33',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'UVSWD',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'EXTPASS13',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'EXTPASS33',0,1
	.word	315
	.byte	1,6,2,35,1,10
	.byte	'BGPROK',0,1
	.word	315
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	292
	.byte	21,0,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,151,4,3
	.word	33239
	.byte	9
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,4,154,4,16,4,10
	.byte	'EVR13TRIM',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'SDVOUTSEL',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	14,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,4,161,4,3
	.word	33513
	.byte	9
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,164,4,16,4,10
	.byte	'EVR13UVVAL',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'EVR33UVVAL',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'SWDUVVAL',0,1
	.word	315
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,172,4,3
	.word	33668
	.byte	9
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,175,4,16,4,10
	.byte	'EN0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'SEL0',0,1
	.word	315
	.byte	4,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	332
	.byte	10,0,2,35,0,10
	.byte	'EN1',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'NSEL',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'SEL1',0,1
	.word	315
	.byte	4,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	315
	.byte	2,0,2,35,2,10
	.byte	'DIV1',0,1
	.word	315
	.byte	8,0,2,35,3,0,27
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,186,4,3
	.word	33847
	.byte	9
	.byte	'_Ifx_SCU_FDR_Bits',0,4,189,4,16,4,10
	.byte	'STEP',0,2
	.word	332
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	315
	.byte	4,2,2,35,1,10
	.byte	'DM',0,1
	.word	315
	.byte	2,0,2,35,1,10
	.byte	'RESULT',0,2
	.word	332
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	315
	.byte	5,1,2,35,3,10
	.byte	'DISCLK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_FDR_Bits',0,4,197,4,3
	.word	34065
	.byte	9
	.byte	'_Ifx_SCU_FMR_Bits',0,4,200,4,16,4,10
	.byte	'FS0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'FS1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'FS2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'FS3',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'FS4',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'FS5',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'FS6',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'FS7',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'FC0',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'FC1',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'FC2',0,1
	.word	315
	.byte	1,5,2,35,2,10
	.byte	'FC3',0,1
	.word	315
	.byte	1,4,2,35,2,10
	.byte	'FC4',0,1
	.word	315
	.byte	1,3,2,35,2,10
	.byte	'FC5',0,1
	.word	315
	.byte	1,2,2,35,2,10
	.byte	'FC6',0,1
	.word	315
	.byte	1,1,2,35,2,10
	.byte	'FC7',0,1
	.word	315
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	8,0,2,35,3,0,27
	.byte	'Ifx_SCU_FMR_Bits',0,4,220,4,3
	.word	34228
	.byte	9
	.byte	'_Ifx_SCU_ID_Bits',0,4,223,4,16,4,10
	.byte	'MODREV',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_ID_Bits',0,4,228,4,3
	.word	34564
	.byte	9
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,231,4,16,4,10
	.byte	'IPEN00',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'IPEN01',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'IPEN02',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'IPEN03',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'IPEN04',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'IPEN05',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'IPEN06',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'IPEN07',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	315
	.byte	5,3,2,35,1,10
	.byte	'GEEN0',0,1
	.word	315
	.byte	1,2,2,35,1,10
	.byte	'IGP0',0,1
	.word	315
	.byte	2,0,2,35,1,10
	.byte	'IPEN10',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'IPEN11',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'IPEN12',0,1
	.word	315
	.byte	1,5,2,35,2,10
	.byte	'IPEN13',0,1
	.word	315
	.byte	1,4,2,35,2,10
	.byte	'IPEN14',0,1
	.word	315
	.byte	1,3,2,35,2,10
	.byte	'IPEN15',0,1
	.word	315
	.byte	1,2,2,35,2,10
	.byte	'IPEN16',0,1
	.word	315
	.byte	1,1,2,35,2,10
	.byte	'IPEN17',0,1
	.word	315
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	5,3,2,35,3,10
	.byte	'GEEN1',0,1
	.word	315
	.byte	1,2,2,35,3,10
	.byte	'IGP1',0,1
	.word	315
	.byte	2,0,2,35,3,0,27
	.byte	'Ifx_SCU_IGCR_Bits',0,4,255,4,3
	.word	34671
	.byte	9
	.byte	'_Ifx_SCU_IN_Bits',0,4,130,5,16,4,10
	.byte	'P0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	292
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_IN_Bits',0,4,135,5,3
	.word	35123
	.byte	9
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,138,5,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	4,4,2,35,0,10
	.byte	'PC0',0,1
	.word	315
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	315
	.byte	4,4,2,35,1,10
	.byte	'PC1',0,1
	.word	315
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_IOCR_Bits',0,4,145,5,3
	.word	35222
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,148,5,16,4,10
	.byte	'LBISTREQ',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'LBISTREQP',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'PATTERNS',0,2
	.word	332
	.byte	14,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,154,5,3
	.word	35372
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,157,5,16,4,10
	.byte	'SEED',0,4
	.word	292
	.byte	23,9,2,35,0,10
	.byte	'reserved_23',0,1
	.word	315
	.byte	1,0,2,35,2,10
	.byte	'SPLITSH',0,1
	.word	315
	.byte	3,5,2,35,3,10
	.byte	'BODY',0,1
	.word	315
	.byte	1,4,2,35,3,10
	.byte	'LBISTFREQU',0,1
	.word	315
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,164,5,3
	.word	35521
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,167,5,16,4,10
	.byte	'SIGNATURE',0,4
	.word	292
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	315
	.byte	7,1,2,35,3,10
	.byte	'LBISTDONE',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,172,5,3
	.word	35682
	.byte	9
	.byte	'_Ifx_SCU_LCLCON_Bits',0,4,175,5,16,4,10
	.byte	'reserved_0',0,2
	.word	332
	.byte	16,0,2,35,0,10
	.byte	'LS',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	332
	.byte	14,1,2,35,2,10
	.byte	'LSEN',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_LCLCON_Bits',0,4,181,5,3
	.word	35812
	.byte	9
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,184,5,16,4,10
	.byte	'LCLT0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'LCLT1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	292
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,189,5,3
	.word	35944
	.byte	9
	.byte	'_Ifx_SCU_MANID_Bits',0,4,192,5,16,4,10
	.byte	'DEPT',0,1
	.word	315
	.byte	5,3,2,35,0,10
	.byte	'MANUF',0,2
	.word	332
	.byte	11,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_MANID_Bits',0,4,197,5,3
	.word	36059
	.byte	9
	.byte	'_Ifx_SCU_OMR_Bits',0,4,200,5,16,4,10
	.byte	'PS0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	332
	.byte	14,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	332
	.byte	14,0,2,35,2,0,27
	.byte	'Ifx_SCU_OMR_Bits',0,4,208,5,3
	.word	36170
	.byte	9
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,211,5,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'PLLLV',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'OSCRES',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'GAINSEL',0,1
	.word	315
	.byte	2,3,2,35,0,10
	.byte	'MODE',0,1
	.word	315
	.byte	2,1,2,35,0,10
	.byte	'SHBY',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'PLLHV',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	315
	.byte	1,6,2,35,1,10
	.byte	'X1D',0,1
	.word	315
	.byte	1,5,2,35,1,10
	.byte	'X1DEN',0,1
	.word	315
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	315
	.byte	4,0,2,35,1,10
	.byte	'OSCVAL',0,1
	.word	315
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	315
	.byte	2,1,2,35,2,10
	.byte	'APREN',0,1
	.word	315
	.byte	1,0,2,35,2,10
	.byte	'CAP0EN',0,1
	.word	315
	.byte	1,7,2,35,3,10
	.byte	'CAP1EN',0,1
	.word	315
	.byte	1,6,2,35,3,10
	.byte	'CAP2EN',0,1
	.word	315
	.byte	1,5,2,35,3,10
	.byte	'CAP3EN',0,1
	.word	315
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	315
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,232,5,3
	.word	36328
	.byte	9
	.byte	'_Ifx_SCU_OUT_Bits',0,4,235,5,16,4,10
	.byte	'P0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	292
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_OUT_Bits',0,4,240,5,3
	.word	36740
	.byte	9
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,243,5,16,4,10
	.byte	'CSEL0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'CSEL1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'CSEL2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	332
	.byte	13,0,2,35,0,10
	.byte	'OVSTRT',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'OVSTP',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'DCINVAL',0,1
	.word	315
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	315
	.byte	5,0,2,35,2,10
	.byte	'OVCONF',0,1
	.word	315
	.byte	1,7,2,35,3,10
	.byte	'POVCONF',0,1
	.word	315
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	315
	.byte	6,0,2,35,3,0,27
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,128,6,3
	.word	36841
	.byte	9
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,131,6,16,4,10
	.byte	'OVEN0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'OVEN1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'OVEN2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	292
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,137,6,3
	.word	37108
	.byte	9
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,140,6,16,4,10
	.byte	'PDIS0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	292
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_PDISC_Bits',0,4,145,6,3
	.word	37244
	.byte	9
	.byte	'_Ifx_SCU_PDR_Bits',0,4,148,6,16,4,10
	.byte	'PD0',0,1
	.word	315
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	315
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	292
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_PDR_Bits',0,4,155,6,3
	.word	37355
	.byte	9
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,158,6,16,4,10
	.byte	'PDR0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'PDR1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'PDR2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'PDR3',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'PDR4',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'PDR5',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'PDR6',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'PDR7',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	292
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_PDRR_Bits',0,4,169,6,3
	.word	37488
	.byte	9
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,172,6,16,4,10
	.byte	'VCOBYP',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'MODEN',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	332
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	315
	.byte	7,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	315
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	315
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	315
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	315
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,189,6,3
	.word	37691
	.byte	9
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,192,6,16,4,10
	.byte	'K2DIV',0,1
	.word	315
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	315
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	315
	.byte	1,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	315
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	332
	.byte	9,0,2,35,2,0,27
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,200,6,3
	.word	38047
	.byte	9
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,203,6,16,4,10
	.byte	'MODCFG',0,2
	.word	332
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,207,6,3
	.word	38225
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,210,6,16,4,10
	.byte	'VCOBYP',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	315
	.byte	2,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	332
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	315
	.byte	5,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	315
	.byte	2,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	315
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	315
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	315
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	315
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,227,6,3
	.word	38325
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,230,6,16,4,10
	.byte	'K2DIV',0,1
	.word	315
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	315
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	315
	.byte	4,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	315
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	332
	.byte	9,0,2,35,2,0,27
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,238,6,3
	.word	38695
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,241,6,16,4,10
	.byte	'VCOBYST',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'PWDSTAT',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	292
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,250,6,3
	.word	38881
	.byte	9
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,253,6,16,4,10
	.byte	'VCOBYST',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'MODRUN',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	292
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,136,7,3
	.word	39079
	.byte	27
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,146,7,3
	.word	13864
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,149,7,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'ESR1WKEN',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'PINAWKEN',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'PINBWKEN',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'ESR0DFEN',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'ESR0EDCON',0,1
	.word	315
	.byte	2,1,2,35,0,10
	.byte	'ESR1DFEN',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'ESR1EDCON',0,1
	.word	315
	.byte	2,6,2,35,1,10
	.byte	'PINADFEN',0,1
	.word	315
	.byte	1,5,2,35,1,10
	.byte	'PINAEDCON',0,1
	.word	315
	.byte	2,3,2,35,1,10
	.byte	'PINBDFEN',0,1
	.word	315
	.byte	1,2,2,35,1,10
	.byte	'PINBEDCON',0,1
	.word	315
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'STBYRAMSEL',0,1
	.word	315
	.byte	2,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	315
	.byte	2,3,2,35,2,10
	.byte	'TRISTEN',0,1
	.word	315
	.byte	1,2,2,35,2,10
	.byte	'TRISTREQ',0,1
	.word	315
	.byte	1,1,2,35,2,10
	.byte	'PORSTDF',0,1
	.word	315
	.byte	1,0,2,35,2,10
	.byte	'PWRWKEN',0,1
	.word	315
	.byte	1,7,2,35,3,10
	.byte	'DCDCSYNC',0,1
	.word	315
	.byte	1,6,2,35,3,10
	.byte	'BLNKFIL',0,1
	.word	315
	.byte	3,3,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	315
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	315
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,175,7,3
	.word	39340
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,178,7,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'CPUIDLSEL',0,1
	.word	315
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	315
	.byte	1,4,2,35,1,10
	.byte	'IRADIS',0,1
	.word	315
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	292
	.byte	11,8,2,35,0,10
	.byte	'CPUSEL',0,1
	.word	315
	.byte	3,5,2,35,3,10
	.byte	'STBYEVEN',0,1
	.word	315
	.byte	1,4,2,35,3,10
	.byte	'STBYEV',0,1
	.word	315
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	315
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,189,7,3
	.word	39888
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,192,7,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKP',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUN',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'PINAWKP',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUN',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'PINBWKP',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUN',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'PWRWKP',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'PORSTDF',0,1
	.word	315
	.byte	1,6,2,35,1,10
	.byte	'HWCFGEVR',0,1
	.word	315
	.byte	3,3,2,35,1,10
	.byte	'STBYRAM',0,1
	.word	315
	.byte	2,1,2,35,1,10
	.byte	'TRIST',0,1
	.word	315
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	315
	.byte	4,4,2,35,2,10
	.byte	'ESR1WKEN',0,1
	.word	315
	.byte	1,3,2,35,2,10
	.byte	'PINAWKEN',0,1
	.word	315
	.byte	1,2,2,35,2,10
	.byte	'PINBWKEN',0,1
	.word	315
	.byte	1,1,2,35,2,10
	.byte	'PWRWKEN',0,1
	.word	315
	.byte	1,0,2,35,2,10
	.byte	'BLNKFIL',0,1
	.word	315
	.byte	3,5,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	315
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	315
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,214,7,3
	.word	40133
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,217,7,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKPCLR',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUNCLR',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'PINAWKPCLR',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUNCLR',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'PINBWKPCLR',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUNCLR',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'PWRWKPCLR',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	292
	.byte	23,0,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,228,7,3
	.word	40594
	.byte	9
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,231,7,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'CLRC',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	332
	.byte	10,4,2,35,0,10
	.byte	'CSS0',0,1
	.word	315
	.byte	1,3,2,35,1,10
	.byte	'CSS1',0,1
	.word	315
	.byte	1,2,2,35,1,10
	.byte	'CSS2',0,1
	.word	315
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	315
	.byte	1,0,2,35,1,10
	.byte	'USRINFO',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,241,7,3
	.word	40864
	.byte	9
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,244,7,16,4,10
	.byte	'ESR0',0,1
	.word	315
	.byte	2,6,2,35,0,10
	.byte	'ESR1',0,1
	.word	315
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	315
	.byte	2,2,2,35,0,10
	.byte	'SMU',0,1
	.word	315
	.byte	2,0,2,35,0,10
	.byte	'SW',0,1
	.word	315
	.byte	2,6,2,35,1,10
	.byte	'STM0',0,1
	.word	315
	.byte	2,4,2,35,1,10
	.byte	'STM1',0,1
	.word	315
	.byte	2,2,2,35,1,10
	.byte	'STM2',0,1
	.word	315
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,255,7,3
	.word	41073
	.byte	9
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,130,8,16,4,10
	.byte	'ESR0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'ESR1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'SMU',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'SW',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'STM0',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'STM1',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'STM2',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	315
	.byte	8,0,2,35,1,10
	.byte	'PORST',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'CB0',0,1
	.word	315
	.byte	1,5,2,35,2,10
	.byte	'CB1',0,1
	.word	315
	.byte	1,4,2,35,2,10
	.byte	'CB3',0,1
	.word	315
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	315
	.byte	2,1,2,35,2,10
	.byte	'EVR13',0,1
	.word	315
	.byte	1,0,2,35,2,10
	.byte	'EVR33',0,1
	.word	315
	.byte	1,7,2,35,3,10
	.byte	'SWD',0,1
	.word	315
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	315
	.byte	2,4,2,35,3,10
	.byte	'STBYR',0,1
	.word	315
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	315
	.byte	3,0,2,35,3,0,27
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,153,8,3
	.word	41284
	.byte	9
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,156,8,16,4,10
	.byte	'HBT',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	292
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,160,8,3
	.word	41716
	.byte	9
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,163,8,16,4,10
	.byte	'HWCFG',0,1
	.word	315
	.byte	8,0,2,35,0,10
	.byte	'FTM',0,1
	.word	315
	.byte	7,1,2,35,1,10
	.byte	'MODE',0,1
	.word	315
	.byte	1,0,2,35,1,10
	.byte	'FCBAE',0,1
	.word	315
	.byte	1,7,2,35,2,10
	.byte	'LUDIS',0,1
	.word	315
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	315
	.byte	1,5,2,35,2,10
	.byte	'TRSTL',0,1
	.word	315
	.byte	1,4,2,35,2,10
	.byte	'SPDEN',0,1
	.word	315
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	315
	.byte	3,0,2,35,2,10
	.byte	'RAMINT',0,1
	.word	315
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	315
	.byte	7,0,2,35,3,0,27
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,176,8,3
	.word	41812
	.byte	9
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,179,8,16,4,10
	.byte	'reserved_0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'SWRSTREQ',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	292
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,184,8,3
	.word	42072
	.byte	9
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,187,8,16,4,10
	.byte	'CCTRIG0',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'RAMINTM',0,1
	.word	315
	.byte	2,4,2,35,0,10
	.byte	'SETLUDIS',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	315
	.byte	3,0,2,35,0,10
	.byte	'DATM',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	292
	.byte	23,0,2,35,0,0,27
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,196,8,3
	.word	42197
	.byte	9
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,199,8,16,4,10
	.byte	'ESR0T',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	292
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,206,8,3
	.word	42394
	.byte	9
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,209,8,16,4,10
	.byte	'ESR0T',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	292
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,216,8,3
	.word	42547
	.byte	9
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,219,8,16,4,10
	.byte	'ESR0T',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	292
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,226,8,3
	.word	42700
	.byte	9
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,229,8,16,4,10
	.byte	'ESR0T',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	292
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,236,8,3
	.word	42853
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,245,8,3
	.word	354
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,132,9,3
	.word	490
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,148,9,3
	.word	734
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,151,9,16,4,10
	.byte	'ENDINIT',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'LCK',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'PW',0,2
	.word	332
	.byte	14,0,2,35,0,10
	.byte	'REL',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,157,9,3
	.word	43108
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,160,9,16,4,10
	.byte	'CLRIRF',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'IR0',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	315
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,173,9,3
	.word	43234
	.byte	9
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,176,9,16,4,10
	.byte	'AE',0,1
	.word	315
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	315
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	315
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	315
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	315
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	315
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	315
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	315
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	315
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	315
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	332
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,189,9,3
	.word	43486
	.byte	11,4,197,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25726
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ACCEN0',0,4,205,9,3
	.word	43705
	.byte	11,4,208,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26283
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ACCEN1',0,4,216,9,3
	.word	43769
	.byte	11,4,219,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26360
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ARSTDIS',0,4,227,9,3
	.word	43833
	.byte	11,4,230,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26496
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON0',0,4,238,9,3
	.word	43898
	.byte	11,4,241,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26774
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON1',0,4,249,9,3
	.word	43963
	.byte	11,4,252,9,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27012
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON2',0,4,132,10,3
	.word	44028
	.byte	11,4,135,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27140
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON3',0,4,143,10,3
	.word	44093
	.byte	11,4,146,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27383
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON4',0,4,154,10,3
	.word	44158
	.byte	11,4,157,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27618
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON5',0,4,165,10,3
	.word	44223
	.byte	11,4,168,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27746
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON6',0,4,176,10,3
	.word	44288
	.byte	11,4,179,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27846
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON7',0,4,187,10,3
	.word	44353
	.byte	11,4,190,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27946
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON8',0,4,198,10,3
	.word	44418
	.byte	11,4,201,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28046
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON9',0,4,209,10,3
	.word	44483
	.byte	11,4,212,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28208
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CHIPID',0,4,220,10,3
	.word	44548
	.byte	11,4,223,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28416
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_DTSCON',0,4,231,10,3
	.word	44612
	.byte	11,4,234,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28581
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_DTSLIM',0,4,242,10,3
	.word	44676
	.byte	11,4,245,10,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28764
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_DTSSTAT',0,4,253,10,3
	.word	44740
	.byte	11,4,128,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28918
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EICR',0,4,136,11,3
	.word	44805
	.byte	11,4,139,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29282
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EIFR',0,4,147,11,3
	.word	44867
	.byte	11,4,150,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29493
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EMSR',0,4,158,11,3
	.word	44929
	.byte	11,4,161,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29745
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ESRCFG',0,4,169,11,3
	.word	44991
	.byte	11,4,172,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29863
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ESROCFG',0,4,180,11,3
	.word	45055
	.byte	11,4,183,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29974
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVR13CON',0,4,191,11,3
	.word	45120
	.byte	11,4,194,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30137
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVR33CON',0,4,202,11,3
	.word	45186
	.byte	11,4,205,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30300
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,213,11,3
	.word	45252
	.byte	11,4,216,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30458
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRDVSTAT',0,4,224,11,3
	.word	45320
	.byte	11,4,227,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30623
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,235,11,3
	.word	45387
	.byte	11,4,238,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30991
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVROSCCTRL',0,4,246,11,3
	.word	45455
	.byte	11,4,249,11,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31212
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVROVMON',0,4,129,12,3
	.word	45523
	.byte	11,4,132,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31391
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRRSTCON',0,4,140,12,3
	.word	45589
	.byte	11,4,143,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31656
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,4,151,12,3
	.word	45656
	.byte	11,4,154,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31809
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,162,12,3
	.word	45725
	.byte	11,4,165,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31965
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,4,173,12,3
	.word	45794
	.byte	11,4,176,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32127
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,4,184,12,3
	.word	45863
	.byte	11,4,187,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32270
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,4,195,12,3
	.word	45932
	.byte	11,4,198,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32435
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,4,206,12,3
	.word	46001
	.byte	11,4,209,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32580
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,217,12,3
	.word	46070
	.byte	11,4,220,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32761
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,228,12,3
	.word	46138
	.byte	11,4,231,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32935
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,239,12,3
	.word	46206
	.byte	11,4,242,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33095
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL4',0,4,250,12,3
	.word	46274
	.byte	11,4,253,12,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33239
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSTAT',0,4,133,13,3
	.word	46342
	.byte	11,4,136,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33513
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRTRIM',0,4,144,13,3
	.word	46407
	.byte	11,4,147,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33668
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRUVMON',0,4,155,13,3
	.word	46472
	.byte	11,4,158,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33847
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EXTCON',0,4,166,13,3
	.word	46538
	.byte	11,4,169,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34065
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_FDR',0,4,177,13,3
	.word	46602
	.byte	11,4,180,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34228
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_FMR',0,4,188,13,3
	.word	46663
	.byte	11,4,191,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34564
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ID',0,4,199,13,3
	.word	46724
	.byte	11,4,202,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34671
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_IGCR',0,4,210,13,3
	.word	46784
	.byte	11,4,213,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35123
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_IN',0,4,221,13,3
	.word	46846
	.byte	11,4,224,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35222
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_IOCR',0,4,232,13,3
	.word	46906
	.byte	11,4,235,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35372
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,243,13,3
	.word	46968
	.byte	11,4,246,13,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35521
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,254,13,3
	.word	47036
	.byte	11,4,129,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35682
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,137,14,3
	.word	47104
	.byte	11,4,140,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35812
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LCLCON',0,4,148,14,3
	.word	47172
	.byte	11,4,151,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35944
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LCLTEST',0,4,159,14,3
	.word	47236
	.byte	11,4,162,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36059
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_MANID',0,4,170,14,3
	.word	47301
	.byte	11,4,173,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36170
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OMR',0,4,181,14,3
	.word	47364
	.byte	11,4,184,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36328
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OSCCON',0,4,192,14,3
	.word	47425
	.byte	11,4,195,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36740
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OUT',0,4,203,14,3
	.word	47489
	.byte	11,4,206,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36841
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OVCCON',0,4,214,14,3
	.word	47550
	.byte	11,4,217,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37108
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OVCENABLE',0,4,225,14,3
	.word	47614
	.byte	11,4,228,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37244
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PDISC',0,4,236,14,3
	.word	47681
	.byte	11,4,239,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37355
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PDR',0,4,247,14,3
	.word	47744
	.byte	11,4,250,14,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37488
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PDRR',0,4,130,15,3
	.word	47805
	.byte	11,4,133,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37691
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLCON0',0,4,141,15,3
	.word	47867
	.byte	11,4,144,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38047
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLCON1',0,4,152,15,3
	.word	47932
	.byte	11,4,155,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38225
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLCON2',0,4,163,15,3
	.word	47997
	.byte	11,4,166,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38325
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,174,15,3
	.word	48062
	.byte	11,4,177,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38695
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,185,15,3
	.word	48131
	.byte	11,4,188,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38881
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,196,15,3
	.word	48200
	.byte	11,4,199,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39079
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLSTAT',0,4,207,15,3
	.word	48269
	.byte	27
	.byte	'Ifx_SCU_PMCSR',0,4,218,15,3
	.word	13988
	.byte	11,4,221,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39340
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWCR0',0,4,229,15,3
	.word	48357
	.byte	11,4,232,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39888
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWCR1',0,4,240,15,3
	.word	48422
	.byte	11,4,243,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40133
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWSTAT',0,4,251,15,3
	.word	48487
	.byte	11,4,254,15,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40594
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,134,16,3
	.word	48553
	.byte	11,4,137,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41073
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_RSTCON',0,4,145,16,3
	.word	48622
	.byte	11,4,148,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40864
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_RSTCON2',0,4,156,16,3
	.word	48686
	.byte	11,4,159,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41284
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_RSTSTAT',0,4,167,16,3
	.word	48751
	.byte	11,4,170,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41716
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_SAFECON',0,4,178,16,3
	.word	48816
	.byte	11,4,181,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41812
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_STSTAT',0,4,189,16,3
	.word	48881
	.byte	11,4,192,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42072
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_SWRSTCON',0,4,200,16,3
	.word	48945
	.byte	11,4,203,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42197
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_SYSCON',0,4,211,16,3
	.word	49011
	.byte	11,4,214,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42394
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPCLR',0,4,222,16,3
	.word	49075
	.byte	11,4,225,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42547
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPDIS',0,4,233,16,3
	.word	49140
	.byte	11,4,236,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42700
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSET',0,4,244,16,3
	.word	49205
	.byte	11,4,247,16,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42853
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSTAT',0,4,255,16,3
	.word	49270
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,138,17,3
	.word	450
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,149,17,3
	.word	694
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,160,17,3
	.word	925
	.byte	11,4,163,17,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43108
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_WDTS_CON0',0,4,171,17,3
	.word	49421
	.byte	11,4,174,17,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43234
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_WDTS_CON1',0,4,182,17,3
	.word	49488
	.byte	11,4,185,17,9,4,12
	.byte	'U',0
	.word	292
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	308
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43486
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_WDTS_SR',0,4,193,17,3
	.word	49555
	.byte	13
	.word	965
	.byte	27
	.byte	'Ifx_SCU_WDTCPU',0,4,209,17,3
	.word	49620
	.byte	9
	.byte	'_Ifx_SCU_WDTS',0,4,212,17,25,12,12
	.byte	'CON0',0
	.word	49421
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	49488
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	49555
	.byte	4,2,35,8,0,13
	.word	49649
	.byte	27
	.byte	'Ifx_SCU_WDTS',0,4,217,17,3
	.word	49710
	.byte	14,12,145,11,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,27
	.byte	'IfxScu_WDTCON1_IR',0,12,150,11,3
	.word	49737
	.byte	27
	.byte	'IfxCpu_spinLock',0,5,92,22
	.word	292
	.byte	27
	.byte	'IfxCpu_mutexLock',0,5,96,22
	.word	292
	.byte	27
	.byte	'IfxCpu_CoreMode',0,5,114,3
	.word	13717
	.byte	14,5,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,27
	.byte	'IfxCpu_CounterMode',0,5,122,3
	.word	49932
	.byte	29,5,132,1,9,6,12
	.byte	'counter',0
	.word	1440
	.byte	4,2,35,0,12
	.byte	'overlfow',0
	.word	315
	.byte	1,2,35,4,0,27
	.byte	'IfxCpu_Counter',0,5,136,1,3
	.word	50019
	.byte	29,5,144,1,9,32,12
	.byte	'instruction',0
	.word	50019
	.byte	6,2,35,0,12
	.byte	'clock',0
	.word	50019
	.byte	6,2,35,6,12
	.byte	'counter1',0
	.word	50019
	.byte	6,2,35,12,12
	.byte	'counter2',0
	.word	50019
	.byte	6,2,35,18,12
	.byte	'counter3',0
	.word	50019
	.byte	6,2,35,24,0,27
	.byte	'IfxCpu_Perf',0,5,151,1,3
	.word	50085
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L72:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	0,0,0,4,36,0,3,8,11,15,62,15,0,0,5,59,0,3,8,0,0,6,15,0,73,19,0,0,7,46,1,3,8,32,13,58,15,59,15,57,15,73
	.byte	19,54,15,39,12,0,0,8,5,0,3,8,58,15,59,15,57,15,73,19,0,0,9,19,1,3,8,58,15,59,15,57,15,11,15,0,0,10,13
	.byte	0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,11,23,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,13,53,0,73,19,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,38,0,73,19,0,0,17
	.byte	46,1,3,8,54,15,39,12,63,12,60,12,0,0,18,5,0,73,19,0,0,19,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,20
	.byte	5,0,3,8,73,19,0,0,21,46,1,49,19,0,0,22,5,0,49,19,0,0,23,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60
	.byte	12,0,0,24,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,25,1,1,11,15,73,19,0,0,26,33,0
	.byte	47,15,0,0,27,22,0,3,8,58,15,59,15,57,15,73,19,0,0,28,21,0,54,15,0,0,29,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,30,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L73:
	.word	.L271-.L270
.L270:
	.half	3
	.word	.L273-.L272
.L272:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl',0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0
	.byte	'IfxCpu_cfg.h',0,2,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Platform_Types.h',0,0
	.byte	0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Ifx_Types.h',0,0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'IfxScu_cfg.h',0,2,0,0,0
.L273:
.L271:
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_info'
.L74:
	.word	243
	.half	3
	.word	.L75
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L77,.L76
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_getAddress',0,1,57,10
	.word	.L134
	.byte	1,1,1
	.word	.L49,.L135,.L48
	.byte	4
	.byte	'cpu',0,1,57,47
	.word	.L136,.L137
	.byte	5
	.word	.L49,.L135
	.byte	6
	.byte	'module',0,1,59,14
	.word	.L134,.L138
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_abbrev'
.L75:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_line'
.L76:
	.word	.L275-.L274
.L274:
	.half	3
	.word	.L277-.L276
.L276:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L277:
	.byte	5,5,7,0,5,2
	.word	.L49
	.byte	3,60,1,5,29,7,9
	.half	.L278-.L49
	.byte	3,2,1,5,48,9
	.half	.L279-.L278
	.byte	1,5,53,9
	.half	.L280-.L279
	.byte	1,5,1,9
	.half	.L227-.L280
	.byte	3,8,1,5,16,7,9
	.half	.L4-.L227
	.byte	3,124,1,5,1,9
	.half	.L228-.L4
	.byte	3,4,1,7,9
	.half	.L78-.L228
	.byte	0,1,1
.L275:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_ranges'
.L77:
	.word	-1,.L49,0,.L78-.L49,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_info'
.L79:
	.word	358
	.half	3
	.word	.L80
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L82,.L81
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_getCoreMode',0,1,74,17
	.word	.L139
	.byte	1,1,1
	.word	.L51,.L140,.L50
	.byte	4
	.byte	'cpu',0,1,74,45
	.word	.L134,.L141
	.byte	5
	.word	.L51,.L140
	.byte	6
	.byte	'cpuMode',0,1,76,24
	.word	.L139,.L142
	.byte	6
	.byte	'dbgsr',0,1,77,24
	.word	.L143,.L144
	.byte	6
	.byte	'index',0,1,78,24
	.word	.L136,.L145
	.byte	7
	.word	.L146,.L147,.L148
	.byte	8
	.word	.L149,.L147,.L148
	.byte	6
	.byte	'reg',0,2,172,5,21
	.word	.L150,.L151
	.byte	0,0,5
	.word	.L152,.L10
	.byte	6
	.byte	'pmcsr_val',0,1,102,28
	.word	.L153,.L154
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_abbrev'
.L80:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_line'
.L81:
	.word	.L282-.L281
.L281:
	.half	3
	.word	.L284-.L283
.L283:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L284:
	.byte	5,17,7,0,5,2
	.word	.L51
	.byte	3,201,0,1,5,48,9
	.half	.L230-.L51
	.byte	3,4,1,5,13,9
	.half	.L229-.L230
	.byte	3,2,1,4,2,5,19,9
	.half	.L147-.L229
	.byte	3,221,4,1,5,37,9
	.half	.L232-.L147
	.byte	3,1,1,4,1,5,5,9
	.half	.L148-.L232
	.byte	3,166,123,1,5,20,7,9
	.half	.L285-.L148
	.byte	3,2,1,5,27,9
	.half	.L233-.L285
	.byte	1,5,25,9
	.half	.L7-.L233
	.byte	3,4,1,5,16,9
	.half	.L8-.L7
	.byte	3,4,1,5,5,9
	.half	.L234-.L8
	.byte	1,5,17,7,9
	.half	.L286-.L234
	.byte	3,2,1,5,39,1,5,9,9
	.half	.L9-.L286
	.byte	3,4,1,5,53,7,9
	.half	.L152-.L9
	.byte	3,4,1,5,59,9
	.half	.L231-.L152
	.byte	1,5,29,9
	.half	.L235-.L231
	.byte	3,2,1,5,13,9
	.half	.L287-.L235
	.byte	1,5,25,7,9
	.half	.L288-.L287
	.byte	3,2,1,5,46,1,5,17,9
	.half	.L12-.L288
	.byte	3,4,1,5,29,7,9
	.half	.L289-.L12
	.byte	3,2,1,5,5,9
	.half	.L10-.L289
	.byte	3,10,1,5,1,3,1,1,7,9
	.half	.L83-.L10
	.byte	0,1,1
.L282:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_ranges'
.L82:
	.word	-1,.L51,0,.L83-.L51,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_info'
.L84:
	.word	263
	.half	3
	.word	.L85
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L87,.L86
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_getIndex',0,1,128,1,20
	.word	.L136
	.byte	1,1,1
	.word	.L53,.L155,.L52
	.byte	4
	.byte	'cpu',0,1,128,1,45
	.word	.L134,.L156
	.byte	5
	.word	.L53,.L155
	.byte	6
	.byte	'result',0,1,130,1,24
	.word	.L136,.L157
	.byte	6
	.byte	'index',0,1,131,1,24
	.word	.L158,.L159
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_abbrev'
.L85:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_line'
.L86:
	.word	.L291-.L290
.L290:
	.half	3
	.word	.L293-.L292
.L292:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L293:
	.byte	5,12,7,0,5,2
	.word	.L53
	.byte	3,131,1,1,5,13,3,4,1,5,47,9
	.half	.L294-.L53
	.byte	3,126,1,5,39,9
	.half	.L17-.L294
	.byte	3,2,1,5,9,9
	.half	.L295-.L17
	.byte	1,5,68,7,9
	.half	.L296-.L295
	.byte	3,2,1,5,22,9
	.half	.L297-.L296
	.byte	1,5,1,3,6,1,5,54,7,9
	.half	.L18-.L297
	.byte	3,118,1,5,47,1,5,1,7,9
	.half	.L298-.L18
	.byte	3,10,1,7,9
	.half	.L88-.L298
	.byte	0,1,1
.L291:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_ranges'
.L87:
	.word	-1,.L53,0,.L88-.L53,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_info'
.L89:
	.word	423
	.half	3
	.word	.L90
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L92,.L91
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_setCoreMode',0,1,135,2,9
	.word	.L160
	.byte	1,1,1
	.word	.L63,.L161,.L62
	.byte	4
	.byte	'cpu',0,1,135,2,37
	.word	.L134,.L162
	.byte	4
	.byte	'mode',0,1,135,2,58
	.word	.L139,.L163
	.byte	5
	.word	.L63,.L161
	.byte	6
	.byte	'reqslp',0,1,238,2,24
	.word	.L160,.L164
	.byte	6
	.byte	'retValue',0,1,239,2,24
	.word	.L160,.L165
	.byte	6
	.byte	'index',0,1,240,2,24
	.word	.L136,.L166
	.byte	7
	.word	.L146,.L167,.L168
	.byte	8
	.word	.L149,.L169
	.byte	6
	.byte	'reg',0,2,172,5,21
	.word	.L150,.L172
	.byte	0,0,9
	.word	.L173
	.byte	6
	.byte	'safetyWdtPw',0,1,254,2,20
	.word	.L177,.L178
	.byte	0,10
	.word	.L146,.L170,.L171
	.byte	5
	.word	.L33,.L32
	.byte	6
	.byte	'cpuWdtPw',0,1,136,3,20
	.word	.L177,.L179
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_abbrev'
.L90:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,85,6,0,0,9,11,1,85,6
	.byte	0,0,10,29,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_line'
.L91:
	.word	.L300-.L299
.L299:
	.half	3
	.word	.L302-.L301
.L301:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L302:
	.byte	5,9,7,0,5,2
	.word	.L63
	.byte	3,134,2,1,5,48,9
	.half	.L243-.L63
	.byte	3,233,0,1,5,30,9
	.half	.L242-.L243
	.byte	1,5,17,9
	.half	.L246-.L242
	.byte	3,3,1,5,57,7,9
	.half	.L303-.L246
	.byte	1,5,26,7,9
	.half	.L304-.L303
	.byte	3,1,1,5,52,7,9
	.half	.L28-.L304
	.byte	1,5,60,1,5,52,9
	.half	.L30-.L28
	.byte	1,5,20,9
	.half	.L31-.L30
	.byte	3,2,1,5,5,9
	.half	.L248-.L31
	.byte	3,2,1,4,2,5,19,7,9
	.half	.L167-.L248
	.byte	3,181,2,1,4,1,5,23,9
	.half	.L168-.L167
	.byte	3,211,125,1,4,2,5,37,9
	.half	.L170-.L168
	.byte	3,174,2,1,5,32,9
	.half	.L171-.L170
	.byte	3,127,1,4,1,5,9,9
	.half	.L174-.L171
	.byte	3,206,125,1,5,69,7,9
	.half	.L175-.L174
	.byte	3,3,1,5,32,9
	.half	.L245-.L175
	.byte	1,5,42,9
	.half	.L247-.L245
	.byte	3,1,1,5,54,9
	.half	.L249-.L247
	.byte	3,1,1,5,29,9
	.half	.L251-.L249
	.byte	1,5,40,9
	.half	.L305-.L251
	.byte	3,1,1,5,69,9
	.half	.L252-.L305
	.byte	3,127,1,5,40,9
	.half	.L306-.L252
	.byte	3,1,1,5,16,9
	.half	.L253-.L306
	.byte	3,2,1,5,25,9
	.half	.L307-.L253
	.byte	1,5,31,9
	.half	.L308-.L307
	.byte	1,5,32,9
	.half	.L176-.L308
	.byte	3,123,1,5,63,9
	.half	.L33-.L176
	.byte	3,10,1,5,29,9
	.half	.L254-.L33
	.byte	1,5,39,9
	.half	.L256-.L254
	.byte	3,1,1,5,29,9
	.half	.L255-.L256
	.byte	3,1,1,5,37,9
	.half	.L244-.L255
	.byte	3,1,1,5,46,9
	.half	.L257-.L244
	.byte	3,127,1,5,54,9
	.half	.L309-.L257
	.byte	1,5,37,9
	.half	.L310-.L309
	.byte	3,1,1,5,5,9
	.half	.L32-.L310
	.byte	3,4,1,5,1,3,2,1,7,9
	.half	.L93-.L32
	.byte	0,1,1
.L300:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_ranges'
.L92:
	.word	-1,.L63,0,.L93-.L63,0,0
.L169:
	.word	-1,.L63,.L167-.L63,.L168-.L63,.L170-.L63,.L171-.L63,0,0
.L173:
	.word	-1,.L63,.L168-.L63,.L170-.L63,.L171-.L63,.L174-.L63,.L175-.L63,.L176-.L63,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_info'
.L94:
	.word	326
	.half	3
	.word	.L95
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L97,.L96
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_setProgramCounter',0,1,148,3,9
	.word	.L160
	.byte	1,1,1
	.word	.L65,.L180,.L64
	.byte	4
	.byte	'cpu',0,1,148,3,43
	.word	.L134,.L181
	.byte	4
	.byte	'programCounter',0,1,148,3,55
	.word	.L158,.L182
	.byte	5
	.word	.L65,.L180
	.byte	6
	.byte	'retVal',0,1,150,3,13
	.word	.L160,.L183
	.byte	7
	.word	.L146,.L184,.L185
	.byte	8
	.word	.L149,.L184,.L185
	.byte	6
	.byte	'reg',0,2,172,5,21
	.word	.L150,.L186
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_abbrev'
.L95:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_line'
.L96:
	.word	.L312-.L311
.L311:
	.half	3
	.word	.L314-.L313
.L313:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L314:
	.byte	5,9,7,0,5,2
	.word	.L65
	.byte	3,147,3,1,5,20,9
	.half	.L259-.L65
	.byte	3,2,1,4,2,5,19,9
	.half	.L184-.L259
	.byte	3,151,2,1,5,37,9
	.half	.L261-.L184
	.byte	3,1,1,4,1,5,53,3,234,125,1,5,5,9
	.half	.L185-.L261
	.byte	1,5,16,7,9
	.half	.L315-.L185
	.byte	3,2,1,5,23,1,5,18,9
	.half	.L36-.L315
	.byte	3,4,1,5,39,9
	.half	.L316-.L36
	.byte	1,5,18,1,5,22,9
	.half	.L260-.L316
	.byte	1,5,5,9
	.half	.L37-.L260
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L98-.L37
	.byte	0,1,1
.L312:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_ranges'
.L97:
	.word	-1,.L65,0,.L98-.L65,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_info'
.L99:
	.word	273
	.half	3
	.word	.L100
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L102,.L101
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_startCore',0,1,193,3,9
	.word	.L160
	.byte	1,1,1
	.word	.L69,.L187,.L68
	.byte	4
	.byte	'cpu',0,1,193,3,35
	.word	.L134,.L188
	.byte	4
	.byte	'programCounter',0,1,193,3,47
	.word	.L158,.L189
	.byte	5
	.word	.L69,.L187
	.byte	6
	.byte	'retVal',0,1,195,3,13
	.word	.L160,.L190
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_abbrev'
.L100:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_line'
.L101:
	.word	.L318-.L317
.L317:
	.half	3
	.word	.L320-.L319
.L319:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L320:
	.byte	5,9,7,0,5,2
	.word	.L69
	.byte	3,192,3,1,5,45,9
	.half	.L265-.L69
	.byte	3,5,1,5,12,9
	.half	.L264-.L265
	.byte	1,5,28,3,4,1,5,5,9
	.half	.L266-.L264
	.byte	1,5,43,7,9
	.half	.L321-.L266
	.byte	3,2,1,5,16,9
	.half	.L269-.L321
	.byte	1,5,5,9
	.half	.L44-.L269
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L103-.L44
	.byte	0,1,1
.L318:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_ranges'
.L102:
	.word	-1,.L69,0,.L103-.L69,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_info'
.L104:
	.word	270
	.half	3
	.word	.L105
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L107,.L106
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_acquireMutex',0,1,36,9
	.word	.L160
	.byte	1,1,1
	.word	.L47,.L191,.L46
	.byte	4
	.byte	'lock',0,1,36,47
	.word	.L192,.L193
	.byte	5
	.word	.L47,.L191
	.byte	6
	.byte	'retVal',0,1,38,21
	.word	.L160,.L194
	.byte	6
	.byte	'spinLockVal',0,1,39,21
	.word	.L195,.L196
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_abbrev'
.L105:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_line'
.L106:
	.word	.L323-.L322
.L322:
	.half	3
	.word	.L325-.L324
.L324:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L325:
	.byte	5,19,7,0,5,2
	.word	.L47
	.byte	3,42,1,5,9,3,121,1,5,17,9
	.half	.L225-.L47
	.byte	3,7,1,9
	.half	.L326-.L225
	.byte	3,126,1,9
	.half	.L226-.L326
	.byte	3,4,1,9
	.half	.L327-.L226
	.byte	3,127,1,5,9,9
	.half	.L328-.L327
	.byte	3,4,1,5,16,9
	.half	.L329-.L328
	.byte	3,2,1,5,1,3,4,1,7,9
	.half	.L108-.L329
	.byte	0,1,1
.L323:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_ranges'
.L107:
	.word	-1,.L47,0,.L108-.L47,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_info'
.L109:
	.word	224
	.half	3
	.word	.L110
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L112,.L111
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_releaseMutex',0,1,249,1,6,1,1,1
	.word	.L59,.L197,.L58
	.byte	4
	.byte	'lock',0,1,249,1,44
	.word	.L192,.L198
	.byte	5
	.word	.L59,.L197
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_abbrev'
.L110:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_line'
.L111:
	.word	.L331-.L330
.L330:
	.half	3
	.word	.L333-.L332
.L332:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L333:
	.byte	5,13,7,0,5,2
	.word	.L59
	.byte	3,251,1,1,5,11,1,5,1,9
	.half	.L334-.L59
	.byte	3,1,1,7,9
	.half	.L113-.L334
	.byte	0,1,1
.L331:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_ranges'
.L112:
	.word	-1,.L59,0,.L113-.L59,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_info'
.L114:
	.word	225
	.half	3
	.word	.L115
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L117,.L116
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_resetSpinLock',0,1,128,2,6,1,1,1
	.word	.L61,.L199,.L60
	.byte	4
	.byte	'lock',0,1,128,2,44
	.word	.L200,.L201
	.byte	5
	.word	.L61,.L199
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_abbrev'
.L115:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_line'
.L116:
	.word	.L336-.L335
.L335:
	.half	3
	.word	.L338-.L337
.L337:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L338:
	.byte	5,13,7,0,5,2
	.word	.L61
	.byte	3,130,2,1,5,11,1,5,1,9
	.half	.L339-.L61
	.byte	3,1,1,7,9
	.half	.L118-.L339
	.byte	0,1,1
.L336:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_ranges'
.L117:
	.word	-1,.L61,0,.L118-.L61,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_info'
.L119:
	.word	299
	.half	3
	.word	.L120
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L122,.L121
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_setSpinLock',0,1,165,3,9
	.word	.L160
	.byte	1,1,1
	.word	.L67,.L202,.L66
	.byte	4
	.byte	'lock',0,1,165,3,45
	.word	.L200,.L203
	.byte	4
	.byte	'timeoutCount',0,1,165,3,58
	.word	.L158,.L204
	.byte	5
	.word	.L67,.L202
	.byte	6
	.byte	'retVal',0,1,167,3,21
	.word	.L160,.L205
	.byte	6
	.byte	'spinLockVal',0,1,168,3,21
	.word	.L206,.L207
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_abbrev'
.L120:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_line'
.L121:
	.word	.L341-.L340
.L340:
	.half	3
	.word	.L343-.L342
.L342:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L343:
	.byte	5,12,7,0,5,2
	.word	.L67
	.byte	3,169,3,1,5,9,3,123,1,5,23,9
	.half	.L262-.L67
	.byte	3,9,1,5,21,9
	.half	.L39-.L262
	.byte	1,9
	.half	.L344-.L39
	.byte	3,2,1,9
	.half	.L345-.L344
	.byte	3,127,1,5,13,9
	.half	.L346-.L345
	.byte	3,4,1,5,9,9
	.half	.L347-.L346
	.byte	1,5,20,7,9
	.half	.L348-.L347
	.byte	3,2,1,5,26,1,5,25,9
	.half	.L40-.L348
	.byte	3,4,1,5,14,9
	.half	.L41-.L40
	.byte	3,2,1,5,49,7,9
	.half	.L263-.L41
	.byte	1,5,1,7,9
	.half	.L42-.L263
	.byte	3,3,1,7,9
	.half	.L123-.L42
	.byte	0,1,1
.L341:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_ranges'
.L122:
	.word	-1,.L67,0,.L123-.L67,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_info'
.L124:
	.word	272
	.half	3
	.word	.L125
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L127,.L126
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_getRandomValue',0,1,147,1,8
	.word	.L158
	.byte	1,1,1
	.word	.L55,.L208,.L54
	.byte	4
	.byte	'seed',0,1,147,1,38
	.word	.L209,.L210
	.byte	5
	.word	.L55,.L208
	.byte	6
	.byte	'x',0,1,159,1,12
	.word	.L158,.L211
	.byte	7
	.word	.L212
	.byte	6
	.byte	'result',0,1,169,1,12
	.word	.L158,.L216
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_abbrev'
.L125:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_line'
.L126:
	.word	.L350-.L349
.L349:
	.half	3
	.word	.L352-.L351
.L351:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L352:
	.byte	5,16,7,0,5,2
	.word	.L55
	.byte	3,158,1,1,5,47,9
	.half	.L213-.L55
	.byte	3,43,1,5,31,1,5,11,9
	.half	.L214-.L213
	.byte	3,90,1,5,6,9
	.half	.L215-.L214
	.byte	3,28,1,5,12,9
	.half	.L353-.L215
	.byte	3,28,1,5,1,9
	.half	.L354-.L353
	.byte	3,3,1,7,9
	.half	.L128-.L354
	.byte	0,1,1
.L350:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_ranges'
.L127:
	.word	-1,.L55,0,.L128-.L55,0,0
.L212:
	.word	-1,.L55,.L213-.L55,.L214-.L55,.L215-.L55,.L208-.L55,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_info'
.L129:
	.word	327
	.half	3
	.word	.L130
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L132,.L131
	.byte	2
	.word	.L70
	.byte	3
	.byte	'IfxCpu_getRandomValueWithinRange',0,1,226,1,8
	.word	.L158
	.byte	1,1,1
	.word	.L57,.L217,.L56
	.byte	4
	.byte	'seed',0,1,226,1,49
	.word	.L209,.L218
	.byte	4
	.byte	'min',0,1,226,1,62
	.word	.L158,.L219
	.byte	4
	.byte	'max',0,1,226,1,74
	.word	.L158,.L220
	.byte	5
	.word	.L57,.L217
	.byte	6
	.byte	'new_value',0,1,228,1,12
	.word	.L158,.L221
	.byte	5
	.word	.L222,.L23
	.byte	6
	.byte	'swap',0,1,233,1,18
	.word	.L223,.L224
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_abbrev'
.L130:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_line'
.L131:
	.word	.L356-.L355
.L355:
	.half	3
	.word	.L358-.L357
.L357:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L358:
	.byte	5,8,7,0,5,2
	.word	.L57
	.byte	3,225,1,1,5,46,9
	.half	.L239-.L57
	.byte	3,2,1,5,5,9
	.half	.L238-.L239
	.byte	3,3,1,5,23,7,9
	.half	.L222-.L238
	.byte	3,2,1,5,13,9
	.half	.L241-.L222
	.byte	3,1,1,9
	.half	.L359-.L241
	.byte	3,1,1,5,9,9
	.half	.L23-.L359
	.byte	3,4,1,5,28,7,9
	.half	.L360-.L23
	.byte	1,5,26,7,9
	.half	.L24-.L360
	.byte	3,6,1,5,23,9
	.half	.L361-.L24
	.byte	1,5,42,9
	.half	.L362-.L361
	.byte	1,5,1,9
	.half	.L26-.L362
	.byte	3,1,1,7,9
	.half	.L133-.L26
	.byte	0,1,1
.L356:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_ranges'
.L132:
	.word	-1,.L57,0,.L133-.L57,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_loc'
.L46:
	.word	-1,.L47,0,.L225-.L47
	.half	2
	.byte	138,0
	.word	.L225-.L47,.L191-.L47
	.half	2
	.byte	138,8
	.word	.L191-.L47,.L191-.L47
	.half	2
	.byte	138,0
	.word	0,0
.L193:
	.word	-1,.L47,0,.L191-.L47
	.half	1
	.byte	100
	.word	0,0
.L194:
	.word	-1,.L47,.L226-.L47,.L191-.L47
	.half	1
	.byte	82
	.word	0,0
.L196:
	.word	-1,.L47,0,.L191-.L47
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_loc'
.L48:
	.word	-1,.L49,0,.L135-.L49
	.half	2
	.byte	138,0
	.word	0,0
.L137:
	.word	-1,.L49,0,.L135-.L49
	.half	1
	.byte	84
	.word	0,0
.L138:
	.word	-1,.L49,.L227-.L49,.L4-.L49
	.half	1
	.byte	98
	.word	.L228-.L49,.L135-.L49
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_loc'
.L50:
	.word	-1,.L51,0,.L140-.L51
	.half	2
	.byte	138,0
	.word	0,0
.L141:
	.word	-1,.L51,0,.L229-.L51
	.half	1
	.byte	100
	.word	.L230-.L51,.L231-.L51
	.half	1
	.byte	111
	.word	0,0
.L142:
	.word	-1,.L51,.L147-.L51,.L140-.L51
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L144:
	.word	-1,.L51,.L233-.L51,.L7-.L51
	.half	1
	.byte	95
	.word	.L8-.L51,.L234-.L51
	.half	1
	.byte	95
	.word	0,0
.L145:
	.word	-1,.L51,.L229-.L51,.L140-.L51
	.half	1
	.byte	82
	.word	0,0
.L154:
	.word	-1,.L51,.L235-.L51,.L10-.L51
	.half	1
	.byte	111
	.word	0,0
.L151:
	.word	-1,.L51,.L232-.L51,.L148-.L51
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_loc'
.L52:
	.word	-1,.L53,0,.L155-.L53
	.half	2
	.byte	138,0
	.word	0,0
.L156:
	.word	-1,.L53,0,.L155-.L53
	.half	1
	.byte	100
	.word	0,0
.L159:
	.word	0,0
.L157:
	.word	-1,.L53,.L236-.L53,.L155-.L53
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_loc'
.L54:
	.word	-1,.L55,0,.L208-.L55
	.half	2
	.byte	138,0
	.word	0,0
.L216:
	.word	-1,.L55,.L237-.L55,.L208-.L55
	.half	1
	.byte	82
	.word	0,0
.L210:
	.word	-1,.L55,0,.L208-.L55
	.half	1
	.byte	100
	.word	0,0
.L211:
	.word	-1,.L55,.L213-.L55,.L208-.L55
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_loc'
.L56:
	.word	-1,.L57,0,.L217-.L57
	.half	2
	.byte	138,0
	.word	0,0
.L220:
	.word	-1,.L57,0,.L238-.L57
	.half	1
	.byte	85
	.word	.L238-.L57,.L240-.L57
	.half	1
	.byte	95
	.word	0,0
.L219:
	.word	-1,.L57,0,.L238-.L57
	.half	1
	.byte	84
	.word	.L239-.L57,.L217-.L57
	.half	1
	.byte	88
	.word	0,0
.L221:
	.word	-1,.L57,.L238-.L57,.L26-.L57
	.half	1
	.byte	82
	.word	0,0
.L218:
	.word	-1,.L57,0,.L238-.L57
	.half	1
	.byte	100
	.word	0,0
.L224:
	.word	-1,.L57,.L241-.L57,.L23-.L57
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_loc'
.L58:
	.word	-1,.L59,0,.L197-.L59
	.half	2
	.byte	138,0
	.word	0,0
.L198:
	.word	-1,.L59,0,.L197-.L59
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_loc'
.L60:
	.word	-1,.L61,0,.L199-.L61
	.half	2
	.byte	138,0
	.word	0,0
.L201:
	.word	-1,.L61,0,.L199-.L61
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_loc'
.L62:
	.word	-1,.L63,0,.L161-.L63
	.half	2
	.byte	138,0
	.word	0,0
.L162:
	.word	-1,.L63,0,.L242-.L63
	.half	1
	.byte	100
	.word	.L243-.L63,.L244-.L63
	.half	1
	.byte	111
	.word	.L250-.L63,.L251-.L63
	.half	1
	.byte	100
	.word	0,0
.L179:
	.word	-1,.L63,.L254-.L63,.L255-.L63
	.half	1
	.byte	82
	.word	.L256-.L63,.L32-.L63
	.half	1
	.byte	95
	.word	.L257-.L63,.L32-.L63
	.half	1
	.byte	84
	.word	0,0
.L166:
	.word	-1,.L63,.L242-.L63,.L245-.L63
	.half	1
	.byte	82
	.word	.L246-.L63,.L247-.L63
	.half	1
	.byte	88
	.word	.L33-.L63,.L32-.L63
	.half	1
	.byte	88
	.word	.L33-.L63,.L254-.L63
	.half	1
	.byte	82
	.word	0,0
.L163:
	.word	-1,.L63,0,.L242-.L63
	.half	1
	.byte	84
	.word	.L242-.L63,.L168-.L63
	.half	1
	.byte	95
	.word	0,0
.L172:
	.word	-1,.L63,.L168-.L63,.L171-.L63
	.half	1
	.byte	95
	.word	0,0
.L164:
	.word	-1,.L63,.L248-.L63,.L161-.L63
	.half	1
	.byte	90
	.word	0,0
.L165:
	.word	-1,.L63,.L31-.L63,.L161-.L63
	.half	1
	.byte	89
	.word	0,0
.L178:
	.word	-1,.L63,.L245-.L63,.L249-.L63
	.half	1
	.byte	82
	.word	.L247-.L63,.L33-.L63
	.half	1
	.byte	88
	.word	.L252-.L63,.L253-.L63
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_loc'
.L64:
	.word	-1,.L65,0,.L180-.L65
	.half	2
	.byte	138,0
	.word	0,0
.L181:
	.word	-1,.L65,0,.L185-.L65
	.half	1
	.byte	100
	.word	.L258-.L65,.L180-.L65
	.half	1
	.byte	111
	.word	0,0
.L182:
	.word	-1,.L65,0,.L185-.L65
	.half	1
	.byte	84
	.word	.L259-.L65,.L260-.L65
	.half	1
	.byte	88
	.word	0,0
.L186:
	.word	-1,.L65,.L261-.L65,.L260-.L65
	.half	1
	.byte	95
	.word	0,0
.L183:
	.word	-1,.L65,.L184-.L65,.L180-.L65
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_loc'
.L66:
	.word	-1,.L67,0,.L262-.L67
	.half	2
	.byte	138,0
	.word	.L262-.L67,.L202-.L67
	.half	2
	.byte	138,8
	.word	.L202-.L67,.L202-.L67
	.half	2
	.byte	138,0
	.word	0,0
.L203:
	.word	-1,.L67,0,.L202-.L67
	.half	1
	.byte	100
	.word	0,0
.L205:
	.word	-1,.L67,.L262-.L67,.L39-.L67
	.half	1
	.byte	82
	.word	.L39-.L67,.L202-.L67
	.half	5
	.byte	144,32,157,32,0
	.word	.L41-.L67,.L263-.L67
	.half	1
	.byte	82
	.word	0,0
.L207:
	.word	-1,.L67,0,.L202-.L67
	.half	2
	.byte	145,120
	.word	0,0
.L204:
	.word	-1,.L67,0,.L202-.L67
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_loc'
.L68:
	.word	-1,.L69,0,.L187-.L69
	.half	2
	.byte	138,0
	.word	0,0
.L188:
	.word	-1,.L69,0,.L264-.L69
	.half	1
	.byte	100
	.word	.L265-.L69,.L187-.L69
	.half	1
	.byte	111
	.word	.L267-.L69,.L266-.L69
	.half	1
	.byte	100
	.word	.L268-.L69,.L269-.L69
	.half	1
	.byte	100
	.word	0,0
.L189:
	.word	-1,.L69,0,.L264-.L69
	.half	1
	.byte	84
	.word	0,0
.L190:
	.word	-1,.L69,.L264-.L69,.L266-.L69
	.half	1
	.byte	82
	.word	.L267-.L69,.L187-.L69
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L363:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_frame'
	.word	44
	.word	.L363,.L47,.L191-.L47
	.byte	8,18,8,19,8,21,8,22,8,23,4
	.word	(.L225-.L47)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L191-.L225)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L363,.L49,.L135-.L49
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L363,.L51,.L140-.L51
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_frame'
	.word	20
	.word	.L363,.L53,.L155-.L53
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_frame'
	.word	24
	.word	.L363,.L55,.L208-.L55
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_frame'
	.word	12
	.word	.L363,.L57,.L217-.L57
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_frame'
	.word	24
	.word	.L363,.L59,.L197-.L59
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_frame'
	.word	24
	.word	.L363,.L61,.L199-.L61
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L363,.L63,.L161-.L63
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_frame'
	.word	12
	.word	.L363,.L65,.L180-.L65
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_frame'
	.word	44
	.word	.L363,.L67,.L202-.L67
	.byte	8,18,8,19,8,21,8,22,8,23,4
	.word	(.L262-.L67)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L202-.L262)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_frame'
	.word	12
	.word	.L363,.L69,.L187-.L69


	; Module end
