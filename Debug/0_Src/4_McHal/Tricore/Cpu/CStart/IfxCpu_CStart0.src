	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\.IfxCpu_CStart0.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc27xc -D__CPU_TC27XC__ --core=tc1.6.x --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\2_CDrv\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.src ..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c'

	
$TC16X
	.sdecl	'.zrodata.IfxCpu..1.cnt',data,rom
	.sect	'.zrodata.IfxCpu..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	-268214016
	

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     2   * \file IfxCpu_Cstart0.c
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     3   * \brief This file contains the Core startup sequence for Cpu0.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     4   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     5   * \copyright Copyright (c) 2012 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     6   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     7   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    10   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    15   * products.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    22   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    23   */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    24  /*******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    25  **                      Includes                                              **
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    26  *******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    27  #include "Ifx_Cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    28  #ifndef IFX_CFG_USE_COMPILER_DEFAULT_LINKER
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    29  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    30  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    31  #include "Cpu/Std/IfxCpu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    32  #include "Cpu/CStart/IfxCpu_CStart.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    33  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    34  #include "IfxCpu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    35  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    36  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    37  /*                           Macros                                           */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    38  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    39  /** \brief Configuration for CpuX enable.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    41   */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    42  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE0
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    43  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE0        (1) /**< Cpu0 enabled by default*/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    44  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    45  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE1
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    46  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE1        (1) /**< Cpu1 enabled by default*/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    47  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    48  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE2
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    49  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE2        (1) /**< Cpu2 enabled by default*/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    50  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    51  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    52  /** \brief Configuration for cache enable.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    53   *
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    54   */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    55  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_PCACHE
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    56  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_PCACHE (1)  /**< Program Cache enabled by default*/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    57  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    58  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_DCACHE
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    59  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_DCACHE (1)  /**< Data Cache enabled by default*/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    60  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    61  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    62  #ifndef IFXCPU_CSTART_CCU_INIT_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    63  #define IFXCPU_CSTART_CCU_INIT_HOOK() (void)IfxScuCcu_init(&IfxScuCcu_defaultClockConfig);   /*The status returned by Ccu init is ignored */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    64  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    65  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    66  /*******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    67  **                      Imported Function Declarations                        **
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    68  *******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    69  IFXCOMPILER_COMMON_LINKER_SYMBOLS()
		 .extern _SMALL_DATA_, _LITERAL_DATA_, _A8_DATA_, _A9_DATA_

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    70  IFXCOMPILER_CORE_LINKER_SYMBOLS(0)
		 .extern __USTACK0

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    71  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    72  IFX_EXTERN void core0_main(void);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    73  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    74  __asm("\t .extern core0_main");
		 .extern core0_main
	.sdecl	'.text.IfxCpu_CStart0._Core0_start',code,cluster('_Core0_start')
	.sect	'.text.IfxCpu_CStart0._Core0_start'
	.align	2
	
	.global	_Core0_start

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    75  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    76  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    77  /*******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    78  **                      Private Constant Definitions                          **
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    79  *******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    80  #define IFXCSTART0_PSW_DEFAULT     (0x00000980u)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    81  #define IFXCSTART0_PCX_O_S_DEFAULT (0xfff00000u)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    82  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    83  /*********************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    84  * _start() - startup code
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    85  *********************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    86  void _Core0_start(void)
; Function _Core0_start
.L19:
_Core0_start:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
	movh.a	a15,#61443
	ld.hu	d15,[a15]@los(0xf0036100)
	extr.u	d15,d15,#2,#14
.L201:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
	xor	d8,d15,#63
.L70:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    87  &MODULE_SCU.WDTCPU[0]);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    88  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    89      IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(0);  /*Test Stack, CSA and Cache */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    90  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    91      /* Load user stack pointer */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    92      __setareg(sp, __USTACK(0));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    93      __dsync();
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    94  
	 movh.a	 sp,#@his(__USTACK0)
 lea	 sp,[sp]@los(__USTACK0)
.L202:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    95      /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
	dsync
.L203:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    96      __mtcr(CPU_PSW, IFXCSTART0_PSW_DEFAULT);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    97  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    98      /* Set the PCXS and PCXO to its reset value in case of a warm start */
	mov	d15,#2432
.L204:
	mtcr	#65028,d15
	isync
.L205:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    99      pcxi  = __mfcr(CPU_PCXI);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   100      pcxi &= IFXCSTART0_PCX_O_S_DEFAULT; /*0xfff00000; */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   101      __mtcr(CPU_PCXI, pcxi);
	mfcr	d15,#65024
.L206:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   102  
	insert	d15,d15,#0,#0,#20
.L161:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   103      /*enable/disable program cache depending on the configuration */
	mtcr	#65024,d15
	isync
.L77:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705      ccnt.U = __mfcr(address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706      return ccnt.B.CountValue;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714      ccnt.U = __mfcr(address);   /*read the counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716      return ccnt.B.SOvf;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727      for (k = 0; k < (((uint32)csaEnd - (uint32)csaBegin) / 64); k++)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731          if (k == 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732          {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734          }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735          else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736          {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738          }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740          prvCsa  = (uint32 *)nxtCsa;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741          nxtCsa += 16;           /* next CSA */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744      *prvCsa = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745      __mtcr(CPU_LCX, nxt_cxi_val);   /* Last context save area is pointed in LCX to know if there is CSA depletion */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755          pcon1.U       = __mfcr(CPU_PCON1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756          pcon1.B.PCINV = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757          __mtcr(CPU_PCON1, pcon1.U);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      uint8 segment = (uint32)address >> 24;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      /*Disable the counters */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775      cctrl.B.CE = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      /* reset the counters */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779      __mtcr(CPU_CCNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      __mtcr(CPU_ICNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      __mtcr(CPU_M1CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782      __mtcr(CPU_M2CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      __mtcr(CPU_M3CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      /*Enable the counters, set the counter mode */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786      cctrl.B.CE = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cctrl.B.CM = mode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      if (enabled != FALSE)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796          __enable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  IFX_INLINE void IfxCpu_setDataCache(boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      /*PCACHE enable steps */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808          Ifx_CPU_DCON0 dcon0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809          dcon0.U       = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811          __mtcr(CPU_DCON0, dcon0.U);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      /* Step 2: Call Isync */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815      __isync();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      cctrl.B.CE = enable;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  IFX_INLINE void IfxCpu_setProgramCache(boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830      if (enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831      {                           /* Step 3: Initiate invalidation of current cache contents if any */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833          pcon1.U       = 0;
	mov	d15,#0
.L162:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834          pcon1.B.PCINV = 1;
	or	d15,#1
.L207:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835          __mtcr(CPU_PCON1, pcon1.U);
	mtcr	#37380,d15
	isync
.L83:
	mfcr	d15,#65052
.L163:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
	and	d15,#7
	ld.w	d0,.1.cnt
.L89:
	mov.a	a15,d0
.L208:
	mul	d15,d15,#12
	addsc.a	a2,a15,d15,#0
.L93:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
	ld.hu	d15,[a2]0
	extr.u	d15,d15,#2,#14
.L164:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
	xor	d0,d15,#63
	fcall	.cocofun_2
.L94:
	insert	d15,d15,#0,#0,#1
.L166:
	or	d15,#2
.L209:
	insert	d1,d1,d15,#0,#8
	st.w	[a2],d1

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
.L3:
	ld.bu	d15,[a2]
.L210:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L3
.L97:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840     /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842          Ifx_CPU_PCON0 pcon0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843          pcon0.U       = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
	mov	d15,#0
.L168:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845          __mtcr(CPU_PCON0, pcon0.U);
	insert	d15,d15,#0,#1,#1
.L211:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
	mtcr	#37388,d15
	isync
.L111:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453      return password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465      uint16        password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468      /* Read Password from Safety WDT CON0 register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474      return password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482      wdt_con0.U = watchdog->CON0.U;
	fcall	.cocofun_2
.L167:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496      wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L212:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497      wdt_con0.B.LCK     = 1;
	or	d15,#2
.L213:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498      watchdog->CON0.U   = wdt_con0.U;
	insert	d1,d1,d15,#0,#8
	st.w	[a2],d1

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
.L5:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500      /* read back ENDINIT and wait until it has been set */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501      while (watchdog->CON0.B.ENDINIT == 0)
	ld.bu	d15,[a2]
.L214:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L5
.L107:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847  N0, pcon0.U);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850      /* Step 2: Call Isync */
	isync
.L78:
	mfcr	d15,#65052
.L170:
	and	d15,#7
.L124:
	mul	d15,d15,#12
	addsc.a	a15,a15,d15,#0
.L126:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
	ld.hu	d15,[a15]0
	extr.u	d15,d15,#2,#14
.L171:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
	xor	d0,d15,#63
	fcall	.cocofun_3
.L127:
	insert	d15,d15,#0,#0,#1
.L174:
	or	d15,#2
.L215:
	insert	d1,d1,d15,#0,#8
	st.w	[a15],d1

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
.L7:
	ld.bu	d15,[a15]
.L216:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L7
.L129:
	mov	d15,#0
.L176:
	insert	d15,d15,#0,#1,#1
.L217:
	mtcr	#36928,d15
	isync
.L136:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453      return password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465      uint16        password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468      /* Read Password from Safety WDT CON0 register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474      return password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482      wdt_con0.U = watchdog->CON0.U;
	fcall	.cocofun_3
.L175:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496      wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L218:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497      wdt_con0.B.LCK     = 1;
	or	d15,#2
.L219:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498      watchdog->CON0.U   = wdt_con0.U;
	insert	d1,d1,d15,#0,#8
	st.w	[a15],d1

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
.L9:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500      /* read back ENDINIT and wait until it has been set */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501      while (watchdog->CON0.B.ENDINIT == 0)
	ld.bu	d15,[a15]
.L220:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L9
.L133:
	isync
.L119:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
	ld.w	d15,.1.cnt
	mov.a	a15,d15
	fcall	.cocofun_4
.L178:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
	insert	d15,d15,#0,#0,#1
.L180:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
	or	d15,#2
.L221:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
	insert	d0,d0,d15,#0,#8
	st.w	[a15],d0
.L222:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
	ld.w	d15,.1.cnt
.L223:
	mov.a	a2,d15

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
.L11:
	ld.bu	d15,[a2]
.L224:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L11
.L138:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   104  gramCache(IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_PCACHE);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   105  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   106      /*enable/disable data cache depending on the configuration */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   107      IfxCpu_setDataCache(IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_DCACHE);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   108  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   109      /* Clear the ENDINIT bit in the WDT_CON0 register, inline funtion */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   110      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   111  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   112      /* Load Base Address of Trap Vector Table. */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   113      __mtcr(CPU_BTV, (uint32)__TRAPTAB(0));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   114  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   115      /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
	movh.a	a4,#@his(__TRAPTAB_CPU0)
	lea	a4,[a4]@los(__TRAPTAB_CPU0)
	mov.d	d15,a4
.L225:
	mtcr	#65060,d15
	isync
.L226:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   116      __mtcr(CPU_BIV, (uint32)__INTTAB(0));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   117  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   118      /* Load interupt stack pointer. */
	movh.a	a4,#@his(__INTTAB_CPU0)
	lea	a4,[a4]@los(__INTTAB_CPU0)
	mov.d	d15,a4
.L227:
	mtcr	#65056,d15
	isync
.L228:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   119      __mtcr(CPU_ISP, (uint32)__ISTACK(0));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   120  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   121      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
	movh.a	a4,#@his(__ISTACK0)
	lea	a4,[a4]@los(__ISTACK0)
	mov.d	d15,a4
.L229:
	mtcr	#65064,d15
	isync
.L141:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439      {}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453      return password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465      uint16        password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468      /* Read Password from Safety WDT CON0 register
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474      return password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482      wdt_con0.U = watchdog->CON0.U;
	fcall	.cocofun_4
.L181:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484      if (wdt_con0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487          wdt_con0.B.ENDINIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488          wdt_con0.B.LCK     = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492          watchdog->CON0.U = wdt_con0.U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496      wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L230:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497      wdt_con0.B.LCK     = 1;
	or	d15,#2
.L231:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498      watchdog->CON0.U   = wdt_con0.U;
	insert	d0,d0,d15,#0,#8
	st.w	[a15],d0

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
.L13:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500      /* read back ENDINIT and wait until it has been set */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501      while (watchdog->CON0.B.ENDINIT == 0)
	ld.bu	d15,[a2]
.L232:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L13
.L142:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   122   SDA base pointers */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   123      __setareg(a0, __SDATA1(0));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   124      __setareg(a1, __SDATA2(0));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   125  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   126      /* These to be un commented if A8 and A9 are required to be initialized */
	 movh.a	 a0,#@his(_SMALL_DATA_)
 lea	 a0,[a0]@los(_SMALL_DATA_)
.L233:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   127      __setareg(a8, __SDATA3(0));
	 movh.a	 a1,#@his(_LITERAL_DATA_)
 lea	 a1,[a1]@los(_LITERAL_DATA_)
.L234:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   128      __setareg(a9, __SDATA4(0));
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   129      /* Setup the context save area linked list. */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   130  
	 movh.a	 a8,#@his(_A8_DATA_)
 lea	 a8,[a8]@los(_A8_DATA_)
.L235:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   131      IfxCpu_initCSA((uint32 *)__CSA(0), (uint32 *)__CSA_END(0));     /*Initialize the context save area for CPU0 */
	 movh.a	 a9,#@his(_A9_DATA_)
 lea	 a9,[a9]@los(_A9_DATA_)
.L145:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705      ccnt.U = __mfcr(address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706      return ccnt.B.CountValue;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714      ccnt.U = __mfcr(address);   /*read the counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716      return ccnt.B.SOvf;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724      uint32 *prvCsa      = 0U;
	mov	d0,#0
	mov.a	a15,#0
.L183:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   132       /*CPU and safety watchdogs are enabled by default, C initialization functions are not servicing the watchdogs */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   133          uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   134          IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
	movh.a	a2,#@his(__CSA0)
.L186:
	lea	a2,[a2]@los(__CSA0)
.L236:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705      ccnt.U = __mfcr(address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706      return ccnt.B.CountValue;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714      ccnt.U = __mfcr(address);   /*read the counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716      return ccnt.B.SOvf;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727      for (k = 0; k < (((uint32)csaEnd - (uint32)csaBegin) / 64); k++)
	mov	d15,d0
	movh.a	a4,#@his(__CSA0_END)
.L188:
	lea	a4,[a4]@los(__CSA0_END)
	mov.d	d1,a4
.L182:
	mov.d	d2,a2
.L237:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705      ccnt.U = __mfcr(address);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706      return ccnt.B.CountValue;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714      ccnt.U = __mfcr(address);   /*read the counter */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716      return ccnt.B.SOvf;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727      for (k = 0; k < (((uint32)csaEnd - (uint32)csaBegin) / 64); k++)
	sub	d1,d2
	sh	d1,#-6
.L238:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
	movh	d3,#15

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727      for (k = 0; k < (((uint32)csaEnd - (uint32)csaBegin) / 64); k++)      (inlined)
	j	.L14
.L15:
	mov.d	d2,a2
.L239:
	sh	d0,d2,#-12
.L184:
	extr.u	d2,d2,#6,#16
.L240:
	and	d0,d3
.L190:
	or	d0,d2
.L241:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731          if (k == 0)      (inlined)
	jne	d15,#0,.L16
.L242:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731          if (k == 0)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732          {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
	mtcr	#65080,d0
	isync
.L243:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */      (inlined)
	j	.L17

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731          if (k == 0)      (inlined)
.L16:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734          }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735          else
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736          {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
	st.w	[a15],d0

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735          else      (inlined)
.L17:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738          }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740          prvCsa  = (uint32 *)nxtCsa;
	add	d15,#1
	mov.aa	a15,a2
.L244:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741          nxtCsa += 16;           /* next CSA */
	lea	a2,[a2]64

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727      for (k = 0; k < (((uint32)csaEnd - (uint32)csaBegin) / 64); k++)      (inlined)
.L14:
	jlt.u	d15,d1,.L15
.L245:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744      *prvCsa = 0;
	mov	d15,#0
	st.w	[a15],d15
.L189:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745      __mtcr(CPU_LCX, nxt_cxi_val);   /* Last context save area is pointed in LCX to know if there is CSA depletion */
	mtcr	#65084,d0
	isync
.L146:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   135       IfxScuWdt_disableSafetyWatchdog(safetyWdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   136  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   137          Ifx_C_Init();           /*Initialization of C runtime variables */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   138  
	call	IfxScuWdt_getSafetyWatchdogPassword
.L187:
	mov	d15,d2
.L192:
	mov	d4,d8
	call	IfxScuWdt_disableCpuWatchdog
.L191:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   139          IfxScuWdt_enableCpuWatchdog(cpuWdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   140          IfxScuWdt_enableSafetyWatchdog(safetyWdtPassword);
	mov	d4,d15
	call	IfxScuWdt_disableSafetyWatchdog
.L246:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   141      }
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   142  
	call	Ifx_C_Init
.L247:
	mov	d4,d8
	call	IfxScuWdt_enableCpuWatchdog
.L248:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   143      /*Initialize the clock system */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   144      IFXCPU_CSTART_CCU_INIT_HOOK();
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   145  
	mov	d4,d15
	call	IfxScuWdt_enableSafetyWatchdog
.L157:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   146      /*Start remaining cores */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   147  #if (IFX_CFG_CPU_CSTART_ENABLE_TRICORE1 != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   148      (void)IfxCpu_startCore(&MODULE_CPU1, (uint32)&_Core1_start);       /*The status returned by function call is ignored */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   149  #endif
	movh.a	a4,#@his(IfxScuCcu_defaultClockConfig)
	lea	a4,[a4]@los(IfxScuCcu_defaultClockConfig)
	call	IfxScuCcu_init
.L249:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   150  #if (IFX_CFG_CPU_CSTART_ENABLE_TRICORE2 != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   151      (void)IfxCpu_startCore(&MODULE_CPU2, (uint32)&_Core2_start);       /*The status returned by function call is ignored */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   152  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   153  
	movh.a	a4,#63619
.L250:
	movh.a	a15,#@his(_Core1_start)
.L185:
	lea	a15,[a15]@los(_Core1_start)
	mov.d	d4,a15
.L251:
	call	IfxCpu_startCore
.L252:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   154  #if (IFX_CFG_CPU_CSTART_ENABLE_TRICORE0 == 0)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   155      IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   156      /*halt the CPU 0 if it is not needed to be enabled */
	movh.a	a4,#63621
.L253:
	movh.a	a15,#@his(_Core2_start)
	lea	a15,[a15]@los(_Core2_start)
	mov.d	d4,a15
.L254:
	call	IfxCpu_startCore
.L255:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   157      IfxCpu_setCoreMode(&MODULE_CPU0, IfxCpu_CoreMode_idle);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   158  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   159  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   160      /*Call main function of Cpu0 */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   161      __non_return_call(core0_main);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   162  }
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   163  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   164  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   165  /******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   166   * reset vector address, user section to inform linker to locate the code at 0x8000 0020
	movh.a	a15,#@his(core0_main)
	lea	a15,[a15]@los(core0_main)
		ji a15
.L256:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   167   *****************************************************************************/
	ret
.L66:
	
___Core0_start_function_end:
	.size	_Core0_start,___Core0_start_function_end-_Core0_start
.L38:
	; End of function
	
	.sdecl	'.text.IfxCpu_CStart0..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.IfxCpu_CStart0..cocofun_4'
	.align	2
; Function .cocofun_4
.L21:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
	ld.w	d0,[a15]
.L179:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
	extr.u	d15,d0,#0,#8
.L277:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)      (inlined)
	jz.t	d15:1,.L10
.L278:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393      {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L279:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
	insert	d15,d15,#0,#1,#1
	insert	d0,d0,d15,#0,#8
.L280:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
	insert	d0,d0,d8,#2,#14
	st.w	[a15],d0

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)      (inlined)
.L10:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401      }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
	extr.u	d15,d0,#0,#8
	fret
.L58:
	; End of function
	.sdecl	'.text.IfxCpu_CStart0..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.IfxCpu_CStart0..cocofun_3'
	.align	2
; Function .cocofun_3
.L23:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	ld.w	d1,[a15]
.L172:
	extr.u	d15,d1,#0,#8
.L177:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)      (inlined)
	jz.t	d15:1,.L6
.L272:
	fcall	.cocofun_5
.L173:
	st.w	[a15],d1

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)      (inlined)
.L6:
	extr.u	d15,d1,#0,#8
	fret
.L53:
	; End of function
	.sdecl	'.text.IfxCpu_CStart0..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.IfxCpu_CStart0..cocofun_5'
	.align	2
; Function .cocofun_5
.L25:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:1
	or	d15,#1
.L285:
	insert	d15,d15,#0,#1,#1
	insert	d1,d1,d15,#0,#8
.L286:
	insert	d1,d1,d0,#2,#14
	fret
.L63:
	; End of function
	.sdecl	'.text.IfxCpu_CStart0..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.IfxCpu_CStart0..cocofun_2'
	.align	2
; Function .cocofun_2
.L27:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	ld.w	d1,[a2]
.L165:
	extr.u	d15,d1,#0,#8
.L169:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)      (inlined)
	jz.t	d15:1,.L2
.L266:
	fcall	.cocofun_5
.L267:
	st.w	[a2],d1

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)      (inlined)
.L2:
	extr.u	d15,d1,#0,#8
	fret
.L48:
	; End of function
	.sdecl	'.text.start',code,cluster('_START'),protect
	.sect	'.text.start'
	.align	2
	
	.global	_START

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   168  tion
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   169  #pragma section ".start" x
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   170  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   171  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   172  #pragma protect on
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   173  #pragma section code "start"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   174  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   175  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   176  #pragma section CODE ".start" X
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   177  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   178  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   179  void _START(void)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   180  {
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   181      __non_return_call(_Core0_start);
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   182  }
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   183  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   184  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   185  /* reset the sections defined above, to normal region */
; Function _START
.L29:
_START:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   186  #if defined(__GNUC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   187  #pragma section
	movh.a	a15,#@his(_Core0_start)
	lea	a15,[a15]@los(_Core0_start)
		ji a15
.L261:

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   188  #endif
	ret
.L159:
	
___START_function_end:
	.size	_START,___START_function_end-_START
.L43:
	; End of function
	
	.sdecl	'.rodata.bmhd_0',data,rom,cluster('BootModeHeader_0'),protect
	.sect	'.rodata.bmhd_0'
	.global	BootModeHeader_0
	.align	2
BootModeHeader_0:	.type	object
	.size	BootModeHeader_0,32
	.space	4
	.word	-1286012816
	.space	16
	.word	2032056420,-2032056421
	.calls	'__INDIRECT__','_Core1_start'
	.calls	'__INDIRECT__','_Core2_start'
	.calls	'__INDIRECT__','core0_main'
	.calls	'__INDIRECT__','_Core0_start'
	.calls	'_Core0_start','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'_Core0_start','IfxScuWdt_disableCpuWatchdog'
	.calls	'_Core0_start','IfxScuWdt_disableSafetyWatchdog'
	.calls	'_Core0_start','Ifx_C_Init'
	.calls	'_Core0_start','IfxScuWdt_enableCpuWatchdog'
	.calls	'_Core0_start','IfxScuWdt_enableSafetyWatchdog'
	.calls	'_Core0_start','IfxScuCcu_init'
	.calls	'_Core0_start','IfxCpu_startCore'
	.calls	'_Core0_start','.cocofun_2'
	.calls	'_Core0_start','.cocofun_3'
	.calls	'_Core0_start','.cocofun_4'
	.calls	'.cocofun_3','.cocofun_5'
	.calls	'.cocofun_2','.cocofun_5'
	.calls	'_Core0_start','',0
	.calls	'.cocofun_4','',0
	.calls	'.cocofun_3','',0
	.calls	'.cocofun_5','',0
	.calls	'.cocofun_2','',0
	.extern	Ifx_C_Init
	.extern	IfxScuWdt_disableCpuWatchdog
	.extern	IfxScuWdt_disableSafetyWatchdog
	.extern	IfxScuWdt_enableCpuWatchdog
	.extern	IfxScuWdt_enableSafetyWatchdog
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxCpu_startCore
	.extern	IfxScuCcu_init
	.extern	IfxScuCcu_defaultClockConfig
	.extern	_Core1_start
	.extern	_Core2_start
	.extern	__ISTACK0
	.extern	__INTTAB_CPU0
	.extern	__TRAPTAB_CPU0
	.extern	__CSA0
	.extern	__CSA0_END
	.extern	core0_main
	.extern	__INDIRECT__
	.calls	'_START','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L31:
	.word	79994
	.half	3
	.word	.L32
	.byte	4
.L30:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L33
	.byte	2
	.byte	'unsigned int',0,4,7,2
	.byte	'int',0,4,5,2
	.byte	'unsigned char',0,1,8
.L74:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,2,239,8,16,4,4
	.byte	'ENDINIT',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'PW',0,2
	.word	201
	.byte	14,0,2,35,0,4
	.byte	'REL',0,2
	.word	201
	.byte	16,0,2,35,2,0
.L104:
	.byte	5,2,130,17,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	223
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,2,248,8,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	2,6,2,35,0,4
	.byte	'IR0',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'DR',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'IR1',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'UR',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PAR',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'TCR',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'TCTR',0,1
	.word	184
	.byte	7,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,5,2,141,17,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	359
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,2,135,9,16,4,4
	.byte	'AE',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'OE',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'IS0',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'DS',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'TO',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'IS1',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'US',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PAS',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'TCS',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'TCT',0,1
	.word	184
	.byte	7,0,2,35,1,4
	.byte	'TIM',0,2
	.word	201
	.byte	16,0,2,35,2,0,5,2,152,17,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	603
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU',0,2,204,17,25,12,6
	.byte	'CON0',0
	.word	319
	.byte	4,2,35,0,6
	.byte	'CON1',0
	.word	563
	.byte	4,2,35,4,6
	.byte	'SR',0
	.word	794
	.byte	4,2,35,8,0,7
	.word	834
	.byte	8
	.word	897
.L96:
	.byte	9
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,1,130,3,17,1,1
.L98:
	.byte	10
	.byte	'watchdog',0,1,130,3,65
	.word	902
.L100:
	.byte	10
	.byte	'password',0,1,130,3,82
	.word	201
.L102:
	.byte	11,0
.L110:
	.byte	9
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,1,222,3,17,1,1
.L112:
	.byte	10
	.byte	'watchdog',0,1,222,3,63
	.word	902
.L114:
	.byte	10
	.byte	'password',0,1,222,3,80
	.word	201
.L116:
	.byte	11,0
.L69:
	.byte	12
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,1,187,3,19
	.word	201
	.byte	1,1
.L71:
	.byte	10
	.byte	'watchdog',0,1,187,3,74
	.word	902
.L73:
	.byte	11,0,9
	.byte	'__stopPerfCounters',0,3,3,217,1,17,1,1,11,0,2
	.byte	'unsigned long long int',0,8,7,13
	.byte	'void',0,8
	.word	1187
	.byte	12
	.byte	'__ld64',0,3,4,110,19
	.word	1161
	.byte	1,1,10
	.byte	'addr',0,4,110,32
	.word	1193
	.byte	11,0,9
	.byte	'__st64',0,3,4,118,17,1,1,10
	.byte	'addr',0,4,118,30
	.word	1193
	.byte	10
	.byte	'value',0,4,118,43
	.word	1161
	.byte	11,0,14,6,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_1',0,1,15
	.byte	'IfxCpu_ResourceCpu_2',0,2,15
	.byte	'IfxCpu_ResourceCpu_none',0,3,0
.L88:
	.byte	12
	.byte	'IfxCpu_getCoreIndex',0,3,5,170,5,31
	.word	1274
	.byte	1,1
.L90:
	.byte	11,0
.L67:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L154:
	.byte	8
	.word	1409
.L144:
	.byte	9
	.byte	'IfxCpu_initCSA',0,3,5,208,5,17,1,1
.L147:
	.byte	10
	.byte	'csaBegin',0,5,208,5,40
	.word	1430
.L149:
	.byte	10
	.byte	'csaEnd',0,5,208,5,58
	.word	1430
.L151:
	.byte	11,0,12
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,185,4,20
	.word	184
	.byte	1,1,11,0
.L118:
	.byte	9
	.byte	'IfxCpu_setDataCache',0,3,5,161,6,17,1,1
.L120:
	.byte	10
	.byte	'enable',0,5,161,6,45
	.word	184
.L122:
	.byte	16
.L132:
	.byte	11,11,11,11,11,0,0
.L76:
	.byte	9
	.byte	'IfxCpu_setProgramCache',0,3,5,188,6,17,1,1
.L79:
	.byte	10
	.byte	'enable',0,5,188,6,48
	.word	184
.L81:
	.byte	16
.L82:
	.byte	11
.L86:
	.byte	16
.L106:
	.byte	11,0,11,11,11,11,0,0,12
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,190,5,19
	.word	1409
	.byte	1,1,10
	.byte	'address',0,5,190,5,55
	.word	1409
	.byte	11,0,12
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,198,5,20
	.word	184
	.byte	1,1,10
	.byte	'address',0,5,198,5,70
	.word	1409
	.byte	11,0,9
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,153,7,17,1,1,10
	.byte	'address',0,5,153,7,56
	.word	1409
	.byte	10
	.byte	'count',0,5,153,7,72
	.word	1409
	.byte	11,0,3
	.byte	'_Ifx_P_OUT_Bits',0,8,143,3,16,4,4
	.byte	'P0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'P2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'P3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'P4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'P5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'P6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'P7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'P8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'P9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'P10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'P11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'P12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'P13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'P14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'P15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,5,8,250,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	1854
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMR_Bits',0,8,169,2,16,4,4
	.byte	'PS0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'PS2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'PS3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'PS4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'PS5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'PS6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PS7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'PS8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'PS9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'PS10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'PS11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'PS12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'PS13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'PS14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'PS15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'PCL0',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'PCL2',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'PCL3',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'PCL4',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'PCL5',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'PCL6',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'PCL7',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'PCL8',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'PCL9',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'PCL10',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'PCL11',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'PCL12',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'PCL13',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'PCL14',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'PCL15',0,1
	.word	184
	.byte	1,0,2,35,3,0,5,8,184,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2170
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_ID_Bits',0,8,110,16,4,4
	.byte	'MODREV',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	201
	.byte	16,0,2,35,2,0,5,8,156,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2741
	.byte	4,2,35,0,0,17,4
	.word	184
	.byte	18,3,0,3
	.byte	'_Ifx_P_IOCR0_Bits',0,8,140,1,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	3,5,2,35,0,4
	.byte	'PC0',0,1
	.word	184
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	184
	.byte	3,5,2,35,1,4
	.byte	'PC1',0,1
	.word	184
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	184
	.byte	3,5,2,35,2,4
	.byte	'PC2',0,1
	.word	184
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	3,5,2,35,3,4
	.byte	'PC3',0,1
	.word	184
	.byte	5,0,2,35,3,0,5,8,178,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2869
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IOCR4_Bits',0,8,166,1,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	3,5,2,35,0,4
	.byte	'PC4',0,1
	.word	184
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	184
	.byte	3,5,2,35,1,4
	.byte	'PC5',0,1
	.word	184
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	184
	.byte	3,5,2,35,2,4
	.byte	'PC6',0,1
	.word	184
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	3,5,2,35,3,4
	.byte	'PC7',0,1
	.word	184
	.byte	5,0,2,35,3,0,5,8,200,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3084
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IOCR8_Bits',0,8,179,1,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	3,5,2,35,0,4
	.byte	'PC8',0,1
	.word	184
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	184
	.byte	3,5,2,35,1,4
	.byte	'PC9',0,1
	.word	184
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	184
	.byte	3,5,2,35,2,4
	.byte	'PC10',0,1
	.word	184
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	3,5,2,35,3,4
	.byte	'PC11',0,1
	.word	184
	.byte	5,0,2,35,3,0,5,8,211,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3299
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IOCR12_Bits',0,8,153,1,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	3,5,2,35,0,4
	.byte	'PC12',0,1
	.word	184
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	184
	.byte	3,5,2,35,1,4
	.byte	'PC13',0,1
	.word	184
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	184
	.byte	3,5,2,35,2,4
	.byte	'PC14',0,1
	.word	184
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	3,5,2,35,3,4
	.byte	'PC15',0,1
	.word	184
	.byte	5,0,2,35,3,0,5,8,189,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3516
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IN_Bits',0,8,118,16,4,4
	.byte	'P0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'P2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'P3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'P4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'P5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'P6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'P7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'P8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'P9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'P10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'P11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'P12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'P13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'P14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'P15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,5,8,167,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3736
	.byte	4,2,35,0,0,17,24
	.word	184
	.byte	18,23,0,3
	.byte	'_Ifx_P_PDR0_Bits',0,8,204,3,16,4,4
	.byte	'PD0',0,1
	.word	184
	.byte	3,5,2,35,0,4
	.byte	'PL0',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'PD1',0,1
	.word	184
	.byte	3,1,2,35,0,4
	.byte	'PL1',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'PD2',0,1
	.word	184
	.byte	3,5,2,35,1,4
	.byte	'PL2',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'PD3',0,1
	.word	184
	.byte	3,1,2,35,1,4
	.byte	'PL3',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'PD4',0,1
	.word	184
	.byte	3,5,2,35,2,4
	.byte	'PL4',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'PD5',0,1
	.word	184
	.byte	3,1,2,35,2,4
	.byte	'PL5',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'PD6',0,1
	.word	184
	.byte	3,5,2,35,3,4
	.byte	'PL6',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'PD7',0,1
	.word	184
	.byte	3,1,2,35,3,4
	.byte	'PL7',0,1
	.word	184
	.byte	1,0,2,35,3,0,5,8,155,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4059
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_PDR1_Bits',0,8,225,3,16,4,4
	.byte	'PD8',0,1
	.word	184
	.byte	3,5,2,35,0,4
	.byte	'PL8',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'PD9',0,1
	.word	184
	.byte	3,1,2,35,0,4
	.byte	'PL9',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'PD10',0,1
	.word	184
	.byte	3,5,2,35,1,4
	.byte	'PL10',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'PD11',0,1
	.word	184
	.byte	3,1,2,35,1,4
	.byte	'PL11',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'PD12',0,1
	.word	184
	.byte	3,5,2,35,2,4
	.byte	'PL12',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'PD13',0,1
	.word	184
	.byte	3,1,2,35,2,4
	.byte	'PL13',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'PD14',0,1
	.word	184
	.byte	3,5,2,35,3,4
	.byte	'PL14',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'PD15',0,1
	.word	184
	.byte	3,1,2,35,3,4
	.byte	'PL15',0,1
	.word	184
	.byte	1,0,2,35,3,0,5,8,166,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4363
	.byte	4,2,35,0,0,17,8
	.word	184
	.byte	18,7,0,3
	.byte	'_Ifx_P_ESR_Bits',0,8,88,16,4,4
	.byte	'EN0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,5,8,145,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4688
	.byte	4,2,35,0,0,17,12
	.word	184
	.byte	18,11,0,3
	.byte	'_Ifx_P_PDISC_Bits',0,8,182,3,16,4,4
	.byte	'PDIS0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PDIS1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'PDIS2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'PDIS3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'PDIS4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'PDIS5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'PDIS6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PDIS7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'PDIS8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'PDIS9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'PDIS10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'PDIS11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'PDIS12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'PDIS13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'PDIS14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'PDIS15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,5,8,144,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5028
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_PCSR_Bits',0,8,165,3,16,4,4
	.byte	'SEL0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'SEL1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'SEL2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'SEL3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'SEL4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'SEL5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'SEL6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	201
	.byte	3,6,2,35,0,4
	.byte	'SEL10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'SEL11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,4
	.word	161
	.byte	19,1,2,35,0,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,5,8,133,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5394
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR0_Bits',0,8,206,2,16,4,4
	.byte	'PS0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'PS2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'PS3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	161
	.byte	28,0,2,35,0,0,5,8,206,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5664
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR4_Bits',0,8,227,2,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	4,4,2,35,0,4
	.byte	'PS4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'PS5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'PS6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PS7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	161
	.byte	24,0,2,35,0,0,5,8,228,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5811
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR8_Bits',0,8,238,2,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'PS8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'PS9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'PS10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'PS11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,4
	.word	161
	.byte	20,0,2,35,0,0,5,8,239,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5980
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR12_Bits',0,8,216,2,16,4,4
	.byte	'reserved_0',0,2
	.word	201
	.byte	12,4,2,35,0,4
	.byte	'PS12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'PS13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'PS14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'PS15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,5,8,217,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6152
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR0_Bits',0,8,232,1,16,4,4
	.byte	'reserved_0',0,2
	.word	201
	.byte	16,0,2,35,0,4
	.byte	'PCL0',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'PCL2',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'PCL3',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'reserved_20',0,2
	.word	201
	.byte	12,0,2,35,2,0,5,8,140,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6327
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR4_Bits',0,8,253,1,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	20,12,2,35,0,4
	.byte	'PCL4',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'PCL5',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'PCL6',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'PCL7',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	8,0,2,35,3,0,5,8,162,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6501
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR8_Bits',0,8,136,2,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	24,8,2,35,0,4
	.byte	'PCL8',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'PCL9',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'PCL10',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'PCL11',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	184
	.byte	4,0,2,35,3,0,5,8,173,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6675
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR12_Bits',0,8,243,1,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	28,4,2,35,0,4
	.byte	'PCL12',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'PCL13',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'PCL14',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'PCL15',0,1
	.word	184
	.byte	1,0,2,35,3,0,5,8,151,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6851
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR_Bits',0,8,249,2,16,4,4
	.byte	'PS0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'PS2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'PS3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'PS4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'PS5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'PS6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PS7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'PS8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'PS9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'PS10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'PS11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'PS12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'PS13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'PS14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'PS15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,5,8,195,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7007
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR_Bits',0,8,147,2,16,4,4
	.byte	'reserved_0',0,2
	.word	201
	.byte	16,0,2,35,0,4
	.byte	'PCL0',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'PCL2',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'PCL3',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'PCL4',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'PCL5',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'PCL6',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'PCL7',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'PCL8',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'PCL9',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'PCL10',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'PCL11',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'PCL12',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'PCL13',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'PCL14',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'PCL15',0,1
	.word	184
	.byte	1,0,2,35,3,0,5,8,129,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7340
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_LPCR0_Bits',0,8,192,1,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	161
	.byte	30,0,2,35,0,0,5,8,222,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7688
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_LPCR1_Bits',0,8,200,1,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	161
	.byte	30,0,2,35,0,0,3
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,8,208,1,16,4,4
	.byte	'RDIS_CTRL',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'RX_DIS',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'TERM',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'LRXTERM',0,1
	.word	184
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	161
	.byte	24,0,2,35,0,0,5,8,233,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7812
	.byte	4,2,35,0,6
	.byte	'B_P21',0
	.word	7896
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_LPCR2_Bits',0,8,218,1,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'LVDSR',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'LVDSRL',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,1
	.word	184
	.byte	2,4,2,35,1,4
	.byte	'TDIS_CTRL',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'TX_DIS',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'TX_PD',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'TX_PWDPD',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,5,8,246,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8076
	.byte	4,2,35,0,0,17,76
	.word	184
	.byte	18,75,0,3
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,82,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	32,0,2,35,0,0,5,8,134,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8329
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,45,16,4,4
	.byte	'EN0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	184
	.byte	1,0,2,35,3,0,5,8,251,3,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8416
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P',0,8,185,6,25,128,2,6
	.byte	'OUT',0
	.word	2130
	.byte	4,2,35,0,6
	.byte	'OMR',0
	.word	2701
	.byte	4,2,35,4,6
	.byte	'ID',0
	.word	2820
	.byte	4,2,35,8,6
	.byte	'reserved_C',0
	.word	2860
	.byte	4,2,35,12,6
	.byte	'IOCR0',0
	.word	3044
	.byte	4,2,35,16,6
	.byte	'IOCR4',0
	.word	3259
	.byte	4,2,35,20,6
	.byte	'IOCR8',0
	.word	3476
	.byte	4,2,35,24,6
	.byte	'IOCR12',0
	.word	3696
	.byte	4,2,35,28,6
	.byte	'reserved_20',0
	.word	2860
	.byte	4,2,35,32,6
	.byte	'IN',0
	.word	4010
	.byte	4,2,35,36,6
	.byte	'reserved_28',0
	.word	4050
	.byte	24,2,35,40,6
	.byte	'PDR0',0
	.word	4323
	.byte	4,2,35,64,6
	.byte	'PDR1',0
	.word	4639
	.byte	4,2,35,68,6
	.byte	'reserved_48',0
	.word	4679
	.byte	8,2,35,72,6
	.byte	'ESR',0
	.word	4979
	.byte	4,2,35,80,6
	.byte	'reserved_54',0
	.word	5019
	.byte	12,2,35,84,6
	.byte	'PDISC',0
	.word	5354
	.byte	4,2,35,96,6
	.byte	'PCSR',0
	.word	5624
	.byte	4,2,35,100,6
	.byte	'reserved_68',0
	.word	4679
	.byte	8,2,35,104,6
	.byte	'OMSR0',0
	.word	5771
	.byte	4,2,35,112,6
	.byte	'OMSR4',0
	.word	5940
	.byte	4,2,35,116,6
	.byte	'OMSR8',0
	.word	6112
	.byte	4,2,35,120,6
	.byte	'OMSR12',0
	.word	6287
	.byte	4,2,35,124,6
	.byte	'OMCR0',0
	.word	6461
	.byte	4,3,35,128,1,6
	.byte	'OMCR4',0
	.word	6635
	.byte	4,3,35,132,1,6
	.byte	'OMCR8',0
	.word	6811
	.byte	4,3,35,136,1,6
	.byte	'OMCR12',0
	.word	6967
	.byte	4,3,35,140,1,6
	.byte	'OMSR',0
	.word	7300
	.byte	4,3,35,144,1,6
	.byte	'OMCR',0
	.word	7648
	.byte	4,3,35,148,1,6
	.byte	'reserved_98',0
	.word	4679
	.byte	8,3,35,152,1,6
	.byte	'LPCR0',0
	.word	7772
	.byte	4,3,35,160,1,6
	.byte	'LPCR1',0
	.word	8021
	.byte	4,3,35,164,1,6
	.byte	'LPCR2',0
	.word	8280
	.byte	4,3,35,168,1,6
	.byte	'reserved_A4',0
	.word	8320
	.byte	76,3,35,172,1,6
	.byte	'ACCEN1',0
	.word	8376
	.byte	4,3,35,248,1,6
	.byte	'ACCEN0',0
	.word	8943
	.byte	4,3,35,252,1,0,7
	.word	8983
	.byte	8
	.word	9586
	.byte	14,7,152,1,9,4,15
	.byte	'IfxPort_State_notChanged',0,0,15
	.byte	'IfxPort_State_high',0,1,15
	.byte	'IfxPort_State_low',0,128,128,4,15
	.byte	'IfxPort_State_toggled',0,129,128,4,0,9
	.byte	'IfxPort_setPinState',0,3,7,182,4,17,1,1,10
	.byte	'port',0,7,182,4,44
	.word	9591
	.byte	10
	.byte	'pinIndex',0,7,182,4,56
	.word	184
	.byte	10
	.byte	'action',0,7,182,4,80
	.word	9596
	.byte	11,0,19
	.word	177
	.byte	20
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,21
	.word	9777
	.byte	0,7
	.word	161
	.byte	8
	.word	161
	.byte	22
	.byte	'__cmpswapw',0
	.word	9819
	.byte	1,1,1,1,23
	.byte	'p',0
	.word	9824
	.byte	23
	.byte	'value',0
	.word	161
	.byte	23
	.byte	'compare',0
	.word	161
	.byte	0,20
	.byte	'__mtcr',0,1,1,1,1,21
	.word	177
	.byte	21
	.word	177
	.byte	0,7
	.word	177
	.byte	22
	.byte	'__mfcr',0
	.word	9904
	.byte	1,1,1,1,21
	.word	177
	.byte	0,24
	.byte	'__isync',0,1,1,1,1,24
	.byte	'__dsync',0,1,1,1,1,25
	.byte	'Ifx_C_Init',0,9,89,6,1,1,1,1,26
	.word	907
	.byte	27
	.word	947
	.byte	27
	.word	965
	.byte	11,0,26
	.word	985
	.byte	27
	.word	1023
	.byte	27
	.word	1041
	.byte	11,0,26
	.word	1061
	.byte	27
	.word	1112
	.byte	11,0,28
	.byte	'IfxScuWdt_disableCpuWatchdog',0,1,182,2,17,1,1,1,1,10
	.byte	'password',0,1,182,2,53
	.word	201
	.byte	0,28
	.byte	'IfxScuWdt_disableSafetyWatchdog',0,1,192,2,17,1,1,1,1,10
	.byte	'password',0,1,192,2,56
	.word	201
	.byte	0,28
	.byte	'IfxScuWdt_enableCpuWatchdog',0,1,202,2,17,1,1,1,1,10
	.byte	'password',0,1,202,2,52
	.word	201
	.byte	0,28
	.byte	'IfxScuWdt_enableSafetyWatchdog',0,1,212,2,17,1,1,1,1,10
	.byte	'password',0,1,212,2,55
	.word	201
	.byte	0,29
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,1,230,2,19
	.word	201
	.byte	1,1,1,1,26
	.word	1132
	.byte	11,0,26
	.word	1198
	.byte	27
	.word	1216
	.byte	11,0,26
	.word	1231
	.byte	27
	.word	1245
	.byte	27
	.word	1258
	.byte	11,0,26
	.word	1375
	.byte	11,0,26
	.word	1435
	.byte	27
	.word	1458
	.byte	27
	.word	1476
	.byte	11,0,17,176,32
	.word	184
	.byte	18,175,32,0,2
	.byte	'unsigned int',0,4,7,3
	.byte	'_Ifx_CPU_SEGEN_Bits',0,10,150,4,16,4,4
	.byte	'ADFLIP',0,4
	.word	10374
	.byte	8,24,2,35,0,4
	.byte	'ADTYPE',0,4
	.word	10374
	.byte	2,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	10374
	.byte	21,1,2,35,0,4
	.byte	'AE',0,4
	.word	10374
	.byte	1,0,2,35,0,0,5,10,151,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10390
	.byte	4,2,35,0,0,17,208,223,1
	.word	184
	.byte	18,207,223,1,0,3
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,10,234,4,16,4,4
	.byte	'ASI',0,4
	.word	10374
	.byte	5,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	10374
	.byte	27,0,2,35,0,0,5,10,133,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10543
	.byte	4,2,35,0,0,17,248,1
	.word	184
	.byte	18,247,1,0,3
	.byte	'_Ifx_CPU_PMA0_Bits',0,10,224,3,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	13,19,2,35,0,4
	.byte	'DAC',0,4
	.word	10374
	.byte	3,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	10374
	.byte	16,0,2,35,0,0,5,10,224,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10661
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_PMA1_Bits',0,10,232,3,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	14,18,2,35,0,4
	.byte	'CAC',0,4
	.word	10374
	.byte	2,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	10374
	.byte	16,0,2,35,0,0,5,10,235,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10787
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_PMA2_Bits',0,10,240,3,16,4,4
	.byte	'PSI',0,4
	.word	10374
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	10374
	.byte	16,0,2,35,0,0,5,10,246,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10913
	.byte	4,2,35,0,0,17,244,29
	.word	184
	.byte	18,243,29,0,3
	.byte	'_Ifx_CPU_DCON2_Bits',0,10,195,1,16,4,4
	.byte	'DCACHE_SZE',0,4
	.word	10374
	.byte	16,16,2,35,0,4
	.byte	'DSCRATCH_SZE',0,4
	.word	10374
	.byte	16,0,2,35,0,0,5,10,245,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11028
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_SMACON_Bits',0,10,159,4,16,4,4
	.byte	'PC',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'PT',0,4
	.word	10374
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	10374
	.byte	5,24,2,35,0,4
	.byte	'DC',0,4
	.word	10374
	.byte	1,23,2,35,0,4
	.byte	'reserved_9',0,4
	.word	10374
	.byte	1,22,2,35,0,4
	.byte	'DT',0,4
	.word	10374
	.byte	1,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	10374
	.byte	13,8,2,35,0,4
	.byte	'IODT',0,4
	.word	10374
	.byte	1,7,2,35,0,4
	.byte	'reserved_25',0,4
	.word	10374
	.byte	7,0,2,35,0,0,5,10,162,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11141
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DSTR_Bits',0,10,143,2,16,4,4
	.byte	'SRE',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'GAE',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'LBE',0,4
	.word	10374
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	10374
	.byte	3,26,2,35,0,4
	.byte	'CRE',0,4
	.word	10374
	.byte	1,25,2,35,0,4
	.byte	'reserved_7',0,4
	.word	10374
	.byte	7,18,2,35,0,4
	.byte	'DTME',0,4
	.word	10374
	.byte	1,17,2,35,0,4
	.byte	'LOE',0,4
	.word	10374
	.byte	1,16,2,35,0,4
	.byte	'SDE',0,4
	.word	10374
	.byte	1,15,2,35,0,4
	.byte	'SCE',0,4
	.word	10374
	.byte	1,14,2,35,0,4
	.byte	'CAC',0,4
	.word	10374
	.byte	1,13,2,35,0,4
	.byte	'MPE',0,4
	.word	10374
	.byte	1,12,2,35,0,4
	.byte	'CLE',0,4
	.word	10374
	.byte	1,11,2,35,0,4
	.byte	'reserved_21',0,4
	.word	10374
	.byte	3,8,2,35,0,4
	.byte	'ALN',0,4
	.word	10374
	.byte	1,7,2,35,0,4
	.byte	'reserved_25',0,4
	.word	10374
	.byte	7,0,2,35,0,0,5,10,227,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11393
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DATR_Bits',0,10,152,1,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'SBE',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'reserved_4',0,4
	.word	10374
	.byte	5,23,2,35,0,4
	.byte	'CWE',0,4
	.word	10374
	.byte	1,22,2,35,0,4
	.byte	'CFE',0,4
	.word	10374
	.byte	1,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	10374
	.byte	3,18,2,35,0,4
	.byte	'SOE',0,4
	.word	10374
	.byte	1,17,2,35,0,4
	.byte	'SME',0,4
	.word	10374
	.byte	1,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	10374
	.byte	16,0,2,35,0,0,5,10,201,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11730
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DEADD_Bits',0,10,209,1,16,4,4
	.byte	'ERROR_ADDRESS',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,139,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11961
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DIEAR_Bits',0,10,215,1,16,4,4
	.byte	'TA',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,150,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12053
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DIETR_Bits',0,10,221,1,16,4,4
	.byte	'IED',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'IE_T',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'IE_C',0,4
	.word	10374
	.byte	1,29,2,35,0,4
	.byte	'IE_S',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'IE_BI',0,4
	.word	10374
	.byte	1,27,2,35,0,4
	.byte	'E_INFO',0,4
	.word	10374
	.byte	6,21,2,35,0,4
	.byte	'IE_DUAL',0,4
	.word	10374
	.byte	1,20,2,35,0,4
	.byte	'IE_SP',0,4
	.word	10374
	.byte	1,19,2,35,0,4
	.byte	'IE_BS',0,4
	.word	10374
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	10374
	.byte	18,0,2,35,0,0,5,10,161,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12134
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DCON0_Bits',0,10,187,1,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'DCBYP',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	10374
	.byte	30,0,2,35,0,0
.L134:
	.byte	5,10,234,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12375
	.byte	4,2,35,0,0,17,188,3
	.word	184
	.byte	18,187,3,0,3
	.byte	'_Ifx_CPU_PSTR_Bits',0,10,247,3,16,4,4
	.byte	'FRE',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'FBE',0,4
	.word	10374
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	10374
	.byte	9,20,2,35,0,4
	.byte	'FPE',0,4
	.word	10374
	.byte	1,19,2,35,0,4
	.byte	'reserved_13',0,4
	.word	10374
	.byte	1,18,2,35,0,4
	.byte	'FME',0,4
	.word	10374
	.byte	1,17,2,35,0,4
	.byte	'reserved_15',0,4
	.word	10374
	.byte	17,0,2,35,0,0,5,10,129,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12514
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_PCON1_Bits',0,10,178,3,16,4,4
	.byte	'PCINV',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'PBINV',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	10374
	.byte	30,0,2,35,0,0
.L84:
	.byte	5,10,169,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12730
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_PCON2_Bits',0,10,186,3,16,4,4
	.byte	'PCACHE_SZE',0,4
	.word	10374
	.byte	16,16,2,35,0,4
	.byte	'PSCRATCH_SZE',0,4
	.word	10374
	.byte	16,0,2,35,0,0,5,10,180,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12853
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_PCON0_Bits',0,10,170,3,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'PCBYP',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	10374
	.byte	30,0,2,35,0,0
.L108:
	.byte	5,10,158,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12966
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_PIEAR_Bits',0,10,203,3,16,4,4
	.byte	'TA',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,202,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13094
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_PIETR_Bits',0,10,209,3,16,4,4
	.byte	'IED',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'IE_T',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'IE_C',0,4
	.word	10374
	.byte	1,29,2,35,0,4
	.byte	'IE_S',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'IE_BI',0,4
	.word	10374
	.byte	1,27,2,35,0,4
	.byte	'E_INFO',0,4
	.word	10374
	.byte	6,21,2,35,0,4
	.byte	'IE_DUAL',0,4
	.word	10374
	.byte	1,20,2,35,0,4
	.byte	'IE_SP',0,4
	.word	10374
	.byte	1,19,2,35,0,4
	.byte	'IE_BS',0,4
	.word	10374
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	10374
	.byte	18,0,2,35,0,0,5,10,213,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13175
	.byte	4,2,35,0,0,17,232,3
	.word	184
	.byte	18,231,3,0,3
	.byte	'_Ifx_CPU_COMPAT_Bits',0,10,83,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'RM',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'SP',0,4
	.word	10374
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	10374
	.byte	27,0,2,35,0,0,5,10,230,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13427
	.byte	4,2,35,0,0,17,252,23
	.word	184
	.byte	18,251,23,0,3
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,10,183,2,16,4,4
	.byte	'TST',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'TCL',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	10374
	.byte	6,24,2,35,0,4
	.byte	'RM',0,4
	.word	10374
	.byte	2,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	10374
	.byte	8,14,2,35,0,4
	.byte	'FXE',0,4
	.word	10374
	.byte	1,13,2,35,0,4
	.byte	'FUE',0,4
	.word	10374
	.byte	1,12,2,35,0,4
	.byte	'FZE',0,4
	.word	10374
	.byte	1,11,2,35,0,4
	.byte	'FVE',0,4
	.word	10374
	.byte	1,10,2,35,0,4
	.byte	'FIE',0,4
	.word	10374
	.byte	1,9,2,35,0,4
	.byte	'reserved_23',0,4
	.word	10374
	.byte	3,6,2,35,0,4
	.byte	'FX',0,4
	.word	10374
	.byte	1,5,2,35,0,4
	.byte	'FU',0,4
	.word	10374
	.byte	1,4,2,35,0,4
	.byte	'FZ',0,4
	.word	10374
	.byte	1,3,2,35,0,4
	.byte	'FV',0,4
	.word	10374
	.byte	1,2,2,35,0,4
	.byte	'FI',0,4
	.word	10374
	.byte	1,1,2,35,0,4
	.byte	'reserved_31',0,4
	.word	10374
	.byte	1,0,2,35,0,0,5,10,132,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13577
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,10,215,2,16,4,4
	.byte	'PC',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,154,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13931
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,10,205,2,16,4,4
	.byte	'OPC',0,4
	.word	10374
	.byte	8,24,2,35,0,4
	.byte	'FMT',0,4
	.word	10374
	.byte	1,23,2,35,0,4
	.byte	'reserved_9',0,4
	.word	10374
	.byte	7,16,2,35,0,4
	.byte	'DREG',0,4
	.word	10374
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	10374
	.byte	12,0,2,35,0,0,5,10,143,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14018
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,10,221,2,16,4,4
	.byte	'SRC1',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,165,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14183
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,10,227,2,16,4,4
	.byte	'SRC2',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,176,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14274
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,10,233,2,16,4,4
	.byte	'SRC3',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,187,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14365
	.byte	4,2,35,0,0,17,228,63
	.word	184
	.byte	18,227,63,0,3
	.byte	'_Ifx_CPU_DPR_L_Bits',0,10,243,1,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'LOWBND',0,4
	.word	10374
	.byte	29,0,2,35,0,0,5,10,183,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14467
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DPR_U_Bits',0,10,250,1,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'UPPBND',0,4
	.word	10374
	.byte	29,0,2,35,0,0,5,10,194,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14574
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DPR',0,10,214,11,25,8,6
	.byte	'L',0
	.word	14534
	.byte	4,2,35,0,6
	.byte	'U',0
	.word	14641
	.byte	4,2,35,4,0,17,128,1
	.word	14681
	.byte	18,15,0,7
	.word	14723
	.byte	17,128,31
	.word	184
	.byte	18,255,30,0,3
	.byte	'_Ifx_CPU_CPR_L_Bits',0,10,99,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'LOWBND',0,4
	.word	10374
	.byte	29,0,2,35,0,0,5,10,252,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14749
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_CPR_U_Bits',0,10,106,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'UPPBND',0,4
	.word	10374
	.byte	29,0,2,35,0,0,5,10,135,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14855
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_CPR',0,10,207,11,25,8,6
	.byte	'L',0
	.word	14815
	.byte	4,2,35,0,6
	.byte	'U',0
	.word	14921
	.byte	4,2,35,4,0,17,64
	.word	14961
	.byte	18,7,0,7
	.word	15003
	.byte	17,192,31
	.word	184
	.byte	18,191,31,0,3
	.byte	'_Ifx_CPU_CPXE_Bits',0,10,121,16,4,4
	.byte	'XE',0,4
	.word	10374
	.byte	8,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	10374
	.byte	24,0,2,35,0,0,5,10,157,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15028
	.byte	4,2,35,0,0,17,16
	.word	15089
	.byte	18,3,0,3
	.byte	'_Ifx_CPU_DPRE_Bits',0,10,129,2,16,4,4
	.byte	'RE',0,4
	.word	10374
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	10374
	.byte	16,0,2,35,0,0,5,10,205,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15138
	.byte	4,2,35,0,0,17,16
	.word	15201
	.byte	18,3,0,3
	.byte	'_Ifx_CPU_DPWE_Bits',0,10,136,2,16,4,4
	.byte	'WE',0,4
	.word	10374
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	10374
	.byte	16,0,2,35,0,0,5,10,216,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15250
	.byte	4,2,35,0,0,17,16
	.word	15313
	.byte	18,3,0,17,208,7
	.word	184
	.byte	18,207,7,0,3
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,10,241,4,16,4,4
	.byte	'TEXP0',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'TEXP1',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'TEXP2',0,4
	.word	10374
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	10374
	.byte	13,16,2,35,0,4
	.byte	'TTRAP',0,4
	.word	10374
	.byte	1,15,2,35,0,4
	.byte	'reserved_17',0,4
	.word	10374
	.byte	15,0,2,35,0,0,5,10,144,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15373
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,10,252,4,16,4,4
	.byte	'Timer',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,155,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15555
	.byte	4,2,35,0,0,17,12
	.word	15603
	.byte	18,2,0,3
	.byte	'_Ifx_CPU_TPS',0,10,230,11,25,16,6
	.byte	'CON',0
	.word	15515
	.byte	4,2,35,0,6
	.byte	'TIMER',0
	.word	15643
	.byte	12,2,35,4,0,7
	.word	15652
	.byte	17,240,23
	.word	184
	.byte	18,239,23,0,3
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,10,136,5,16,4,4
	.byte	'EVTA',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	10374
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	10374
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	10374
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	10374
	.byte	4,20,2,35,0,4
	.byte	'TYP',0,4
	.word	10374
	.byte	1,19,2,35,0,4
	.byte	'RNG',0,4
	.word	10374
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	10374
	.byte	1,17,2,35,0,4
	.byte	'ASI_EN',0,4
	.word	10374
	.byte	1,16,2,35,0,4
	.byte	'ASI',0,4
	.word	10374
	.byte	5,11,2,35,0,4
	.byte	'reserved_21',0,4
	.word	10374
	.byte	6,5,2,35,0,4
	.byte	'AST',0,4
	.word	10374
	.byte	1,4,2,35,0,4
	.byte	'ALD',0,4
	.word	10374
	.byte	1,3,2,35,0,4
	.byte	'reserved_29',0,4
	.word	10374
	.byte	3,0,2,35,0,0,5,10,177,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15716
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,10,130,5,16,4,4
	.byte	'ADDR',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,166,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16045
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_TR',0,10,237,11,25,8,6
	.byte	'EVT',0
	.word	16005
	.byte	4,2,35,0,6
	.byte	'ADR',0
	.word	16089
	.byte	4,2,35,4,0,17,64
	.word	16129
	.byte	18,7,0,7
	.word	16174
	.byte	17,192,23
	.word	184
	.byte	18,191,23,0,3
	.byte	'_Ifx_CPU_CCTRL_Bits',0,10,72,16,4,4
	.byte	'CM',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'CE',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'M1',0,4
	.word	10374
	.byte	3,27,2,35,0,4
	.byte	'M2',0,4
	.word	10374
	.byte	3,24,2,35,0,4
	.byte	'M3',0,4
	.word	10374
	.byte	3,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	10374
	.byte	21,0,2,35,0,0,5,10,219,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16199
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_CCNT_Bits',0,10,65,16,4,4
	.byte	'CountValue',0,4
	.word	10374
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	10374
	.byte	1,0,2,35,0,0,5,10,208,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16358
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_ICNT_Bits',0,10,239,2,16,4,4
	.byte	'CountValue',0,4
	.word	10374
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	10374
	.byte	1,0,2,35,0,0,5,10,198,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16461
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_M1CNT_Bits',0,10,142,3,16,4,4
	.byte	'CountValue',0,4
	.word	10374
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	10374
	.byte	1,0,2,35,0,0,5,10,242,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16565
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_M2CNT_Bits',0,10,149,3,16,4,4
	.byte	'CountValue',0,4
	.word	10374
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	10374
	.byte	1,0,2,35,0,0,5,10,253,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16670
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_M3CNT_Bits',0,10,156,3,16,4,4
	.byte	'CountValue',0,4
	.word	10374
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	10374
	.byte	1,0,2,35,0,0,5,10,136,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16775
	.byte	4,2,35,0,0,17,232,1
	.word	184
	.byte	18,231,1,0,3
	.byte	'_Ifx_CPU_DBGSR_Bits',0,10,166,1,16,4,4
	.byte	'DE',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'HALT',0,4
	.word	10374
	.byte	2,29,2,35,0,4
	.byte	'SIH',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'SUSP',0,4
	.word	10374
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	10374
	.byte	1,26,2,35,0,4
	.byte	'PREVSUSP',0,4
	.word	10374
	.byte	1,25,2,35,0,4
	.byte	'PEVT',0,4
	.word	10374
	.byte	1,24,2,35,0,4
	.byte	'EVTSRC',0,4
	.word	10374
	.byte	5,19,2,35,0,4
	.byte	'reserved_13',0,4
	.word	10374
	.byte	19,0,2,35,0,0,5,10,212,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16891
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_EXEVT_Bits',0,10,164,2,16,4,4
	.byte	'EVTA',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	10374
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	10374
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	10374
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	10374
	.byte	24,0,2,35,0,0,5,10,238,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	17118
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_CREVT_Bits',0,10,128,1,16,4,4
	.byte	'EVTA',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	10374
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	10374
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	10374
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	10374
	.byte	24,0,2,35,0,0,5,10,168,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	17284
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_SWEVT_Bits',0,10,212,4,16,4,4
	.byte	'EVTA',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	10374
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	10374
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	10374
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	10374
	.byte	24,0,2,35,0,0,5,10,239,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	17450
	.byte	4,2,35,0,0,17,28
	.word	184
	.byte	18,27,0,3
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,10,156,5,16,4,4
	.byte	'T0',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'T1',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'T2',0,4
	.word	10374
	.byte	1,29,2,35,0,4
	.byte	'T3',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'T4',0,4
	.word	10374
	.byte	1,27,2,35,0,4
	.byte	'T5',0,4
	.word	10374
	.byte	1,26,2,35,0,4
	.byte	'T6',0,4
	.word	10374
	.byte	1,25,2,35,0,4
	.byte	'T7',0,4
	.word	10374
	.byte	1,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	10374
	.byte	24,0,2,35,0,0,5,10,188,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	17625
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DMS_Bits',0,10,236,1,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'DMSValue',0,4
	.word	10374
	.byte	31,0,2,35,0,0,5,10,172,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	17829
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DCX_Bits',0,10,202,1,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	6,26,2,35,0,4
	.byte	'DCXValue',0,4
	.word	10374
	.byte	26,0,2,35,0,0,5,10,128,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	17936
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,10,180,1,16,4,4
	.byte	'DTA',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	10374
	.byte	31,0,2,35,0,0,5,10,223,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18043
	.byte	4,2,35,0,0,17,180,1
	.word	184
	.byte	18,179,1,0,3
	.byte	'_Ifx_CPU_PCXI_Bits',0,10,193,3,16,4,4
	.byte	'PCXO',0,4
	.word	10374
	.byte	16,16,2,35,0,4
	.byte	'PCXS',0,4
	.word	10374
	.byte	4,12,2,35,0,4
	.byte	'UL',0,4
	.word	10374
	.byte	1,11,2,35,0,4
	.byte	'PIE',0,4
	.word	10374
	.byte	1,10,2,35,0,4
	.byte	'PCPN',0,4
	.word	10374
	.byte	10,0,2,35,0,0,5,10,191,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18159
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_PSW_Bits',0,10,132,4,16,4,4
	.byte	'CDC',0,4
	.word	10374
	.byte	7,25,2,35,0,4
	.byte	'CDE',0,4
	.word	10374
	.byte	1,24,2,35,0,4
	.byte	'GW',0,4
	.word	10374
	.byte	1,23,2,35,0,4
	.byte	'IS',0,4
	.word	10374
	.byte	1,22,2,35,0,4
	.byte	'IO',0,4
	.word	10374
	.byte	2,20,2,35,0,4
	.byte	'PRS',0,4
	.word	10374
	.byte	2,18,2,35,0,4
	.byte	'S',0,4
	.word	10374
	.byte	1,17,2,35,0,4
	.byte	'reserved_15',0,4
	.word	10374
	.byte	12,5,2,35,0,4
	.byte	'SAV',0,4
	.word	10374
	.byte	1,4,2,35,0,4
	.byte	'AV',0,4
	.word	10374
	.byte	1,3,2,35,0,4
	.byte	'SV',0,4
	.word	10374
	.byte	1,2,2,35,0,4
	.byte	'V',0,4
	.word	10374
	.byte	1,1,2,35,0,4
	.byte	'C',0,4
	.word	10374
	.byte	1,0,2,35,0,0,5,10,140,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18302
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_PC_Bits',0,10,163,3,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'PC',0,4
	.word	10374
	.byte	31,0,2,35,0,0,5,10,147,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18559
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_SYSCON_Bits',0,10,223,4,16,4,4
	.byte	'FCDSF',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'PROTEN',0,4
	.word	10374
	.byte	1,30,2,35,0,4
	.byte	'TPROTEN',0,4
	.word	10374
	.byte	1,29,2,35,0,4
	.byte	'IS',0,4
	.word	10374
	.byte	1,28,2,35,0,4
	.byte	'IT',0,4
	.word	10374
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	10374
	.byte	27,0,2,35,0,0,5,10,250,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18659
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,10,113,16,4,4
	.byte	'MOD_REV',0,4
	.word	10374
	.byte	8,24,2,35,0,4
	.byte	'MOD_32B',0,4
	.word	10374
	.byte	8,16,2,35,0,4
	.byte	'MOD',0,4
	.word	10374
	.byte	16,0,2,35,0,0,5,10,146,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18831
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,10,92,16,4,4
	.byte	'CORE_ID',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	10374
	.byte	29,0,2,35,0,0
.L91:
	.byte	5,10,241,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18951
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_BIV_Bits',0,10,51,16,4,4
	.byte	'VSS',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'BIV',0,4
	.word	10374
	.byte	31,0,2,35,0,0,5,10,186,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19060
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_BTV_Bits',0,10,58,16,4,4
	.byte	'reserved_0',0,4
	.word	10374
	.byte	1,31,2,35,0,4
	.byte	'BTV',0,4
	.word	10374
	.byte	31,0,2,35,0,0,5,10,197,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19154
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_ISP_Bits',0,10,128,3,16,4,4
	.byte	'ISP',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,220,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19255
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_ICR_Bits',0,10,246,2,16,4,4
	.byte	'CCPN',0,4
	.word	10374
	.byte	10,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	10374
	.byte	5,17,2,35,0,4
	.byte	'IE',0,4
	.word	10374
	.byte	1,16,2,35,0,4
	.byte	'PIPN',0,4
	.word	10374
	.byte	10,6,2,35,0,4
	.byte	'reserved_26',0,4
	.word	10374
	.byte	6,0,2,35,0,0,5,10,209,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19335
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_FCX_Bits',0,10,175,2,16,4,4
	.byte	'FCXO',0,4
	.word	10374
	.byte	16,16,2,35,0,4
	.byte	'FCXS',0,4
	.word	10374
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	10374
	.byte	12,0,2,35,0,0,5,10,249,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19492
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_CPU_LCX_Bits',0,10,134,3,16,4,4
	.byte	'LCXO',0,4
	.word	10374
	.byte	16,16,2,35,0,4
	.byte	'LCXS',0,4
	.word	10374
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	10374
	.byte	12,0,2,35,0,0,5,10,231,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19612
	.byte	4,2,35,0,0,17,16
	.word	184
	.byte	18,15,0,3
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,10,139,1,16,4,4
	.byte	'CID',0,4
	.word	10374
	.byte	3,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	10374
	.byte	29,0,2,35,0,0,5,10,179,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19741
	.byte	4,2,35,0,0,17,172,1
	.word	184
	.byte	18,171,1,0,3
	.byte	'_Ifx_CPU_D_Bits',0,10,146,1,16,4,4
	.byte	'DATA',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,190,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19857
	.byte	4,2,35,0,0,17,64
	.word	19896
	.byte	18,15,0,17,64
	.word	184
	.byte	18,63,0,3
	.byte	'_Ifx_CPU_A_Bits',0,10,45,16,4,4
	.byte	'ADDR',0,4
	.word	10374
	.byte	32,0,2,35,0,0,5,10,175,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19954
	.byte	4,2,35,0,0,17,64
	.word	19992
	.byte	18,15,0,3
	.byte	'_Ifx_CPU',0,10,254,11,25,128,128,4,6
	.byte	'reserved_0',0
	.word	10363
	.byte	176,32,2,35,0,6
	.byte	'SEGEN',0
	.word	10490
	.byte	4,3,35,176,32,6
	.byte	'reserved_1034',0
	.word	10530
	.byte	208,223,1,3,35,180,32,6
	.byte	'TASK_ASI',0
	.word	10610
	.byte	4,4,35,132,128,2,6
	.byte	'reserved_8008',0
	.word	10650
	.byte	248,1,4,35,136,128,2,6
	.byte	'PMA0',0
	.word	10747
	.byte	4,4,35,128,130,2,6
	.byte	'PMA1',0
	.word	10873
	.byte	4,4,35,132,130,2,6
	.byte	'PMA2',0
	.word	10977
	.byte	4,4,35,136,130,2,6
	.byte	'reserved_810C',0
	.word	11017
	.byte	244,29,4,35,140,130,2,6
	.byte	'DCON2',0
	.word	11101
	.byte	4,4,35,128,160,2,6
	.byte	'reserved_9004',0
	.word	4679
	.byte	8,4,35,132,160,2,6
	.byte	'SMACON',0
	.word	11353
	.byte	4,4,35,140,160,2,6
	.byte	'DSTR',0
	.word	11690
	.byte	4,4,35,144,160,2,6
	.byte	'reserved_9014',0
	.word	2860
	.byte	4,4,35,148,160,2,6
	.byte	'DATR',0
	.word	11921
	.byte	4,4,35,152,160,2,6
	.byte	'DEADD',0
	.word	12013
	.byte	4,4,35,156,160,2,6
	.byte	'DIEAR',0
	.word	12094
	.byte	4,4,35,160,160,2,6
	.byte	'DIETR',0
	.word	12335
	.byte	4,4,35,164,160,2,6
	.byte	'reserved_9028',0
	.word	4050
	.byte	24,4,35,168,160,2,6
	.byte	'DCON0',0
	.word	12463
	.byte	4,4,35,192,160,2,6
	.byte	'reserved_9044',0
	.word	12503
	.byte	188,3,4,35,196,160,2,6
	.byte	'PSTR',0
	.word	12690
	.byte	4,4,35,128,164,2,6
	.byte	'PCON1',0
	.word	12813
	.byte	4,4,35,132,164,2,6
	.byte	'PCON2',0
	.word	12926
	.byte	4,4,35,136,164,2,6
	.byte	'PCON0',0
	.word	13054
	.byte	4,4,35,140,164,2,6
	.byte	'PIEAR',0
	.word	13135
	.byte	4,4,35,144,164,2,6
	.byte	'PIETR',0
	.word	13376
	.byte	4,4,35,148,164,2,6
	.byte	'reserved_9218',0
	.word	13416
	.byte	232,3,4,35,152,164,2,6
	.byte	'COMPAT',0
	.word	13526
	.byte	4,4,35,128,168,2,6
	.byte	'reserved_9404',0
	.word	13566
	.byte	252,23,4,35,132,168,2,6
	.byte	'FPU_TRAP_CON',0
	.word	13891
	.byte	4,4,35,128,192,2,6
	.byte	'FPU_TRAP_PC',0
	.word	13978
	.byte	4,4,35,132,192,2,6
	.byte	'FPU_TRAP_OPC',0
	.word	14143
	.byte	4,4,35,136,192,2,6
	.byte	'reserved_A00C',0
	.word	2860
	.byte	4,4,35,140,192,2,6
	.byte	'FPU_TRAP_SRC1',0
	.word	14234
	.byte	4,4,35,144,192,2,6
	.byte	'FPU_TRAP_SRC2',0
	.word	14325
	.byte	4,4,35,148,192,2,6
	.byte	'FPU_TRAP_SRC3',0
	.word	14416
	.byte	4,4,35,152,192,2,6
	.byte	'reserved_A01C',0
	.word	14456
	.byte	228,63,4,35,156,192,2,6
	.byte	'DPR',0
	.word	14733
	.byte	128,1,4,35,128,128,3,6
	.byte	'reserved_C080',0
	.word	14738
	.byte	128,31,4,35,128,129,3,6
	.byte	'CPR',0
	.word	15012
	.byte	64,4,35,128,160,3,6
	.byte	'reserved_D040',0
	.word	15017
	.byte	192,31,4,35,192,160,3,6
	.byte	'CPXE',0
	.word	15129
	.byte	16,4,35,128,192,3,6
	.byte	'DPRE',0
	.word	15241
	.byte	16,4,35,144,192,3,6
	.byte	'DPWE',0
	.word	15353
	.byte	16,4,35,160,192,3,6
	.byte	'reserved_E030',0
	.word	15362
	.byte	208,7,4,35,176,192,3,6
	.byte	'TPS',0
	.word	15700
	.byte	16,4,35,128,200,3,6
	.byte	'reserved_E410',0
	.word	15705
	.byte	240,23,4,35,144,200,3,6
	.byte	'TR',0
	.word	16183
	.byte	64,4,35,128,224,3,6
	.byte	'reserved_F040',0
	.word	16188
	.byte	192,23,4,35,192,224,3,6
	.byte	'CCTRL',0
	.word	16318
	.byte	4,4,35,128,248,3,6
	.byte	'CCNT',0
	.word	16421
	.byte	4,4,35,132,248,3,6
	.byte	'ICNT',0
	.word	16525
	.byte	4,4,35,136,248,3,6
	.byte	'M1CNT',0
	.word	16630
	.byte	4,4,35,140,248,3,6
	.byte	'M2CNT',0
	.word	16735
	.byte	4,4,35,144,248,3,6
	.byte	'M3CNT',0
	.word	16840
	.byte	4,4,35,148,248,3,6
	.byte	'reserved_FC18',0
	.word	16880
	.byte	232,1,4,35,152,248,3,6
	.byte	'DBGSR',0
	.word	17078
	.byte	4,4,35,128,250,3,6
	.byte	'reserved_FD04',0
	.word	2860
	.byte	4,4,35,132,250,3,6
	.byte	'EXEVT',0
	.word	17244
	.byte	4,4,35,136,250,3,6
	.byte	'CREVT',0
	.word	17410
	.byte	4,4,35,140,250,3,6
	.byte	'SWEVT',0
	.word	17576
	.byte	4,4,35,144,250,3,6
	.byte	'reserved_FD14',0
	.word	17616
	.byte	28,4,35,148,250,3,6
	.byte	'TRIG_ACC',0
	.word	17789
	.byte	4,4,35,176,250,3,6
	.byte	'reserved_FD34',0
	.word	5019
	.byte	12,4,35,180,250,3,6
	.byte	'DMS',0
	.word	17896
	.byte	4,4,35,192,250,3,6
	.byte	'DCX',0
	.word	18003
	.byte	4,4,35,196,250,3,6
	.byte	'DBGTCR',0
	.word	18108
	.byte	4,4,35,200,250,3,6
	.byte	'reserved_FD4C',0
	.word	18148
	.byte	180,1,4,35,204,250,3,6
	.byte	'PCXI',0
	.word	18262
	.byte	4,4,35,128,252,3,6
	.byte	'PSW',0
	.word	18519
	.byte	4,4,35,132,252,3,6
	.byte	'PC',0
	.word	18619
	.byte	4,4,35,136,252,3,6
	.byte	'reserved_FE0C',0
	.word	4679
	.byte	8,4,35,140,252,3,6
	.byte	'SYSCON',0
	.word	18791
	.byte	4,4,35,148,252,3,6
	.byte	'CPU_ID',0
	.word	18911
	.byte	4,4,35,152,252,3,6
	.byte	'CORE_ID',0
	.word	19020
	.byte	4,4,35,156,252,3,6
	.byte	'BIV',0
	.word	19114
	.byte	4,4,35,160,252,3,6
	.byte	'BTV',0
	.word	19215
	.byte	4,4,35,164,252,3,6
	.byte	'ISP',0
	.word	19295
	.byte	4,4,35,168,252,3,6
	.byte	'ICR',0
	.word	19452
	.byte	4,4,35,172,252,3,6
	.byte	'reserved_FE30',0
	.word	4679
	.byte	8,4,35,176,252,3,6
	.byte	'FCX',0
	.word	19572
	.byte	4,4,35,184,252,3,6
	.byte	'LCX',0
	.word	19692
	.byte	4,4,35,188,252,3,6
	.byte	'reserved_FE40',0
	.word	19732
	.byte	16,4,35,192,252,3,6
	.byte	'CUS_ID',0
	.word	19806
	.byte	4,4,35,208,252,3,6
	.byte	'reserved_FE54',0
	.word	19846
	.byte	172,1,4,35,212,252,3,6
	.byte	'D',0
	.word	19936
	.byte	64,4,35,128,254,3,6
	.byte	'reserved_FF40',0
	.word	19945
	.byte	64,4,35,192,254,3,6
	.byte	'A',0
	.word	20032
	.byte	64,4,35,128,255,3,6
	.byte	'reserved_FFC0',0
	.word	19945
	.byte	64,4,35,192,255,3,0,7
	.word	20041
	.byte	8
	.word	21832
	.byte	30
	.byte	'IfxCpu_startCore',0,5,242,1,20
	.word	184
	.byte	1,1,1,1,10
	.byte	'cpu',0,5,242,1,46
	.word	21837
	.byte	10
	.byte	'programCounter',0,5,242,1,58
	.word	1409
	.byte	0,26
	.word	1494
	.byte	11,0,26
	.word	1536
	.byte	27
	.word	1564
	.byte	16,16,31
	.word	985
	.byte	27
	.word	1023
	.byte	27
	.word	1041
	.byte	32
	.word	1059
	.byte	0,0,31
	.word	1375
	.byte	32
	.word	1407
	.byte	0,11,31
	.word	1061
	.byte	27
	.word	1112
	.byte	32
	.word	1130
	.byte	0,11,31
	.word	907
	.byte	27
	.word	947
	.byte	27
	.word	965
	.byte	32
	.word	983
	.byte	0,11,11,0,0,26
	.word	1588
	.byte	27
	.word	1619
	.byte	16,11,16,16,31
	.word	985
	.byte	27
	.word	1023
	.byte	27
	.word	1041
	.byte	32
	.word	1059
	.byte	0,0,31
	.word	1375
	.byte	32
	.word	1407
	.byte	0,31
	.word	1061
	.byte	27
	.word	1112
	.byte	32
	.word	1130
	.byte	0,31
	.word	907
	.byte	27
	.word	947
	.byte	27
	.word	965
	.byte	32
	.word	983
	.byte	0,0,11,11,11,11,0,0,26
	.word	1646
	.byte	27
	.word	1687
	.byte	11,0,26
	.word	1706
	.byte	27
	.word	1761
	.byte	11,0,26
	.word	1780
	.byte	27
	.word	1820
	.byte	27
	.word	1837
	.byte	11,0,26
	.word	9699
	.byte	27
	.word	9727
	.byte	27
	.word	9741
	.byte	27
	.word	9759
	.byte	11,0,2
	.byte	'float',0,4,4,33,1,1,8
	.word	22168
	.byte	34
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,11,129,1,16
	.word	22171
	.byte	35,11,216,5,9,12,6
	.byte	'k2Step',0
	.word	184
	.byte	1,2,35,0,6
	.byte	'waitTime',0
	.word	22159
	.byte	4,2,35,2,6
	.byte	'hookFunction',0
	.word	22176
	.byte	4,2,35,8,0,8
	.word	22216
	.byte	35,11,206,5,9,8,6
	.byte	'pDivider',0
	.word	184
	.byte	1,2,35,0,6
	.byte	'nDivider',0
	.word	184
	.byte	1,2,35,1,6
	.byte	'k2Initial',0
	.word	184
	.byte	1,2,35,2,6
	.byte	'waitTime',0
	.word	22159
	.byte	4,2,35,4,0,35,11,251,5,9,16,6
	.byte	'numOfPllDividerSteps',0
	.word	184
	.byte	1,2,35,0,6
	.byte	'pllDividerStep',0
	.word	22279
	.byte	4,2,35,4,6
	.byte	'pllInitialStep',0
	.word	22284
	.byte	8,2,35,8,0,35,11,197,5,9,8,6
	.byte	'value',0
	.word	1409
	.byte	4,2,35,0,6
	.byte	'mask',0
	.word	1409
	.byte	4,2,35,4,0,35,11,229,5,9,56,6
	.byte	'ccucon0',0
	.word	22449
	.byte	8,2,35,0,6
	.byte	'ccucon1',0
	.word	22449
	.byte	8,2,35,8,6
	.byte	'ccucon2',0
	.word	22449
	.byte	8,2,35,16,6
	.byte	'ccucon5',0
	.word	22449
	.byte	8,2,35,24,6
	.byte	'ccucon6',0
	.word	22449
	.byte	8,2,35,32,6
	.byte	'ccucon7',0
	.word	22449
	.byte	8,2,35,40,6
	.byte	'ccucon8',0
	.word	22449
	.byte	8,2,35,48,0,35,11,242,5,9,8,6
	.byte	'value',0
	.word	1409
	.byte	4,2,35,0,6
	.byte	'mask',0
	.word	1409
	.byte	4,2,35,4,0,35,11,136,6,9,84,6
	.byte	'sysPll',0
	.word	22364
	.byte	16,2,35,0,6
	.byte	'clockDistribution',0
	.word	22485
	.byte	56,2,35,16,6
	.byte	'flashFconWaitStateConfig',0
	.word	22611
	.byte	8,2,35,72,6
	.byte	'xtalFrequency',0
	.word	1409
	.byte	4,2,35,80,0,19
	.word	22647
	.byte	8
	.word	22754
	.byte	30
	.byte	'IfxScuCcu_init',0,11,226,7,20
	.word	184
	.byte	1,1,1,1,10
	.byte	'cfg',0,11,226,7,59
	.word	22759
	.byte	0,8
	.word	22168
	.byte	25
	.byte	'_Core1_start',0,12,61,6,1,1,1,1,25
	.byte	'_Core2_start',0,12,62,6,1,1,1,1,25
	.byte	'core0_main',0,13,72,17,1,1,1,1,36
	.byte	'__INDIRECT__',0,13,1,1,1,1,1,2
	.byte	'short int',0,2,5,34
	.byte	'__wchar_t',0,13,1,1
	.word	22892
	.byte	34
	.byte	'__size_t',0,13,1,1
	.word	161
	.byte	34
	.byte	'__ptrdiff_t',0,13,1,1
	.word	177
	.byte	37,1,8
	.word	22960
	.byte	34
	.byte	'__codeptr',0,13,1,1
	.word	22962
	.byte	14,14,131,11,9,1,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,34
	.byte	'IfxScu_CCUCON0_CLKSEL',0,14,135,11,3
	.word	22985
	.byte	14,14,145,11,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,34
	.byte	'IfxScu_WDTCON1_IR',0,14,150,11,3
	.word	23082
	.byte	34
	.byte	'uint8',0,15,89,24
	.word	184
	.byte	34
	.byte	'sint16',0,15,90,24
	.word	22892
	.byte	34
	.byte	'uint16',0,15,91,24
	.word	201
	.byte	2
	.byte	'long int',0,4,5,34
	.byte	'sint32',0,15,92,24
	.word	23248
	.byte	34
	.byte	'uint32',0,15,93,24
	.word	1409
	.byte	34
	.byte	'float32',0,15,94,24
	.word	22159
	.byte	34
	.byte	'boolean',0,15,104,24
	.word	184
	.byte	2
	.byte	'long long int',0,8,5,34
	.byte	'sint64',0,16,36,28
	.word	23322
	.byte	34
	.byte	'uint64',0,16,37,28
	.word	1161
	.byte	34
	.byte	'pvoid',0,16,40,28
	.word	1193
	.byte	34
	.byte	'Ifx_TickTime',0,16,43,28
	.word	23322
	.byte	14,16,94,9,1,15
	.byte	'Ifx_RxSel_a',0,0,15
	.byte	'Ifx_RxSel_b',0,1,15
	.byte	'Ifx_RxSel_c',0,2,15
	.byte	'Ifx_RxSel_d',0,3,15
	.byte	'Ifx_RxSel_e',0,4,15
	.byte	'Ifx_RxSel_f',0,5,15
	.byte	'Ifx_RxSel_g',0,6,15
	.byte	'Ifx_RxSel_h',0,7,0,34
	.byte	'Ifx_RxSel',0,16,104,3
	.word	23404
	.byte	3
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,2,45,16,4,4
	.byte	'EN0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_ACCEN0_Bits',0,2,79,3
	.word	23540
	.byte	3
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,2,82,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_SCU_ACCEN1_Bits',0,2,85,3
	.word	24097
	.byte	3
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,2,88,16,4,4
	.byte	'STM0DIS',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'STM1DIS',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'STM2DIS',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,4
	.word	161
	.byte	29,0,2,35,0,0,34
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,2,94,3
	.word	24174
	.byte	3
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,2,97,16,4,4
	.byte	'BAUD1DIV',0,1
	.word	184
	.byte	4,4,2,35,0,4
	.byte	'BAUD2DIV',0,1
	.word	184
	.byte	4,0,2,35,0,4
	.byte	'SRIDIV',0,1
	.word	184
	.byte	4,4,2,35,1,4
	.byte	'LPDIV',0,1
	.word	184
	.byte	4,0,2,35,1,4
	.byte	'SPBDIV',0,1
	.word	184
	.byte	4,4,2,35,2,4
	.byte	'FSI2DIV',0,1
	.word	184
	.byte	2,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	184
	.byte	2,0,2,35,2,4
	.byte	'FSIDIV',0,1
	.word	184
	.byte	2,6,2,35,3,4
	.byte	'ADCCLKSEL',0,1
	.word	184
	.byte	2,4,2,35,3,4
	.byte	'CLKSEL',0,1
	.word	184
	.byte	2,2,2,35,3,4
	.byte	'UP',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON0_Bits',0,2,111,3
	.word	24310
	.byte	3
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,2,114,16,4,4
	.byte	'CANDIV',0,1
	.word	184
	.byte	4,4,2,35,0,4
	.byte	'ERAYDIV',0,1
	.word	184
	.byte	4,0,2,35,0,4
	.byte	'STMDIV',0,1
	.word	184
	.byte	4,4,2,35,1,4
	.byte	'GTMDIV',0,1
	.word	184
	.byte	4,0,2,35,1,4
	.byte	'ETHDIV',0,1
	.word	184
	.byte	4,4,2,35,2,4
	.byte	'ASCLINFDIV',0,1
	.word	184
	.byte	4,0,2,35,2,4
	.byte	'ASCLINSDIV',0,1
	.word	184
	.byte	4,4,2,35,3,4
	.byte	'INSEL',0,1
	.word	184
	.byte	2,2,2,35,3,4
	.byte	'UP',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON1_Bits',0,2,126,3
	.word	24588
	.byte	3
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,2,129,1,16,4,4
	.byte	'BBBDIV',0,1
	.word	184
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	161
	.byte	26,2,2,35,0,4
	.byte	'UP',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON2_Bits',0,2,135,1,3
	.word	24826
	.byte	3
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,2,138,1,16,4,4
	.byte	'PLLDIV',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'PLLSEL',0,1
	.word	184
	.byte	2,0,2,35,0,4
	.byte	'PLLERAYDIV',0,1
	.word	184
	.byte	6,2,2,35,1,4
	.byte	'PLLERAYSEL',0,1
	.word	184
	.byte	2,0,2,35,1,4
	.byte	'SRIDIV',0,1
	.word	184
	.byte	6,2,2,35,2,4
	.byte	'SRISEL',0,1
	.word	184
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	5,3,2,35,3,4
	.byte	'SLCK',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'UP',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON3_Bits',0,2,150,1,3
	.word	24954
	.byte	3
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,2,153,1,16,4,4
	.byte	'SPBDIV',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'SPBSEL',0,1
	.word	184
	.byte	2,0,2,35,0,4
	.byte	'GTMDIV',0,1
	.word	184
	.byte	6,2,2,35,1,4
	.byte	'GTMSEL',0,1
	.word	184
	.byte	2,0,2,35,1,4
	.byte	'STMDIV',0,1
	.word	184
	.byte	6,2,2,35,2,4
	.byte	'STMSEL',0,1
	.word	184
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	5,3,2,35,3,4
	.byte	'SLCK',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'UP',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON4_Bits',0,2,165,1,3
	.word	25197
	.byte	3
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,2,168,1,16,4,4
	.byte	'MAXDIV',0,1
	.word	184
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	161
	.byte	26,2,2,35,0,4
	.byte	'UP',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON5_Bits',0,2,174,1,3
	.word	25432
	.byte	3
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,2,177,1,16,4,4
	.byte	'CPU0DIV',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	161
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON6_Bits',0,2,181,1,3
	.word	25560
	.byte	3
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,2,184,1,16,4,4
	.byte	'CPU1DIV',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	161
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON7_Bits',0,2,188,1,3
	.word	25660
	.byte	3
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,2,191,1,16,4,4
	.byte	'CPU2DIV',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	161
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON8_Bits',0,2,195,1,3
	.word	25760
	.byte	3
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,2,198,1,16,4,4
	.byte	'ADCDIV',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'ADCSEL',0,1
	.word	184
	.byte	2,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	161
	.byte	21,3,2,35,0,4
	.byte	'SLCK',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'UP',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON9_Bits',0,2,206,1,3
	.word	25860
	.byte	3
	.byte	'_Ifx_SCU_CHIPID_Bits',0,2,209,1,16,4,4
	.byte	'CHREV',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'CHTEC',0,1
	.word	184
	.byte	2,0,2,35,0,4
	.byte	'CHID',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'EEA',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'UCODE',0,1
	.word	184
	.byte	7,0,2,35,2,4
	.byte	'FSIZE',0,1
	.word	184
	.byte	4,4,2,35,3,4
	.byte	'SP',0,1
	.word	184
	.byte	2,2,2,35,3,4
	.byte	'SEC',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CHIPID_Bits',0,2,220,1,3
	.word	26022
	.byte	3
	.byte	'_Ifx_SCU_DTSCON_Bits',0,2,223,1,16,4,4
	.byte	'PWD',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'START',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	2,4,2,35,0,4
	.byte	'CAL',0,4
	.word	161
	.byte	20,8,2,35,0,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	7,1,2,35,3,4
	.byte	'SLCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_DTSCON_Bits',0,2,231,1,3
	.word	26230
	.byte	3
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,2,234,1,16,4,4
	.byte	'LOWER',0,2
	.word	201
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	184
	.byte	5,1,2,35,1,4
	.byte	'LLU',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'UPPER',0,2
	.word	201
	.byte	10,6,2,35,2,4
	.byte	'reserved_26',0,1
	.word	184
	.byte	4,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'UOF',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_DTSLIM_Bits',0,2,243,1,3
	.word	26395
	.byte	3
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,2,246,1,16,4,4
	.byte	'RESULT',0,2
	.word	201
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	184
	.byte	4,2,2,35,1,4
	.byte	'RDY',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'BUSY',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,2,253,1,3
	.word	26578
	.byte	3
	.byte	'_Ifx_SCU_EICR_Bits',0,2,128,2,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	4,4,2,35,0,4
	.byte	'EXIS0',0,1
	.word	184
	.byte	3,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'FEN0',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'REN0',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'LDEN0',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'EIEN0',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'INP0',0,1
	.word	184
	.byte	3,1,2,35,1,4
	.byte	'reserved_15',0,4
	.word	161
	.byte	5,12,2,35,0,4
	.byte	'EXIS1',0,1
	.word	184
	.byte	3,1,2,35,2,4
	.byte	'reserved_23',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'FEN1',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'REN1',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'LDEN1',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'EIEN1',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'INP1',0,1
	.word	184
	.byte	3,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EICR_Bits',0,2,147,2,3
	.word	26732
	.byte	3
	.byte	'_Ifx_SCU_EIFR_Bits',0,2,150,2,16,4,4
	.byte	'INTF0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'INTF1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'INTF2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'INTF3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'INTF4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'INTF5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'INTF6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'INTF7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	161
	.byte	24,0,2,35,0,0,34
	.byte	'Ifx_SCU_EIFR_Bits',0,2,161,2,3
	.word	27096
	.byte	3
	.byte	'_Ifx_SCU_EMSR_Bits',0,2,164,2,16,4,4
	.byte	'POL',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'MODE',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'ENON',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'PSEL',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,2
	.word	201
	.byte	12,0,2,35,0,4
	.byte	'EMSF',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'SEMSF',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	184
	.byte	6,0,2,35,2,4
	.byte	'EMSFM',0,1
	.word	184
	.byte	2,6,2,35,3,4
	.byte	'SEMSFM',0,1
	.word	184
	.byte	2,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	184
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_EMSR_Bits',0,2,177,2,3
	.word	27307
	.byte	3
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,2,180,2,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	7,1,2,35,0,4
	.byte	'EDCON',0,2
	.word	201
	.byte	2,7,2,35,0,4
	.byte	'reserved_9',0,4
	.word	161
	.byte	23,0,2,35,0,0,34
	.byte	'Ifx_SCU_ESRCFG_Bits',0,2,185,2,3
	.word	27559
	.byte	3
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,2,188,2,16,4,4
	.byte	'ARI',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'ARC',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	161
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_ESROCFG_Bits',0,2,193,2,3
	.word	27677
	.byte	3
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,2,196,2,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	28,4,2,35,0,4
	.byte	'EVR13OFF',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'BPEVR13OFF',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVR13CON_Bits',0,2,203,2,3
	.word	27788
	.byte	3
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,2,206,2,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	28,4,2,35,0,4
	.byte	'EVR33OFF',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'BPEVR33OFF',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVR33CON_Bits',0,2,213,2,3
	.word	27951
	.byte	3
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,2,216,2,16,4,4
	.byte	'ADC13V',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'ADC33V',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'ADCSWDV',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	7,1,2,35,3,4
	.byte	'VAL',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,2,223,2,3
	.word	28114
	.byte	3
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,2,226,2,16,4,4
	.byte	'DVS13TRIM',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'DVS33TRIM',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	7,1,2,35,3,4
	.byte	'VAL',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,2,233,2,3
	.word	28272
	.byte	3
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,2,236,2,16,4,4
	.byte	'EVR13OVMOD',0,1
	.word	184
	.byte	2,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	2,4,2,35,0,4
	.byte	'EVR13UVMOD',0,1
	.word	184
	.byte	2,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	184
	.byte	2,0,2,35,0,4
	.byte	'EVR33OVMOD',0,1
	.word	184
	.byte	2,6,2,35,1,4
	.byte	'reserved_10',0,1
	.word	184
	.byte	2,4,2,35,1,4
	.byte	'EVR33UVMOD',0,1
	.word	184
	.byte	2,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	184
	.byte	2,0,2,35,1,4
	.byte	'SWDOVMOD',0,1
	.word	184
	.byte	2,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	184
	.byte	2,4,2,35,2,4
	.byte	'SWDUVMOD',0,1
	.word	184
	.byte	2,2,2,35,2,4
	.byte	'reserved_22',0,2
	.word	201
	.byte	8,2,2,35,2,4
	.byte	'SLCK',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,2,252,2,3
	.word	28437
	.byte	3
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,2,255,2,16,4,4
	.byte	'OSCTRIM',0,2
	.word	201
	.byte	10,6,2,35,0,4
	.byte	'OSCPTAT',0,1
	.word	184
	.byte	6,0,2,35,1,4
	.byte	'OSCANASEL',0,1
	.word	184
	.byte	4,4,2,35,2,4
	.byte	'HPBGTRIM',0,2
	.word	201
	.byte	7,5,2,35,2,4
	.byte	'HPBGCLKEN',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'OSC3V3',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	184
	.byte	2,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,2,137,3,3
	.word	28805
	.byte	3
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,2,140,3,16,4,4
	.byte	'EVR13OVVAL',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'EVR33OVVAL',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'SWDOVVAL',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	6,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVROVMON_Bits',0,2,148,3,3
	.word	29026
	.byte	3
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,2,151,3,16,4,4
	.byte	'RST13TRIM',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	161
	.byte	16,8,2,35,0,4
	.byte	'RST13OFF',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'BPRST13OFF',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'RST33OFF',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'BPRST33OFF',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'RSTSWDOFF',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'BPRSTSWDOFF',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,2,163,3,3
	.word	29205
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,2,166,3,16,4,4
	.byte	'SD5P',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'SD5I',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'SD5D',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,2,173,3,3
	.word	29470
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,2,176,3,16,4,4
	.byte	'SD33P',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'SD33I',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'SD33D',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,2,183,3,3
	.word	29623
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,2,186,3,16,4,4
	.byte	'CT5REG0',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'CT5REG1',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'CT5REG2',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,2,193,3,3
	.word	29779
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,2,196,3,16,4,4
	.byte	'CT5REG3',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'CT5REG4',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	15,1,2,35,2,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,2,202,3,3
	.word	29941
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,2,205,3,16,4,4
	.byte	'CT33REG0',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'CT33REG1',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'CT33REG2',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,2,212,3,3
	.word	30084
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,2,215,3,16,4,4
	.byte	'CT33REG3',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'CT33REG4',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	15,1,2,35,2,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,2,221,3,3
	.word	30249
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,2,224,3,16,4,4
	.byte	'SDFREQSPRD',0,2
	.word	201
	.byte	16,0,2,35,0,4
	.byte	'SDFREQ',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'SDSTEP',0,1
	.word	184
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	184
	.byte	2,2,2,35,3,4
	.byte	'SDSAMPLE',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,2,232,3,3
	.word	30394
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,2,235,3,16,4,4
	.byte	'DRVP',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'SDMINMAXDC',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'DRVN',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'SDLUT',0,1
	.word	184
	.byte	6,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,2,243,3,3
	.word	30575
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,2,246,3,16,4,4
	.byte	'SDPWMPRE',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'SDPID',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'SDVOKLVL',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,2,253,3,3
	.word	30749
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,2,128,4,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'SYNCDIV',0,1
	.word	184
	.byte	3,5,2,35,1,4
	.byte	'reserved_11',0,4
	.word	161
	.byte	20,1,2,35,0,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,2,134,4,3
	.word	30909
	.byte	3
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,2,137,4,16,4,4
	.byte	'EVR13',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'OV13',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'EVR33',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'OV33',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'OVSWD',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'UV13',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'UV33',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'UVSWD',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'EXTPASS13',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'EXTPASS33',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'BGPROK',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'reserved_11',0,4
	.word	161
	.byte	21,0,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,2,151,4,3
	.word	31053
	.byte	3
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,2,154,4,16,4,4
	.byte	'EVR13TRIM',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'SDVOUTSEL',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	14,2,2,35,2,4
	.byte	'SLCK',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,2,161,4,3
	.word	31327
	.byte	3
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,2,164,4,16,4,4
	.byte	'EVR13UVVAL',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'EVR33UVVAL',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'SWDUVVAL',0,1
	.word	184
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	6,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,2,172,4,3
	.word	31482
	.byte	3
	.byte	'_Ifx_SCU_EXTCON_Bits',0,2,175,4,16,4,4
	.byte	'EN0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'SEL0',0,1
	.word	184
	.byte	4,2,2,35,0,4
	.byte	'reserved_6',0,2
	.word	201
	.byte	10,0,2,35,0,4
	.byte	'EN1',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'NSEL',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'SEL1',0,1
	.word	184
	.byte	4,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	184
	.byte	2,0,2,35,2,4
	.byte	'DIV1',0,1
	.word	184
	.byte	8,0,2,35,3,0,34
	.byte	'Ifx_SCU_EXTCON_Bits',0,2,186,4,3
	.word	31661
	.byte	3
	.byte	'_Ifx_SCU_FDR_Bits',0,2,189,4,16,4,4
	.byte	'STEP',0,2
	.word	201
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	184
	.byte	4,2,2,35,1,4
	.byte	'DM',0,1
	.word	184
	.byte	2,0,2,35,1,4
	.byte	'RESULT',0,2
	.word	201
	.byte	10,6,2,35,2,4
	.byte	'reserved_26',0,1
	.word	184
	.byte	5,1,2,35,3,4
	.byte	'DISCLK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_FDR_Bits',0,2,197,4,3
	.word	31879
	.byte	3
	.byte	'_Ifx_SCU_FMR_Bits',0,2,200,4,16,4,4
	.byte	'FS0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'FS1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'FS2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'FS3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'FS4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'FS5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'FS6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'FS7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'FC0',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'FC1',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'FC2',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'FC3',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'FC4',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'FC5',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'FC6',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'FC7',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	8,0,2,35,3,0,34
	.byte	'Ifx_SCU_FMR_Bits',0,2,220,4,3
	.word	32042
	.byte	3
	.byte	'_Ifx_SCU_ID_Bits',0,2,223,4,16,4,4
	.byte	'MODREV',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_ID_Bits',0,2,228,4,3
	.word	32378
	.byte	3
	.byte	'_Ifx_SCU_IGCR_Bits',0,2,231,4,16,4,4
	.byte	'IPEN00',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'IPEN01',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'IPEN02',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'IPEN03',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'IPEN04',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'IPEN05',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'IPEN06',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'IPEN07',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	184
	.byte	5,3,2,35,1,4
	.byte	'GEEN0',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'IGP0',0,1
	.word	184
	.byte	2,0,2,35,1,4
	.byte	'IPEN10',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'IPEN11',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'IPEN12',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'IPEN13',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'IPEN14',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'IPEN15',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'IPEN16',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'IPEN17',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	5,3,2,35,3,4
	.byte	'GEEN1',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'IGP1',0,1
	.word	184
	.byte	2,0,2,35,3,0,34
	.byte	'Ifx_SCU_IGCR_Bits',0,2,255,4,3
	.word	32485
	.byte	3
	.byte	'_Ifx_SCU_IN_Bits',0,2,130,5,16,4,4
	.byte	'P0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	161
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_IN_Bits',0,2,135,5,3
	.word	32937
	.byte	3
	.byte	'_Ifx_SCU_IOCR_Bits',0,2,138,5,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	4,4,2,35,0,4
	.byte	'PC0',0,1
	.word	184
	.byte	4,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	184
	.byte	4,4,2,35,1,4
	.byte	'PC1',0,1
	.word	184
	.byte	4,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_IOCR_Bits',0,2,145,5,3
	.word	33036
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,2,148,5,16,4,4
	.byte	'LBISTREQ',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'LBISTREQP',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'PATTERNS',0,2
	.word	201
	.byte	14,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,2,154,5,3
	.word	33186
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,2,157,5,16,4,4
	.byte	'SEED',0,4
	.word	161
	.byte	23,9,2,35,0,4
	.byte	'reserved_23',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'SPLITSH',0,1
	.word	184
	.byte	3,5,2,35,3,4
	.byte	'BODY',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'LBISTFREQU',0,1
	.word	184
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,2,164,5,3
	.word	33335
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,2,167,5,16,4,4
	.byte	'SIGNATURE',0,4
	.word	161
	.byte	24,8,2,35,0,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	7,1,2,35,3,4
	.byte	'LBISTDONE',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,2,172,5,3
	.word	33496
	.byte	3
	.byte	'_Ifx_SCU_LCLCON_Bits',0,2,175,5,16,4,4
	.byte	'reserved_0',0,2
	.word	201
	.byte	16,0,2,35,0,4
	.byte	'LS',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,2
	.word	201
	.byte	14,1,2,35,2,4
	.byte	'LSEN',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_LCLCON_Bits',0,2,181,5,3
	.word	33626
	.byte	3
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,2,184,5,16,4,4
	.byte	'LCLT0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'LCLT1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	161
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_LCLTEST_Bits',0,2,189,5,3
	.word	33758
	.byte	3
	.byte	'_Ifx_SCU_MANID_Bits',0,2,192,5,16,4,4
	.byte	'DEPT',0,1
	.word	184
	.byte	5,3,2,35,0,4
	.byte	'MANUF',0,2
	.word	201
	.byte	11,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_MANID_Bits',0,2,197,5,3
	.word	33873
	.byte	3
	.byte	'_Ifx_SCU_OMR_Bits',0,2,200,5,16,4,4
	.byte	'PS0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,2
	.word	201
	.byte	14,0,2,35,0,4
	.byte	'PCL0',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	201
	.byte	14,0,2,35,2,0,34
	.byte	'Ifx_SCU_OMR_Bits',0,2,208,5,3
	.word	33984
	.byte	3
	.byte	'_Ifx_SCU_OSCCON_Bits',0,2,211,5,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PLLLV',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'OSCRES',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'GAINSEL',0,1
	.word	184
	.byte	2,3,2,35,0,4
	.byte	'MODE',0,1
	.word	184
	.byte	2,1,2,35,0,4
	.byte	'SHBY',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'PLLHV',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'X1D',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'X1DEN',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	184
	.byte	4,0,2,35,1,4
	.byte	'OSCVAL',0,1
	.word	184
	.byte	5,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	184
	.byte	2,1,2,35,2,4
	.byte	'APREN',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'CAP0EN',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'CAP1EN',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'CAP2EN',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'CAP3EN',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	184
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_OSCCON_Bits',0,2,232,5,3
	.word	34142
	.byte	3
	.byte	'_Ifx_SCU_OUT_Bits',0,2,235,5,16,4,4
	.byte	'P0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	161
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_OUT_Bits',0,2,240,5,3
	.word	34554
	.byte	3
	.byte	'_Ifx_SCU_OVCCON_Bits',0,2,243,5,16,4,4
	.byte	'CSEL0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'CSEL1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'CSEL2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,2
	.word	201
	.byte	13,0,2,35,0,4
	.byte	'OVSTRT',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'OVSTP',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'DCINVAL',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	184
	.byte	5,0,2,35,2,4
	.byte	'OVCONF',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'POVCONF',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	184
	.byte	6,0,2,35,3,0,34
	.byte	'Ifx_SCU_OVCCON_Bits',0,2,128,6,3
	.word	34655
	.byte	3
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,2,131,6,16,4,4
	.byte	'OVEN0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'OVEN1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'OVEN2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,4
	.word	161
	.byte	29,0,2,35,0,0,34
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,2,137,6,3
	.word	34922
	.byte	3
	.byte	'_Ifx_SCU_PDISC_Bits',0,2,140,6,16,4,4
	.byte	'PDIS0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PDIS1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	161
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_PDISC_Bits',0,2,145,6,3
	.word	35058
	.byte	3
	.byte	'_Ifx_SCU_PDR_Bits',0,2,148,6,16,4,4
	.byte	'PD0',0,1
	.word	184
	.byte	3,5,2,35,0,4
	.byte	'PL0',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'PD1',0,1
	.word	184
	.byte	3,1,2,35,0,4
	.byte	'PL1',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	161
	.byte	24,0,2,35,0,0,34
	.byte	'Ifx_SCU_PDR_Bits',0,2,155,6,3
	.word	35169
	.byte	3
	.byte	'_Ifx_SCU_PDRR_Bits',0,2,158,6,16,4,4
	.byte	'PDR0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PDR1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'PDR2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'PDR3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'PDR4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'PDR5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'PDR6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PDR7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	161
	.byte	24,0,2,35,0,0,34
	.byte	'Ifx_SCU_PDRR_Bits',0,2,169,6,3
	.word	35302
	.byte	3
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,2,172,6,16,4,4
	.byte	'VCOBYP',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'VCOPWD',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'MODEN',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'SETFINDIS',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'CLRFINDIS',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'OSCDISCDIS',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	201
	.byte	2,7,2,35,0,4
	.byte	'NDIV',0,1
	.word	184
	.byte	7,0,2,35,1,4
	.byte	'PLLPWD',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'RESLD',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	184
	.byte	5,0,2,35,2,4
	.byte	'PDIV',0,1
	.word	184
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	184
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_PLLCON0_Bits',0,2,189,6,3
	.word	35505
	.byte	3
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,2,192,6,16,4,4
	.byte	'K2DIV',0,1
	.word	184
	.byte	7,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'K3DIV',0,1
	.word	184
	.byte	7,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'K1DIV',0,1
	.word	184
	.byte	7,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	201
	.byte	9,0,2,35,2,0,34
	.byte	'Ifx_SCU_PLLCON1_Bits',0,2,200,6,3
	.word	35861
	.byte	3
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,2,203,6,16,4,4
	.byte	'MODCFG',0,2
	.word	201
	.byte	16,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_PLLCON2_Bits',0,2,207,6,3
	.word	36039
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,2,210,6,16,4,4
	.byte	'VCOBYP',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'VCOPWD',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	2,4,2,35,0,4
	.byte	'SETFINDIS',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'CLRFINDIS',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'OSCDISCDIS',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	201
	.byte	2,7,2,35,0,4
	.byte	'NDIV',0,1
	.word	184
	.byte	5,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	184
	.byte	2,0,2,35,1,4
	.byte	'PLLPWD',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'RESLD',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	184
	.byte	5,0,2,35,2,4
	.byte	'PDIV',0,1
	.word	184
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	184
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,2,227,6,3
	.word	36139
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,2,230,6,16,4,4
	.byte	'K2DIV',0,1
	.word	184
	.byte	7,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'K3DIV',0,1
	.word	184
	.byte	4,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	184
	.byte	4,0,2,35,1,4
	.byte	'K1DIV',0,1
	.word	184
	.byte	7,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	201
	.byte	9,0,2,35,2,0,34
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,2,238,6,3
	.word	36509
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,2,241,6,16,4,4
	.byte	'VCOBYST',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PWDSTAT',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'VCOLOCK',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'FINDIS',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'K1RDY',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'K2RDY',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	161
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,2,250,6,3
	.word	36695
	.byte	3
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,2,253,6,16,4,4
	.byte	'VCOBYST',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'VCOLOCK',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'FINDIS',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'K1RDY',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'K2RDY',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'MODRUN',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	161
	.byte	24,0,2,35,0,0,34
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,2,136,7,3
	.word	36893
	.byte	3
	.byte	'_Ifx_SCU_PMCSR_Bits',0,2,139,7,16,4,4
	.byte	'REQSLP',0,1
	.word	184
	.byte	2,6,2,35,0,4
	.byte	'SMUSLP',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	184
	.byte	5,0,2,35,0,4
	.byte	'PMST',0,1
	.word	184
	.byte	3,5,2,35,1,4
	.byte	'reserved_11',0,4
	.word	161
	.byte	21,0,2,35,0,0,34
	.byte	'Ifx_SCU_PMCSR_Bits',0,2,146,7,3
	.word	37126
	.byte	3
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,2,149,7,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'ESR1WKEN',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'PINAWKEN',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'PINBWKEN',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'ESR0DFEN',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'ESR0EDCON',0,1
	.word	184
	.byte	2,1,2,35,0,4
	.byte	'ESR1DFEN',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'ESR1EDCON',0,1
	.word	184
	.byte	2,6,2,35,1,4
	.byte	'PINADFEN',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'PINAEDCON',0,1
	.word	184
	.byte	2,3,2,35,1,4
	.byte	'PINBDFEN',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'PINBEDCON',0,1
	.word	184
	.byte	2,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'STBYRAMSEL',0,1
	.word	184
	.byte	2,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	184
	.byte	2,3,2,35,2,4
	.byte	'TRISTEN',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'TRISTREQ',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'PORSTDF',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'PWRWKEN',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'DCDCSYNC',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'BLNKFIL',0,1
	.word	184
	.byte	3,3,2,35,3,4
	.byte	'ESR0TRIST',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,2,175,7,3
	.word	37278
	.byte	3
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,2,178,7,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'CPUIDLSEL',0,1
	.word	184
	.byte	3,5,2,35,1,4
	.byte	'reserved_11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'IRADIS',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'reserved_13',0,4
	.word	161
	.byte	11,8,2,35,0,4
	.byte	'CPUSEL',0,1
	.word	184
	.byte	3,5,2,35,3,4
	.byte	'STBYEVEN',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'STBYEV',0,1
	.word	184
	.byte	3,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,2,189,7,3
	.word	37826
	.byte	3
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,2,192,7,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	2,6,2,35,0,4
	.byte	'ESR1WKP',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'ESR1OVRUN',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'PINAWKP',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'PINAOVRUN',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'PINBWKP',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PINBOVRUN',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'PWRWKP',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'PORSTDF',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'HWCFGEVR',0,1
	.word	184
	.byte	3,3,2,35,1,4
	.byte	'STBYRAM',0,1
	.word	184
	.byte	2,1,2,35,1,4
	.byte	'TRIST',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	184
	.byte	4,4,2,35,2,4
	.byte	'ESR1WKEN',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'PINAWKEN',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'PINBWKEN',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'PWRWKEN',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'BLNKFIL',0,1
	.word	184
	.byte	3,5,2,35,3,4
	.byte	'ESR0TRIST',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	184
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,2,214,7,3
	.word	38071
	.byte	3
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,2,217,7,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	2,6,2,35,0,4
	.byte	'ESR1WKPCLR',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'ESR1OVRUNCLR',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'PINAWKPCLR',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'PINAOVRUNCLR',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'PINBWKPCLR',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PINBOVRUNCLR',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'PWRWKPCLR',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,4
	.word	161
	.byte	23,0,2,35,0,0,34
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,2,228,7,3
	.word	38532
	.byte	3
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,2,231,7,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'CLRC',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,2
	.word	201
	.byte	10,4,2,35,0,4
	.byte	'CSS0',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'CSS1',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'CSS2',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'USRINFO',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_RSTCON2_Bits',0,2,241,7,3
	.word	38802
	.byte	3
	.byte	'_Ifx_SCU_RSTCON_Bits',0,2,244,7,16,4,4
	.byte	'ESR0',0,1
	.word	184
	.byte	2,6,2,35,0,4
	.byte	'ESR1',0,1
	.word	184
	.byte	2,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	184
	.byte	2,2,2,35,0,4
	.byte	'SMU',0,1
	.word	184
	.byte	2,0,2,35,0,4
	.byte	'SW',0,1
	.word	184
	.byte	2,6,2,35,1,4
	.byte	'STM0',0,1
	.word	184
	.byte	2,4,2,35,1,4
	.byte	'STM1',0,1
	.word	184
	.byte	2,2,2,35,1,4
	.byte	'STM2',0,1
	.word	184
	.byte	2,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_RSTCON_Bits',0,2,255,7,3
	.word	39011
	.byte	3
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,2,130,8,16,4,4
	.byte	'ESR0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'ESR1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'SMU',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'SW',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'STM0',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'STM1',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'STM2',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'PORST',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'CB0',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'CB1',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'CB3',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	184
	.byte	2,1,2,35,2,4
	.byte	'EVR13',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'EVR33',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'SWD',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	184
	.byte	2,4,2,35,3,4
	.byte	'STBYR',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	184
	.byte	3,0,2,35,3,0,34
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,2,153,8,3
	.word	39222
	.byte	3
	.byte	'_Ifx_SCU_SAFECON_Bits',0,2,156,8,16,4,4
	.byte	'HBT',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	161
	.byte	31,0,2,35,0,0,34
	.byte	'Ifx_SCU_SAFECON_Bits',0,2,160,8,3
	.word	39654
	.byte	3
	.byte	'_Ifx_SCU_STSTAT_Bits',0,2,163,8,16,4,4
	.byte	'HWCFG',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'FTM',0,1
	.word	184
	.byte	7,1,2,35,1,4
	.byte	'MODE',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'FCBAE',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'LUDIS',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'TRSTL',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'SPDEN',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	184
	.byte	3,0,2,35,2,4
	.byte	'RAMINT',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'reserved_25',0,1
	.word	184
	.byte	7,0,2,35,3,0,34
	.byte	'Ifx_SCU_STSTAT_Bits',0,2,176,8,3
	.word	39750
	.byte	3
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,2,179,8,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'SWRSTREQ',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	161
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,2,184,8,3
	.word	40010
	.byte	3
	.byte	'_Ifx_SCU_SYSCON_Bits',0,2,187,8,16,4,4
	.byte	'CCTRIG0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'RAMINTM',0,1
	.word	184
	.byte	2,4,2,35,0,4
	.byte	'SETLUDIS',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	184
	.byte	3,0,2,35,0,4
	.byte	'DATM',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,4
	.word	161
	.byte	23,0,2,35,0,0,34
	.byte	'Ifx_SCU_SYSCON_Bits',0,2,196,8,3
	.word	40135
	.byte	3
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,2,199,8,16,4,4
	.byte	'ESR0T',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	161
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,2,206,8,3
	.word	40332
	.byte	3
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,2,209,8,16,4,4
	.byte	'ESR0T',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	161
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,2,216,8,3
	.word	40485
	.byte	3
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,2,219,8,16,4,4
	.byte	'ESR0T',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	161
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPSET_Bits',0,2,226,8,3
	.word	40638
	.byte	3
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,2,229,8,16,4,4
	.byte	'ESR0T',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	161
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,2,236,8,3
	.word	40791
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,2,245,8,3
	.word	223
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,2,132,9,3
	.word	359
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,2,148,9,3
	.word	603
	.byte	3
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,2,151,9,16,4,4
	.byte	'ENDINIT',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'LCK',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'PW',0,2
	.word	201
	.byte	14,0,2,35,0,4
	.byte	'REL',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,2,157,9,3
	.word	41046
	.byte	3
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,2,160,9,16,4,4
	.byte	'CLRIRF',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'IR0',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'DR',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'IR1',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'UR',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PAR',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'TCR',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'TCTR',0,1
	.word	184
	.byte	7,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,2,173,9,3
	.word	41172
	.byte	3
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,2,176,9,16,4,4
	.byte	'AE',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'OE',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'IS0',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'DS',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'TO',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'IS1',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'US',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PAS',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'TCS',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'TCT',0,1
	.word	184
	.byte	7,0,2,35,1,4
	.byte	'TIM',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,2,189,9,3
	.word	41424
	.byte	5,2,197,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23540
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ACCEN0',0,2,205,9,3
	.word	41643
	.byte	5,2,208,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24097
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ACCEN1',0,2,216,9,3
	.word	41707
	.byte	5,2,219,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24174
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ARSTDIS',0,2,227,9,3
	.word	41771
	.byte	5,2,230,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24310
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON0',0,2,238,9,3
	.word	41836
	.byte	5,2,241,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24588
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON1',0,2,249,9,3
	.word	41901
	.byte	5,2,252,9,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24826
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON2',0,2,132,10,3
	.word	41966
	.byte	5,2,135,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24954
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON3',0,2,143,10,3
	.word	42031
	.byte	5,2,146,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25197
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON4',0,2,154,10,3
	.word	42096
	.byte	5,2,157,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25432
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON5',0,2,165,10,3
	.word	42161
	.byte	5,2,168,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25560
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON6',0,2,176,10,3
	.word	42226
	.byte	5,2,179,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25660
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON7',0,2,187,10,3
	.word	42291
	.byte	5,2,190,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25760
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON8',0,2,198,10,3
	.word	42356
	.byte	5,2,201,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25860
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON9',0,2,209,10,3
	.word	42421
	.byte	5,2,212,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26022
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CHIPID',0,2,220,10,3
	.word	42486
	.byte	5,2,223,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26230
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_DTSCON',0,2,231,10,3
	.word	42550
	.byte	5,2,234,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26395
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_DTSLIM',0,2,242,10,3
	.word	42614
	.byte	5,2,245,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26578
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_DTSSTAT',0,2,253,10,3
	.word	42678
	.byte	5,2,128,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26732
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EICR',0,2,136,11,3
	.word	42743
	.byte	5,2,139,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27096
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EIFR',0,2,147,11,3
	.word	42805
	.byte	5,2,150,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27307
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EMSR',0,2,158,11,3
	.word	42867
	.byte	5,2,161,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27559
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ESRCFG',0,2,169,11,3
	.word	42929
	.byte	5,2,172,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27677
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ESROCFG',0,2,180,11,3
	.word	42993
	.byte	5,2,183,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27788
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVR13CON',0,2,191,11,3
	.word	43058
	.byte	5,2,194,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27951
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVR33CON',0,2,202,11,3
	.word	43124
	.byte	5,2,205,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28114
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRADCSTAT',0,2,213,11,3
	.word	43190
	.byte	5,2,216,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28272
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRDVSTAT',0,2,224,11,3
	.word	43258
	.byte	5,2,227,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28437
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRMONCTRL',0,2,235,11,3
	.word	43325
	.byte	5,2,238,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28805
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVROSCCTRL',0,2,246,11,3
	.word	43393
	.byte	5,2,249,11,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29026
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVROVMON',0,2,129,12,3
	.word	43461
	.byte	5,2,132,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29205
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRRSTCON',0,2,140,12,3
	.word	43527
	.byte	5,2,143,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29470
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,2,151,12,3
	.word	43594
	.byte	5,2,154,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29623
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,2,162,12,3
	.word	43663
	.byte	5,2,165,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29779
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,2,173,12,3
	.word	43732
	.byte	5,2,176,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29941
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,2,184,12,3
	.word	43801
	.byte	5,2,187,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30084
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,2,195,12,3
	.word	43870
	.byte	5,2,198,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30249
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,2,206,12,3
	.word	43939
	.byte	5,2,209,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30394
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCTRL1',0,2,217,12,3
	.word	44008
	.byte	5,2,220,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30575
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCTRL2',0,2,228,12,3
	.word	44076
	.byte	5,2,231,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30749
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCTRL3',0,2,239,12,3
	.word	44144
	.byte	5,2,242,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30909
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCTRL4',0,2,250,12,3
	.word	44212
	.byte	5,2,253,12,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31053
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSTAT',0,2,133,13,3
	.word	44280
	.byte	5,2,136,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31327
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRTRIM',0,2,144,13,3
	.word	44345
	.byte	5,2,147,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31482
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRUVMON',0,2,155,13,3
	.word	44410
	.byte	5,2,158,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31661
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EXTCON',0,2,166,13,3
	.word	44476
	.byte	5,2,169,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31879
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_FDR',0,2,177,13,3
	.word	44540
	.byte	5,2,180,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32042
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_FMR',0,2,188,13,3
	.word	44601
	.byte	5,2,191,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32378
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ID',0,2,199,13,3
	.word	44662
	.byte	5,2,202,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32485
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_IGCR',0,2,210,13,3
	.word	44722
	.byte	5,2,213,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32937
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_IN',0,2,221,13,3
	.word	44784
	.byte	5,2,224,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33036
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_IOCR',0,2,232,13,3
	.word	44844
	.byte	5,2,235,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33186
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_LBISTCTRL0',0,2,243,13,3
	.word	44906
	.byte	5,2,246,13,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33335
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_LBISTCTRL1',0,2,254,13,3
	.word	44974
	.byte	5,2,129,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33496
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_LBISTCTRL2',0,2,137,14,3
	.word	45042
	.byte	5,2,140,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33626
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_LCLCON',0,2,148,14,3
	.word	45110
	.byte	5,2,151,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33758
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_LCLTEST',0,2,159,14,3
	.word	45174
	.byte	5,2,162,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33873
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_MANID',0,2,170,14,3
	.word	45239
	.byte	5,2,173,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33984
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_OMR',0,2,181,14,3
	.word	45302
	.byte	5,2,184,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34142
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_OSCCON',0,2,192,14,3
	.word	45363
	.byte	5,2,195,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34554
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_OUT',0,2,203,14,3
	.word	45427
	.byte	5,2,206,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34655
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_OVCCON',0,2,214,14,3
	.word	45488
	.byte	5,2,217,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34922
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_OVCENABLE',0,2,225,14,3
	.word	45552
	.byte	5,2,228,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	35058
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PDISC',0,2,236,14,3
	.word	45619
	.byte	5,2,239,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	35169
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PDR',0,2,247,14,3
	.word	45682
	.byte	5,2,250,14,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	35302
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PDRR',0,2,130,15,3
	.word	45743
	.byte	5,2,133,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	35505
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLCON0',0,2,141,15,3
	.word	45805
	.byte	5,2,144,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	35861
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLCON1',0,2,152,15,3
	.word	45870
	.byte	5,2,155,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36039
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLCON2',0,2,163,15,3
	.word	45935
	.byte	5,2,166,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36139
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLERAYCON0',0,2,174,15,3
	.word	46000
	.byte	5,2,177,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36509
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLERAYCON1',0,2,185,15,3
	.word	46069
	.byte	5,2,188,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36695
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLERAYSTAT',0,2,196,15,3
	.word	46138
	.byte	5,2,199,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36893
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLSTAT',0,2,207,15,3
	.word	46207
	.byte	5,2,210,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37126
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMCSR',0,2,218,15,3
	.word	46272
	.byte	5,2,221,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37278
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMSWCR0',0,2,229,15,3
	.word	46335
	.byte	5,2,232,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37826
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMSWCR1',0,2,240,15,3
	.word	46400
	.byte	5,2,243,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38071
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMSWSTAT',0,2,251,15,3
	.word	46465
	.byte	5,2,254,15,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38532
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMSWSTATCLR',0,2,134,16,3
	.word	46531
	.byte	5,2,137,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	39011
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_RSTCON',0,2,145,16,3
	.word	46600
	.byte	5,2,148,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38802
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_RSTCON2',0,2,156,16,3
	.word	46664
	.byte	5,2,159,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	39222
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_RSTSTAT',0,2,167,16,3
	.word	46729
	.byte	5,2,170,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	39654
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_SAFECON',0,2,178,16,3
	.word	46794
	.byte	5,2,181,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	39750
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_STSTAT',0,2,189,16,3
	.word	46859
	.byte	5,2,192,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	40010
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_SWRSTCON',0,2,200,16,3
	.word	46923
	.byte	5,2,203,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	40135
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_SYSCON',0,2,211,16,3
	.word	46989
	.byte	5,2,214,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	40332
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPCLR',0,2,222,16,3
	.word	47053
	.byte	5,2,225,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	40485
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPDIS',0,2,233,16,3
	.word	47118
	.byte	5,2,236,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	40638
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPSET',0,2,244,16,3
	.word	47183
	.byte	5,2,247,16,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	40791
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPSTAT',0,2,255,16,3
	.word	47248
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_CON0',0,2,138,17,3
	.word	319
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_CON1',0,2,149,17,3
	.word	563
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_SR',0,2,160,17,3
	.word	794
	.byte	5,2,163,17,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	41046
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_WDTS_CON0',0,2,171,17,3
	.word	47399
	.byte	5,2,174,17,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	41172
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_WDTS_CON1',0,2,182,17,3
	.word	47466
	.byte	5,2,185,17,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	41424
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_WDTS_SR',0,2,193,17,3
	.word	47533
	.byte	7
	.word	834
	.byte	34
	.byte	'Ifx_SCU_WDTCPU',0,2,209,17,3
	.word	47598
	.byte	3
	.byte	'_Ifx_SCU_WDTS',0,2,212,17,25,12,6
	.byte	'CON0',0
	.word	47399
	.byte	4,2,35,0,6
	.byte	'CON1',0
	.word	47466
	.byte	4,2,35,4,6
	.byte	'SR',0
	.word	47533
	.byte	4,2,35,8,0,7
	.word	47627
	.byte	34
	.byte	'Ifx_SCU_WDTS',0,2,217,17,3
	.word	47688
	.byte	17,8
	.word	42929
	.byte	18,1,0,17,12
	.word	46272
	.byte	18,2,0,7
	.word	47627
	.byte	17,36
	.word	834
	.byte	18,2,0,7
	.word	47738
	.byte	17,40
	.word	184
	.byte	18,39,0,17,16
	.word	42743
	.byte	18,3,0,17,16
	.word	44722
	.byte	18,3,0,17,180,3
	.word	184
	.byte	18,179,3,0,3
	.byte	'_Ifx_SCU',0,2,230,17,25,128,8,6
	.byte	'reserved_0',0
	.word	4679
	.byte	8,2,35,0,6
	.byte	'ID',0
	.word	44662
	.byte	4,2,35,8,6
	.byte	'reserved_C',0
	.word	2860
	.byte	4,2,35,12,6
	.byte	'OSCCON',0
	.word	45363
	.byte	4,2,35,16,6
	.byte	'PLLSTAT',0
	.word	46207
	.byte	4,2,35,20,6
	.byte	'PLLCON0',0
	.word	45805
	.byte	4,2,35,24,6
	.byte	'PLLCON1',0
	.word	45870
	.byte	4,2,35,28,6
	.byte	'PLLCON2',0
	.word	45935
	.byte	4,2,35,32,6
	.byte	'PLLERAYSTAT',0
	.word	46138
	.byte	4,2,35,36,6
	.byte	'PLLERAYCON0',0
	.word	46000
	.byte	4,2,35,40,6
	.byte	'PLLERAYCON1',0
	.word	46069
	.byte	4,2,35,44,6
	.byte	'CCUCON0',0
	.word	41836
	.byte	4,2,35,48,6
	.byte	'CCUCON1',0
	.word	41901
	.byte	4,2,35,52,6
	.byte	'FDR',0
	.word	44540
	.byte	4,2,35,56,6
	.byte	'EXTCON',0
	.word	44476
	.byte	4,2,35,60,6
	.byte	'CCUCON2',0
	.word	41966
	.byte	4,2,35,64,6
	.byte	'CCUCON3',0
	.word	42031
	.byte	4,2,35,68,6
	.byte	'CCUCON4',0
	.word	42096
	.byte	4,2,35,72,6
	.byte	'CCUCON5',0
	.word	42161
	.byte	4,2,35,76,6
	.byte	'RSTSTAT',0
	.word	46729
	.byte	4,2,35,80,6
	.byte	'reserved_54',0
	.word	2860
	.byte	4,2,35,84,6
	.byte	'RSTCON',0
	.word	46600
	.byte	4,2,35,88,6
	.byte	'ARSTDIS',0
	.word	41771
	.byte	4,2,35,92,6
	.byte	'SWRSTCON',0
	.word	46923
	.byte	4,2,35,96,6
	.byte	'RSTCON2',0
	.word	46664
	.byte	4,2,35,100,6
	.byte	'reserved_68',0
	.word	2860
	.byte	4,2,35,104,6
	.byte	'EVRRSTCON',0
	.word	43527
	.byte	4,2,35,108,6
	.byte	'ESRCFG',0
	.word	47715
	.byte	8,2,35,112,6
	.byte	'ESROCFG',0
	.word	42993
	.byte	4,2,35,120,6
	.byte	'SYSCON',0
	.word	46989
	.byte	4,2,35,124,6
	.byte	'CCUCON6',0
	.word	42226
	.byte	4,3,35,128,1,6
	.byte	'CCUCON7',0
	.word	42291
	.byte	4,3,35,132,1,6
	.byte	'CCUCON8',0
	.word	42356
	.byte	4,3,35,136,1,6
	.byte	'CCUCON9',0
	.word	42421
	.byte	4,3,35,140,1,6
	.byte	'reserved_90',0
	.word	5019
	.byte	12,3,35,144,1,6
	.byte	'PDR',0
	.word	45682
	.byte	4,3,35,156,1,6
	.byte	'IOCR',0
	.word	44844
	.byte	4,3,35,160,1,6
	.byte	'OUT',0
	.word	45427
	.byte	4,3,35,164,1,6
	.byte	'OMR',0
	.word	45302
	.byte	4,3,35,168,1,6
	.byte	'IN',0
	.word	44784
	.byte	4,3,35,172,1,6
	.byte	'EVRSTAT',0
	.word	44280
	.byte	4,3,35,176,1,6
	.byte	'EVRDVSTAT',0
	.word	43258
	.byte	4,3,35,180,1,6
	.byte	'EVR13CON',0
	.word	43058
	.byte	4,3,35,184,1,6
	.byte	'EVR33CON',0
	.word	43124
	.byte	4,3,35,188,1,6
	.byte	'STSTAT',0
	.word	46859
	.byte	4,3,35,192,1,6
	.byte	'reserved_C4',0
	.word	2860
	.byte	4,3,35,196,1,6
	.byte	'PMSWCR0',0
	.word	46335
	.byte	4,3,35,200,1,6
	.byte	'PMSWSTAT',0
	.word	46465
	.byte	4,3,35,204,1,6
	.byte	'PMSWSTATCLR',0
	.word	46531
	.byte	4,3,35,208,1,6
	.byte	'PMCSR',0
	.word	47724
	.byte	12,3,35,212,1,6
	.byte	'DTSSTAT',0
	.word	42678
	.byte	4,3,35,224,1,6
	.byte	'DTSCON',0
	.word	42550
	.byte	4,3,35,228,1,6
	.byte	'PMSWCR1',0
	.word	46400
	.byte	4,3,35,232,1,6
	.byte	'reserved_EC',0
	.word	2860
	.byte	4,3,35,236,1,6
	.byte	'WDTS',0
	.word	47733
	.byte	12,3,35,240,1,6
	.byte	'EMSR',0
	.word	42867
	.byte	4,3,35,252,1,6
	.byte	'WDTCPU',0
	.word	47747
	.byte	36,3,35,128,2,6
	.byte	'TRAPSTAT',0
	.word	47248
	.byte	4,3,35,164,2,6
	.byte	'TRAPSET',0
	.word	47183
	.byte	4,3,35,168,2,6
	.byte	'TRAPCLR',0
	.word	47053
	.byte	4,3,35,172,2,6
	.byte	'TRAPDIS',0
	.word	47118
	.byte	4,3,35,176,2,6
	.byte	'LCLCON0',0
	.word	45110
	.byte	4,3,35,180,2,6
	.byte	'LCLCON1',0
	.word	45110
	.byte	4,3,35,184,2,6
	.byte	'LCLTEST',0
	.word	45174
	.byte	4,3,35,188,2,6
	.byte	'CHIPID',0
	.word	42486
	.byte	4,3,35,192,2,6
	.byte	'MANID',0
	.word	45239
	.byte	4,3,35,196,2,6
	.byte	'reserved_148',0
	.word	4679
	.byte	8,3,35,200,2,6
	.byte	'SAFECON',0
	.word	46794
	.byte	4,3,35,208,2,6
	.byte	'reserved_154',0
	.word	19732
	.byte	16,3,35,212,2,6
	.byte	'LBISTCTRL0',0
	.word	44906
	.byte	4,3,35,228,2,6
	.byte	'LBISTCTRL1',0
	.word	44974
	.byte	4,3,35,232,2,6
	.byte	'LBISTCTRL2',0
	.word	45042
	.byte	4,3,35,236,2,6
	.byte	'reserved_170',0
	.word	17616
	.byte	28,3,35,240,2,6
	.byte	'PDISC',0
	.word	45619
	.byte	4,3,35,140,3,6
	.byte	'reserved_190',0
	.word	4679
	.byte	8,3,35,144,3,6
	.byte	'EVRTRIM',0
	.word	44345
	.byte	4,3,35,152,3,6
	.byte	'EVRADCSTAT',0
	.word	43190
	.byte	4,3,35,156,3,6
	.byte	'EVRUVMON',0
	.word	44410
	.byte	4,3,35,160,3,6
	.byte	'EVROVMON',0
	.word	43461
	.byte	4,3,35,164,3,6
	.byte	'EVRMONCTRL',0
	.word	43325
	.byte	4,3,35,168,3,6
	.byte	'reserved_1AC',0
	.word	2860
	.byte	4,3,35,172,3,6
	.byte	'EVRSDCTRL1',0
	.word	44008
	.byte	4,3,35,176,3,6
	.byte	'EVRSDCTRL2',0
	.word	44076
	.byte	4,3,35,180,3,6
	.byte	'EVRSDCTRL3',0
	.word	44144
	.byte	4,3,35,184,3,6
	.byte	'EVRSDCTRL4',0
	.word	44212
	.byte	4,3,35,188,3,6
	.byte	'EVRSDCOEFF1',0
	.word	43594
	.byte	4,3,35,192,3,6
	.byte	'EVRSDCOEFF2',0
	.word	43663
	.byte	4,3,35,196,3,6
	.byte	'EVRSDCOEFF3',0
	.word	43732
	.byte	4,3,35,200,3,6
	.byte	'EVRSDCOEFF4',0
	.word	43801
	.byte	4,3,35,204,3,6
	.byte	'EVRSDCOEFF5',0
	.word	43870
	.byte	4,3,35,208,3,6
	.byte	'EVRSDCOEFF6',0
	.word	43939
	.byte	4,3,35,212,3,6
	.byte	'EVROSCCTRL',0
	.word	43393
	.byte	4,3,35,216,3,6
	.byte	'reserved_1DC',0
	.word	2860
	.byte	4,3,35,220,3,6
	.byte	'OVCENABLE',0
	.word	45552
	.byte	4,3,35,224,3,6
	.byte	'OVCCON',0
	.word	45488
	.byte	4,3,35,228,3,6
	.byte	'reserved_1E8',0
	.word	47752
	.byte	40,3,35,232,3,6
	.byte	'EICR',0
	.word	47761
	.byte	16,3,35,144,4,6
	.byte	'EIFR',0
	.word	42805
	.byte	4,3,35,160,4,6
	.byte	'FMR',0
	.word	44601
	.byte	4,3,35,164,4,6
	.byte	'PDRR',0
	.word	45743
	.byte	4,3,35,168,4,6
	.byte	'IGCR',0
	.word	47770
	.byte	16,3,35,172,4,6
	.byte	'reserved_23C',0
	.word	2860
	.byte	4,3,35,188,4,6
	.byte	'DTSLIM',0
	.word	42614
	.byte	4,3,35,192,4,6
	.byte	'reserved_244',0
	.word	47779
	.byte	180,3,3,35,196,4,6
	.byte	'ACCEN1',0
	.word	41707
	.byte	4,3,35,248,7,6
	.byte	'ACCEN0',0
	.word	41643
	.byte	4,3,35,252,7,0,7
	.word	47790
	.byte	34
	.byte	'Ifx_SCU',0,2,210,18,3
	.word	49770
	.byte	34
	.byte	'Ifx_CPU_A_Bits',0,10,48,3
	.word	19954
	.byte	34
	.byte	'Ifx_CPU_BIV_Bits',0,10,55,3
	.word	19060
	.byte	34
	.byte	'Ifx_CPU_BTV_Bits',0,10,62,3
	.word	19154
	.byte	34
	.byte	'Ifx_CPU_CCNT_Bits',0,10,69,3
	.word	16358
	.byte	34
	.byte	'Ifx_CPU_CCTRL_Bits',0,10,80,3
	.word	16199
	.byte	34
	.byte	'Ifx_CPU_COMPAT_Bits',0,10,89,3
	.word	13427
	.byte	34
	.byte	'Ifx_CPU_CORE_ID_Bits',0,10,96,3
	.word	18951
	.byte	34
	.byte	'Ifx_CPU_CPR_L_Bits',0,10,103,3
	.word	14749
	.byte	34
	.byte	'Ifx_CPU_CPR_U_Bits',0,10,110,3
	.word	14855
	.byte	34
	.byte	'Ifx_CPU_CPU_ID_Bits',0,10,118,3
	.word	18831
	.byte	34
	.byte	'Ifx_CPU_CPXE_Bits',0,10,125,3
	.word	15028
	.byte	34
	.byte	'Ifx_CPU_CREVT_Bits',0,10,136,1,3
	.word	17284
	.byte	34
	.byte	'Ifx_CPU_CUS_ID_Bits',0,10,143,1,3
	.word	19741
	.byte	34
	.byte	'Ifx_CPU_D_Bits',0,10,149,1,3
	.word	19857
	.byte	34
	.byte	'Ifx_CPU_DATR_Bits',0,10,163,1,3
	.word	11730
	.byte	34
	.byte	'Ifx_CPU_DBGSR_Bits',0,10,177,1,3
	.word	16891
	.byte	34
	.byte	'Ifx_CPU_DBGTCR_Bits',0,10,184,1,3
	.word	18043
	.byte	34
	.byte	'Ifx_CPU_DCON0_Bits',0,10,192,1,3
	.word	12375
	.byte	34
	.byte	'Ifx_CPU_DCON2_Bits',0,10,199,1,3
	.word	11028
	.byte	34
	.byte	'Ifx_CPU_DCX_Bits',0,10,206,1,3
	.word	17936
	.byte	34
	.byte	'Ifx_CPU_DEADD_Bits',0,10,212,1,3
	.word	11961
	.byte	34
	.byte	'Ifx_CPU_DIEAR_Bits',0,10,218,1,3
	.word	12053
	.byte	34
	.byte	'Ifx_CPU_DIETR_Bits',0,10,233,1,3
	.word	12134
	.byte	34
	.byte	'Ifx_CPU_DMS_Bits',0,10,240,1,3
	.word	17829
	.byte	34
	.byte	'Ifx_CPU_DPR_L_Bits',0,10,247,1,3
	.word	14467
	.byte	34
	.byte	'Ifx_CPU_DPR_U_Bits',0,10,254,1,3
	.word	14574
	.byte	34
	.byte	'Ifx_CPU_DPRE_Bits',0,10,133,2,3
	.word	15138
	.byte	34
	.byte	'Ifx_CPU_DPWE_Bits',0,10,140,2,3
	.word	15250
	.byte	34
	.byte	'Ifx_CPU_DSTR_Bits',0,10,161,2,3
	.word	11393
	.byte	34
	.byte	'Ifx_CPU_EXEVT_Bits',0,10,172,2,3
	.word	17118
	.byte	34
	.byte	'Ifx_CPU_FCX_Bits',0,10,180,2,3
	.word	19492
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,10,202,2,3
	.word	13577
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,10,212,2,3
	.word	14018
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,10,218,2,3
	.word	13931
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,10,224,2,3
	.word	14183
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,10,230,2,3
	.word	14274
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,10,236,2,3
	.word	14365
	.byte	34
	.byte	'Ifx_CPU_ICNT_Bits',0,10,243,2,3
	.word	16461
	.byte	34
	.byte	'Ifx_CPU_ICR_Bits',0,10,253,2,3
	.word	19335
	.byte	34
	.byte	'Ifx_CPU_ISP_Bits',0,10,131,3,3
	.word	19255
	.byte	34
	.byte	'Ifx_CPU_LCX_Bits',0,10,139,3,3
	.word	19612
	.byte	34
	.byte	'Ifx_CPU_M1CNT_Bits',0,10,146,3,3
	.word	16565
	.byte	34
	.byte	'Ifx_CPU_M2CNT_Bits',0,10,153,3,3
	.word	16670
	.byte	34
	.byte	'Ifx_CPU_M3CNT_Bits',0,10,160,3,3
	.word	16775
	.byte	34
	.byte	'Ifx_CPU_PC_Bits',0,10,167,3,3
	.word	18559
	.byte	34
	.byte	'Ifx_CPU_PCON0_Bits',0,10,175,3,3
	.word	12966
	.byte	34
	.byte	'Ifx_CPU_PCON1_Bits',0,10,183,3,3
	.word	12730
	.byte	34
	.byte	'Ifx_CPU_PCON2_Bits',0,10,190,3,3
	.word	12853
	.byte	34
	.byte	'Ifx_CPU_PCXI_Bits',0,10,200,3,3
	.word	18159
	.byte	34
	.byte	'Ifx_CPU_PIEAR_Bits',0,10,206,3,3
	.word	13094
	.byte	34
	.byte	'Ifx_CPU_PIETR_Bits',0,10,221,3,3
	.word	13175
	.byte	34
	.byte	'Ifx_CPU_PMA0_Bits',0,10,229,3,3
	.word	10661
	.byte	34
	.byte	'Ifx_CPU_PMA1_Bits',0,10,237,3,3
	.word	10787
	.byte	34
	.byte	'Ifx_CPU_PMA2_Bits',0,10,244,3,3
	.word	10913
	.byte	34
	.byte	'Ifx_CPU_PSTR_Bits',0,10,129,4,3
	.word	12514
	.byte	34
	.byte	'Ifx_CPU_PSW_Bits',0,10,147,4,3
	.word	18302
	.byte	34
	.byte	'Ifx_CPU_SEGEN_Bits',0,10,156,4,3
	.word	10390
	.byte	34
	.byte	'Ifx_CPU_SMACON_Bits',0,10,171,4,3
	.word	11141
	.byte	3
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,10,174,4,16,4,4
	.byte	'EN',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,10,177,4,3
	.word	51415
	.byte	3
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,10,180,4,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,10,183,4,3
	.word	51498
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,10,186,4,16,4,4
	.byte	'EN',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,10,189,4,3
	.word	51589
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,10,192,4,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,10,195,4,3
	.word	51680
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,10,198,4,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	161
	.byte	27,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,10,202,4,3
	.word	51779
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,10,205,4,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	161
	.byte	27,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,10,209,4,3
	.word	51886
	.byte	34
	.byte	'Ifx_CPU_SWEVT_Bits',0,10,220,4,3
	.word	17450
	.byte	34
	.byte	'Ifx_CPU_SYSCON_Bits',0,10,231,4,3
	.word	18659
	.byte	34
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,10,238,4,3
	.word	10543
	.byte	34
	.byte	'Ifx_CPU_TPS_CON_Bits',0,10,249,4,3
	.word	15373
	.byte	34
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,10,255,4,3
	.word	15555
	.byte	34
	.byte	'Ifx_CPU_TR_ADR_Bits',0,10,133,5,3
	.word	16045
	.byte	34
	.byte	'Ifx_CPU_TR_EVT_Bits',0,10,153,5,3
	.word	15716
	.byte	34
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,10,167,5,3
	.word	17625
	.byte	34
	.byte	'Ifx_CPU_A',0,10,183,5,3
	.word	19992
	.byte	34
	.byte	'Ifx_CPU_BIV',0,10,194,5,3
	.word	19114
	.byte	34
	.byte	'Ifx_CPU_BTV',0,10,205,5,3
	.word	19215
	.byte	34
	.byte	'Ifx_CPU_CCNT',0,10,216,5,3
	.word	16421
	.byte	34
	.byte	'Ifx_CPU_CCTRL',0,10,227,5,3
	.word	16318
	.byte	34
	.byte	'Ifx_CPU_COMPAT',0,10,238,5,3
	.word	13526
	.byte	34
	.byte	'Ifx_CPU_CORE_ID',0,10,249,5,3
	.word	19020
	.byte	34
	.byte	'Ifx_CPU_CPR_L',0,10,132,6,3
	.word	14815
	.byte	34
	.byte	'Ifx_CPU_CPR_U',0,10,143,6,3
	.word	14921
	.byte	34
	.byte	'Ifx_CPU_CPU_ID',0,10,154,6,3
	.word	18911
	.byte	34
	.byte	'Ifx_CPU_CPXE',0,10,165,6,3
	.word	15089
	.byte	34
	.byte	'Ifx_CPU_CREVT',0,10,176,6,3
	.word	17410
	.byte	34
	.byte	'Ifx_CPU_CUS_ID',0,10,187,6,3
	.word	19806
	.byte	34
	.byte	'Ifx_CPU_D',0,10,198,6,3
	.word	19896
	.byte	34
	.byte	'Ifx_CPU_DATR',0,10,209,6,3
	.word	11921
	.byte	34
	.byte	'Ifx_CPU_DBGSR',0,10,220,6,3
	.word	17078
	.byte	34
	.byte	'Ifx_CPU_DBGTCR',0,10,231,6,3
	.word	18108
	.byte	34
	.byte	'Ifx_CPU_DCON0',0,10,242,6,3
	.word	12463
	.byte	34
	.byte	'Ifx_CPU_DCON2',0,10,253,6,3
	.word	11101
	.byte	34
	.byte	'Ifx_CPU_DCX',0,10,136,7,3
	.word	18003
	.byte	34
	.byte	'Ifx_CPU_DEADD',0,10,147,7,3
	.word	12013
	.byte	34
	.byte	'Ifx_CPU_DIEAR',0,10,158,7,3
	.word	12094
	.byte	34
	.byte	'Ifx_CPU_DIETR',0,10,169,7,3
	.word	12335
	.byte	34
	.byte	'Ifx_CPU_DMS',0,10,180,7,3
	.word	17896
	.byte	34
	.byte	'Ifx_CPU_DPR_L',0,10,191,7,3
	.word	14534
	.byte	34
	.byte	'Ifx_CPU_DPR_U',0,10,202,7,3
	.word	14641
	.byte	34
	.byte	'Ifx_CPU_DPRE',0,10,213,7,3
	.word	15201
	.byte	34
	.byte	'Ifx_CPU_DPWE',0,10,224,7,3
	.word	15313
	.byte	34
	.byte	'Ifx_CPU_DSTR',0,10,235,7,3
	.word	11690
	.byte	34
	.byte	'Ifx_CPU_EXEVT',0,10,246,7,3
	.word	17244
	.byte	34
	.byte	'Ifx_CPU_FCX',0,10,129,8,3
	.word	19572
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,10,140,8,3
	.word	13891
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,10,151,8,3
	.word	14143
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,10,162,8,3
	.word	13978
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,10,173,8,3
	.word	14234
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,10,184,8,3
	.word	14325
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,10,195,8,3
	.word	14416
	.byte	34
	.byte	'Ifx_CPU_ICNT',0,10,206,8,3
	.word	16525
	.byte	34
	.byte	'Ifx_CPU_ICR',0,10,217,8,3
	.word	19452
	.byte	34
	.byte	'Ifx_CPU_ISP',0,10,228,8,3
	.word	19295
	.byte	34
	.byte	'Ifx_CPU_LCX',0,10,239,8,3
	.word	19692
	.byte	34
	.byte	'Ifx_CPU_M1CNT',0,10,250,8,3
	.word	16630
	.byte	34
	.byte	'Ifx_CPU_M2CNT',0,10,133,9,3
	.word	16735
	.byte	34
	.byte	'Ifx_CPU_M3CNT',0,10,144,9,3
	.word	16840
	.byte	34
	.byte	'Ifx_CPU_PC',0,10,155,9,3
	.word	18619
	.byte	34
	.byte	'Ifx_CPU_PCON0',0,10,166,9,3
	.word	13054
	.byte	34
	.byte	'Ifx_CPU_PCON1',0,10,177,9,3
	.word	12813
	.byte	34
	.byte	'Ifx_CPU_PCON2',0,10,188,9,3
	.word	12926
	.byte	34
	.byte	'Ifx_CPU_PCXI',0,10,199,9,3
	.word	18262
	.byte	34
	.byte	'Ifx_CPU_PIEAR',0,10,210,9,3
	.word	13135
	.byte	34
	.byte	'Ifx_CPU_PIETR',0,10,221,9,3
	.word	13376
	.byte	34
	.byte	'Ifx_CPU_PMA0',0,10,232,9,3
	.word	10747
	.byte	34
	.byte	'Ifx_CPU_PMA1',0,10,243,9,3
	.word	10873
	.byte	34
	.byte	'Ifx_CPU_PMA2',0,10,254,9,3
	.word	10977
	.byte	34
	.byte	'Ifx_CPU_PSTR',0,10,137,10,3
	.word	12690
	.byte	34
	.byte	'Ifx_CPU_PSW',0,10,148,10,3
	.word	18519
	.byte	34
	.byte	'Ifx_CPU_SEGEN',0,10,159,10,3
	.word	10490
	.byte	34
	.byte	'Ifx_CPU_SMACON',0,10,170,10,3
	.word	11353
	.byte	5,10,173,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51415
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_ACCENA',0,10,181,10,3
	.word	53576
	.byte	5,10,184,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51498
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_ACCENB',0,10,192,10,3
	.word	53646
	.byte	5,10,195,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51589
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,10,203,10,3
	.word	53716
	.byte	5,10,206,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51680
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,10,214,10,3
	.word	53790
	.byte	5,10,217,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51779
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,10,225,10,3
	.word	53864
	.byte	5,10,228,10,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51886
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,10,236,10,3
	.word	53934
	.byte	34
	.byte	'Ifx_CPU_SWEVT',0,10,247,10,3
	.word	17576
	.byte	34
	.byte	'Ifx_CPU_SYSCON',0,10,130,11,3
	.word	18791
	.byte	34
	.byte	'Ifx_CPU_TASK_ASI',0,10,141,11,3
	.word	10610
	.byte	34
	.byte	'Ifx_CPU_TPS_CON',0,10,152,11,3
	.word	15515
	.byte	34
	.byte	'Ifx_CPU_TPS_TIMER',0,10,163,11,3
	.word	15603
	.byte	34
	.byte	'Ifx_CPU_TR_ADR',0,10,174,11,3
	.word	16089
	.byte	34
	.byte	'Ifx_CPU_TR_EVT',0,10,185,11,3
	.word	16005
	.byte	34
	.byte	'Ifx_CPU_TRIG_ACC',0,10,196,11,3
	.word	17789
	.byte	7
	.word	14961
	.byte	34
	.byte	'Ifx_CPU_CPR',0,10,211,11,3
	.word	54203
	.byte	7
	.word	14681
	.byte	34
	.byte	'Ifx_CPU_DPR',0,10,218,11,3
	.word	54229
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN',0,10,221,11,25,16,6
	.byte	'LA',0
	.word	53864
	.byte	4,2,35,0,6
	.byte	'UA',0
	.word	53934
	.byte	4,2,35,4,6
	.byte	'ACCENA',0
	.word	53716
	.byte	4,2,35,8,6
	.byte	'ACCENB',0
	.word	53790
	.byte	4,2,35,12,0,7
	.word	54255
	.byte	34
	.byte	'Ifx_CPU_SPROT_RGN',0,10,227,11,3
	.word	54337
	.byte	7
	.word	15652
	.byte	34
	.byte	'Ifx_CPU_TPS',0,10,234,11,3
	.word	54369
	.byte	7
	.word	16129
	.byte	34
	.byte	'Ifx_CPU_TR',0,10,241,11,3
	.word	54395
	.byte	7
	.word	20041
	.byte	34
	.byte	'Ifx_CPU',0,10,218,12,3
	.word	54420
	.byte	34
	.byte	'IfxCpu_ResourceCpu',0,6,89,3
	.word	1274
	.byte	3
	.byte	'_Ifx_SRC_SRCR_Bits',0,17,45,16,4,4
	.byte	'SRPN',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	184
	.byte	2,6,2,35,1,4
	.byte	'SRE',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'TOS',0,1
	.word	184
	.byte	2,3,2,35,1,4
	.byte	'reserved_13',0,1
	.word	184
	.byte	3,0,2,35,1,4
	.byte	'ECC',0,1
	.word	184
	.byte	6,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	184
	.byte	2,0,2,35,2,4
	.byte	'SRR',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'CLRR',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'SETR',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'IOV',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'IOVCLR',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'SWS',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'SWSCLR',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SRC_SRCR_Bits',0,17,62,3
	.word	54469
	.byte	5,17,70,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54469
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SRC_SRCR',0,17,78,3
	.word	54785
	.byte	3
	.byte	'_Ifx_SRC_AGBT',0,17,89,25,4,6
	.byte	'SR',0
	.word	54785
	.byte	4,2,35,0,0,7
	.word	54845
	.byte	34
	.byte	'Ifx_SRC_AGBT',0,17,92,3
	.word	54877
	.byte	3
	.byte	'_Ifx_SRC_ASCLIN',0,17,95,25,12,6
	.byte	'TX',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'RX',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	54785
	.byte	4,2,35,8,0,7
	.word	54903
	.byte	34
	.byte	'Ifx_SRC_ASCLIN',0,17,100,3
	.word	54962
	.byte	3
	.byte	'_Ifx_SRC_BCUSPB',0,17,103,25,4,6
	.byte	'SBSRC',0
	.word	54785
	.byte	4,2,35,0,0,7
	.word	54990
	.byte	34
	.byte	'Ifx_SRC_BCUSPB',0,17,106,3
	.word	55027
	.byte	17,64
	.word	54785
	.byte	18,15,0,3
	.byte	'_Ifx_SRC_CAN',0,17,109,25,64,6
	.byte	'INT',0
	.word	55055
	.byte	64,2,35,0,0,7
	.word	55064
	.byte	34
	.byte	'Ifx_SRC_CAN',0,17,112,3
	.word	55096
	.byte	3
	.byte	'_Ifx_SRC_CCU6',0,17,115,25,16,6
	.byte	'SR0',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	54785
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	54785
	.byte	4,2,35,12,0,7
	.word	55121
	.byte	34
	.byte	'Ifx_SRC_CCU6',0,17,121,3
	.word	55193
	.byte	17,8
	.word	54785
	.byte	18,1,0,3
	.byte	'_Ifx_SRC_CERBERUS',0,17,124,25,8,6
	.byte	'SR',0
	.word	55219
	.byte	8,2,35,0,0,7
	.word	55228
	.byte	34
	.byte	'Ifx_SRC_CERBERUS',0,17,127,3
	.word	55264
	.byte	3
	.byte	'_Ifx_SRC_CIF',0,17,130,1,25,16,6
	.byte	'MI',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'MIEP',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'ISP',0
	.word	54785
	.byte	4,2,35,8,6
	.byte	'MJPEG',0
	.word	54785
	.byte	4,2,35,12,0,7
	.word	55294
	.byte	34
	.byte	'Ifx_SRC_CIF',0,17,136,1,3
	.word	55368
	.byte	3
	.byte	'_Ifx_SRC_CPU',0,17,139,1,25,4,6
	.byte	'SBSRC',0
	.word	54785
	.byte	4,2,35,0,0,7
	.word	55394
	.byte	34
	.byte	'Ifx_SRC_CPU',0,17,142,1,3
	.word	55429
	.byte	17,24
	.word	54785
	.byte	18,5,0,3
	.byte	'_Ifx_SRC_DAM',0,17,145,1,25,24,6
	.byte	'SR',0
	.word	55455
	.byte	24,2,35,0,0,7
	.word	55464
	.byte	34
	.byte	'Ifx_SRC_DAM',0,17,148,1,3
	.word	55496
	.byte	17,128,2
	.word	54785
	.byte	18,63,0,3
	.byte	'_Ifx_SRC_DMA',0,17,151,1,25,144,2,6
	.byte	'ERR',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'reserved_4',0
	.word	5019
	.byte	12,2,35,4,6
	.byte	'CH',0
	.word	55522
	.byte	128,2,2,35,16,0,7
	.word	55532
	.byte	34
	.byte	'Ifx_SRC_DMA',0,17,156,1,3
	.word	55599
	.byte	3
	.byte	'_Ifx_SRC_DSADC',0,17,159,1,25,8,6
	.byte	'SRM',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'SRA',0
	.word	54785
	.byte	4,2,35,4,0,7
	.word	55625
	.byte	34
	.byte	'Ifx_SRC_DSADC',0,17,163,1,3
	.word	55673
	.byte	3
	.byte	'_Ifx_SRC_EMEM',0,17,166,1,25,4,6
	.byte	'SR',0
	.word	54785
	.byte	4,2,35,0,0,7
	.word	55701
	.byte	34
	.byte	'Ifx_SRC_EMEM',0,17,169,1,3
	.word	55734
	.byte	3
	.byte	'_Ifx_SRC_ERAY',0,17,172,1,25,80,6
	.byte	'INT',0
	.word	55219
	.byte	8,2,35,0,6
	.byte	'TINT',0
	.word	55219
	.byte	8,2,35,8,6
	.byte	'NDAT',0
	.word	55219
	.byte	8,2,35,16,6
	.byte	'MBSC',0
	.word	55219
	.byte	8,2,35,24,6
	.byte	'OBUSY',0
	.word	54785
	.byte	4,2,35,32,6
	.byte	'IBUSY',0
	.word	54785
	.byte	4,2,35,36,6
	.byte	'reserved_28',0
	.word	47752
	.byte	40,2,35,40,0,7
	.word	55761
	.byte	34
	.byte	'Ifx_SRC_ERAY',0,17,181,1,3
	.word	55888
	.byte	3
	.byte	'_Ifx_SRC_ETH',0,17,184,1,25,4,6
	.byte	'SR',0
	.word	54785
	.byte	4,2,35,0,0,7
	.word	55915
	.byte	34
	.byte	'Ifx_SRC_ETH',0,17,187,1,3
	.word	55947
	.byte	3
	.byte	'_Ifx_SRC_FCE',0,17,190,1,25,4,6
	.byte	'SR',0
	.word	54785
	.byte	4,2,35,0,0,7
	.word	55973
	.byte	34
	.byte	'Ifx_SRC_FCE',0,17,193,1,3
	.word	56005
	.byte	3
	.byte	'_Ifx_SRC_GPSR',0,17,196,1,25,32,6
	.byte	'SR0',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	54785
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	54785
	.byte	4,2,35,12,6
	.byte	'reserved_10',0
	.word	19732
	.byte	16,2,35,16,0,7
	.word	56031
	.byte	34
	.byte	'Ifx_SRC_GPSR',0,17,203,1,3
	.word	56125
	.byte	3
	.byte	'_Ifx_SRC_GPT12',0,17,206,1,25,48,6
	.byte	'CIRQ',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'T2',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'T3',0
	.word	54785
	.byte	4,2,35,8,6
	.byte	'T4',0
	.word	54785
	.byte	4,2,35,12,6
	.byte	'T5',0
	.word	54785
	.byte	4,2,35,16,6
	.byte	'T6',0
	.word	54785
	.byte	4,2,35,20,6
	.byte	'reserved_18',0
	.word	4050
	.byte	24,2,35,24,0,7
	.word	56152
	.byte	34
	.byte	'Ifx_SRC_GPT12',0,17,215,1,3
	.word	56269
	.byte	17,12
	.word	54785
	.byte	18,2,0,17,32
	.word	54785
	.byte	18,7,0,17,32
	.word	56306
	.byte	18,0,0,17,88
	.word	184
	.byte	18,87,0,17,108
	.word	54785
	.byte	18,26,0,17,96
	.word	184
	.byte	18,95,0,17,128,1
	.word	56306
	.byte	18,3,0,17,128,3
	.word	184
	.byte	18,255,2,0,17,96
	.word	56306
	.byte	18,2,0,17,160,3
	.word	184
	.byte	18,159,3,0,17,16
	.word	54785
	.byte	18,3,0,17,80
	.word	56392
	.byte	18,4,0,17,176,2
	.word	184
	.byte	18,175,2,0,17,48
	.word	184
	.byte	18,47,0,3
	.byte	'_Ifx_SRC_GTM',0,17,218,1,25,208,18,6
	.byte	'AEIIRQ',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'ARUIRQ',0
	.word	56297
	.byte	12,2,35,4,6
	.byte	'reserved_10',0
	.word	2860
	.byte	4,2,35,16,6
	.byte	'BRCIRQ',0
	.word	54785
	.byte	4,2,35,20,6
	.byte	'CMPIRQ',0
	.word	54785
	.byte	4,2,35,24,6
	.byte	'SPEIRQ',0
	.word	55219
	.byte	8,2,35,28,6
	.byte	'reserved_24',0
	.word	4679
	.byte	8,2,35,36,6
	.byte	'PSM',0
	.word	56315
	.byte	32,2,35,44,6
	.byte	'reserved_4C',0
	.word	56324
	.byte	88,2,35,76,6
	.byte	'DPLL',0
	.word	56333
	.byte	108,3,35,164,1,6
	.byte	'reserved_110',0
	.word	56342
	.byte	96,3,35,144,2,6
	.byte	'ERR',0
	.word	54785
	.byte	4,3,35,240,2,6
	.byte	'reserved_174',0
	.word	5019
	.byte	12,3,35,244,2,6
	.byte	'TIM',0
	.word	56351
	.byte	128,1,3,35,128,3,6
	.byte	'reserved_200',0
	.word	56361
	.byte	128,3,3,35,128,4,6
	.byte	'MCS',0
	.word	56351
	.byte	128,1,3,35,128,7,6
	.byte	'reserved_400',0
	.word	56361
	.byte	128,3,3,35,128,8,6
	.byte	'TOM',0
	.word	56372
	.byte	96,3,35,128,11,6
	.byte	'reserved_5E0',0
	.word	56381
	.byte	160,3,3,35,224,11,6
	.byte	'ATOM',0
	.word	56401
	.byte	80,3,35,128,15,6
	.byte	'reserved_7D0',0
	.word	56410
	.byte	176,2,3,35,208,15,6
	.byte	'MCSW0',0
	.word	56392
	.byte	16,3,35,128,18,6
	.byte	'reserved_910',0
	.word	56421
	.byte	48,3,35,144,18,6
	.byte	'MCSW1',0
	.word	56392
	.byte	16,3,35,192,18,0,7
	.word	56430
	.byte	34
	.byte	'Ifx_SRC_GTM',0,17,244,1,3
	.word	56892
	.byte	3
	.byte	'_Ifx_SRC_HSCT',0,17,247,1,25,4,6
	.byte	'SR',0
	.word	54785
	.byte	4,2,35,0,0,7
	.word	56918
	.byte	34
	.byte	'Ifx_SRC_HSCT',0,17,250,1,3
	.word	56951
	.byte	3
	.byte	'_Ifx_SRC_HSM',0,17,253,1,25,8,6
	.byte	'HSM',0
	.word	55219
	.byte	8,2,35,0,0,7
	.word	56978
	.byte	34
	.byte	'Ifx_SRC_HSM',0,17,128,2,3
	.word	57011
	.byte	3
	.byte	'_Ifx_SRC_HSSL',0,17,131,2,25,16,6
	.byte	'COK',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'RDI',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	54785
	.byte	4,2,35,8,6
	.byte	'TRG',0
	.word	54785
	.byte	4,2,35,12,0,7
	.word	57037
	.byte	34
	.byte	'Ifx_SRC_HSSL',0,17,137,2,3
	.word	57110
	.byte	17,56
	.word	184
	.byte	18,55,0,3
	.byte	'_Ifx_SRC_I2C',0,17,140,2,25,80,6
	.byte	'BREQ',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'LBREQ',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'SREQ',0
	.word	54785
	.byte	4,2,35,8,6
	.byte	'LSREQ',0
	.word	54785
	.byte	4,2,35,12,6
	.byte	'ERR',0
	.word	54785
	.byte	4,2,35,16,6
	.byte	'P',0
	.word	54785
	.byte	4,2,35,20,6
	.byte	'reserved_18',0
	.word	57137
	.byte	56,2,35,24,0,7
	.word	57146
	.byte	34
	.byte	'Ifx_SRC_I2C',0,17,149,2,3
	.word	57269
	.byte	3
	.byte	'_Ifx_SRC_LMU',0,17,152,2,25,4,6
	.byte	'SR',0
	.word	54785
	.byte	4,2,35,0,0,7
	.word	57295
	.byte	34
	.byte	'Ifx_SRC_LMU',0,17,155,2,3
	.word	57327
	.byte	3
	.byte	'_Ifx_SRC_MSC',0,17,158,2,25,20,6
	.byte	'SR0',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	54785
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	54785
	.byte	4,2,35,12,6
	.byte	'SR4',0
	.word	54785
	.byte	4,2,35,16,0,7
	.word	57353
	.byte	34
	.byte	'Ifx_SRC_MSC',0,17,165,2,3
	.word	57438
	.byte	3
	.byte	'_Ifx_SRC_PMU',0,17,168,2,25,4,6
	.byte	'SR',0
	.word	54785
	.byte	4,2,35,0,0,7
	.word	57464
	.byte	34
	.byte	'Ifx_SRC_PMU',0,17,171,2,3
	.word	57496
	.byte	3
	.byte	'_Ifx_SRC_PSI5',0,17,174,2,25,32,6
	.byte	'SR',0
	.word	56306
	.byte	32,2,35,0,0,7
	.word	57522
	.byte	34
	.byte	'Ifx_SRC_PSI5',0,17,177,2,3
	.word	57555
	.byte	3
	.byte	'_Ifx_SRC_PSI5S',0,17,180,2,25,32,6
	.byte	'SR',0
	.word	56306
	.byte	32,2,35,0,0,7
	.word	57582
	.byte	34
	.byte	'Ifx_SRC_PSI5S',0,17,183,2,3
	.word	57616
	.byte	3
	.byte	'_Ifx_SRC_QSPI',0,17,186,2,25,24,6
	.byte	'TX',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'RX',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	54785
	.byte	4,2,35,8,6
	.byte	'PT',0
	.word	54785
	.byte	4,2,35,12,6
	.byte	'reserved_10',0
	.word	2860
	.byte	4,2,35,16,6
	.byte	'U',0
	.word	54785
	.byte	4,2,35,20,0,7
	.word	57644
	.byte	34
	.byte	'Ifx_SRC_QSPI',0,17,194,2,3
	.word	57746
	.byte	3
	.byte	'_Ifx_SRC_SCU',0,17,197,2,25,20,6
	.byte	'DTS',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'ERU',0
	.word	56392
	.byte	16,2,35,4,0,7
	.word	57773
	.byte	34
	.byte	'Ifx_SRC_SCU',0,17,201,2,3
	.word	57819
	.byte	17,40
	.word	54785
	.byte	18,9,0,3
	.byte	'_Ifx_SRC_SENT',0,17,204,2,25,40,6
	.byte	'SR',0
	.word	57845
	.byte	40,2,35,0,0,7
	.word	57854
	.byte	34
	.byte	'Ifx_SRC_SENT',0,17,207,2,3
	.word	57887
	.byte	3
	.byte	'_Ifx_SRC_SMU',0,17,210,2,25,12,6
	.byte	'SR',0
	.word	56297
	.byte	12,2,35,0,0,7
	.word	57914
	.byte	34
	.byte	'Ifx_SRC_SMU',0,17,213,2,3
	.word	57946
	.byte	3
	.byte	'_Ifx_SRC_STM',0,17,216,2,25,8,6
	.byte	'SR0',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	54785
	.byte	4,2,35,4,0,7
	.word	57972
	.byte	34
	.byte	'Ifx_SRC_STM',0,17,220,2,3
	.word	58018
	.byte	3
	.byte	'_Ifx_SRC_VADCCG',0,17,223,2,25,16,6
	.byte	'SR0',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	54785
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	54785
	.byte	4,2,35,12,0,7
	.word	58044
	.byte	34
	.byte	'Ifx_SRC_VADCCG',0,17,229,2,3
	.word	58119
	.byte	3
	.byte	'_Ifx_SRC_VADCG',0,17,232,2,25,16,6
	.byte	'SR0',0
	.word	54785
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	54785
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	54785
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	54785
	.byte	4,2,35,12,0,7
	.word	58148
	.byte	34
	.byte	'Ifx_SRC_VADCG',0,17,238,2,3
	.word	58222
	.byte	3
	.byte	'_Ifx_SRC_XBAR',0,17,241,2,25,4,6
	.byte	'SRC',0
	.word	54785
	.byte	4,2,35,0,0,7
	.word	58250
	.byte	34
	.byte	'Ifx_SRC_XBAR',0,17,244,2,3
	.word	58284
	.byte	17,4
	.word	54845
	.byte	18,0,0,7
	.word	58311
	.byte	3
	.byte	'_Ifx_SRC_GAGBT',0,17,129,3,25,4,6
	.byte	'AGBT',0
	.word	58320
	.byte	4,2,35,0,0,7
	.word	58325
	.byte	34
	.byte	'Ifx_SRC_GAGBT',0,17,132,3,3
	.word	58361
	.byte	17,48
	.word	54903
	.byte	18,3,0,7
	.word	58389
	.byte	3
	.byte	'_Ifx_SRC_GASCLIN',0,17,135,3,25,48,6
	.byte	'ASCLIN',0
	.word	58398
	.byte	48,2,35,0,0,7
	.word	58403
	.byte	34
	.byte	'Ifx_SRC_GASCLIN',0,17,138,3,3
	.word	58443
	.byte	7
	.word	54990
	.byte	3
	.byte	'_Ifx_SRC_GBCU',0,17,141,3,25,4,6
	.byte	'SPB',0
	.word	58473
	.byte	4,2,35,0,0,7
	.word	58478
	.byte	34
	.byte	'Ifx_SRC_GBCU',0,17,144,3,3
	.word	58512
	.byte	17,64
	.word	55064
	.byte	18,0,0,7
	.word	58539
	.byte	3
	.byte	'_Ifx_SRC_GCAN',0,17,147,3,25,64,6
	.byte	'CAN',0
	.word	58548
	.byte	64,2,35,0,0,7
	.word	58553
	.byte	34
	.byte	'Ifx_SRC_GCAN',0,17,150,3,3
	.word	58587
	.byte	17,32
	.word	55121
	.byte	18,1,0,7
	.word	58614
	.byte	3
	.byte	'_Ifx_SRC_GCCU6',0,17,153,3,25,32,6
	.byte	'CCU6',0
	.word	58623
	.byte	32,2,35,0,0,7
	.word	58628
	.byte	34
	.byte	'Ifx_SRC_GCCU6',0,17,156,3,3
	.word	58664
	.byte	7
	.word	55228
	.byte	3
	.byte	'_Ifx_SRC_GCERBERUS',0,17,159,3,25,8,6
	.byte	'CERBERUS',0
	.word	58692
	.byte	8,2,35,0,0,7
	.word	58697
	.byte	34
	.byte	'Ifx_SRC_GCERBERUS',0,17,162,3,3
	.word	58741
	.byte	17,16
	.word	55294
	.byte	18,0,0,7
	.word	58773
	.byte	3
	.byte	'_Ifx_SRC_GCIF',0,17,165,3,25,16,6
	.byte	'CIF',0
	.word	58782
	.byte	16,2,35,0,0,7
	.word	58787
	.byte	34
	.byte	'Ifx_SRC_GCIF',0,17,168,3,3
	.word	58821
	.byte	17,12
	.word	55394
	.byte	18,2,0,7
	.word	58848
	.byte	3
	.byte	'_Ifx_SRC_GCPU',0,17,171,3,25,12,6
	.byte	'CPU',0
	.word	58857
	.byte	12,2,35,0,0,7
	.word	58862
	.byte	34
	.byte	'Ifx_SRC_GCPU',0,17,174,3,3
	.word	58896
	.byte	17,24
	.word	55464
	.byte	18,0,0,7
	.word	58923
	.byte	3
	.byte	'_Ifx_SRC_GDAM',0,17,177,3,25,24,6
	.byte	'DAM',0
	.word	58932
	.byte	24,2,35,0,0,7
	.word	58937
	.byte	34
	.byte	'Ifx_SRC_GDAM',0,17,180,3,3
	.word	58971
	.byte	17,144,2
	.word	55532
	.byte	18,0,0,7
	.word	58998
	.byte	3
	.byte	'_Ifx_SRC_GDMA',0,17,183,3,25,144,2,6
	.byte	'DMA',0
	.word	59008
	.byte	144,2,2,35,0,0,7
	.word	59013
	.byte	34
	.byte	'Ifx_SRC_GDMA',0,17,186,3,3
	.word	59049
	.byte	17,48
	.word	55625
	.byte	18,5,0,7
	.word	59076
	.byte	3
	.byte	'_Ifx_SRC_GDSADC',0,17,189,3,25,48,6
	.byte	'DSADC',0
	.word	59085
	.byte	48,2,35,0,0,7
	.word	59090
	.byte	34
	.byte	'Ifx_SRC_GDSADC',0,17,192,3,3
	.word	59128
	.byte	17,4
	.word	55701
	.byte	18,0,0,7
	.word	59157
	.byte	3
	.byte	'_Ifx_SRC_GEMEM',0,17,195,3,25,4,6
	.byte	'EMEM',0
	.word	59166
	.byte	4,2,35,0,0,7
	.word	59171
	.byte	34
	.byte	'Ifx_SRC_GEMEM',0,17,198,3,3
	.word	59207
	.byte	17,80
	.word	55761
	.byte	18,0,0,7
	.word	59235
	.byte	3
	.byte	'_Ifx_SRC_GERAY',0,17,201,3,25,80,6
	.byte	'ERAY',0
	.word	59244
	.byte	80,2,35,0,0,7
	.word	59249
	.byte	34
	.byte	'Ifx_SRC_GERAY',0,17,204,3,3
	.word	59285
	.byte	17,4
	.word	55915
	.byte	18,0,0,7
	.word	59313
	.byte	3
	.byte	'_Ifx_SRC_GETH',0,17,207,3,25,4,6
	.byte	'ETH',0
	.word	59322
	.byte	4,2,35,0,0,7
	.word	59327
	.byte	34
	.byte	'Ifx_SRC_GETH',0,17,210,3,3
	.word	59361
	.byte	17,4
	.word	55973
	.byte	18,0,0,7
	.word	59388
	.byte	3
	.byte	'_Ifx_SRC_GFCE',0,17,213,3,25,4,6
	.byte	'FCE',0
	.word	59397
	.byte	4,2,35,0,0,7
	.word	59402
	.byte	34
	.byte	'Ifx_SRC_GFCE',0,17,216,3,3
	.word	59436
	.byte	17,96
	.word	56031
	.byte	18,2,0,7
	.word	59463
	.byte	3
	.byte	'_Ifx_SRC_GGPSR',0,17,219,3,25,96,6
	.byte	'GPSR',0
	.word	59472
	.byte	96,2,35,0,0,7
	.word	59477
	.byte	34
	.byte	'Ifx_SRC_GGPSR',0,17,222,3,3
	.word	59513
	.byte	17,48
	.word	56152
	.byte	18,0,0,7
	.word	59541
	.byte	3
	.byte	'_Ifx_SRC_GGPT12',0,17,225,3,25,48,6
	.byte	'GPT12',0
	.word	59550
	.byte	48,2,35,0,0,7
	.word	59555
	.byte	34
	.byte	'Ifx_SRC_GGPT12',0,17,228,3,3
	.word	59593
	.byte	17,208,18
	.word	56430
	.byte	18,0,0,7
	.word	59622
	.byte	3
	.byte	'_Ifx_SRC_GGTM',0,17,231,3,25,208,18,6
	.byte	'GTM',0
	.word	59632
	.byte	208,18,2,35,0,0,7
	.word	59637
	.byte	34
	.byte	'Ifx_SRC_GGTM',0,17,234,3,3
	.word	59673
	.byte	17,4
	.word	56918
	.byte	18,0,0,7
	.word	59700
	.byte	3
	.byte	'_Ifx_SRC_GHSCT',0,17,237,3,25,4,6
	.byte	'HSCT',0
	.word	59709
	.byte	4,2,35,0,0,7
	.word	59714
	.byte	34
	.byte	'Ifx_SRC_GHSCT',0,17,240,3,3
	.word	59750
	.byte	17,8
	.word	56978
	.byte	18,0,0,7
	.word	59778
	.byte	3
	.byte	'_Ifx_SRC_GHSM',0,17,243,3,25,8,6
	.byte	'HSM',0
	.word	59787
	.byte	8,2,35,0,0,7
	.word	59792
	.byte	34
	.byte	'Ifx_SRC_GHSM',0,17,246,3,3
	.word	59826
	.byte	17,64
	.word	57037
	.byte	18,3,0,7
	.word	59853
	.byte	3
	.byte	'_Ifx_SRC_GHSSL',0,17,249,3,25,68,6
	.byte	'HSSL',0
	.word	59862
	.byte	64,2,35,0,6
	.byte	'EXI',0
	.word	54785
	.byte	4,2,35,64,0,7
	.word	59867
	.byte	34
	.byte	'Ifx_SRC_GHSSL',0,17,253,3,3
	.word	59916
	.byte	17,80
	.word	57146
	.byte	18,0,0,7
	.word	59944
	.byte	3
	.byte	'_Ifx_SRC_GI2C',0,17,128,4,25,80,6
	.byte	'I2C',0
	.word	59953
	.byte	80,2,35,0,0,7
	.word	59958
	.byte	34
	.byte	'Ifx_SRC_GI2C',0,17,131,4,3
	.word	59992
	.byte	17,4
	.word	57295
	.byte	18,0,0,7
	.word	60019
	.byte	3
	.byte	'_Ifx_SRC_GLMU',0,17,134,4,25,4,6
	.byte	'LMU',0
	.word	60028
	.byte	4,2,35,0,0,7
	.word	60033
	.byte	34
	.byte	'Ifx_SRC_GLMU',0,17,137,4,3
	.word	60067
	.byte	17,40
	.word	57353
	.byte	18,1,0,7
	.word	60094
	.byte	3
	.byte	'_Ifx_SRC_GMSC',0,17,140,4,25,40,6
	.byte	'MSC',0
	.word	60103
	.byte	40,2,35,0,0,7
	.word	60108
	.byte	34
	.byte	'Ifx_SRC_GMSC',0,17,143,4,3
	.word	60142
	.byte	17,8
	.word	57464
	.byte	18,1,0,7
	.word	60169
	.byte	3
	.byte	'_Ifx_SRC_GPMU',0,17,146,4,25,8,6
	.byte	'PMU',0
	.word	60178
	.byte	8,2,35,0,0,7
	.word	60183
	.byte	34
	.byte	'Ifx_SRC_GPMU',0,17,149,4,3
	.word	60217
	.byte	17,32
	.word	57522
	.byte	18,0,0,7
	.word	60244
	.byte	3
	.byte	'_Ifx_SRC_GPSI5',0,17,152,4,25,32,6
	.byte	'PSI5',0
	.word	60253
	.byte	32,2,35,0,0,7
	.word	60258
	.byte	34
	.byte	'Ifx_SRC_GPSI5',0,17,155,4,3
	.word	60294
	.byte	17,32
	.word	57582
	.byte	18,0,0,7
	.word	60322
	.byte	3
	.byte	'_Ifx_SRC_GPSI5S',0,17,158,4,25,32,6
	.byte	'PSI5S',0
	.word	60331
	.byte	32,2,35,0,0,7
	.word	60336
	.byte	34
	.byte	'Ifx_SRC_GPSI5S',0,17,161,4,3
	.word	60374
	.byte	17,96
	.word	57644
	.byte	18,3,0,7
	.word	60403
	.byte	3
	.byte	'_Ifx_SRC_GQSPI',0,17,164,4,25,96,6
	.byte	'QSPI',0
	.word	60412
	.byte	96,2,35,0,0,7
	.word	60417
	.byte	34
	.byte	'Ifx_SRC_GQSPI',0,17,167,4,3
	.word	60453
	.byte	7
	.word	57773
	.byte	3
	.byte	'_Ifx_SRC_GSCU',0,17,170,4,25,20,6
	.byte	'SCU',0
	.word	60481
	.byte	20,2,35,0,0,7
	.word	60486
	.byte	34
	.byte	'Ifx_SRC_GSCU',0,17,173,4,3
	.word	60520
	.byte	17,40
	.word	57854
	.byte	18,0,0,7
	.word	60547
	.byte	3
	.byte	'_Ifx_SRC_GSENT',0,17,176,4,25,40,6
	.byte	'SENT',0
	.word	60556
	.byte	40,2,35,0,0,7
	.word	60561
	.byte	34
	.byte	'Ifx_SRC_GSENT',0,17,179,4,3
	.word	60597
	.byte	17,12
	.word	57914
	.byte	18,0,0,7
	.word	60625
	.byte	3
	.byte	'_Ifx_SRC_GSMU',0,17,182,4,25,12,6
	.byte	'SMU',0
	.word	60634
	.byte	12,2,35,0,0,7
	.word	60639
	.byte	34
	.byte	'Ifx_SRC_GSMU',0,17,185,4,3
	.word	60673
	.byte	17,24
	.word	57972
	.byte	18,2,0,7
	.word	60700
	.byte	3
	.byte	'_Ifx_SRC_GSTM',0,17,188,4,25,24,6
	.byte	'STM',0
	.word	60709
	.byte	24,2,35,0,0,7
	.word	60714
	.byte	34
	.byte	'Ifx_SRC_GSTM',0,17,191,4,3
	.word	60748
	.byte	17,128,1
	.word	58148
	.byte	18,7,0,7
	.word	60775
	.byte	17,160,1
	.word	184
	.byte	18,159,1,0,17,32
	.word	58044
	.byte	18,1,0,7
	.word	60801
	.byte	3
	.byte	'_Ifx_SRC_GVADC',0,17,194,4,25,192,2,6
	.byte	'G',0
	.word	60785
	.byte	128,1,2,35,0,6
	.byte	'reserved_80',0
	.word	60790
	.byte	160,1,3,35,128,1,6
	.byte	'CG',0
	.word	60810
	.byte	32,3,35,160,2,0,7
	.word	60815
	.byte	34
	.byte	'Ifx_SRC_GVADC',0,17,199,4,3
	.word	60886
	.byte	7
	.word	58250
	.byte	3
	.byte	'_Ifx_SRC_GXBAR',0,17,202,4,25,4,6
	.byte	'XBAR',0
	.word	60914
	.byte	4,2,35,0,0,7
	.word	60919
	.byte	34
	.byte	'Ifx_SRC_GXBAR',0,17,205,4,3
	.word	60955
	.byte	14,5,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,34
	.byte	'IfxCpu_CounterMode',0,5,122,3
	.word	60983
	.byte	35,5,132,1,9,6,6
	.byte	'counter',0
	.word	1409
	.byte	4,2,35,0,6
	.byte	'overlfow',0
	.word	184
	.byte	1,2,35,4,0,34
	.byte	'IfxCpu_Counter',0,5,136,1,3
	.word	61070
	.byte	35,5,144,1,9,32,6
	.byte	'instruction',0
	.word	61070
	.byte	6,2,35,0,6
	.byte	'clock',0
	.word	61070
	.byte	6,2,35,6,6
	.byte	'counter1',0
	.word	61070
	.byte	6,2,35,12,6
	.byte	'counter2',0
	.word	61070
	.byte	6,2,35,18,6
	.byte	'counter3',0
	.word	61070
	.byte	6,2,35,24,0,34
	.byte	'IfxCpu_Perf',0,5,151,1,3
	.word	61136
	.byte	3
	.byte	'_Ifx_STM_ACCEN0_Bits',0,18,45,16,4,4
	.byte	'EN0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_STM_ACCEN0_Bits',0,18,79,3
	.word	61254
	.byte	3
	.byte	'_Ifx_STM_ACCEN1_Bits',0,18,82,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_ACCEN1_Bits',0,18,85,3
	.word	61811
	.byte	3
	.byte	'_Ifx_STM_CAP_Bits',0,18,88,16,4,4
	.byte	'STMCAP63_32',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_CAP_Bits',0,18,91,3
	.word	61888
	.byte	3
	.byte	'_Ifx_STM_CAPSV_Bits',0,18,94,16,4,4
	.byte	'STMCAP63_32',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_CAPSV_Bits',0,18,97,3
	.word	61960
	.byte	3
	.byte	'_Ifx_STM_CLC_Bits',0,18,100,16,4,4
	.byte	'DISR',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'DISS',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'EDIS',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	161
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_STM_CLC_Bits',0,18,107,3
	.word	62036
	.byte	3
	.byte	'_Ifx_STM_CMCON_Bits',0,18,110,16,4,4
	.byte	'MSIZE0',0,1
	.word	184
	.byte	5,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	184
	.byte	3,0,2,35,0,4
	.byte	'MSTART0',0,1
	.word	184
	.byte	5,3,2,35,1,4
	.byte	'reserved_13',0,1
	.word	184
	.byte	3,0,2,35,1,4
	.byte	'MSIZE1',0,1
	.word	184
	.byte	5,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	184
	.byte	3,0,2,35,2,4
	.byte	'MSTART1',0,1
	.word	184
	.byte	5,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	184
	.byte	3,0,2,35,3,0,34
	.byte	'Ifx_STM_CMCON_Bits',0,18,120,3
	.word	62177
	.byte	3
	.byte	'_Ifx_STM_CMP_Bits',0,18,123,16,4,4
	.byte	'CMPVAL',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_CMP_Bits',0,18,126,3
	.word	62395
	.byte	3
	.byte	'_Ifx_STM_ICR_Bits',0,18,129,1,16,4,4
	.byte	'CMP0EN',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'CMP0IR',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'CMP0OS',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'CMP1EN',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'CMP1IR',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'CMP1OS',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,4
	.word	161
	.byte	25,0,2,35,0,0,34
	.byte	'Ifx_STM_ICR_Bits',0,18,139,1,3
	.word	62462
	.byte	3
	.byte	'_Ifx_STM_ID_Bits',0,18,142,1,16,4,4
	.byte	'MODREV',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_STM_ID_Bits',0,18,147,1,3
	.word	62665
	.byte	3
	.byte	'_Ifx_STM_ISCR_Bits',0,18,150,1,16,4,4
	.byte	'CMP0IRR',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'CMP0IRS',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'CMP1IRR',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'CMP1IRS',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	161
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_STM_ISCR_Bits',0,18,157,1,3
	.word	62772
	.byte	3
	.byte	'_Ifx_STM_KRST0_Bits',0,18,160,1,16,4,4
	.byte	'RST',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'RSTSTAT',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	161
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_STM_KRST0_Bits',0,18,165,1,3
	.word	62923
	.byte	3
	.byte	'_Ifx_STM_KRST1_Bits',0,18,168,1,16,4,4
	.byte	'RST',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	161
	.byte	31,0,2,35,0,0,34
	.byte	'Ifx_STM_KRST1_Bits',0,18,172,1,3
	.word	63034
	.byte	3
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,18,175,1,16,4,4
	.byte	'CLR',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	161
	.byte	31,0,2,35,0,0,34
	.byte	'Ifx_STM_KRSTCLR_Bits',0,18,179,1,3
	.word	63126
	.byte	3
	.byte	'_Ifx_STM_OCS_Bits',0,18,182,1,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	24,8,2,35,0,4
	.byte	'SUS',0,1
	.word	184
	.byte	4,4,2,35,3,4
	.byte	'SUS_P',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'SUSSTA',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	184
	.byte	2,0,2,35,3,0,34
	.byte	'Ifx_STM_OCS_Bits',0,18,189,1,3
	.word	63222
	.byte	3
	.byte	'_Ifx_STM_TIM0_Bits',0,18,192,1,16,4,4
	.byte	'STM31_0',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM0_Bits',0,18,195,1,3
	.word	63368
	.byte	3
	.byte	'_Ifx_STM_TIM0SV_Bits',0,18,198,1,16,4,4
	.byte	'STM31_0',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM0SV_Bits',0,18,201,1,3
	.word	63440
	.byte	3
	.byte	'_Ifx_STM_TIM1_Bits',0,18,204,1,16,4,4
	.byte	'STM35_4',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM1_Bits',0,18,207,1,3
	.word	63516
	.byte	3
	.byte	'_Ifx_STM_TIM2_Bits',0,18,210,1,16,4,4
	.byte	'STM39_8',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM2_Bits',0,18,213,1,3
	.word	63588
	.byte	3
	.byte	'_Ifx_STM_TIM3_Bits',0,18,216,1,16,4,4
	.byte	'STM43_12',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM3_Bits',0,18,219,1,3
	.word	63660
	.byte	3
	.byte	'_Ifx_STM_TIM4_Bits',0,18,222,1,16,4,4
	.byte	'STM47_16',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM4_Bits',0,18,225,1,3
	.word	63733
	.byte	3
	.byte	'_Ifx_STM_TIM5_Bits',0,18,228,1,16,4,4
	.byte	'STM51_20',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM5_Bits',0,18,231,1,3
	.word	63806
	.byte	3
	.byte	'_Ifx_STM_TIM6_Bits',0,18,234,1,16,4,4
	.byte	'STM63_32',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM6_Bits',0,18,237,1,3
	.word	63879
	.byte	5,18,245,1,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	61254
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_ACCEN0',0,18,253,1,3
	.word	63952
	.byte	5,18,128,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	61811
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_ACCEN1',0,18,136,2,3
	.word	64016
	.byte	5,18,139,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	61888
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_CAP',0,18,147,2,3
	.word	64080
	.byte	5,18,150,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	61960
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_CAPSV',0,18,158,2,3
	.word	64141
	.byte	5,18,161,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	62036
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_CLC',0,18,169,2,3
	.word	64204
	.byte	5,18,172,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	62177
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_CMCON',0,18,180,2,3
	.word	64265
	.byte	5,18,183,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	62395
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_CMP',0,18,191,2,3
	.word	64328
	.byte	5,18,194,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	62462
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_ICR',0,18,202,2,3
	.word	64389
	.byte	5,18,205,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	62665
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_ID',0,18,213,2,3
	.word	64450
	.byte	5,18,216,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	62772
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_ISCR',0,18,224,2,3
	.word	64510
	.byte	5,18,227,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	62923
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_KRST0',0,18,235,2,3
	.word	64572
	.byte	5,18,238,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63034
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_KRST1',0,18,246,2,3
	.word	64635
	.byte	5,18,249,2,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63126
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_KRSTCLR',0,18,129,3,3
	.word	64698
	.byte	5,18,132,3,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63222
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_OCS',0,18,140,3,3
	.word	64763
	.byte	5,18,143,3,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63368
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM0',0,18,151,3,3
	.word	64824
	.byte	5,18,154,3,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63440
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM0SV',0,18,162,3,3
	.word	64886
	.byte	5,18,165,3,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63516
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM1',0,18,173,3,3
	.word	64950
	.byte	5,18,176,3,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63588
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM2',0,18,184,3,3
	.word	65012
	.byte	5,18,187,3,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63660
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM3',0,18,195,3,3
	.word	65074
	.byte	5,18,198,3,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63733
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM4',0,18,206,3,3
	.word	65136
	.byte	5,18,209,3,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63806
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM5',0,18,217,3,3
	.word	65198
	.byte	5,18,220,3,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	63879
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM6',0,18,228,3,3
	.word	65260
	.byte	3
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,19,45,16,4,4
	.byte	'EN0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,19,79,3
	.word	65322
	.byte	3
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,19,82,16,4,4
	.byte	'reserved_0',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,19,85,3
	.word	65883
	.byte	3
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,19,88,16,4,4
	.byte	'SEL',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	184
	.byte	2,0,2,35,0,4
	.byte	'CLR',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'DIS',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,4
	.word	161
	.byte	22,0,2,35,0,0,34
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,19,95,3
	.word	65964
	.byte	3
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,19,98,16,4,4
	.byte	'VLD0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'VLD1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'VLD2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'VLD3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'VLD4',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'VLD5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'VLD6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'VLD7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'VLD8',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'VLD9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,4
	.word	161
	.byte	22,0,2,35,0,0,34
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,19,111,3
	.word	66117
	.byte	3
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,19,114,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	161
	.byte	19,8,2,35,0,4
	.byte	'ERR',0,1
	.word	184
	.byte	6,2,2,35,3,4
	.byte	'VLD',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'CLR',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,19,121,3
	.word	66365
	.byte	3
	.byte	'_Ifx_FLASH_COMM0_Bits',0,19,124,16,4,4
	.byte	'STATUS',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	161
	.byte	24,0,2,35,0,0,34
	.byte	'Ifx_FLASH_COMM0_Bits',0,19,128,1,3
	.word	66511
	.byte	3
	.byte	'_Ifx_FLASH_COMM1_Bits',0,19,131,1,16,4,4
	.byte	'STATUS',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'DATA',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_COMM1_Bits',0,19,136,1,3
	.word	66609
	.byte	3
	.byte	'_Ifx_FLASH_COMM2_Bits',0,19,139,1,16,4,4
	.byte	'STATUS',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'DATA',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_COMM2_Bits',0,19,144,1,3
	.word	66725
	.byte	3
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,19,147,1,16,4,4
	.byte	'RCODE',0,4
	.word	161
	.byte	22,10,2,35,0,4
	.byte	'reserved_22',0,2
	.word	201
	.byte	8,2,2,35,2,4
	.byte	'EDCERRINJ',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'ECCORDIS',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_ECCRD_Bits',0,19,153,1,3
	.word	66841
	.byte	3
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,19,156,1,16,4,4
	.byte	'RCODE',0,4
	.word	161
	.byte	22,10,2,35,0,4
	.byte	'reserved_22',0,2
	.word	201
	.byte	8,2,2,35,2,4
	.byte	'EDCERRINJ',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'ECCORDIS',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_ECCRP_Bits',0,19,162,1,3
	.word	66981
	.byte	3
	.byte	'_Ifx_FLASH_ECCW_Bits',0,19,165,1,16,4,4
	.byte	'WCODE',0,4
	.word	161
	.byte	22,10,2,35,0,4
	.byte	'reserved_22',0,2
	.word	201
	.byte	8,2,2,35,2,4
	.byte	'DECENCDIS',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'PECENCDIS',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_ECCW_Bits',0,19,171,1,3
	.word	67121
	.byte	3
	.byte	'_Ifx_FLASH_FCON_Bits',0,19,174,1,16,4,4
	.byte	'WSPFLASH',0,1
	.word	184
	.byte	4,4,2,35,0,4
	.byte	'WSECPF',0,1
	.word	184
	.byte	2,2,2,35,0,4
	.byte	'WSDFLASH',0,2
	.word	201
	.byte	6,4,2,35,0,4
	.byte	'WSECDF',0,1
	.word	184
	.byte	3,1,2,35,1,4
	.byte	'IDLE',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'ESLDIS',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'SLEEP',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'NSAFECC',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'STALL',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'RES21',0,1
	.word	184
	.byte	2,2,2,35,2,4
	.byte	'RES23',0,1
	.word	184
	.byte	2,0,2,35,2,4
	.byte	'VOPERM',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'SQERM',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'PROERM',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	184
	.byte	3,2,2,35,3,4
	.byte	'PR5V',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'EOBM',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_FCON_Bits',0,19,193,1,3
	.word	67260
	.byte	3
	.byte	'_Ifx_FLASH_FPRO_Bits',0,19,196,1,16,4,4
	.byte	'PROINP',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'PRODISP',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'PROIND',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'PRODISD',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'PROINHSMCOTP',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'RES5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'PROINOTP',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'RES7',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'PROINDBG',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'PRODISDBG',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'PROINHSM',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'reserved_11',0,1
	.word	184
	.byte	5,0,2,35,1,4
	.byte	'DCFP',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'DDFP',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'DDFPX',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'DDFD',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'ENPE',0,1
	.word	184
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	184
	.byte	8,0,2,35,3,0,34
	.byte	'Ifx_FLASH_FPRO_Bits',0,19,218,1,3
	.word	67622
	.byte	3
	.byte	'_Ifx_FLASH_FSR_Bits',0,19,221,1,16,4,4
	.byte	'FABUSY',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'D0BUSY',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'D1BUSY',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'P0BUSY',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'P1BUSY',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'RES5',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'RES6',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'PROG',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'ERASE',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'PFPAGE',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'DFPAGE',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'OPER',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'SQER',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'PROER',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'PFSBER',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'PFDBER',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'PFMBER',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'RES17',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'DFSBER',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'DFDBER',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'DFTBER',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'DFMBER',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'SRIADDERR',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	201
	.byte	2,7,2,35,2,4
	.byte	'PVER',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'EVER',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'SPND',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'SLM',0,1
	.word	184
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	184
	.byte	1,2,2,35,3,4
	.byte	'ORIER',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_FSR_Bits',0,19,254,1,3
	.word	68063
	.byte	3
	.byte	'_Ifx_FLASH_HSMFCON_Bits',0,19,129,2,16,4,4
	.byte	'LCKHSMUCB',0,1
	.word	184
	.byte	2,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	161
	.byte	22,8,2,35,0,4
	.byte	'VOPERM',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'SQERM',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	184
	.byte	5,1,2,35,3,4
	.byte	'EOBM',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_HSMFCON_Bits',0,19,137,2,3
	.word	68671
	.byte	3
	.byte	'_Ifx_FLASH_HSMFSR_Bits',0,19,140,2,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	2,6,2,35,0,4
	.byte	'D1BUSY',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	184
	.byte	4,1,2,35,0,4
	.byte	'PROG',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'ERASE',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'DFPAGE',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'OPER',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'SQER',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'reserved_13',0,4
	.word	161
	.byte	12,7,2,35,0,4
	.byte	'PVER',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'EVER',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'SPND',0,1
	.word	184
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	184
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_FLASH_HSMFSR_Bits',0,19,156,2,3
	.word	68851
	.byte	3
	.byte	'_Ifx_FLASH_HSMMARD_Bits',0,19,159,2,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'SELD1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'SPND',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'SPNDERR',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,4
	.word	161
	.byte	27,0,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMMARD_Bits',0,19,167,2,3
	.word	69173
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRAD_Bits',0,19,170,2,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	3,5,2,35,0,4
	.byte	'ADD',0,4
	.word	161
	.byte	29,0,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMRRAD_Bits',0,19,174,2,3
	.word	69354
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRCT_Bits',0,19,177,2,16,4,4
	.byte	'STRT',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'STP',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'BUSY',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'DONE',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'ERR',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	184
	.byte	3,0,2,35,0,4
	.byte	'EOBM',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	184
	.byte	7,0,2,35,1,4
	.byte	'CNT',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_HSMRRCT_Bits',0,19,188,2,3
	.word	69454
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRD0_Bits',0,19,191,2,16,4,4
	.byte	'DATA',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMRRD0_Bits',0,19,194,2,3
	.word	69670
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRD1_Bits',0,19,197,2,16,4,4
	.byte	'DATA',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMRRD1_Bits',0,19,200,2,3
	.word	69749
	.byte	3
	.byte	'_Ifx_FLASH_ID_Bits',0,19,203,2,16,4,4
	.byte	'MOD_REV',0,1
	.word	184
	.byte	8,0,2,35,0,4
	.byte	'MOD_TYPE',0,1
	.word	184
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_ID_Bits',0,19,208,2,3
	.word	69828
	.byte	3
	.byte	'_Ifx_FLASH_MARD_Bits',0,19,211,2,16,4,4
	.byte	'HMARGIN',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'SELD0',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'SPND',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'SPNDERR',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,2
	.word	201
	.byte	10,1,2,35,0,4
	.byte	'TRAPDIS',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_MARD_Bits',0,19,221,2,3
	.word	69941
	.byte	3
	.byte	'_Ifx_FLASH_MARP_Bits',0,19,224,2,16,4,4
	.byte	'SELP0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'SELP1',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'RES2',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'RES3',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,2
	.word	201
	.byte	11,1,2,35,0,4
	.byte	'TRAPDIS',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_MARP_Bits',0,19,233,2,3
	.word	70155
	.byte	3
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,19,236,2,16,4,4
	.byte	'L',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'NSAFECC',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'RAMIN',0,1
	.word	184
	.byte	2,4,2,35,0,4
	.byte	'RAMINSEL',0,1
	.word	184
	.byte	4,0,2,35,0,4
	.byte	'OSCCFG',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'MODE',0,1
	.word	184
	.byte	2,5,2,35,1,4
	.byte	'APREN',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'CAP0EN',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'CAP1EN',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'CAP2EN',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'CAP3EN',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'ESR0CNT',0,2
	.word	201
	.byte	12,4,2,35,2,4
	.byte	'RES29',0,1
	.word	184
	.byte	2,2,2,35,3,4
	.byte	'RES30',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'RPRO',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_PROCOND_Bits',0,19,253,2,3
	.word	70342
	.byte	3
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,19,128,3,16,4,4
	.byte	'OCDSDIS',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'DBGIFLCK',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'EDM',0,1
	.word	184
	.byte	2,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	161
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,19,134,3,3
	.word	70666
	.byte	3
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,19,137,3,16,4,4
	.byte	'HSMDBGDIS',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'DBGIFLCK',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'TSTIFLCK',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'HSMTSTDIS',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'RES15',0,2
	.word	201
	.byte	12,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,19,145,3,3
	.word	70809
	.byte	3
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,19,148,3,16,4,4
	.byte	'HSMBOOTEN',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'SSWWAIT',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'HSMDX',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'HSM6X',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'HSM16X',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'HSM17X',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'S6ROM',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'HSMENPINS',0,2
	.word	201
	.byte	2,7,2,35,0,4
	.byte	'HSMENRES',0,1
	.word	184
	.byte	2,5,2,35,1,4
	.byte	'DESTDBG',0,1
	.word	184
	.byte	2,3,2,35,1,4
	.byte	'BLKFLAN',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	184
	.byte	2,0,2,35,1,4
	.byte	'S16ROM',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'S17ROM',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	201
	.byte	14,0,2,35,2,0,34
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,19,165,3,3
	.word	70998
	.byte	3
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,19,168,3,16,4,4
	.byte	'S0ROM',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'S1ROM',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'S2ROM',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'S3ROM',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'S4ROM',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'S5ROM',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'S6ROM',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'S7ROM',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'S8ROM',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'S9ROM',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'S10ROM',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'S11ROM',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'S12ROM',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'S13ROM',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'S14ROM',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'S15ROM',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'S16ROM',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'S17ROM',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'S18ROM',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'S19ROM',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'S20ROM',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'S21ROM',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'S22ROM',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'S23ROM',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'S24ROM',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'S25ROM',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'S26ROM',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	184
	.byte	2,3,2,35,3,4
	.byte	'BML',0,1
	.word	184
	.byte	2,1,2,35,3,4
	.byte	'TP',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,19,200,3,3
	.word	71361
	.byte	3
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,19,203,3,16,4,4
	.byte	'S0L',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'S1L',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'S2L',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'S3L',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'S4L',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'S5L',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'S6L',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'S7L',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'S8L',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'S9L',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'S10L',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'S11L',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'S12L',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'S13L',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'S14L',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'S15L',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'S16L',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'S17L',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'S18L',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'S19L',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'S20L',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'S21L',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'S22L',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'S23L',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'S24L',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'S25L',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'S26L',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	184
	.byte	4,1,2,35,3,4
	.byte	'RPRO',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_PROCONP_Bits',0,19,234,3,3
	.word	71956
	.byte	3
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,19,237,3,16,4,4
	.byte	'S0WOP',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'S1WOP',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'S2WOP',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'S3WOP',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'S4WOP',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'S5WOP',0,1
	.word	184
	.byte	1,2,2,35,0,4
	.byte	'S6WOP',0,1
	.word	184
	.byte	1,1,2,35,0,4
	.byte	'S7WOP',0,1
	.word	184
	.byte	1,0,2,35,0,4
	.byte	'S8WOP',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'S9WOP',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'S10WOP',0,1
	.word	184
	.byte	1,5,2,35,1,4
	.byte	'S11WOP',0,1
	.word	184
	.byte	1,4,2,35,1,4
	.byte	'S12WOP',0,1
	.word	184
	.byte	1,3,2,35,1,4
	.byte	'S13WOP',0,1
	.word	184
	.byte	1,2,2,35,1,4
	.byte	'S14WOP',0,1
	.word	184
	.byte	1,1,2,35,1,4
	.byte	'S15WOP',0,1
	.word	184
	.byte	1,0,2,35,1,4
	.byte	'S16WOP',0,1
	.word	184
	.byte	1,7,2,35,2,4
	.byte	'S17WOP',0,1
	.word	184
	.byte	1,6,2,35,2,4
	.byte	'S18WOP',0,1
	.word	184
	.byte	1,5,2,35,2,4
	.byte	'S19WOP',0,1
	.word	184
	.byte	1,4,2,35,2,4
	.byte	'S20WOP',0,1
	.word	184
	.byte	1,3,2,35,2,4
	.byte	'S21WOP',0,1
	.word	184
	.byte	1,2,2,35,2,4
	.byte	'S22WOP',0,1
	.word	184
	.byte	1,1,2,35,2,4
	.byte	'S23WOP',0,1
	.word	184
	.byte	1,0,2,35,2,4
	.byte	'S24WOP',0,1
	.word	184
	.byte	1,7,2,35,3,4
	.byte	'S25WOP',0,1
	.word	184
	.byte	1,6,2,35,3,4
	.byte	'S26WOP',0,1
	.word	184
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	184
	.byte	4,1,2,35,3,4
	.byte	'DATM',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,19,140,4,3
	.word	72480
	.byte	3
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,19,143,4,16,4,4
	.byte	'TAG',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	161
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,19,147,4,3
	.word	73062
	.byte	3
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,19,150,4,16,4,4
	.byte	'TAG',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	161
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,19,154,4,3
	.word	73164
	.byte	3
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,19,157,4,16,4,4
	.byte	'TAG',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	161
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,19,161,4,3
	.word	73266
	.byte	3
	.byte	'_Ifx_FLASH_RRAD_Bits',0,19,164,4,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	3,5,2,35,0,4
	.byte	'ADD',0,4
	.word	161
	.byte	29,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RRAD_Bits',0,19,168,4,3
	.word	73368
	.byte	3
	.byte	'_Ifx_FLASH_RRCT_Bits',0,19,171,4,16,4,4
	.byte	'STRT',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'STP',0,1
	.word	184
	.byte	1,6,2,35,0,4
	.byte	'BUSY',0,1
	.word	184
	.byte	1,5,2,35,0,4
	.byte	'DONE',0,1
	.word	184
	.byte	1,4,2,35,0,4
	.byte	'ERR',0,1
	.word	184
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	184
	.byte	3,0,2,35,0,4
	.byte	'EOBM',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	184
	.byte	7,0,2,35,1,4
	.byte	'CNT',0,2
	.word	201
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_RRCT_Bits',0,19,182,4,3
	.word	73462
	.byte	3
	.byte	'_Ifx_FLASH_RRD0_Bits',0,19,185,4,16,4,4
	.byte	'DATA',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RRD0_Bits',0,19,188,4,3
	.word	73672
	.byte	3
	.byte	'_Ifx_FLASH_RRD1_Bits',0,19,191,4,16,4,4
	.byte	'DATA',0,4
	.word	161
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RRD1_Bits',0,19,194,4,3
	.word	73745
	.byte	3
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,19,197,4,16,4,4
	.byte	'SEL',0,1
	.word	184
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	184
	.byte	2,0,2,35,0,4
	.byte	'CLR',0,1
	.word	184
	.byte	1,7,2,35,1,4
	.byte	'DIS',0,1
	.word	184
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,4
	.word	161
	.byte	22,0,2,35,0,0,34
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,19,204,4,3
	.word	73818
	.byte	3
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,19,207,4,16,4,4
	.byte	'VLD0',0,1
	.word	184
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	161
	.byte	31,0,2,35,0,0,34
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,19,211,4,3
	.word	73973
	.byte	3
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,19,214,4,16,4,4
	.byte	'reserved_0',0,1
	.word	184
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	161
	.byte	19,8,2,35,0,4
	.byte	'ERR',0,1
	.word	184
	.byte	6,2,2,35,3,4
	.byte	'VLD',0,1
	.word	184
	.byte	1,1,2,35,3,4
	.byte	'CLR',0,1
	.word	184
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,19,221,4,3
	.word	74078
	.byte	5,19,229,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	65322
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ACCEN0',0,19,237,4,3
	.word	74226
	.byte	5,19,240,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	65883
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ACCEN1',0,19,248,4,3
	.word	74292
	.byte	5,19,251,4,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	65964
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_CBAB_CFG',0,19,131,5,3
	.word	74358
	.byte	5,19,134,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	66117
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_CBAB_STAT',0,19,142,5,3
	.word	74426
	.byte	5,19,145,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	66365
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_CBAB_TOP',0,19,153,5,3
	.word	74495
	.byte	5,19,156,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	66511
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_COMM0',0,19,164,5,3
	.word	74563
	.byte	5,19,167,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	66609
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_COMM1',0,19,175,5,3
	.word	74628
	.byte	5,19,178,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	66725
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_COMM2',0,19,186,5,3
	.word	74693
	.byte	5,19,189,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	66841
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ECCRD',0,19,197,5,3
	.word	74758
	.byte	5,19,200,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	66981
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ECCRP',0,19,208,5,3
	.word	74823
	.byte	5,19,211,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	67121
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ECCW',0,19,219,5,3
	.word	74888
	.byte	5,19,222,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	67260
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_FCON',0,19,230,5,3
	.word	74952
	.byte	5,19,233,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	67622
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_FPRO',0,19,241,5,3
	.word	75016
	.byte	5,19,244,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68063
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_FSR',0,19,252,5,3
	.word	75080
	.byte	5,19,255,5,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68671
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMFCON',0,19,135,6,3
	.word	75143
	.byte	5,19,138,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68851
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMFSR',0,19,146,6,3
	.word	75210
	.byte	5,19,149,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69173
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMMARD',0,19,157,6,3
	.word	75276
	.byte	5,19,160,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69354
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMRRAD',0,19,168,6,3
	.word	75343
	.byte	5,19,171,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69454
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMRRCT',0,19,179,6,3
	.word	75410
	.byte	5,19,182,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69670
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMRRD0',0,19,190,6,3
	.word	75477
	.byte	5,19,193,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69749
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_HSMRRD1',0,19,201,6,3
	.word	75544
	.byte	5,19,204,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69828
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ID',0,19,212,6,3
	.word	75611
	.byte	5,19,215,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69941
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_MARD',0,19,223,6,3
	.word	75673
	.byte	5,19,226,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70155
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_MARP',0,19,234,6,3
	.word	75737
	.byte	5,19,237,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70342
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCOND',0,19,245,6,3
	.word	75801
	.byte	5,19,248,6,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70666
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONDBG',0,19,128,7,3
	.word	75868
	.byte	5,19,131,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70809
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONHSM',0,19,139,7,3
	.word	75937
	.byte	5,19,142,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70998
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,19,150,7,3
	.word	76006
	.byte	5,19,153,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	71361
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONOTP',0,19,161,7,3
	.word	76079
	.byte	5,19,164,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	71956
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONP',0,19,172,7,3
	.word	76148
	.byte	5,19,175,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	72480
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONWOP',0,19,183,7,3
	.word	76215
	.byte	5,19,186,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73062
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG0',0,19,194,7,3
	.word	76284
	.byte	5,19,197,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73164
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG1',0,19,205,7,3
	.word	76352
	.byte	5,19,208,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73266
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG2',0,19,216,7,3
	.word	76420
	.byte	5,19,219,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73368
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RRAD',0,19,227,7,3
	.word	76488
	.byte	5,19,230,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73462
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RRCT',0,19,238,7,3
	.word	76552
	.byte	5,19,241,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73672
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RRD0',0,19,249,7,3
	.word	76616
	.byte	5,19,252,7,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73745
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RRD1',0,19,132,8,3
	.word	76680
	.byte	5,19,135,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73818
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_UBAB_CFG',0,19,143,8,3
	.word	76744
	.byte	5,19,146,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73973
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_UBAB_STAT',0,19,154,8,3
	.word	76812
	.byte	5,19,157,8,9,4,6
	.byte	'U',0
	.word	161
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	177
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	74078
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_UBAB_TOP',0,19,165,8,3
	.word	76881
	.byte	3
	.byte	'_Ifx_FLASH_CBAB',0,19,176,8,25,12,6
	.byte	'CFG',0
	.word	74358
	.byte	4,2,35,0,6
	.byte	'STAT',0
	.word	74426
	.byte	4,2,35,4,6
	.byte	'TOP',0
	.word	74495
	.byte	4,2,35,8,0,7
	.word	76949
	.byte	34
	.byte	'Ifx_FLASH_CBAB',0,19,181,8,3
	.word	77012
	.byte	3
	.byte	'_Ifx_FLASH_RDB',0,19,184,8,25,12,6
	.byte	'CFG0',0
	.word	76284
	.byte	4,2,35,0,6
	.byte	'CFG1',0
	.word	76352
	.byte	4,2,35,4,6
	.byte	'CFG2',0
	.word	76420
	.byte	4,2,35,8,0,7
	.word	77041
	.byte	34
	.byte	'Ifx_FLASH_RDB',0,19,189,8,3
	.word	77105
	.byte	3
	.byte	'_Ifx_FLASH_UBAB',0,19,192,8,25,12,6
	.byte	'CFG',0
	.word	76744
	.byte	4,2,35,0,6
	.byte	'STAT',0
	.word	76812
	.byte	4,2,35,4,6
	.byte	'TOP',0
	.word	76881
	.byte	4,2,35,8,0,7
	.word	77133
	.byte	34
	.byte	'Ifx_FLASH_UBAB',0,19,197,8,3
	.word	77196
	.byte	34
	.byte	'Ifx_P_ACCEN0_Bits',0,8,79,3
	.word	8416
	.byte	34
	.byte	'Ifx_P_ACCEN1_Bits',0,8,85,3
	.word	8329
	.byte	34
	.byte	'Ifx_P_ESR_Bits',0,8,107,3
	.word	4688
	.byte	34
	.byte	'Ifx_P_ID_Bits',0,8,115,3
	.word	2741
	.byte	34
	.byte	'Ifx_P_IN_Bits',0,8,137,1,3
	.word	3736
	.byte	34
	.byte	'Ifx_P_IOCR0_Bits',0,8,150,1,3
	.word	2869
	.byte	34
	.byte	'Ifx_P_IOCR12_Bits',0,8,163,1,3
	.word	3516
	.byte	34
	.byte	'Ifx_P_IOCR4_Bits',0,8,176,1,3
	.word	3084
	.byte	34
	.byte	'Ifx_P_IOCR8_Bits',0,8,189,1,3
	.word	3299
	.byte	34
	.byte	'Ifx_P_LPCR0_Bits',0,8,197,1,3
	.word	7688
	.byte	34
	.byte	'Ifx_P_LPCR1_Bits',0,8,205,1,3
	.word	7812
	.byte	34
	.byte	'Ifx_P_LPCR1_P21_Bits',0,8,215,1,3
	.word	7896
	.byte	34
	.byte	'Ifx_P_LPCR2_Bits',0,8,229,1,3
	.word	8076
	.byte	34
	.byte	'Ifx_P_OMCR0_Bits',0,8,240,1,3
	.word	6327
	.byte	34
	.byte	'Ifx_P_OMCR12_Bits',0,8,250,1,3
	.word	6851
	.byte	34
	.byte	'Ifx_P_OMCR4_Bits',0,8,133,2,3
	.word	6501
	.byte	34
	.byte	'Ifx_P_OMCR8_Bits',0,8,144,2,3
	.word	6675
	.byte	34
	.byte	'Ifx_P_OMCR_Bits',0,8,166,2,3
	.word	7340
	.byte	34
	.byte	'Ifx_P_OMR_Bits',0,8,203,2,3
	.word	2170
	.byte	34
	.byte	'Ifx_P_OMSR0_Bits',0,8,213,2,3
	.word	5664
	.byte	34
	.byte	'Ifx_P_OMSR12_Bits',0,8,224,2,3
	.word	6152
	.byte	34
	.byte	'Ifx_P_OMSR4_Bits',0,8,235,2,3
	.word	5811
	.byte	34
	.byte	'Ifx_P_OMSR8_Bits',0,8,246,2,3
	.word	5980
	.byte	34
	.byte	'Ifx_P_OMSR_Bits',0,8,140,3,3
	.word	7007
	.byte	34
	.byte	'Ifx_P_OUT_Bits',0,8,162,3,3
	.word	1854
	.byte	34
	.byte	'Ifx_P_PCSR_Bits',0,8,179,3,3
	.word	5394
	.byte	34
	.byte	'Ifx_P_PDISC_Bits',0,8,201,3,3
	.word	5028
	.byte	34
	.byte	'Ifx_P_PDR0_Bits',0,8,222,3,3
	.word	4059
	.byte	34
	.byte	'Ifx_P_PDR1_Bits',0,8,243,3,3
	.word	4363
	.byte	34
	.byte	'Ifx_P_ACCEN0',0,8,131,4,3
	.word	8943
	.byte	34
	.byte	'Ifx_P_ACCEN1',0,8,142,4,3
	.word	8376
	.byte	34
	.byte	'Ifx_P_ESR',0,8,153,4,3
	.word	4979
	.byte	34
	.byte	'Ifx_P_ID',0,8,164,4,3
	.word	2820
	.byte	34
	.byte	'Ifx_P_IN',0,8,175,4,3
	.word	4010
	.byte	34
	.byte	'Ifx_P_IOCR0',0,8,186,4,3
	.word	3044
	.byte	34
	.byte	'Ifx_P_IOCR12',0,8,197,4,3
	.word	3696
	.byte	34
	.byte	'Ifx_P_IOCR4',0,8,208,4,3
	.word	3259
	.byte	34
	.byte	'Ifx_P_IOCR8',0,8,219,4,3
	.word	3476
	.byte	34
	.byte	'Ifx_P_LPCR0',0,8,230,4,3
	.word	7772
	.byte	34
	.byte	'Ifx_P_LPCR1',0,8,243,4,3
	.word	8021
	.byte	34
	.byte	'Ifx_P_LPCR2',0,8,254,4,3
	.word	8280
	.byte	34
	.byte	'Ifx_P_OMCR',0,8,137,5,3
	.word	7648
	.byte	34
	.byte	'Ifx_P_OMCR0',0,8,148,5,3
	.word	6461
	.byte	34
	.byte	'Ifx_P_OMCR12',0,8,159,5,3
	.word	6967
	.byte	34
	.byte	'Ifx_P_OMCR4',0,8,170,5,3
	.word	6635
	.byte	34
	.byte	'Ifx_P_OMCR8',0,8,181,5,3
	.word	6811
	.byte	34
	.byte	'Ifx_P_OMR',0,8,192,5,3
	.word	2701
	.byte	34
	.byte	'Ifx_P_OMSR',0,8,203,5,3
	.word	7300
	.byte	34
	.byte	'Ifx_P_OMSR0',0,8,214,5,3
	.word	5771
	.byte	34
	.byte	'Ifx_P_OMSR12',0,8,225,5,3
	.word	6287
	.byte	34
	.byte	'Ifx_P_OMSR4',0,8,236,5,3
	.word	5940
	.byte	34
	.byte	'Ifx_P_OMSR8',0,8,247,5,3
	.word	6112
	.byte	34
	.byte	'Ifx_P_OUT',0,8,130,6,3
	.word	2130
	.byte	34
	.byte	'Ifx_P_PCSR',0,8,141,6,3
	.word	5624
	.byte	34
	.byte	'Ifx_P_PDISC',0,8,152,6,3
	.word	5354
	.byte	34
	.byte	'Ifx_P_PDR0',0,8,163,6,3
	.word	4323
	.byte	34
	.byte	'Ifx_P_PDR1',0,8,174,6,3
	.word	4639
	.byte	7
	.word	8983
	.byte	34
	.byte	'Ifx_P',0,8,223,6,3
	.word	78543
	.byte	14,7,63,9,1,15
	.byte	'IfxPort_InputMode_undefined',0,127,15
	.byte	'IfxPort_InputMode_noPullDevice',0,0,15
	.byte	'IfxPort_InputMode_pullDown',0,8,15
	.byte	'IfxPort_InputMode_pullUp',0,16,0,34
	.byte	'IfxPort_InputMode',0,7,69,3
	.word	78563
	.byte	14,7,100,9,1,15
	.byte	'IfxPort_OutputIdx_general',0,128,1,15
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,15
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,15
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,15
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,15
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,15
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,15
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,34
	.byte	'IfxPort_OutputIdx',0,7,110,3
	.word	78714
	.byte	14,7,114,9,1,15
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,15
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,34
	.byte	'IfxPort_OutputMode',0,7,118,3
	.word	78957
	.byte	14,7,124,9,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,15
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,15
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,15
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,15
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,15
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,15
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,15
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,15
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,34
	.byte	'IfxPort_PadDriver',0,7,138,1,3
	.word	79053
	.byte	34
	.byte	'IfxPort_State',0,7,158,1,3
	.word	9596
	.byte	35,7,170,1,9,8,6
	.byte	'port',0
	.word	9591
	.byte	4,2,35,0,6
	.byte	'pinIndex',0
	.word	184
	.byte	1,2,35,4,0,34
	.byte	'IfxPort_Pin',0,7,174,1,3
	.word	79517
	.byte	34
	.byte	'IfxScuCcu_CcuconRegConfig',0,11,201,5,3
	.word	22449
	.byte	34
	.byte	'IfxScuCcu_InitialStepConfig',0,11,212,5,3
	.word	22284
	.byte	34
	.byte	'IfxScuCcu_PllStepsConfig',0,11,221,5,3
	.word	22216
	.byte	34
	.byte	'IfxScuCcu_ClockDistributionConfig',0,11,238,5,3
	.word	22485
	.byte	34
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,11,246,5,3
	.word	22611
	.byte	34
	.byte	'IfxScuCcu_SysPllConfig',0,11,128,6,3
	.word	22364
	.byte	34
	.byte	'IfxScuCcu_Config',0,11,142,6,3
	.word	22647
	.byte	19
	.word	22647
	.byte	38
	.byte	'IfxScuCcu_defaultClockConfig',0,11,158,8,35
	.word	79824
	.byte	1,1,39
	.word	161
	.byte	40,0,38
	.byte	'__ISTACK0',0,13,70,1
	.word	79869
	.byte	1,1,38
	.byte	'__INTTAB_CPU0',0,13,70,1
	.word	79869
	.byte	1,1,38
	.byte	'__TRAPTAB_CPU0',0,13,70,1
	.word	79869
	.byte	1,1,38
	.byte	'__CSA0',0,13,70,1
	.word	79869
	.byte	1,1,38
	.byte	'__CSA0_END',0,13,70,1
	.word	79869
	.byte	1,1,17,32
	.word	1409
	.byte	18,7,0
.L160:
	.byte	19
	.word	79983
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L32:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,19,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,4,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,5,23,1,58,15,59,15,57,15,11,15,0,0,6,13,0,3,8,73
	.byte	19,11,15,56,9,0,0,7,53,0,73,19,0,0,8,15,0,73,19,0,0,9,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0
	.byte	10,5,0,3,8,58,15,59,15,57,15,73,19,0,0,11,11,0,0,0,12,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39
	.byte	12,0,0,13,59,0,3,8,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,11,1,0,0,17,1,1,11
	.byte	15,73,19,0,0,18,33,0,47,15,0,0,19,38,0,73,19,0,0,20,46,1,3,8,54,15,39,12,63,12,60,12,0,0,21,5,0,73,19
	.byte	0,0,22,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,23,5,0,3,8,73,19,0,0,24,46,0,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,25,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28
	.byte	46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,29,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,30,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,31,29,1,49,19,0,0,32,11
	.byte	0,49,19,0,0,33,21,0,54,15,39,12,0,0,34,22,0,3,8,58,15,59,15,57,15,73,19,0,0,35,19,1,58,15,59,15,57,15
	.byte	11,15,0,0,36,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,37,21,0,54,15,0,0,38,52,0,3,8,58,15,59,15
	.byte	57,15,73,19,63,12,60,12,0,0,39,1,1,73,19,0,0,40,33,0,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L33:
	.word	.L194-.L193
.L193:
	.half	3
	.word	.L196-.L195
.L195:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore\\Compilers',0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0
	.byte	'IfxCpu_cfg.h',0,2,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Port\\Std\\IfxPort.h',0,0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'Compilers.h',0,3,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuCcu.h',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart.h',0
	.byte	0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0,0,0,0
	.byte	'IfxScu_cfg.h',0,2,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Platform_Types.h',0,0
	.byte	0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Ifx_Types.h',0,0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'IfxStm_regdef.h',0,1,0,0
	.byte	'IfxFlash_regdef.h',0,1,0,0,0
.L196:
.L194:
	.sdecl	'.debug_info',debug,cluster('_Core0_start')
	.sect	'.debug_info'
.L34:
	.word	1284
	.half	3
	.word	.L35
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L37,.L36
	.byte	2
	.word	.L30
	.byte	3
	.byte	'_Core0_start',0,1,86,6,1,1,1
	.word	.L19,.L66,.L18
	.byte	4
	.word	.L19,.L66
	.byte	5
	.byte	'pcxi',0,1,88,12
	.word	.L67,.L68
	.byte	6
	.word	.L69,.L19,.L70
	.byte	7
	.word	.L71,.L72
	.byte	8
	.word	.L73,.L19,.L70
	.byte	5
	.byte	'password',0,2,189,3,12
	.word	.L74,.L75
	.byte	0,0,6
	.word	.L76,.L77,.L78
	.byte	7
	.word	.L79,.L80
	.byte	8
	.word	.L81,.L77,.L78
	.byte	8
	.word	.L82,.L77,.L83
	.byte	5
	.byte	'pcon1',0,3,192,6,23
	.word	.L84,.L85
	.byte	0,8
	.word	.L86,.L83,.L78
	.byte	5
	.byte	'coreId',0,3,198,6,12
	.word	.L67,.L87
	.byte	6
	.word	.L88,.L83,.L89
	.byte	8
	.word	.L90,.L83,.L89
	.byte	5
	.byte	'reg',0,3,172,5,21
	.word	.L91,.L92
	.byte	0,0,6
	.word	.L69,.L93,.L94
	.byte	7
	.word	.L71,.L72
	.byte	8
	.word	.L73,.L93,.L94
	.byte	5
	.byte	'password',0,2,189,3,12
	.word	.L74,.L95
	.byte	0,0,6
	.word	.L96,.L94,.L97
	.byte	7
	.word	.L98,.L99
	.byte	7
	.word	.L100,.L101
	.byte	9
	.word	.L102,.L103
	.byte	5
	.byte	'wdt_con0',0,2,133,3,25
	.word	.L104,.L105
	.byte	0,0,8
	.word	.L106,.L97,.L107
	.byte	5
	.byte	'pcon0',0,3,203,6,23
	.word	.L108,.L109
	.byte	6
	.word	.L110,.L111,.L107
	.byte	7
	.word	.L112,.L113
	.byte	7
	.word	.L114,.L115
	.byte	8
	.word	.L116,.L111,.L107
	.byte	5
	.byte	'wdt_con0',0,2,225,3,25
	.word	.L104,.L117
	.byte	0,0,0,0,0,0,6
	.word	.L118,.L78,.L119
	.byte	7
	.word	.L120,.L121
	.byte	8
	.word	.L122,.L78,.L119
	.byte	5
	.byte	'coreId',0,3,163,6,12
	.word	.L67,.L123
	.byte	6
	.word	.L88,.L78,.L124
	.byte	8
	.word	.L90,.L78,.L124
	.byte	5
	.byte	'reg',0,3,172,5,21
	.word	.L91,.L125
	.byte	0,0,6
	.word	.L69,.L126,.L127
	.byte	7
	.word	.L71,.L72
	.byte	8
	.word	.L73,.L126,.L127
	.byte	5
	.byte	'password',0,2,189,3,12
	.word	.L74,.L128
	.byte	0,0,6
	.word	.L96,.L127,.L129
	.byte	7
	.word	.L98,.L99
	.byte	7
	.word	.L100,.L101
	.byte	9
	.word	.L102,.L130
	.byte	5
	.byte	'wdt_con0',0,2,133,3,25
	.word	.L104,.L131
	.byte	0,0,8
	.word	.L132,.L129,.L133
	.byte	5
	.byte	'dcon0',0,3,168,6,23
	.word	.L134,.L135
	.byte	6
	.word	.L110,.L136,.L133
	.byte	7
	.word	.L112,.L113
	.byte	7
	.word	.L114,.L115
	.byte	8
	.word	.L116,.L136,.L133
	.byte	5
	.byte	'wdt_con0',0,2,225,3,25
	.word	.L104,.L137
	.byte	0,0,0,0,0,6
	.word	.L96,.L119,.L138
	.byte	7
	.word	.L98,.L99
	.byte	7
	.word	.L100,.L101
	.byte	9
	.word	.L102,.L139
	.byte	5
	.byte	'wdt_con0',0,2,133,3,25
	.word	.L104,.L140
	.byte	0,0,6
	.word	.L110,.L141,.L142
	.byte	7
	.word	.L112,.L113
	.byte	7
	.word	.L114,.L115
	.byte	8
	.word	.L116,.L141,.L142
	.byte	5
	.byte	'wdt_con0',0,2,225,3,25
	.word	.L104,.L143
	.byte	0,0,6
	.word	.L144,.L145,.L146
	.byte	7
	.word	.L147,.L148
	.byte	7
	.word	.L149,.L150
	.byte	8
	.word	.L151,.L145,.L146
	.byte	5
	.byte	'k',0,3,210,5,13
	.word	.L67,.L152
	.byte	5
	.byte	'nxt_cxi_val',0,3,211,5,13
	.word	.L67,.L153
	.byte	5
	.byte	'prvCsa',0,3,212,5,13
	.word	.L154,.L155
	.byte	5
	.byte	'nxtCsa',0,3,213,5,13
	.word	.L154,.L156
	.byte	0,0,4
	.word	.L146,.L157
	.byte	5
	.byte	'safetyWdtPassword',0,1,138,1,16
	.word	.L74,.L158
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('_Core0_start')
	.sect	'.debug_abbrev'
.L35:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('_Core0_start')
	.sect	'.debug_line'
.L36:
	.word	.L198-.L197
.L197:
	.half	3
	.word	.L200-.L199
.L199:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L200:
	.byte	4,2,5,33,7,0,5,2
	.word	.L19
	.byte	3,193,3,1,5,14,9
	.half	.L201-.L19
	.byte	3,1,1,4,1,5,5,9
	.half	.L70-.L201
	.byte	3,155,125,1,5,12,9
	.half	.L202-.L70
	.byte	3,1,1,5,21,9
	.half	.L203-.L202
	.byte	3,3,1,5,11,9
	.half	.L204-.L203
	.byte	1,5,19,9
	.half	.L205-.L204
	.byte	3,3,1,5,10,9
	.half	.L206-.L205
	.byte	3,1,1,5,11,9
	.half	.L161-.L206
	.byte	3,1,1,4,3,5,23,9
	.half	.L77-.L161
	.byte	3,218,5,1,9
	.half	.L162-.L77
	.byte	3,1,1,5,15,9
	.half	.L207-.L162
	.byte	3,1,1,5,19,9
	.half	.L83-.L207
	.byte	3,234,126,1,5,37,9
	.half	.L163-.L83
	.byte	3,1,1,5,76,3,153,1,1,5,83,9
	.half	.L208-.L163
	.byte	1,4,2,5,33,9
	.half	.L93-.L208
	.byte	3,251,124,1,5,14,9
	.half	.L164-.L93
	.byte	3,1,1,5,32,3,67,1,5,24,9
	.half	.L94-.L164
	.byte	3,14,1,9
	.half	.L166-.L94
	.byte	3,1,1,9
	.half	.L209-.L166
	.byte	3,1,1,5,28,9
	.half	.L3-.L209
	.byte	3,3,1,5,41,9
	.half	.L210-.L3
	.byte	1,4,3,5,23,7,9
	.half	.L97-.L210
	.byte	3,179,3,1,9
	.half	.L168-.L97
	.byte	3,1,1,5,15,9
	.half	.L211-.L168
	.byte	3,1,1,4,2,5,32,9
	.half	.L111-.L211
	.byte	3,148,125,1,5,24,9
	.half	.L167-.L111
	.byte	3,14,1,9
	.half	.L212-.L167
	.byte	3,1,1,9
	.half	.L213-.L212
	.byte	3,1,1,5,28,9
	.half	.L5-.L213
	.byte	3,3,1,5,41,9
	.half	.L214-.L5
	.byte	1,4,3,5,12,7,9
	.half	.L107-.L214
	.byte	3,221,2,1,5,19,9
	.half	.L78-.L107
	.byte	3,219,126,1,5,37,9
	.half	.L170-.L78
	.byte	3,1,1,5,83,9
	.half	.L124-.L170
	.byte	3,246,0,1,4,2,5,33,9
	.half	.L126-.L124
	.byte	3,158,125,1,5,14,9
	.half	.L171-.L126
	.byte	3,1,1,5,32,3,67,1,5,24,9
	.half	.L127-.L171
	.byte	3,14,1,9
	.half	.L174-.L127
	.byte	3,1,1,9
	.half	.L215-.L174
	.byte	3,1,1,5,28,9
	.half	.L7-.L215
	.byte	3,3,1,5,41,9
	.half	.L216-.L7
	.byte	1,4,3,5,23,7,9
	.half	.L129-.L216
	.byte	3,144,3,1,9
	.half	.L176-.L129
	.byte	3,1,1,5,15,9
	.half	.L217-.L176
	.byte	3,1,1,4,2,5,32,9
	.half	.L136-.L217
	.byte	3,183,125,1,5,24,9
	.half	.L175-.L136
	.byte	3,14,1,9
	.half	.L218-.L175
	.byte	3,1,1,9
	.half	.L219-.L218
	.byte	3,1,1,5,28,9
	.half	.L9-.L219
	.byte	3,3,1,5,41,9
	.half	.L220-.L9
	.byte	1,4,3,5,12,7,9
	.half	.L133-.L220
	.byte	3,186,2,1,4,2,5,32,9
	.half	.L119-.L133
	.byte	3,215,124,1,5,24,9
	.half	.L178-.L119
	.byte	3,14,1,9
	.half	.L180-.L178
	.byte	3,1,1,9
	.half	.L221-.L180
	.byte	3,1,1,5,28,9
	.half	.L222-.L221
	.byte	3,3,1,5,27,9
	.half	.L223-.L222
	.byte	3,123,1,5,28,9
	.half	.L11-.L223
	.byte	3,5,1,5,41,9
	.half	.L224-.L11
	.byte	1,4,1,5,29,7,9
	.half	.L138-.L224
	.byte	3,218,125,1,5,11,9
	.half	.L225-.L138
	.byte	1,5,29,9
	.half	.L226-.L225
	.byte	3,3,1,5,11,9
	.half	.L227-.L226
	.byte	1,5,29,9
	.half	.L228-.L227
	.byte	3,3,1,5,11,9
	.half	.L229-.L228
	.byte	1,4,2,5,32,9
	.half	.L141-.L229
	.byte	3,233,2,1,5,24,9
	.half	.L181-.L141
	.byte	3,14,1,9
	.half	.L230-.L181
	.byte	3,1,1,9
	.half	.L231-.L230
	.byte	3,1,1,5,28,9
	.half	.L13-.L231
	.byte	3,3,1,5,41,9
	.half	.L232-.L13
	.byte	1,4,1,5,5,7,9
	.half	.L142-.L232
	.byte	3,137,125,1,9
	.half	.L233-.L142
	.byte	3,1,1,9
	.half	.L234-.L233
	.byte	3,3,1,9
	.half	.L235-.L234
	.byte	3,1,1,4,3,5,25,9
	.half	.L145-.L235
	.byte	3,208,4,1,3,1,1,4,1,5,30,9
	.half	.L183-.L145
	.byte	3,178,123,1,4,3,5,12,9
	.half	.L236-.L183
	.byte	3,209,4,1,4,1,5,50,3,175,123,1,5,30,9
	.half	.L182-.L236
	.byte	1,4,3,5,38,9
	.half	.L237-.L182
	.byte	3,209,4,1,5,55,9
	.half	.L238-.L237
	.byte	3,2,1,5,63,3,126,1,5,32,9
	.half	.L15-.L238
	.byte	3,2,1,5,55,9
	.half	.L239-.L15
	.byte	1,5,79,9
	.half	.L184-.L239
	.byte	1,5,39,9
	.half	.L240-.L184
	.byte	1,5,61,9
	.half	.L190-.L240
	.byte	1,5,9,9
	.half	.L241-.L190
	.byte	3,2,1,5,19,7,9
	.half	.L242-.L241
	.byte	3,2,1,5,41,9
	.half	.L243-.L242
	.byte	1,5,21,9
	.half	.L16-.L243
	.byte	3,4,1,5,66,9
	.half	.L17-.L16
	.byte	3,118,1,5,17,3,13,1,5,16,9
	.half	.L244-.L17
	.byte	3,1,1,5,63,9
	.half	.L14-.L244
	.byte	3,114,1,5,15,7,9
	.half	.L245-.L14
	.byte	3,17,1,5,13,1,5,11,9
	.half	.L189-.L245
	.byte	3,1,1,4,1,5,71,9
	.half	.L146-.L189
	.byte	3,161,123,1,5,34,9
	.half	.L187-.L146
	.byte	1,5,67,9
	.half	.L192-.L187
	.byte	3,79,1,5,41,9
	.half	.L191-.L192
	.byte	3,51,1,5,19,9
	.half	.L246-.L191
	.byte	3,2,1,5,67,9
	.half	.L247-.L246
	.byte	3,75,1,5,40,9
	.half	.L248-.L247
	.byte	3,56,1,5,5,9
	.half	.L157-.L248
	.byte	3,4,1,5,29,9
	.half	.L249-.L157
	.byte	3,4,1,5,51,9
	.half	.L250-.L249
	.byte	1,5,42,9
	.half	.L251-.L250
	.byte	1,5,29,9
	.half	.L252-.L251
	.byte	3,3,1,5,51,9
	.half	.L253-.L252
	.byte	1,5,42,9
	.half	.L254-.L253
	.byte	1,5,5,9
	.half	.L255-.L254
	.byte	3,10,1,5,1,9
	.half	.L256-.L255
	.byte	3,1,1,7,9
	.half	.L38-.L256
	.byte	0,1,1
.L198:
	.sdecl	'.debug_ranges',debug,cluster('_Core0_start')
	.sect	'.debug_ranges'
.L37:
	.word	-1,.L19,0,.L38-.L19,0,0
.L103:
	.word	-1,.L19,.L94-.L19,.L97-.L19,-1,.L27,0,.L48-.L27,0,0
.L130:
	.word	-1,.L19,.L127-.L19,.L129-.L19,-1,.L23,0,.L53-.L23,-1,.L25,0,.L63-.L25,0,0
.L139:
	.word	-1,.L19,.L119-.L19,.L138-.L19,-1,.L21,0,.L58-.L21,0,0
	.sdecl	'.debug_info',debug,cluster('_START')
	.sect	'.debug_info'
.L39:
	.word	204
	.half	3
	.word	.L40
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L42,.L41
	.byte	2
	.word	.L30
	.byte	3
	.byte	'_START',0,1,185,1,6,1,1,1
	.word	.L29,.L159,.L28
	.byte	4
	.word	.L29,.L159
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('_START')
	.sect	'.debug_abbrev'
.L40:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('_START')
	.sect	'.debug_line'
.L41:
	.word	.L258-.L257
.L257:
	.half	3
	.word	.L260-.L259
.L259:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0,0,0,0,0
.L260:
	.byte	5,5,7,0,5,2
	.word	.L29
	.byte	3,186,1,1,5,1,9
	.half	.L261-.L29
	.byte	3,1,1,7,9
	.half	.L43-.L261
	.byte	0,1,1
.L258:
	.sdecl	'.debug_ranges',debug,cluster('_START')
	.sect	'.debug_ranges'
.L42:
	.word	-1,.L29,0,.L43-.L29,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L44:
	.word	195
	.half	3
	.word	.L45
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L47,.L46
	.byte	2
	.word	.L30
	.byte	3
	.byte	'.cocofun_2',0,1,86,6,1
	.word	.L27,.L48,.L26
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L45:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L46:
	.word	.L263-.L262
.L262:
	.half	3
	.word	.L265-.L264
.L264:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L265:
	.byte	4,2,5,32,7,0,5,2
	.word	.L27
	.byte	3,133,3,1,5,19,9
	.half	.L165-.L27
	.byte	3,2,1,5,5,9
	.half	.L169-.L165
	.byte	1,5,28,7,9
	.half	.L266-.L169
	.byte	3,3,1,5,26,9
	.half	.L267-.L266
	.byte	3,5,1,5,15,9
	.half	.L2-.L267
	.byte	3,4,1,9
	.half	.L48-.L2
	.byte	0,1,1,4,2,5,32,0,5,2
	.word	.L27
	.byte	3,225,3,1,5,19,9
	.half	.L165-.L27
	.byte	3,2,1,5,5,9
	.half	.L169-.L165
	.byte	1,5,28,7,9
	.half	.L266-.L169
	.byte	3,167,127,1,5,26,9
	.half	.L267-.L266
	.byte	3,225,0,1,5,15,9
	.half	.L2-.L267
	.byte	3,4,1,3,164,127,1,7,9
	.half	.L48-.L2
	.byte	0,1,1
.L263:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L47:
	.word	-1,.L27,0,.L48-.L27,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L49:
	.word	195
	.half	3
	.word	.L50
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L52,.L51
	.byte	2
	.word	.L30
	.byte	3
	.byte	'.cocofun_3',0,1,86,6,1
	.word	.L23,.L53,.L22
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L50:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L51:
	.word	.L269-.L268
.L268:
	.half	3
	.word	.L271-.L270
.L270:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L271:
	.byte	4,2,5,32,7,0,5,2
	.word	.L23
	.byte	3,133,3,1,5,19,9
	.half	.L172-.L23
	.byte	3,2,1,5,5,9
	.half	.L177-.L172
	.byte	1,5,28,7,9
	.half	.L272-.L177
	.byte	3,3,1,5,26,9
	.half	.L173-.L272
	.byte	3,5,1,5,15,9
	.half	.L6-.L173
	.byte	3,4,1,9
	.half	.L53-.L6
	.byte	0,1,1,4,2,5,32,0,5,2
	.word	.L23
	.byte	3,225,3,1,5,19,9
	.half	.L172-.L23
	.byte	3,2,1,5,5,9
	.half	.L177-.L172
	.byte	1,5,28,7,9
	.half	.L272-.L177
	.byte	3,167,127,1,5,26,9
	.half	.L173-.L272
	.byte	3,225,0,1,5,15,9
	.half	.L6-.L173
	.byte	3,4,1,3,164,127,1,7,9
	.half	.L53-.L6
	.byte	0,1,1
.L269:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L52:
	.word	-1,.L23,0,.L53-.L23,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L54:
	.word	195
	.half	3
	.word	.L55
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L57,.L56
	.byte	2
	.word	.L30
	.byte	3
	.byte	'.cocofun_4',0,1,86,6,1
	.word	.L21,.L58,.L20
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L55:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L56:
	.word	.L274-.L273
.L273:
	.half	3
	.word	.L276-.L275
.L275:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L276:
	.byte	4,2,5,32,7,0,5,2
	.word	.L21
	.byte	3,133,3,1,5,19,9
	.half	.L179-.L21
	.byte	3,2,1,5,5,9
	.half	.L277-.L179
	.byte	1,5,28,7,9
	.half	.L278-.L277
	.byte	3,3,1,9
	.half	.L279-.L278
	.byte	3,1,1,9
	.half	.L280-.L279
	.byte	3,1,1,5,26,3,3,1,5,15,9
	.half	.L10-.L280
	.byte	3,4,1,9
	.half	.L58-.L10
	.byte	0,1,1,4,2,5,32,0,5,2
	.word	.L21
	.byte	3,225,3,1,5,19,9
	.half	.L179-.L21
	.byte	3,2,1,5,5,9
	.half	.L277-.L179
	.byte	1,5,28,7,9
	.half	.L278-.L277
	.byte	3,3,1,9
	.half	.L279-.L278
	.byte	3,1,1,9
	.half	.L280-.L279
	.byte	3,1,1,5,26,3,3,1,5,15,9
	.half	.L10-.L280
	.byte	3,4,1,3,164,127,1,7,9
	.half	.L58-.L10
	.byte	0,1,1
.L274:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L57:
	.word	-1,.L21,0,.L58-.L21,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L59:
	.word	195
	.half	3
	.word	.L60
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L62,.L61
	.byte	2
	.word	.L30
	.byte	3
	.byte	'.cocofun_5',0,1,86,6,1
	.word	.L25,.L63,.L24
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L60:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L61:
	.word	.L282-.L281
.L281:
	.half	3
	.word	.L284-.L283
.L283:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L284:
	.byte	4,2,5,28,7,0,5,2
	.word	.L25
	.byte	3,138,3,1,9
	.half	.L285-.L25
	.byte	3,1,1,9
	.half	.L286-.L285
	.byte	3,1,1,9
	.half	.L63-.L286
	.byte	0,1,1,4,2,5,28,0,5,2
	.word	.L25
	.byte	3,230,3,1,9
	.half	.L285-.L25
	.byte	3,1,1,9
	.half	.L286-.L285
	.byte	3,1,1,3,164,127,1,7,9
	.half	.L63-.L286
	.byte	0,1,1,4,2,5,28,0,5,2
	.word	.L25
	.byte	3,138,3,1,9
	.half	.L285-.L25
	.byte	3,1,1,9
	.half	.L286-.L285
	.byte	3,1,1,9
	.half	.L63-.L286
	.byte	0,1,1,4,2,5,28,0,5,2
	.word	.L25
	.byte	3,230,3,1,9
	.half	.L285-.L25
	.byte	3,1,1,9
	.half	.L286-.L285
	.byte	3,1,1,3,164,127,1,7,9
	.half	.L63-.L286
	.byte	0,1,1
.L282:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L62:
	.word	-1,.L25,0,.L63-.L25,0,0
	.sdecl	'.debug_info',debug,cluster('BootModeHeader_0')
	.sect	'.debug_info'
.L64:
	.word	192
	.half	3
	.word	.L65
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1,2
	.word	.L30
	.byte	3
	.byte	'BootModeHeader_0',0,13,221,1,14
	.word	.L160
	.byte	1,5,3
	.word	BootModeHeader_0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('BootModeHeader_0')
	.sect	'.debug_abbrev'
.L65:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L26:
	.word	-1,.L27,0,.L48-.L27
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L22:
	.word	-1,.L23,0,.L53-.L23
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L20:
	.word	-1,.L21,0,.L58-.L21
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L24:
	.word	-1,.L25,0,.L63-.L25
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('_Core0_start')
	.sect	'.debug_loc'
.L18:
	.word	-1,.L19,0,.L66-.L19
	.half	2
	.byte	138,0
	.word	0,0
.L123:
	.word	0,0
.L87:
	.word	0,0
.L148:
	.word	0,0
.L150:
	.word	0,0
.L135:
	.word	-1,.L19,.L176-.L19,.L175-.L19
	.half	1
	.byte	95
	.word	.L23-.L19,.L177-.L19
	.half	1
	.byte	95
	.word	0,0
.L121:
	.word	0,0
.L80:
	.word	0,0
.L152:
	.word	-1,.L19,.L188-.L19,.L189-.L19
	.half	1
	.byte	95
	.word	0,0
.L156:
	.word	-1,.L19,.L186-.L19,.L187-.L19
	.half	1
	.byte	98
	.word	0,0
.L153:
	.word	-1,.L19,.L183-.L19,.L184-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L190-.L19,.L187-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L101:
	.word	0,0
.L75:
	.word	-1,.L19,.L70-.L19,.L94-.L19
	.half	1
	.byte	88
	.word	.L25-.L19,.L63-.L19
	.half	1
	.byte	88
	.word	.L165-.L19,.L48-.L19
	.half	1
	.byte	88
	.word	.L166-.L19,.L127-.L19
	.half	1
	.byte	88
	.word	.L6-.L19,.L53-.L19
	.half	1
	.byte	88
	.word	.L174-.L19,.L178-.L19
	.half	1
	.byte	88
	.word	.L21-.L19,.L58-.L19
	.half	1
	.byte	88
	.word	.L180-.L19,.L66-.L19
	.half	1
	.byte	88
	.word	0,0
.L95:
	.word	-1,.L19,.L164-.L19,.L94-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L25-.L19,.L63-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L165-.L19,.L48-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L166-.L19,.L127-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L128:
	.word	-1,.L19,.L171-.L19,.L127-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L25-.L19,.L63-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L6-.L19,.L53-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L174-.L19,.L178-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L21-.L19,.L179-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L115:
	.word	0,0
.L109:
	.word	-1,.L19,.L168-.L19,.L167-.L19
	.half	1
	.byte	95
	.word	.L27-.L19,.L169-.L19
	.half	1
	.byte	95
	.word	0,0
.L85:
	.word	-1,.L19,.L162-.L19,.L163-.L19
	.half	1
	.byte	95
	.word	0,0
.L68:
	.word	-1,.L19,.L161-.L19,.L162-.L19
	.half	1
	.byte	95
	.word	0,0
.L155:
	.word	-1,.L19,.L183-.L19,.L185-.L19
	.half	1
	.byte	111
	.word	0,0
.L92:
	.word	-1,.L19,.L163-.L19,.L89-.L19
	.half	1
	.byte	95
	.word	0,0
.L125:
	.word	-1,.L19,.L170-.L19,.L124-.L19
	.half	1
	.byte	95
	.word	0,0
.L158:
	.word	-1,.L19,.L187-.L19,.L191-.L19
	.half	1
	.byte	82
	.word	.L192-.L19,.L66-.L19
	.half	1
	.byte	95
	.word	0,0
.L99:
	.word	0,0
.L72:
	.word	0,0
.L113:
	.word	0,0
.L105:
	.word	-1,.L19,.L164-.L19,.L94-.L19
	.half	1
	.byte	81
	.word	.L25-.L19,.L63-.L19
	.half	1
	.byte	81
	.word	.L165-.L19,.L48-.L19
	.half	1
	.byte	81
	.word	.L166-.L19,.L167-.L19
	.half	1
	.byte	81
	.word	.L27-.L19,.L165-.L19
	.half	1
	.byte	81
	.word	0,0
.L131:
	.word	-1,.L19,.L171-.L19,.L127-.L19
	.half	1
	.byte	81
	.word	.L172-.L19,.L173-.L19
	.half	1
	.byte	81
	.word	.L25-.L19,.L63-.L19
	.half	1
	.byte	81
	.word	.L6-.L19,.L53-.L19
	.half	1
	.byte	81
	.word	.L174-.L19,.L175-.L19
	.half	1
	.byte	81
	.word	.L23-.L19,.L172-.L19
	.half	1
	.byte	81
	.word	0,0
.L140:
	.word	-1,.L19,.L179-.L19,.L58-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L180-.L19,.L181-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L21-.L19,.L179-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L117:
	.word	-1,.L19,.L25-.L19,.L63-.L19
	.half	1
	.byte	81
	.word	.L165-.L19,.L48-.L19
	.half	1
	.byte	81
	.word	.L167-.L19,.L127-.L19
	.half	1
	.byte	81
	.word	0,0
.L137:
	.word	-1,.L19,.L25-.L19,.L63-.L19
	.half	1
	.byte	81
	.word	.L172-.L19,.L53-.L19
	.half	1
	.byte	81
	.word	.L175-.L19,.L178-.L19
	.half	1
	.byte	81
	.word	.L21-.L19,.L58-.L19
	.half	1
	.byte	81
	.word	.L180-.L19,.L182-.L19
	.half	1
	.byte	81
	.word	0,0
.L143:
	.word	-1,.L19,.L179-.L19,.L58-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	.L181-.L19,.L183-.L19
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('_START')
	.sect	'.debug_loc'
.L28:
	.word	-1,.L29,0,.L159-.L29
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L287:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('_Core0_start')
	.sect	'.debug_frame'
	.word	12
	.word	.L287,.L19,.L66-.L19
	.sdecl	'.debug_frame',debug,cluster('_START')
	.sect	'.debug_frame'
	.word	24
	.word	.L287,.L29,.L159-.L29
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L288:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L288,.L21,.L58-.L21
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L288,.L23,.L53-.L23
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L288,.L25,.L63-.L25
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L288,.L27,.L48-.L27
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   189  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   190  #pragma protect restore
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   191  #pragma section code restore
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   192  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   193  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   194  #pragma section CODE
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   195  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   196  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   197  /*******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   198  **                      Boot Mode Headers                                     **
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   199  *******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   200  /*Boot Mode Header 0 sections to inform linker to locate them at 0x8000 0000 */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   201  #if defined(__GNUC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   202  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   203  #pragma section ".bmhd_0" a
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   204  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   205  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   206  #pragma protect on
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   207  #pragma section farrom "bmhd_0"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   208  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   209  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   210  #pragma section CONST ".bmhd_0" R
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   211  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   212  /** \brief Boot Mode Header 0
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   213   * Boot mode header at memory location 0c8000 0000.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   214   */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   215  const uint32 BootModeHeader_0[] = {
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   216      0x00000000u,                 /* STADBM first user code at 0x8000 0020h */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   217      0xb3590070u,                 /* BMI = 0070h BMHDID = B359h */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   218      0x00000000u,                 /* ChkStart */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   219      0x00000000u,                 /* ChkEnd */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   220      0x00000000u,                 /* CRCrange */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   221      0x00000000u,                 /* !CRCrange */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   222      0x791eb864u,                 /* CRChead */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   223      0x86e1479bu                  /* !CRChead */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   224  };
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   225  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   226  /*reset the sections defined above */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   227  #if defined(__GNUC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   228  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   229  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   230  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   231  #pragma protect restore
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   232  #pragma section farrom restore
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   233  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   234  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   235  #pragma section CONST
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   236  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   237  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   238  #ifndef IFX_CFG_CPUCSTART_BMI01_NOT_NEEDED
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   239  /*Boot Mode Header 1 sections to inform linker to locate them at 0x8002 0000 */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   240  #if defined(__GNUC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   241  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   242  #pragma section ".bmhd_1" a
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   243  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   244  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   245  #pragma protect on
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   246  #pragma section farrom "bmhd_1"
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   247  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   248  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   249  #pragma section CONST ".bmhd_1" R
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   250  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   251  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   252  /** \brief Boot Mode Header 1
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   253   * Boot mode header at memory location 0c8002 0000.
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   254   */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   255  const uint32 BootModeHeader_1[] = {
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   256      0x00000000u,                 /* STADBM first user code at 0x8000 0020h */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   257      0xB3590070u,                 /* BMI = 0070h BMHDID = B359h */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   258      0x00000000u,                 /* ChkStart */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   259      0x00000000u,                 /* ChkEnd */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   260      0x00000000u,                 /* CRCrange */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   261      0x00000000u,                 /* !CRCrange */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   262      0x791eb864u,                 /* CRChead */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   263      0x86e1479bu                  /* !CRChead */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   264  };
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   265  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   266  /*reset the sections defined above */
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   267  #if defined(__GNUC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   268  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   269  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   270  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   271  #pragma protect restore
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   272  #pragma section farrom restore
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   273  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   274  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   275  #pragma section CONST
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   276  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   277  #endif /*IFX_CFG_CPUCSTART_BMI01_NOT_NEEDED*/
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   278  
; ..\0_Src\4_McHal\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   279  #endif /*#ifndef IFX_CFG_USE_COMPILER_DEFAULT_LINKER */

	; Module end
