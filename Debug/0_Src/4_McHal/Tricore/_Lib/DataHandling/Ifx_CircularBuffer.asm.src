	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling\\.Ifx_CircularBuffer.asm.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc27xc -D__CPU_TC27XC__ --core=tc1.6.x --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\2_CDrv\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling\\Ifx_CircularBuffer.asm.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling\\Ifx_CircularBuffer.asm.src ..\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling\\Ifx_CircularBuffer.asm.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling\\Ifx_CircularBuffer.asm.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	788
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling\\Ifx_CircularBuffer.asm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'unsigned long long int',0,8,7,3
	.byte	'void',0,4
	.word	202
	.byte	5
	.byte	'__ld64',0,3,1,110,19
	.word	176
	.byte	1,1,6
	.byte	'addr',0,1,110,32
	.word	208
	.byte	7,0,8
	.byte	'__st64',0,3,1,118,17,1,1,6
	.byte	'addr',0,1,118,30
	.word	208
	.byte	6
	.byte	'value',0,1,118,43
	.word	176
	.byte	7,0,2
	.byte	'int',0,4,5,9
	.word	289
	.byte	10
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,11
	.word	296
	.byte	0,2
	.byte	'unsigned int',0,4,7,12
	.word	338
	.byte	4
	.word	338
	.byte	13
	.byte	'__cmpswapw',0
	.word	354
	.byte	1,1,1,1,14
	.byte	'p',0
	.word	359
	.byte	14
	.byte	'value',0
	.word	338
	.byte	14
	.byte	'compare',0
	.word	338
	.byte	0,15
	.word	213
	.byte	16
	.word	231
	.byte	7,0,15
	.word	246
	.byte	16
	.word	260
	.byte	16
	.word	273
	.byte	7,0,2
	.byte	'short int',0,2,5,17
	.byte	'__wchar_t',0,2,1,1
	.word	445
	.byte	17
	.byte	'__size_t',0,2,1,1
	.word	338
	.byte	17
	.byte	'__ptrdiff_t',0,2,1,1
	.word	289
	.byte	18,1,4
	.word	513
	.byte	17
	.byte	'__codeptr',0,2,1,1
	.word	515
	.byte	2
	.byte	'unsigned char',0,1,8,17
	.byte	'uint8',0,3,89,24
	.word	538
	.byte	17
	.byte	'sint16',0,3,90,24
	.word	445
	.byte	2
	.byte	'unsigned short int',0,2,7,17
	.byte	'uint16',0,3,91,24
	.word	584
	.byte	2
	.byte	'long int',0,4,5,17
	.byte	'sint32',0,3,92,24
	.word	621
	.byte	2
	.byte	'unsigned long int',0,4,7,17
	.byte	'uint32',0,3,93,24
	.word	648
	.byte	2
	.byte	'float',0,4,4,17
	.byte	'float32',0,3,94,24
	.word	684
	.byte	2
	.byte	'long long int',0,8,5,17
	.byte	'sint64',0,4,36,28
	.word	709
	.byte	17
	.byte	'uint64',0,4,37,28
	.word	176
	.byte	17
	.byte	'pvoid',0,4,40,28
	.word	208
	.byte	17
	.byte	'Ifx_TickTime',0,4,43,28
	.word	709
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,59,0,3,8,0,0,4,15,0,73,19,0
	.byte	0,5,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,6,5,0,3,8,58,15,59,15,57,15,73,19,0,0,7,11
	.byte	0,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,9,38,0,73,19,0,0,10,46,1,3,8,54,15,39,12,63,12
	.byte	60,12,0,0,11,5,0,73,19,0,0,12,53,0,73,19,0,0,13,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,14,5,0,3,8
	.byte	73,19,0,0,15,46,1,49,19,0,0,16,5,0,49,19,0,0,17,22,0,3,8,58,15,59,15,57,15,73,19,0,0,18,21,0,54,15,0,0
	.byte	0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling\\Ifx_CircularBuffer.asm.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Platform_Types.h',0,0
	.byte	0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Ifx_Types.h',0,0,0,0,0
.L9:
.L7:

; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	     1  /**
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	     2   * \file Ifx_CircularBuffer.asm.c
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	     3   * \brief Circular buffer functions (assembler implementation).
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	     4   *
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	     5   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	     7   *
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	     8   *
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    10   *
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    11   *
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    15   * products.
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    16   *
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    22   *
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    23   */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    24  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    25  #include "Ifx_CircularBuffer.h"
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    26  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    27  #if !(IFX_CFG_CIRCULARBUFFER_C)
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    28  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    29  uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    30  {
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    31      uint32 data;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    32  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    33      __asm("	ld.da\ta14/a15,[%1]\n"      /* Get circular buffer state */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    34          "	ld.w\t%0,[a14/a15+c]\n"     /* Get the value from the buffer, and increment the buffer pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    35          "	st.da\t[%1],a14/a15\n"      /* Store the new circular buffer state */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    36          : "=d" (data) : "a" (buffer) : "a14", "a15");
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    37  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    38      return data;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    39  }
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    40  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    41  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    42  uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    43  {
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    44      Ifx_SizeT data;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    45  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    46      __asm("	ld.da\ta14/a15,[%1]\n"      /* Get circular buffer state */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    47          "	ld.h\t%0,[a14/a15+c]\n"     /* Get the value from the buffer, and increment the buffer pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    48          "	st.da\t[%1],a14/a15\n"      /* Store the new circular buffer state */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    49          : "=d" (data) : "a" (buffer) : "a14", "a15");
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    50  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    51      return data;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    52  }
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    53  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    54  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    55  /** \brief Add a 32 bit value to the circular buffer, and post-increment the circular buffer pointer
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    56   *
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    57   * \param buffer Specifies circular buffer.
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    58   * \param data Specifies value to be added to the buffer.
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    59   *
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    60   * \return None.
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    61   */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    62  void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    63  {
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    64      __asm("	ld.da\ta14/a15,[%0]\n"      /* Get circular buffer state */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    65          "	st.w\t[a14/a15+c]0,%1\n"    /* Store the value to the buffer, and increment the buffer pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    66          "	ld.w\t%1,[a14/a15+c]\n"     /* Read the value from the buffer, to get the buffer pointer incremented (bug workaround) */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    67          "	st.da\t[%0],a14/a15\n"      /* Store the new circular buffer state */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    68          :
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    69          : "a" (buffer), "d" (data) : "a14", "a15");
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    70  }
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    71  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    72  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    73  void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    74  {
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    75      count--;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    76      __asm("	mov.a\ta13,%3\n"                                   /* Get count value */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    77          "	ld.da\ta14/a15,[%1]\n"                             /* Get circular buffer state */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    78          "Ifx_CircularBuffer_read1:" "	ld.b\td15,[a14/a15+c]\n"/* read the value from the buffer, and increment the buffer pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    79          "	st.b\t[%2+],d15\n"                                 /* Store value to the data buffer, and increment the pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    80          "	loop\ta13,Ifx_CircularBuffer_read1\n"              /* loop */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    81          "	mov.d\t%0,a15\n"                                   /* Get the new index value */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    82          "	extr.u\t%0,%0,#0,#16\n": "=d" (buffer->index) : "a" (buffer), "a" (data), "d" (count) : "a13", "a14", "a15",
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    83          "d15");
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    84  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    85      return data;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    86  }
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    87  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    88  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    89  void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    90  {
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    91      count--;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    92      __asm("	mov.a\ta13,%3\n"                                   /* Get count value */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    93          "	ld.da\ta14/a15,[%1]\n"                             /* Get circular buffer state */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    94          "Ifx_CircularBuffer_read2:" "	ld.w\td15,[a14/a15+c]\n"/* read the value from the buffer, and increment the buffer pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    95          "	st.w\t[%2+],d15\n"                                 /* Store value to the data buffer, and increment the pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    96          "	loop\ta13,Ifx_CircularBuffer_read2\n"              /* loop */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    97          "	mov.d\t%0,a15\n"                                   /* Get the new index value */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    98          "	extr.u\t%0,%0,#0,#16\n": "=d" (buffer->index) : "a" (buffer), "a" (data), "d" (count) : "a13", "a14", "a15",
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	    99          "d15");
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   100  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   101      return data;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   102  }
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   103  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   104  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   105  const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   106  {
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   107      count--;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   108      __asm("	mov.a\ta13,%3\n"                              /* Get count value */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   109          "	ld.da\ta14/a15,[%1]\n"                        /* Get circular buffer state */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   110          "Ifx_CircularBuffer_write1:" "	ld.b\td15,[%2+]\n"/* Get value from the data buffer, and increment the pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   111          "	st.b\t[a14/a15+c]0,d15\n"                     /* Store the value to the buffer, and increment the buffer pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   112          "	ld.b\td15,[a14/a15+c]\n"                      /* Read the value from the buffer, to get the buffer pointer incremented (bug workaround) */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   113          "	loop\ta13,Ifx_CircularBuffer_write1\n"        /* loop */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   114          "	mov.d\t%0,a15\n"                              /* Get the new index value */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   115          "	extr.u\t%0,%0,#0,#16\n": "=d" (buffer->index) : "a" (buffer), "a" (data), "d" (count) : "a13", "a14", "a15",
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   116          "d15");
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   117  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   118      return data;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   119  }
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   120  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   121  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   122  const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   123  {
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   124      count--;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   125      __asm("	mov.a\ta13,%3\n"                              /* Get count value */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   126          "	ld.da\ta14/a15,[%1]\n"                        /* Get circular buffer state */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   127          "Ifx_CircularBuffer_write2:" "	ld.w\td15,[%2+]\n"/* Get value from the data buffer, and increment the pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   128          "	st.w\t[a14/a15+c]0,d15\n"                     /* Store the value to the buffer, and increment the buffer pointer */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   129          "	ld.w\td15,[a14/a15+c]\n"                      /* Read the value from the buffer, to get the buffer pointer incremented (bug workaround) */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   130          "	loop\ta13,Ifx_CircularBuffer_write2\n"        /* loop */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   131          "	mov.d\t%0,a15\n"                              /* Get the new index value */
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   132          "	extr.u\t%0,%0,#0,#16\n": "=d" (buffer->index) : "a" (buffer), "a" (data), "d" (count) : "a13", "a14", "a15",
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   133          "d15");
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   134  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   135      return data;
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   136  }
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   137  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   138  
; ..\0_Src\4_McHal\Tricore\_Lib\DataHandling\Ifx_CircularBuffer.asm.c	   139  #endif

	; Module end
