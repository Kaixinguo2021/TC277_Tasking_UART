	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\I2c\\Std\\.IfxI2c.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc27xc -D__CPU_TC27XC__ --core=tc1.6.x --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\2_CDrv\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.src ..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c'

	
$TC16X
	.sdecl	'.zrodata.IfxI2c..1.cnt',data,rom
	.sect	'.zrodata.IfxI2c..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	-268205312
	.sdecl	'.zrodata.IfxI2c..2.cnt',data,rom
	.sect	'.zrodata.IfxI2c..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268205232
	.sdecl	'.zrodata.IfxI2c..3.cnt',data,rom
	.sect	'.zrodata.IfxI2c..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	-268205296
	.sdecl	'.zrodata.IfxI2c..4.cnt',data,rom
	.sect	'.zrodata.IfxI2c..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	-268205216
	.sdecl	'.zrodata.IfxI2c..5.cnt',data,rom
	.sect	'.zrodata.IfxI2c..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	-268205308
	.sdecl	'.zrodata.IfxI2c..6.cnt',data,rom
	.sect	'.zrodata.IfxI2c..6.cnt'
	.align	2
.6.cnt:	.type	object
	.size	.6.cnt,4
	.word	-268205228
	.sdecl	'.zrodata.IfxI2c..7.cnt',data,rom
	.sect	'.zrodata.IfxI2c..7.cnt'
	.align	2
.7.cnt:	.type	object
	.size	.7.cnt,4
	.word	-268205300
	.sdecl	'.zrodata.IfxI2c..8.cnt',data,rom
	.sect	'.zrodata.IfxI2c..8.cnt'
	.align	2
.8.cnt:	.type	object
	.size	.8.cnt,4
	.word	-268205220
	.sdecl	'.zrodata.IfxI2c..9.cnt',data,rom
	.sect	'.zrodata.IfxI2c..9.cnt'
	.align	2
.9.cnt:	.type	object
	.size	.9.cnt,4
	.word	-268205292
	.sdecl	'.zrodata.IfxI2c..10.cnt',data,rom
	.sect	'.zrodata.IfxI2c..10.cnt'
	.align	2
.10.cnt:	.type	object
	.size	.10.cnt,4
	.word	-268205212
	.sdecl	'.zrodata.IfxI2c..11.cnt',data,rom
	.sect	'.zrodata.IfxI2c..11.cnt'
	.align	2
.11.cnt:	.type	object
	.size	.11.cnt,4
	.word	-268205304
	.sdecl	'.zrodata.IfxI2c..12.cnt',data,rom
	.sect	'.zrodata.IfxI2c..12.cnt'
	.align	2
.12.cnt:	.type	object
	.size	.12.cnt,4
	.word	-268205224
	.sdecl	'.zrodata.IfxI2c..13.cnt',data,rom
	.sect	'.zrodata.IfxI2c..13.cnt'
	.align	2
.13.cnt:	.type	object
	.size	.13.cnt,4
	.word	65544
	.sdecl	'.zrodata.IfxI2c..14.cnt',data,rom
	.sect	'.zrodata.IfxI2c..14.cnt'
	.align	2
.14.cnt:	.type	object
	.size	.14.cnt,4
	.word	65564
	.sdecl	'.zrodata.IfxI2c..15.cnt',data,rom
	.sect	'.zrodata.IfxI2c..15.cnt'
	.align	2
.15.cnt:	.type	object
	.size	.15.cnt,4
	.word	1157619712
	
	.sdecl	'.text.IfxI2c.IfxI2c_configureAsMaster',code,cluster('IfxI2c_configureAsMaster')
	.sect	'.text.IfxI2c.IfxI2c_configureAsMaster'
	.align	2
	
	.global	IfxI2c_configureAsMaster

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     2   * \file IfxI2c.c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     4   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     5   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     7   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    10   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    15   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    16   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    22   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    23   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    24  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    25  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    26  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    27  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    28  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    29  #include "IfxI2c.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    30  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    31  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    32  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    33  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    35  void IfxI2c_configureAsMaster(Ifx_I2C *i2c)
; Function IfxI2c_configureAsMaster
.L27:
IfxI2c_configureAsMaster:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724      return i2c->RIS.B.BREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774      return i2c->RIS.B.LBREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   777  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   778  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   779  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   781      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   783      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   784      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   785      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   786          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   787      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   788  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   789  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   790  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   791  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   792  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   793      return i2c->RIS.B.LSREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   794  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   795  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   796  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   797  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   798  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   799      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   800  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   802  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   803  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   804  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   805      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   806  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   807  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   808  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   809  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   810  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   811      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   812      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   813          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   814      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   815      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   816      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   817          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   818      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   819  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   821  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   822  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   823  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   824      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   825      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   826          return &MODULE_SRC.I2C.I2C[0].SREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   827      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   828      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   829      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   830          return &MODULE_SRC.I2C.I2C[1].SREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   831      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   832  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   833  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   834  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   835  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   836  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   837      return i2c->RIS.B.SREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   838  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   839  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   840  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   841  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   842  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   843      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   844  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   845  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   846  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   847  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   848  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   849      i2c->RUNCTRL.U = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   850  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   851  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   852  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   853  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   854  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   855      i2c->GPCTL.B.PISEL = pisel;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   856  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   857  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   858  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   859  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   860  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   861      i2c->MRPSCTRL.B.MRPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   862  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   863  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   864  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   865  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   866  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   867      i2c->ADDRCFG.B.ADR = address;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   868  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   869  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   870  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   871  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   872  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   873      i2c->CLC1.B.EDIS = mode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   874  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   875  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   876  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   877  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   878  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   879      i2c->TPSCTRL.B.TPS = size;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   880  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   881  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   882  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   883  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   884  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   885      i2c->RUNCTRL.U = 0;
	mov	d15,#0
	st.w	[a4]16,d15
.L175:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    36  2c_stop(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    37  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    38      i2c->ADDRCFG.U      = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    39      i2c->ADDRCFG.B.MnS  = 1; // master mode
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    40      i2c->ADDRCFG.B.SONA = 0; // don't release the bus on NACK
	st.w	[a4]32,d15
.L368:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    41      i2c->ADDRCFG.B.SOPE = 0; // after transfer go into master restart state
	ld.bu	d0,[a4]34
.L369:
	or	d0,d0,#8
	fcall	.cocofun_19
.L370:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    42      i2c->ADDRCFG.B.TBAM = 0; // 7 bit address mode
	insert	d0,d0,#0,#4,#1
	fcall	.cocofun_19
.L371:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    43  
	insert	d0,d0,#0,#5,#1
	fcall	.cocofun_19
.L372:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    44      i2c->FIFOCFG.U      = 0;
	insert	d0,d0,#0,#0,#1
	st.b	[a4]34,d0
.L373:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    45      i2c->FIFOCFG.B.TXFC = 1; // FIFO as flow controller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    46      i2c->FIFOCFG.B.RXFC = 1; // FIFO as flow controller
	st.w	[a4]40,d15
.L374:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    47      i2c->FIFOCFG.B.TXBS = 0; // Burst size 1 word
	ld.bu	d15,[a4]42
.L375:
	or	d15,#2
	st.b	[a4]42,d15
.L376:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    48      i2c->FIFOCFG.B.RXBS = 0; // Burst size 1 word
	ld.bu	d15,[a4]42
.L377:
	or	d15,#1
	fcall	.cocofun_17
.L378:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    49      i2c->FIFOCFG.B.TXFA = 0; // fifo is byte aligned
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    50      i2c->FIFOCFG.B.RXFA = 0; // fifo is byte aligned
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    51  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    52  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    53  
	ret
.L170:
	
__IfxI2c_configureAsMaster_function_end:
	.size	IfxI2c_configureAsMaster,__IfxI2c_configureAsMaster_function_end-IfxI2c_configureAsMaster
.L74:
	; End of function
	
	.sdecl	'.text.IfxI2c..cocofun_19',code,cluster('.cocofun_19')
	.sect	'.text.IfxI2c..cocofun_19'
	.align	2
; Function .cocofun_19
.L29:
.cocofun_19:	.type	func
; Function body .cocofun_19, coco_iter:0
	st.b	[a4]34,d0
.L311:
	ld.bu	d0,[a4]34
.L548:
	fret
.L164:
	; End of function
	.sdecl	'.text.IfxI2c..cocofun_17',code,cluster('.cocofun_17')
	.sect	'.text.IfxI2c..cocofun_17'
	.align	2
; Function .cocofun_17
.L31:
.cocofun_17:	.type	func
; Function body .cocofun_17, coco_iter:0
	st.b	[a4]42,d15
.L532:
	ld.bu	d15,[a4]40
.L533:
	insert	d15,d15,#0,#4,#2
	st.b	[a4]40,d15
.L534:
	ld.bu	d15,[a4]40
.L535:
	insert	d15,d15,#0,#0,#2
	st.b	[a4]40,d15
.L536:
	ld.bu	d15,[a4]41
.L537:
	insert	d15,d15,#0,#4,#2
	st.b	[a4]41,d15
.L538:
	ld.bu	d15,[a4]41
.L539:
	insert	d15,d15,#0,#0,#2
	st.b	[a4]41,d15
.L312:
	fret
.L154:
	; End of function
	.sdecl	'.text.IfxI2c.IfxI2c_disableModule',code,cluster('IfxI2c_disableModule')
	.sect	'.text.IfxI2c.IfxI2c_disableModule'
	.align	2
	
	.global	IfxI2c_disableModule

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    54  void IfxI2c_disableModule(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    55  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    56      uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
; Function IfxI2c_disableModule
.L33:
IfxI2c_disableModule:	.type	func
	mov.aa	a15,a4
.L314:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    57  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    58      IfxScuWdt_clearCpuEndinit(pwd);
	call	IfxScuWdt_getCpuWatchdogPassword
.L313:
	mov	d8,d2
.L316:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    59  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    60      i2c->CLC.B.DISR = 1;
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L315:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    61  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    62      while (i2c->CLC.B.DISS == 0)
	fcall	.cocofun_20
.L318:
	ld.bu	d15,[+a3]0
.L383:
	fcall	.cocofun_18
	st.b	[+a3]0,d15
.L384:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    63      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    64  
	fcall	.cocofun_20
	mov.aa	a15,a3
.L2:
	ld.bu	d15,[a15]
.L385:
	jz.t	d15:1,.L2
.L386:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    65      IfxScuWdt_setCpuEndinit(pwd);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    66  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    67  
	mov	d4,d8
.L319:
	j	IfxScuWdt_setCpuEndinit
.L179:
	
__IfxI2c_disableModule_function_end:
	.size	IfxI2c_disableModule,__IfxI2c_disableModule_function_end-IfxI2c_disableModule
.L79:
	; End of function
	
	.sdecl	'.text.IfxI2c..cocofun_20',code,cluster('.cocofun_20')
	.sect	'.text.IfxI2c..cocofun_20'
	.align	2
; Function .cocofun_20
.L35:
.cocofun_20:	.type	func
; Function body .cocofun_20, coco_iter:1
	movh.a	a3,#1
	add.a	a3,a15
.L553:
	fret
.L169:
	; End of function
	.sdecl	'.text.IfxI2c..cocofun_18',code,cluster('.cocofun_18')
	.sect	'.text.IfxI2c..cocofun_18'
	.align	2
; Function .cocofun_18
.L37:
.cocofun_18:	.type	func
; Function body .cocofun_18, coco_iter:0
	or	d15,#1
	fcall	.cocofun_20
.L317:
	fret
.L159:
	; End of function
	.sdecl	'.text.IfxI2c.IfxI2c_enableBurstDataTransferInterrupt',code,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableBurstDataTransferInterrupt'
	.align	2
	
	.global	IfxI2c_enableBurstDataTransferInterrupt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    68  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    69  void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    70  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    71      volatile Ifx_SRC_SRCR *src;
; Function IfxI2c_enableBurstDataTransferInterrupt
.L39:
IfxI2c_enableBurstDataTransferInterrupt:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L391:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L3
.L392:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
	ld.w	d15,.1.cnt
.L393:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;      (inlined)
	j	.L4

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)      (inlined)
.L3:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
	ld.w	d15,.2.cnt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719  }      (inlined)
.L4:
	fcall	.cocofun_16
.L190:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    72  rSrcPointer(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    73      IfxSrc_init(src, typeOfService, priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    74      IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    75  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    76  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    77  
	ret
.L184:
	
__IfxI2c_enableBurstDataTransferInterrupt_function_end:
	.size	IfxI2c_enableBurstDataTransferInterrupt,__IfxI2c_enableBurstDataTransferInterrupt_function_end-IfxI2c_enableBurstDataTransferInterrupt
.L84:
	; End of function
	
	.sdecl	'.text.IfxI2c..cocofun_16',code,cluster('.cocofun_16')
	.sect	'.text.IfxI2c..cocofun_16'
	.align	2
; Function .cocofun_16
.L41:
.cocofun_16:	.type	func
; Function body .cocofun_16, coco_iter:0

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
	mov.a	a15,d15
.L521:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * \{
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * \{
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   * {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * \}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   * \}
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   * {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256      src->B.SRPN = priority;
	st.b	[a15],d5
.L522:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L523:
	insert	d15,d15,d4,#3,#2
	st.b	[a15]1,d15
.L524:
	ld.bu	d15,[a15]3
.L525:
	or	d15,#2
	st.b	[a15]3,d15
.L526:
	ld.bu	d15,[a15]1
.L527:
	or	d15,#4
	st.b	[a15]1,d15
.L320:
	fret
.L149:
	; End of function
	.sdecl	'.text.IfxI2c.IfxI2c_enableErrorInterrupt',code,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableErrorInterrupt'
	.align	2
	
	.global	IfxI2c_enableErrorInterrupt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    78  fxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    79  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    80      volatile Ifx_SRC_SRCR *src;
; Function IfxI2c_enableErrorInterrupt
.L43:
IfxI2c_enableErrorInterrupt:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724      return i2c->RIS.B.BREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L398:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L5
.L399:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750          return &MODULE_SRC.I2C.I2C[0].ERR;
	ld.w	d15,.3.cnt
.L400:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750          return &MODULE_SRC.I2C.I2C[0].ERR;      (inlined)
	j	.L6

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)      (inlined)
.L5:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754          return &MODULE_SRC.I2C.I2C[1].ERR;
	ld.w	d15,.4.cnt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  }      (inlined)
.L6:
	fcall	.cocofun_16
.L200:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    81   src = IfxI2c_getErrorSrcPointer(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    82      IfxSrc_init(src, typeOfService, priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    83      IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    84  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    85  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    86  
	ret
.L195:
	
__IfxI2c_enableErrorInterrupt_function_end:
	.size	IfxI2c_enableErrorInterrupt,__IfxI2c_enableErrorInterrupt_function_end-IfxI2c_enableErrorInterrupt
.L89:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableLastBurstDataTransferInterrupt',code,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableLastBurstDataTransferInterrupt'
	.align	2
	
	.global	IfxI2c_enableLastBurstDataTransferInterrupt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    87  void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    89      volatile Ifx_SRC_SRCR *src;
; Function IfxI2c_enableLastBurstDataTransferInterrupt
.L45:
IfxI2c_enableLastBurstDataTransferInterrupt:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724      return i2c->RIS.B.BREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L405:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L7
.L406:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763          return &MODULE_SRC.I2C.I2C[0].LBREQ;
	ld.w	d15,.5.cnt
.L407:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763          return &MODULE_SRC.I2C.I2C[0].LBREQ;      (inlined)
	j	.L8

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761      if (i2c == &MODULE_I2C0)      (inlined)
.L7:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767          return &MODULE_SRC.I2C.I2C[1].LBREQ;
	ld.w	d15,.6.cnt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769  }      (inlined)
.L8:
	fcall	.cocofun_16
.L209:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    90   IfxI2c_getLastBurstDataTransferSrcPointer(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    91      IfxSrc_init(src, typeOfService, priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    92      IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    93  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    94  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    95  
	ret
.L204:
	
__IfxI2c_enableLastBurstDataTransferInterrupt_function_end:
	.size	IfxI2c_enableLastBurstDataTransferInterrupt,__IfxI2c_enableLastBurstDataTransferInterrupt_function_end-IfxI2c_enableLastBurstDataTransferInterrupt
.L94:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableLastSingleDataTransferInterrupt',code,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableLastSingleDataTransferInterrupt'
	.align	2
	
	.global	IfxI2c_enableLastSingleDataTransferInterrupt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    96  void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    97  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    98      volatile Ifx_SRC_SRCR *src;
; Function IfxI2c_enableLastSingleDataTransferInterrupt
.L47:
IfxI2c_enableLastSingleDataTransferInterrupt:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724      return i2c->RIS.B.BREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774      return i2c->RIS.B.LBREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   777  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   778  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   779  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L412:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L9
.L413:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   781      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782          return &MODULE_SRC.I2C.I2C[0].LSREQ;
	ld.w	d15,.7.cnt
.L414:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782          return &MODULE_SRC.I2C.I2C[0].LSREQ;      (inlined)
	j	.L10

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780      if (i2c == &MODULE_I2C0)      (inlined)
.L9:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   783      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   784      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   785      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   786          return &MODULE_SRC.I2C.I2C[1].LSREQ;
	ld.w	d15,.8.cnt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   788  }      (inlined)
.L10:
	fcall	.cocofun_16
.L218:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	    99   IfxI2c_getLastSingleDataTransferSrcPointer(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   100      IfxSrc_init(src, typeOfService, priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   101      IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   102  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   103  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   104  
	ret
.L213:
	
__IfxI2c_enableLastSingleDataTransferInterrupt_function_end:
	.size	IfxI2c_enableLastSingleDataTransferInterrupt,__IfxI2c_enableLastSingleDataTransferInterrupt_function_end-IfxI2c_enableLastSingleDataTransferInterrupt
.L99:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableModule',code,cluster('IfxI2c_enableModule')
	.sect	'.text.IfxI2c.IfxI2c_enableModule'
	.align	2
	
	.global	IfxI2c_enableModule

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   105  void IfxI2c_enableModule(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   106  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   107      uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
; Function IfxI2c_enableModule
.L49:
IfxI2c_enableModule:	.type	func
	mov.aa	a15,a4
.L322:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   109      IfxScuWdt_clearCpuEndinit(pwd);
	call	IfxScuWdt_getCpuWatchdogPassword
.L321:
	mov	d8,d2
.L324:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   110      i2c->CLC.B.DISR = 0U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   111  
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L323:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   112      while (i2c->CLC.B.DISS == 1U)
	fcall	.cocofun_20
.L325:
	ld.bu	d15,[+a3]0
.L419:
	insert	d15,d15,#0,#0,#1
	fcall	.cocofun_20
	st.b	[+a3]0,d15
.L420:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   113      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   114  
	fcall	.cocofun_20
	mov.aa	a2,a3
.L11:
	ld.bu	d15,[a2]
.L421:
	jnz.t	d15:1,.L11
.L422:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   115      i2c->CLC1.B.RMC = 1U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   116  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   117      while (i2c->CLC1.B.RMC != 1U)
	mov	d15,#1
	st.b	[a15]1,d15

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   118      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   119  
.L12:
	ld.bu	d15,[a15]1
.L423:
	jne	d15,#1,.L12
.L424:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   120      i2c->CLC1.B.DISR = 0U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   121  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   122      while (i2c->CLC1.B.DISS == 1U)
	ld.bu	d15,[a15]
.L425:
	insert	d15,d15,#0,#0,#1
	st.b	[a15],d15

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   123      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   124  
.L13:
	ld.bu	d15,[a15]
.L426:
	jnz.t	d15:1,.L13
.L427:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   125      // disable all interrupts
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   126      i2c->ERRIRQSM.U = 0x00;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   127      i2c->PIRQSM.U   = 0x00;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   128      i2c->IMSC.U     = 0x00;
	mov	d15,#0
	st.w	[a15]96,d15
.L428:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   129  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   130      IfxScuWdt_setCpuEndinit(pwd);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   131  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   132  
	mov	d4,d8
.L326:
	st.w	[a15]112,d15
.L429:
	st.w	[a15]132,d15
.L430:
	j	IfxScuWdt_setCpuEndinit
.L222:
	
__IfxI2c_enableModule_function_end:
	.size	IfxI2c_enableModule,__IfxI2c_enableModule_function_end-IfxI2c_enableModule
.L104:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableProtocolInterrupt',code,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableProtocolInterrupt'
	.align	2
	
	.global	IfxI2c_enableProtocolInterrupt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   133  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   134  void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   135  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   136      volatile Ifx_SRC_SRCR *src;
; Function IfxI2c_enableProtocolInterrupt
.L51:
IfxI2c_enableProtocolInterrupt:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724      return i2c->RIS.B.BREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774      return i2c->RIS.B.LBREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   777  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   778  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   779  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   781      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   783      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   784      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   785      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   786          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   787      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   788  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   789  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   790  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   791  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   792  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   793      return i2c->RIS.B.LSREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   794  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   795  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   796  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   797  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   798  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   799      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   800  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   802  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   803  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   804  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   805      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   806  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   807  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   808  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   809  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   810  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   811      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L435:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   811      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L14
.L436:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   812      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   813          return &MODULE_SRC.I2C.I2C[0].P;
	ld.w	d15,.9.cnt
.L437:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   813          return &MODULE_SRC.I2C.I2C[0].P;      (inlined)
	j	.L15

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   811      if (i2c == &MODULE_I2C0)      (inlined)
.L14:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   814      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   815      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   816      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   817          return &MODULE_SRC.I2C.I2C[1].P;
	ld.w	d15,.10.cnt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   819  }      (inlined)
.L15:
	fcall	.cocofun_16
.L231:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   137  (i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   138      IfxSrc_init(src, typeOfService, priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   139      IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   140  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   141  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   142  
	ret
.L225:
	
__IfxI2c_enableProtocolInterrupt_function_end:
	.size	IfxI2c_enableProtocolInterrupt,__IfxI2c_enableProtocolInterrupt_function_end-IfxI2c_enableProtocolInterrupt
.L109:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableSingleDataTransferInterrupt',code,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableSingleDataTransferInterrupt'
	.align	2
	
	.global	IfxI2c_enableSingleDataTransferInterrupt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   143  void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   144  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   145      volatile Ifx_SRC_SRCR *src;
; Function IfxI2c_enableSingleDataTransferInterrupt
.L53:
IfxI2c_enableSingleDataTransferInterrupt:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724      return i2c->RIS.B.BREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774      return i2c->RIS.B.LBREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   777  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   778  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   779  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   781      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   783      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   784      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   785      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   786          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   787      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   788  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   789  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   790  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   791  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   792  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   793      return i2c->RIS.B.LSREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   794  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   795  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   796  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   797  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   798  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   799      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   800  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   802  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   803  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   804  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   805      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   806  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   807  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   808  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   809  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   810  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   811      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   812      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   813          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   814      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   815      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   816      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   817          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   818      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   819  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   821  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   822  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   823  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   824      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L442:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   824      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L16
.L443:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   825      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   826          return &MODULE_SRC.I2C.I2C[0].SREQ;
	ld.w	d15,.11.cnt
.L444:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   826          return &MODULE_SRC.I2C.I2C[0].SREQ;      (inlined)
	j	.L17

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   824      if (i2c == &MODULE_I2C0)      (inlined)
.L16:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   827      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   828      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   829      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   830          return &MODULE_SRC.I2C.I2C[1].SREQ;
	ld.w	d15,.12.cnt

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   832  }      (inlined)
.L17:
	fcall	.cocofun_16
.L240:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   146  nsferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   147  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   148      volatile Ifx_SRC_SRCR *src;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   149      src = IfxI2c_getSingleDataTransferSrcPointer(i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   150      IfxSrc_init(src, typeOfService, priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   151      IfxSrc_enable(src);
	ret
.L235:
	
__IfxI2c_enableSingleDataTransferInterrupt_function_end:
	.size	IfxI2c_enableSingleDataTransferInterrupt,__IfxI2c_enableSingleDataTransferInterrupt_function_end-IfxI2c_enableSingleDataTransferInterrupt
.L114:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_getBaudrate',code,cluster('IfxI2c_getBaudrate')
	.sect	'.text.IfxI2c.IfxI2c_getBaudrate'
	.align	2
	
	.global	IfxI2c_getBaudrate

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   152  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   153  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   154  
; Function IfxI2c_getBaudrate
.L55:
IfxI2c_getBaudrate:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   155  float32 IfxI2c_getBaudrate(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   156  {
	ld.bu	d8,[a4]26
.L328:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   157      uint8   inc     = i2c->FDIVCFG.B.INC;
	ld.hu	d15,[a4]24
.L449:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   158      uint16  dec     = i2c->FDIVCFG.B.DEC;
	extr.u	d9,d15,#0,#11
	ld.bu	d15,[a4]1
.L329:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   159      uint8   rmc     = i2c->CLC1.B.RMC;
	call	IfxScuCcu_getBaud1Frequency
.L327:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   160      float32 fKernel = IfxScuCcu_getBaud1Frequency();
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   161  
	sha	d9,#1
.L330:
	div	e0,d9,d8
.L450:
	utof	d15,d15
.L331:
	div.f	d15,d2,d15
.L451:
	add	d0,#3
	itof	d0,d0
.L452:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   162      return (fKernel / rmc) / ((2 * dec / inc) + 3);
	div.f	d2,d15,d0
	ret
.L245:
	
__IfxI2c_getBaudrate_function_end:
	.size	IfxI2c_getBaudrate,__IfxI2c_getBaudrate_function_end-IfxI2c_getBaudrate
.L119:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_initSclSdaPin',code,cluster('IfxI2c_initSclSdaPin')
	.sect	'.text.IfxI2c.IfxI2c_initSclSdaPin'
	.align	2
	
	.global	IfxI2c_initSclSdaPin

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   163  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   164  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   165  
; Function IfxI2c_initSclSdaPin
.L57:
IfxI2c_initSclSdaPin:	.type	func
	mov.aa	a15,a4
.L334:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   166  void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   167  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   168      IfxPort_OutputMode mode = (IfxPort_OutputMode)IfxPort_Mode_outputOpenDrainGeneral;
	mov	d8,d4
	ld.bu	d15,[a15]13
.L335:
	mov.aa	a12,a5
.L260:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117          IfxPort_OutputMode_openDrain = 0x18U << 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130      IfxPort_PadDriver_lvdsSpeed1           = 4,  /**< \brief Lvds Speed grade 1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131      IfxPort_PadDriver_lvdsSpeed2           = 5,  /**< \brief Lvds Speed grade 2 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132      IfxPort_PadDriver_lvdsSpeed3           = 6,  /**< \brief Lvds Speed grade 3 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133      IfxPort_PadDriver_lvdsSpeed4           = 7,  /**< \brief Lvds Speed grade 4 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137      IfxPort_PadDriver_ttlSpeed4            = 11  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144      IfxPort_PadSupply_5v = 0,  /**< \brief select, 5V supply */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145      IfxPort_PadSupply_3v = 1   /**< \brief select, 3V supply */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * /code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *     {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   * \return port index of IfxModule_IndexMap. return -1 in case of unknown portIndex.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN sint32 IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474  /** \brief set LVDSM mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   * \param pinIndex specifies pin to be modified
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477   * \param lvdsPadDriver select speed grade of LVDS Pad
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478   * \param padSupply select the PAD supply (5/3.3V)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  IFX_EXTERN void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  /** \brief set LVDSH mode (configured for Port21)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485   * \param pinIndex specifies pin  to be modified
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486   * \param mode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487   * \param enablePortControlled specifies whether it is controlled by port or HSCT
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490  IFX_EXTERN void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	or	d5,d15,#192
	ld.a	a4,[a15]4
.L333:
	ld.bu	d4,[a15]8
.L332:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117          IfxPort_OutputMode_openDrain = 0x18U << 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130      IfxPort_PadDriver_lvdsSpeed1           = 4,  /**< \brief Lvds Speed grade 1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131      IfxPort_PadDriver_lvdsSpeed2           = 5,  /**< \brief Lvds Speed grade 2 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132      IfxPort_PadDriver_lvdsSpeed3           = 6,  /**< \brief Lvds Speed grade 3 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133      IfxPort_PadDriver_lvdsSpeed4           = 7,  /**< \brief Lvds Speed grade 4 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137      IfxPort_PadDriver_ttlSpeed4            = 11  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144      IfxPort_PadSupply_5v = 0,  /**< \brief select, 5V supply */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145      IfxPort_PadSupply_3v = 1   /**< \brief select, 3V supply */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * /code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *     {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   * \return port index of IfxModule_IndexMap. return -1 in case of unknown portIndex.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN sint32 IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474  /** \brief set LVDSM mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   * \param pinIndex specifies pin to be modified
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477   * \param lvdsPadDriver select speed grade of LVDS Pad
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478   * \param padSupply select the PAD supply (5/3.3V)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  IFX_EXTERN void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  /** \brief set LVDSH mode (configured for Port21)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485   * \param pinIndex specifies pin  to be modified
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486   * \param mode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487   * \param enablePortControlled specifies whether it is controlled by port or HSCT
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490  IFX_EXTERN void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	call	IfxPort_setPinMode
.L261:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   169     IfxPort_OutputMode mode = (IfxPort_OutputMode)IfxPort_Mode_outputOpenDrainGeneral;
	ld.bu	d15,[a12]13
.L457:
	ld.a	a4,[a12]4
.L458:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117          IfxPort_OutputMode_openDrain = 0x18U << 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130      IfxPort_PadDriver_lvdsSpeed1           = 4,  /**< \brief Lvds Speed grade 1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131      IfxPort_PadDriver_lvdsSpeed2           = 5,  /**< \brief Lvds Speed grade 2 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132      IfxPort_PadDriver_lvdsSpeed3           = 6,  /**< \brief Lvds Speed grade 3 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133      IfxPort_PadDriver_lvdsSpeed4           = 7,  /**< \brief Lvds Speed grade 4 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137      IfxPort_PadDriver_ttlSpeed4            = 11  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144      IfxPort_PadSupply_5v = 0,  /**< \brief select, 5V supply */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145      IfxPort_PadSupply_3v = 1   /**< \brief select, 3V supply */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * /code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *     {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   * \return port index of IfxModule_IndexMap. return -1 in case of unknown portIndex.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN sint32 IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474  /** \brief set LVDSM mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   * \param pinIndex specifies pin to be modified
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477   * \param lvdsPadDriver select speed grade of LVDS Pad
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478   * \param padSupply select the PAD supply (5/3.3V)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  IFX_EXTERN void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  /** \brief set LVDSH mode (configured for Port21)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485   * \param pinIndex specifies pin  to be modified
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486   * \param mode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487   * \param enablePortControlled specifies whether it is controlled by port or HSCT
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490  IFX_EXTERN void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	or	d5,d15,#192
	ld.bu	d4,[a12]8
.L459:

; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_0_11_0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   * products.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117          IfxPort_OutputMode_openDrain = 0x18U << 3
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130      IfxPort_PadDriver_lvdsSpeed1           = 4,  /**< \brief Lvds Speed grade 1 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131      IfxPort_PadDriver_lvdsSpeed2           = 5,  /**< \brief Lvds Speed grade 2 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132      IfxPort_PadDriver_lvdsSpeed3           = 6,  /**< \brief Lvds Speed grade 3 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133      IfxPort_PadDriver_lvdsSpeed4           = 7,  /**< \brief Lvds Speed grade 4 */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137      IfxPort_PadDriver_ttlSpeed4            = 11  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144      IfxPort_PadSupply_5v = 0,  /**< \brief select, 5V supply */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145      IfxPort_PadSupply_3v = 1   /**< \brief select, 3V supply */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204   *    }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * /code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *     {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   *     }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   * \return port index of IfxModule_IndexMap. return -1 in case of unknown portIndex.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN sint32 IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \code
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474  /** \brief set LVDSM mode
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   * \param pinIndex specifies pin to be modified
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477   * \param lvdsPadDriver select speed grade of LVDS Pad
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478   * \param padSupply select the PAD supply (5/3.3V)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  IFX_EXTERN void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  /** \brief set LVDSH mode (configured for Port21)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485   * \param pinIndex specifies pin  to be modified
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486   * \param mode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487   * \param enablePortControlled specifies whether it is controlled by port or HSCT
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490  IFX_EXTERN void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   *
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   */
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557  }
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC27xD_ASC\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	call	IfxPort_setPinMode
.L271:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   170     IfxPort_OutputMode mode = (IfxPort_OutputMode)IfxPort_Mode_outputOpenDrainGeneral;
	ld.a	a4,[a15]4
.L460:
	ld.bu	d4,[a15]8
.L461:
	mov	d5,d8
	call	IfxPort_setPinPadDriver
.L462:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   171      IfxPort_setPinModeOutput(scl->pin.port, scl->pin.pinIndex, mode, scl->outSelect);
	ld.a	a4,[a12]4
.L463:
	ld.bu	d4,[a12]8
.L464:
	mov	d5,d8
	call	IfxPort_setPinPadDriver
.L465:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   172      IfxPort_setPinModeOutput(sda->pin.port, sda->pin.pinIndex, mode, sda->outSelect);
	ld.a	a2,[a15]
.L273:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724      return i2c->RIS.B.BREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774      return i2c->RIS.B.LBREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   777  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   778  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   779  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   781      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   783      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   784      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   785      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   786          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   787      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   788  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   789  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   790  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   791  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   792  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   793      return i2c->RIS.B.LSREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   794  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   795  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   796  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   797  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   798  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   799      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   800  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   802  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   803  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   804  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   805      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   806  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   807  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   808  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   809  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   810  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   811      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   812      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   813          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   814      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   815      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   816      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   817          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   818      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   819  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   821  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   822  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   823  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   824      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   825      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   826          return &MODULE_SRC.I2C.I2C[0].SREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   827      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   828      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   829      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   830          return &MODULE_SRC.I2C.I2C[1].SREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   831      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   832  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   833  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   834  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   835  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   836  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   837      return i2c->RIS.B.SREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   838  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   839  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   840  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   841  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   842  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   843      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   844  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   845  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   846  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   847  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   848  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   849      i2c->RUNCTRL.U = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   850  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   851  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   852  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   853  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   854  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   855      i2c->GPCTL.B.PISEL = pisel;
	movh.a	a3,#1
.L274:
	ld.bu	d15,[a15]12
.L281:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724      return i2c->RIS.B.BREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774      return i2c->RIS.B.LBREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   777  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   778  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   779  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   781      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   783      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   784      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   785      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   786          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   787      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   788  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   789  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   790  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   791  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   792  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   793      return i2c->RIS.B.LSREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   794  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   795  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   796  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   797  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   798  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   799      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   800  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   802  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   803  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   804  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   805      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   806  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   807  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   808  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   809  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   810  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   811      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   812      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   813          return &MODULE_SRC.I2C.I2C[0].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   814      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   815      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   816      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   817          return &MODULE_SRC.I2C.I2C[1].P;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   818      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   819  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   821  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   822  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   823  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   824      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   825      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   826          return &MODULE_SRC.I2C.I2C[0].SREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   827      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   828      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   829      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   830          return &MODULE_SRC.I2C.I2C[1].SREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   831      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   832  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   833  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   834  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   835  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   836  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   837      return i2c->RIS.B.SREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   838  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   839  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   840  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   841  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   842  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   843      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   844  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   845  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   846  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   847  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   848  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   849      i2c->RUNCTRL.U = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   850  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   851  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   852  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   853  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   854  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   855      i2c->GPCTL.B.PISEL = pisel;
	add.a	a3,a2
	ld.bu	d0,[+a3]8
.L466:
	movh.a	a3,#1
	insert	d15,d0,d15,#0,#3
	add.a	a3,a2
	st.b	[+a3]8,d15
.L282:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   173    IfxPort_setPinModeOutput(sda->pin.port, sda->pin.pinIndex, mode, sda->outSelect);
	ret
.L252:
	
__IfxI2c_initSclSdaPin_function_end:
	.size	IfxI2c_initSclSdaPin,__IfxI2c_initSclSdaPin_function_end-IfxI2c_initSclSdaPin
.L124:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_releaseBus',code,cluster('IfxI2c_releaseBus')
	.sect	'.text.IfxI2c.IfxI2c_releaseBus'
	.align	2
	
	.global	IfxI2c_releaseBus

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   174      IfxPort_setPinPadDriver(scl->pin.port, scl->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   175      IfxPort_setPinPadDriver(sda->pin.port, sda->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   176      IfxI2c_setPinSelection(scl->module, (IfxI2c_PinSelect)scl->inSelect); // note: uses the same PISEL register like SDA
; Function IfxI2c_releaseBus
.L59:
IfxI2c_releaseBus:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   177  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   178  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   179  
	ld.bu	d15,[a4]36
	and	d15,#3
.L471:
	jeq	d15,#0,.L19
.L472:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   180  void IfxI2c_releaseBus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   181  {
	ld.bu	d15,[a4]20
.L473:
	or	d15,#2
	st.b	[a4]20,d15

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   182      // only set the set end of transmisson bit if bus is not free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   183      if (i2c->BUSSTAT.B.BS != IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   184      {
.L20:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   604  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   605  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   607  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   608  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   609      i2c->ICR.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   610  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   611  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   613  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   614  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   615      i2c->IMSC.B.BREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   616  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   617  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   619  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   620  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   621      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   622  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   623  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   625  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   626  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   627      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   628  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   629  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   631  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   632  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   633      i2c->IMSC.B.LBREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   634  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   635  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   637  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   638  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   639      i2c->IMSC.B.LSREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   640  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   641  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   643  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   644  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   645      i2c->IMSC.B.I2C_P_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   646  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   647  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   649  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   650  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   651      i2c->PIRQSM.U &= ~(1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   652  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   653  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   655  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   656  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   657      i2c->IMSC.B.SREQ_INT = 0;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   658  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   659  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   661  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   662  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   663      i2c->IMSC.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   664  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   665  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   667  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   668  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   669      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   670  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   671  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   673  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   674  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   675      i2c->ERRIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   676  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   677  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   679  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   680  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   681      i2c->IMSC.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   682  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   683  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   685  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   686  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   687      i2c->IMSC.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   688  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   689  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   691  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   692  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   693      i2c->IMSC.B.I2C_P_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   694  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   695  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   697  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   698  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   699      i2c->PIRQSM.U |= (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   700  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   701  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   703  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   704  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   705      i2c->IMSC.B.SREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   706  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   707  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   709  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   710  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   711      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   712      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   713          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   714      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   715      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   716      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   717          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   718      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   724      return i2c->RIS.B.BREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   730      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   736      return i2c->RIS.B.I2C_ERR_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   742      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   748      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   749      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   750          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   751      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   752      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   753      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   754          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   755      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   756  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   757  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   758  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   759  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   760  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   761      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   762      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   763          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   764      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   765      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   766      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   767          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   768      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   769  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   771  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   772  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   773  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   774      return i2c->RIS.B.LBREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   775  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   777  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   778  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   779  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   780      if (i2c == &MODULE_I2C0)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   781      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   782          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   783      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   784      else
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   785      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   786          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   787      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   788  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   789  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   790  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   791  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   792  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   793      return i2c->RIS.B.LSREQ_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   794  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   795  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   796  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   797  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   798  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   799      return i2c->RIS.B.I2C_P_INT;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   800  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   802  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   803  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   804  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   805      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
	ld.w	d15,[a4]116
.L286:
	jz.t	d15:5,.L20
.L293:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    17   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    23   *
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    24   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    25   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    26   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    27   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    28   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    29   * \ingroup IfxLld_I2c_Std
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    30   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    31  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    32  #ifndef IFXI2C_H
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    33  #define IFXI2C_H 1
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    35  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    36  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    37  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    38  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    39  #include "_Impl/IfxI2c_cfg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    40  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    41  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    42  #include "IfxI2c_reg.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    43  #include "IfxI2c_bf.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    44  #include "_PinMap/IfxI2c_PinMap.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    45  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    46  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    48  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    50  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    51  /** \addtogroup IfxLld_I2c_Std_enums
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    52   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    53  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    54  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    55      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    56      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    57      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    58      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    59  } IfxI2c_BusStatus;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    60  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    61  /** \brief enable error interrupt request source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    62   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    63   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    64  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    65  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    66      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    67      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    68      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    69      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    70  } IfxI2c_ErrorInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    71  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_PinSelect_a = 0,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_PinSelect_b = 1,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_PinSelect_c = 2,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_PinSelect_d = 3,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    78      IfxI2c_PinSelect_e = 4,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    79      IfxI2c_PinSelect_f = 5,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    80      IfxI2c_PinSelect_g = 6,
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    81      IfxI2c_PinSelect_h = 7
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    82  } IfxI2c_PinSelect;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    83  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    84  /** \brief enable protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    85   * Definition in Ifx.I2C.PIRQSM.U
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    86   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    87  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    88  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    89      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    90      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    91      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    92      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    96  } IfxI2c_ProtocolInterruptSource;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    97  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    98  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	    99   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   100   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   101  typedef enum
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   102  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   103      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   104      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   105  } IfxI2c_SleepMode;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   106  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   107  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   108  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   109  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   110  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   111  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   112  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   113  /** \addtogroup IfxLld_I2c_Std_structures
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   114   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   115  /** \brief Pin Structure
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   116   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   117  typedef struct
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   118  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   119      IfxI2c_Scl_InOut *scl;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   120      IfxI2c_Sda_InOut *sda;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   121      IfxPort_PadDriver padDriver;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   122  } IfxI2c_Pins;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   123  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   124  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   126  /** \addtogroup IfxLld_I2c_Std_functions
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   127   * \{ */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   128  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   129  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   131  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   132  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   133  /** \brief Returns if the bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   134   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   135  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   136  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   137  /** \brief clears all Error Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   138   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   139   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   140   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   141  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   143  /** \brief Clears all Protocol Interrupt sources
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   144   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   145   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   146   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   147  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   148  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   149  /** \brief clears burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   150   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   151   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   152   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   153  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   154  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   155  /** \brief clears the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   156   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   157   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief clears last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   176   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   177   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   178   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   179  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   180  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   181  /** \brief clears single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   182   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief disables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief disables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief disables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   201   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief disables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the Protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   226   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief enables burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief enables the error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief enables the specified source of error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   251   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief enables last burst request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables last single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the protocol interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to I2C registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   276   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables single request interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   289   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief returns the status of burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   295   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   299  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   301   * \return BusStatus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   302   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   303  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   304  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   305  /** \brief returns the current status of error interrupt flag
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   306   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   307   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   308   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   309  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   310  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   311  /** \brief returns the status of the error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   312   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   313   * \param source error interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   314   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   320   * \return SRC pointer for I2C Error Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   324  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   326   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the status of last burst request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   338   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   339   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   340  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   341  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   342  /** \brief returns the status of last single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   343   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   344   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   345   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   346  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   347  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   348  /** \brief returns the current raw status of protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   349   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   350   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   351   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   352  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   353  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   354  /** \brief returns the status of  specified protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   355   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   356   * \param source protocol interrupt source
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C Protocol Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   369   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the status of single request interrupt source status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief Returns if the Fifo is requesting new data
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   380   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   381  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   382  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   383  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   384   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   385   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   386   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   387  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   388  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   389  /** \brief selects the pin
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   390   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   391   * \param pisel pin to be select
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   393   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   394  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   395  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   396  /** \brief Sets the number of bytes to be received
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   397   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   398   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   399   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   400   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   401  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   402  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   403  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   404   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   405   * \param address device address
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   406   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   407   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   408  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   409  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   410  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   411   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   412   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   413   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   414   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   415  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   416  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   417  /** \brief Sets the number of bytes to be tansmitted
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   418   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   419   * \param size number of packets
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   420   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   421   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   422  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   423  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   424  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   425   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   426   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   427   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   428  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   429  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   430  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   431   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   432   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   433   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   434  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   435  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   436  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   437   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   438   * \param packet specifies the byte to be transfer
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   439   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   440   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   441  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   442  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   443  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   444  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   445  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   446  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   447  /** \brief Configures the Module as Master
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   448   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   450   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   451  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   452  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   453  /** \brief Disables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   454   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   455   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   456   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   457  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   458  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   459  /** \brief Enables the Burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   460   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   461   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   462   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   464   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   465  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   466  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   467  /** \brief Enables the Error interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   468   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   469   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   470   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   471   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   472   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   473  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   474  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   475  /** \brief enables the last burst data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   476   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   477   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   478   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   479   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   480   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   481  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   482  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   483  /** \brief enables the last single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   484   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   485   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   486   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   487   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   488   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   489  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   490  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   491  /** \brief Enables the I2c Module
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   492   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   494   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   495  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   496  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   497  /** \brief Enables the protocol interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   498   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   499   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   500   * \param priority Priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   501   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   502   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   503  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   504  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   505  /** \brief enables the single data transfer interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   506   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   507   * \param typeOfService Type of Service (Cpu or DMA)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   508   * \param priority priority of the interrupt
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   509   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   510   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   511  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   512  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   513  /** \brief Returns the real Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   514   * \return Baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   515   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   516  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   517  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   518  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   519   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   520   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   521  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   522  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   523  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   525   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   526  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   527  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   528  /**
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   529   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   530   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   531  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   532  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   533  /** \brief resets the I2c kernel
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   534   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   535   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   536   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   537  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   538  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   539  /** \brief Calculates the desired baudrate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   540   * \param i2c pointer to i2c registers
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   541   * \param baudrate specifies the baud rate
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   543   */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   544  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   545  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   546  /** \} */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   547  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   548  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   549  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   551  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   552  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   553  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   554      boolean free = FALSE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   555  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   556      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   557      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   558          free = TRUE;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   559      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   560  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   561      return free;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   562  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   563  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   565  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   566  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   567      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   568  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   570  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   571  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   572  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   573      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   574  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   576  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   577  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   578  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   579      i2c->ICR.B.BREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   580  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   581  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   583  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   584  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   585      i2c->ERRIRQSC.U = (1 << source);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   586  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   587  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   591      i2c->ICR.B.LBREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   592  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   593  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   594  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   595  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   596  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   597      i2c->ICR.B.LSREQ_INT = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   598  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   599  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   601  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   602  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.h	   603      i2c->PIRQSC.U = (1 << source);
	mov	d15,#32
	st.w	[a4]120,d15
.L19:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   185  us is not free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   186      if (i2c->BUSSTAT.B.BS != IfxI2c_BusStatus_idle)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   187      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   188          i2c->ENDDCTRL.B.SETEND = 1;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   189  
	ret
.L283:
	
__IfxI2c_releaseBus_function_end:
	.size	IfxI2c_releaseBus,__IfxI2c_releaseBus_function_end-IfxI2c_releaseBus
.L129:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_resetFifo',code,cluster('IfxI2c_resetFifo')
	.sect	'.text.IfxI2c.IfxI2c_resetFifo'
	.align	2
	
	.global	IfxI2c_resetFifo

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   190          // wait until bus is free
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   191          while (IfxI2c_getProtocolInterruptSourceStatus(i2c, IfxI2c_ProtocolInterruptSource_transmissionEnd) == FALSE)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   192          {}
; Function IfxI2c_resetFifo
.L61:
IfxI2c_resetFifo:	.type	func

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   193  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   194          IfxI2c_clearProtocolInterruptSource(i2c, IfxI2c_ProtocolInterruptSource_transmissionEnd);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   195      }
	mov	d15,#0
	st.w	[a4]40,d15
.L478:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   196  }
	ld.bu	d15,[a4]42
.L479:
	insert	d15,d15,#0,#1,#1
	st.b	[a4]42,d15
.L480:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   197  
	ld.bu	d15,[a4]42
.L481:
	insert	d15,d15,#0,#0,#1
	fcall	.cocofun_17
.L482:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   198  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   199  void IfxI2c_resetFifo(Ifx_I2C *i2c)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   200  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   201      /* reset FIFO */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   202      i2c->FIFOCFG.U      = 0x0;
	ret
.L299:
	
__IfxI2c_resetFifo_function_end:
	.size	IfxI2c_resetFifo,__IfxI2c_resetFifo_function_end-IfxI2c_resetFifo
.L134:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_resetModule',code,cluster('IfxI2c_resetModule')
	.sect	'.text.IfxI2c.IfxI2c_resetModule'
	.align	2
	
	.global	IfxI2c_resetModule

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   203      i2c->FIFOCFG.B.TXFC = 0U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   204      i2c->FIFOCFG.B.RXFC = 0U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   205      i2c->FIFOCFG.B.TXBS = 0U;
; Function IfxI2c_resetModule
.L63:
IfxI2c_resetModule:	.type	func
	mov.aa	a15,a4
.L337:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   206      i2c->FIFOCFG.B.RXBS = 0U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   207      i2c->FIFOCFG.B.TXFA = 0U;
	call	IfxScuWdt_getCpuWatchdogPassword
.L336:
	mov	d8,d2
.L339:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   208      i2c->FIFOCFG.B.RXFA = 0U;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   209  }
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L338:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   210  
	fcall	.cocofun_20
.L340:
	ld.bu	d15,[+a3]20
.L487:
	fcall	.cocofun_18
	st.b	[+a3]20,d15
.L488:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   211  
	fcall	.cocofun_20
	ld.bu	d15,[+a3]24
.L489:
	fcall	.cocofun_18
	st.b	[+a3]24,d15
.L490:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   212  void IfxI2c_resetModule(Ifx_I2C *i2c)
	mov	d4,d8
	call	IfxScuWdt_setCpuEndinit
.L341:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   213  {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   214      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	fcall	.cocofun_20
.L342:
	lea	a2,[a3]20
.L21:
	ld.bu	d15,[a2]
.L491:
	jz.t	d15:1,.L21
.L492:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   215  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   216      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   217      i2c->KRST0.B.RST = 1;           /* Only if both Kernel reset bits are set a reset is executed */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   218      i2c->KRST1.B.RST = 1;
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L343:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   219      IfxScuWdt_setCpuEndinit(passwd);
	fcall	.cocofun_20
.L344:
	ld.bu	d15,[+a3]28
.L493:
	fcall	.cocofun_18
.L494:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   220  
	mov	d4,d8
	st.b	[+a3]28,d15
.L345:
	j	IfxScuWdt_setCpuEndinit
.L301:
	
__IfxI2c_resetModule_function_end:
	.size	IfxI2c_resetModule,__IfxI2c_resetModule_function_end-IfxI2c_resetModule
.L139:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_setBaudrate',code,cluster('IfxI2c_setBaudrate')
	.sect	'.text.IfxI2c.IfxI2c_setBaudrate'
	.align	2
	
	.global	IfxI2c_setBaudrate

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   221      while (0 == i2c->KRST0.B.RSTSTAT)   /* Wait until reset is executed */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   222  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   223      {}
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   224  
; Function IfxI2c_setBaudrate
.L65:
IfxI2c_setBaudrate:	.type	func
	mov.aa	a15,a4
.L347:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   225      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   226      i2c->KRSTCLR.B.CLR = 1;         /* Clear Kernel reset status bit */
	mov	d8,d4
	call	IfxScuCcu_getBaud1Frequency
.L346:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   227      IfxScuWdt_setCpuEndinit(passwd);
	ld.bu	d15,[a15]1
.L350:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   228  }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   229  
	utof	d15,d15
.L351:
	div.f	d15,d2,d15
.L499:
	div.f	d15,d15,d8
.L500:
	movh	d0,#16448
.L501:
	sub.f	d15,d15,d0
.L502:
	movh	d0,#16128
.L503:
	mul.f	d0,d15,d0
.L352:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   230  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   231  void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   232  {
	movh	d8,#16576
.L348:
	cmp.f	d15,d0,d8
.L353:
	jnz.t	d15:0,.L22
.L504:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   233      float32 fKernel = IfxScuCcu_getBaud1Frequency();
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   234      uint8   rmc     = i2c->CLC1.B.RMC;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   235      float32 dec;
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   236      dec = (((fKernel / rmc) / baudrate) - 3) / 2;     // always: Inc = 1
	ld.w	d8,.15.cnt
.L354:
	cmp.f	d15,d0,d8
.L355:
	and	d15,#6
.L356:
	cmovn	d8,d15,d0
.L22:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   237  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   238      // dec:inc must be at least 6
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   239      if (dec < 6)
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   240      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   241          dec = 6;
	call	IfxScuWdt_getCpuWatchdogPassword
.L349:
	mov	d9,d2
.L358:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   242      }
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   243      else if (dec > (1 << IFX_I2C_FDIVCFG_DEC_LEN) - 1)
	mov	d4,d9
	call	IfxScuWdt_clearCpuEndinit
.L357:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   244      {
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   245          dec = (1 << IFX_I2C_FDIVCFG_DEC_LEN) - 1;
	mov	d15,#1
	st.b	[a15]26,d15
.L505:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   246      }
	movh	d0,#16128
.L506:
	ld.hu	d15,[a15]24
.L507:
	add.f	d4,d8,d0
	call	__f_ftous
.L508:
	insert	d15,d15,d2,#0,#11
	st.h	[a15]24,d15
.L509:

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   247  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   248      uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   249  
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   250      IfxScuWdt_clearCpuEndinit(pwd);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   251      /* Baudrate configuration */
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   252      i2c->FDIVCFG.B.INC           = 1;
	mov	d4,d9
.L359:
	ld.bu	d15,[a15]64
.L510:
	or	d15,#63
	st.b	[a15]64,d15
.L511:
	ld.bu	d15,[a15]65
.L512:
	or	d15,#128
	st.b	[a15]65,d15
.L513:
	ld.bu	d15,[a15]65
.L514:
	or	d15,#64
	st.b	[a15]65,d15
.L515:
	mov	d15,#32
	st.b	[a15]67,d15
.L516:
	j	IfxScuWdt_setCpuEndinit
.L304:
	
__IfxI2c_setBaudrate_function_end:
	.size	IfxI2c_setBaudrate,__IfxI2c_setBaudrate_function_end-IfxI2c_setBaudrate
.L144:
	; End of function
	
	.calls	'IfxI2c_setBaudrate','__f_ftous'
	.calls	'IfxI2c_disableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_disableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_disableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_enableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_enableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_enableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_getBaudrate','IfxScuCcu_getBaud1Frequency'
	.calls	'IfxI2c_initSclSdaPin','IfxPort_setPinMode'
	.calls	'IfxI2c_initSclSdaPin','IfxPort_setPinPadDriver'
	.calls	'IfxI2c_resetModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_resetModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_resetModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_setBaudrate','IfxScuCcu_getBaud1Frequency'
	.calls	'IfxI2c_setBaudrate','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_setBaudrate','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_setBaudrate','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_configureAsMaster','.cocofun_19'
	.calls	'IfxI2c_configureAsMaster','.cocofun_17'
	.calls	'IfxI2c_disableModule','.cocofun_20'
	.calls	'IfxI2c_disableModule','.cocofun_18'
	.calls	'.cocofun_18','.cocofun_20'
	.calls	'IfxI2c_enableBurstDataTransferInterrupt','.cocofun_16'
	.calls	'IfxI2c_enableErrorInterrupt','.cocofun_16'
	.calls	'IfxI2c_enableLastBurstDataTransferInterrupt','.cocofun_16'
	.calls	'IfxI2c_enableLastSingleDataTransferInterrupt','.cocofun_16'
	.calls	'IfxI2c_enableModule','.cocofun_20'
	.calls	'IfxI2c_enableProtocolInterrupt','.cocofun_16'
	.calls	'IfxI2c_enableSingleDataTransferInterrupt','.cocofun_16'
	.calls	'IfxI2c_resetFifo','.cocofun_17'
	.calls	'IfxI2c_resetModule','.cocofun_20'
	.calls	'IfxI2c_resetModule','.cocofun_18'
	.calls	'IfxI2c_configureAsMaster','',0
	.calls	'.cocofun_19','',0
	.calls	'.cocofun_17','',0
	.calls	'IfxI2c_disableModule','',0
	.calls	'.cocofun_20','',0
	.calls	'.cocofun_18','',0
	.calls	'IfxI2c_enableBurstDataTransferInterrupt','',0
	.calls	'.cocofun_16','',0
	.calls	'IfxI2c_enableErrorInterrupt','',0
	.calls	'IfxI2c_enableLastBurstDataTransferInterrupt','',0
	.calls	'IfxI2c_enableLastSingleDataTransferInterrupt','',0
	.calls	'IfxI2c_enableModule','',0
	.calls	'IfxI2c_enableProtocolInterrupt','',0
	.calls	'IfxI2c_enableSingleDataTransferInterrupt','',0
	.calls	'IfxI2c_getBaudrate','',0
	.calls	'IfxI2c_initSclSdaPin','',0
	.calls	'IfxI2c_releaseBus','',0
	.calls	'IfxI2c_resetFifo','',0
	.calls	'IfxI2c_resetModule','',0
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxPort_setPinMode
	.extern	IfxPort_setPinPadDriver
	.extern	IfxScuCcu_getBaud1Frequency
	.extern	__f_ftous
	.calls	'IfxI2c_setBaudrate','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L67:
	.word	88781
	.half	3
	.word	.L68
	.byte	4
.L66:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L69
	.byte	2
	.byte	'unsigned int',0,4,7,2
	.byte	'int',0,4,5
.L247:
	.byte	2
	.byte	'unsigned char',0,1,8
.L182:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,2,239,8,16,4,4
	.byte	'ENDINIT',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'PW',0,2
	.word	190
	.byte	14,0,2,35,0,4
	.byte	'REL',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,2,130,17,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	212
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,2,248,8,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	2,6,2,35,0,4
	.byte	'IR0',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'DR',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'IR1',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'UR',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PAR',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'TCR',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'TCTR',0,1
	.word	173
	.byte	7,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,2,141,17,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	348
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,2,135,9,16,4,4
	.byte	'AE',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'OE',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'IS0',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'DS',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'TO',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'IS1',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'US',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PAS',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'TCS',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'TCT',0,1
	.word	173
	.byte	7,0,2,35,1,4
	.byte	'TIM',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,2,152,17,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	592
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU',0,2,204,17,25,12,6
	.byte	'CON0',0
	.word	308
	.byte	4,2,35,0,6
	.byte	'CON1',0
	.word	552
	.byte	4,2,35,4,6
	.byte	'SR',0
	.word	783
	.byte	4,2,35,8,0,7
	.word	823
	.byte	8
	.word	886
	.byte	9
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,1,130,3,17,1,1,10
	.byte	'watchdog',0,1,130,3,65
	.word	891
	.byte	10
	.byte	'password',0,1,130,3,82
	.word	190
	.byte	11,0,9
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,1,222,3,17,1,1,10
	.byte	'watchdog',0,1,222,3,63
	.word	891
	.byte	10
	.byte	'password',0,1,222,3,80
	.word	190
	.byte	11,0,12
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,1,187,3,19
	.word	190
	.byte	1,1,10
	.byte	'watchdog',0,1,187,3,74
	.word	891
	.byte	11,0,9
	.byte	'__stopPerfCounters',0,3,3,217,1,17,1,1,11,0,2
	.byte	'unsigned long long int',0,8,7,13
	.byte	'void',0
.L226:
	.byte	8
	.word	1176
	.byte	12
	.byte	'__ld64',0,3,4,110,19
	.word	1150
	.byte	1,1,10
	.byte	'addr',0,4,110,32
	.word	1182
	.byte	11,0,9
	.byte	'__st64',0,3,4,118,17,1,1,10
	.byte	'addr',0,4,118,30
	.word	1182
	.byte	10
	.byte	'value',0,4,118,43
	.word	1150
	.byte	11,0,14,6,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_1',0,1,15
	.byte	'IfxCpu_ResourceCpu_2',0,2,15
	.byte	'IfxCpu_ResourceCpu_none',0,3,0,12
	.byte	'IfxCpu_getCoreIndex',0,3,5,170,5,31
	.word	1263
	.byte	1,1,11,0,12
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,185,4,20
	.word	173
	.byte	1,1,11,0,2
	.byte	'unsigned long int',0,4,7,12
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,190,5,19
	.word	1440
	.byte	1,1,10
	.byte	'address',0,5,190,5,55
	.word	1440
	.byte	11,0,12
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,198,5,20
	.word	173
	.byte	1,1,10
	.byte	'address',0,5,198,5,70
	.word	1440
	.byte	11,0,9
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,153,7,17,1,1,10
	.byte	'address',0,5,153,7,56
	.word	1440
	.byte	10
	.byte	'count',0,5,153,7,72
	.word	1440
	.byte	11,0,3
	.byte	'_Ifx_P_OUT_Bits',0,8,143,3,16,4,4
	.byte	'P0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'P2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'P3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'P4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'P5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'P6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'P7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'P8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'P9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'P10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'P11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'P12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'P13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'P14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'P15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,8,250,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	1669
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMR_Bits',0,8,169,2,16,4,4
	.byte	'PS0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'PS2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'PS3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'PS4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'PS5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'PS6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PS7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'PS8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'PS9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'PS10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'PS11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'PS12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'PS13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'PS14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'PS15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'PCL0',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'PCL2',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'PCL3',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'PCL4',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'PCL5',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'PCL6',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'PCL7',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'PCL8',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'PCL9',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'PCL10',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'PCL11',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'PCL12',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'PCL13',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'PCL14',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'PCL15',0,1
	.word	173
	.byte	1,0,2,35,3,0,5,8,184,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	1985
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_ID_Bits',0,8,110,16,4,4
	.byte	'MODREV',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,8,156,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2556
	.byte	4,2,35,0,0,16,4
	.word	173
	.byte	17,3,0,3
	.byte	'_Ifx_P_IOCR0_Bits',0,8,140,1,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	3,5,2,35,0,4
	.byte	'PC0',0,1
	.word	173
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	173
	.byte	3,5,2,35,1,4
	.byte	'PC1',0,1
	.word	173
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	173
	.byte	3,5,2,35,2,4
	.byte	'PC2',0,1
	.word	173
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	3,5,2,35,3,4
	.byte	'PC3',0,1
	.word	173
	.byte	5,0,2,35,3,0,5,8,178,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2684
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IOCR4_Bits',0,8,166,1,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	3,5,2,35,0,4
	.byte	'PC4',0,1
	.word	173
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	173
	.byte	3,5,2,35,1,4
	.byte	'PC5',0,1
	.word	173
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	173
	.byte	3,5,2,35,2,4
	.byte	'PC6',0,1
	.word	173
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	3,5,2,35,3,4
	.byte	'PC7',0,1
	.word	173
	.byte	5,0,2,35,3,0,5,8,200,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2899
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IOCR8_Bits',0,8,179,1,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	3,5,2,35,0,4
	.byte	'PC8',0,1
	.word	173
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	173
	.byte	3,5,2,35,1,4
	.byte	'PC9',0,1
	.word	173
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	173
	.byte	3,5,2,35,2,4
	.byte	'PC10',0,1
	.word	173
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	3,5,2,35,3,4
	.byte	'PC11',0,1
	.word	173
	.byte	5,0,2,35,3,0,5,8,211,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3114
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IOCR12_Bits',0,8,153,1,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	3,5,2,35,0,4
	.byte	'PC12',0,1
	.word	173
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	173
	.byte	3,5,2,35,1,4
	.byte	'PC13',0,1
	.word	173
	.byte	5,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	173
	.byte	3,5,2,35,2,4
	.byte	'PC14',0,1
	.word	173
	.byte	5,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	3,5,2,35,3,4
	.byte	'PC15',0,1
	.word	173
	.byte	5,0,2,35,3,0,5,8,189,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3331
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_IN_Bits',0,8,118,16,4,4
	.byte	'P0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'P2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'P3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'P4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'P5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'P6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'P7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'P8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'P9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'P10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'P11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'P12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'P13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'P14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'P15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,8,167,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3551
	.byte	4,2,35,0,0,16,24
	.word	173
	.byte	17,23,0,3
	.byte	'_Ifx_P_PDR0_Bits',0,8,204,3,16,4,4
	.byte	'PD0',0,1
	.word	173
	.byte	3,5,2,35,0,4
	.byte	'PL0',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'PD1',0,1
	.word	173
	.byte	3,1,2,35,0,4
	.byte	'PL1',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'PD2',0,1
	.word	173
	.byte	3,5,2,35,1,4
	.byte	'PL2',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'PD3',0,1
	.word	173
	.byte	3,1,2,35,1,4
	.byte	'PL3',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'PD4',0,1
	.word	173
	.byte	3,5,2,35,2,4
	.byte	'PL4',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'PD5',0,1
	.word	173
	.byte	3,1,2,35,2,4
	.byte	'PL5',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'PD6',0,1
	.word	173
	.byte	3,5,2,35,3,4
	.byte	'PL6',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'PD7',0,1
	.word	173
	.byte	3,1,2,35,3,4
	.byte	'PL7',0,1
	.word	173
	.byte	1,0,2,35,3,0,5,8,155,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3874
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_PDR1_Bits',0,8,225,3,16,4,4
	.byte	'PD8',0,1
	.word	173
	.byte	3,5,2,35,0,4
	.byte	'PL8',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'PD9',0,1
	.word	173
	.byte	3,1,2,35,0,4
	.byte	'PL9',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'PD10',0,1
	.word	173
	.byte	3,5,2,35,1,4
	.byte	'PL10',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'PD11',0,1
	.word	173
	.byte	3,1,2,35,1,4
	.byte	'PL11',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'PD12',0,1
	.word	173
	.byte	3,5,2,35,2,4
	.byte	'PL12',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'PD13',0,1
	.word	173
	.byte	3,1,2,35,2,4
	.byte	'PL13',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'PD14',0,1
	.word	173
	.byte	3,5,2,35,3,4
	.byte	'PL14',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'PD15',0,1
	.word	173
	.byte	3,1,2,35,3,4
	.byte	'PL15',0,1
	.word	173
	.byte	1,0,2,35,3,0,5,8,166,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4178
	.byte	4,2,35,0,0,16,8
	.word	173
	.byte	17,7,0,3
	.byte	'_Ifx_P_ESR_Bits',0,8,88,16,4,4
	.byte	'EN0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,8,145,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4503
	.byte	4,2,35,0,0,16,12
	.word	173
	.byte	17,11,0,3
	.byte	'_Ifx_P_PDISC_Bits',0,8,182,3,16,4,4
	.byte	'PDIS0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PDIS1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'PDIS2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'PDIS3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'PDIS4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'PDIS5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'PDIS6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PDIS7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'PDIS8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'PDIS9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'PDIS10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'PDIS11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'PDIS12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'PDIS13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'PDIS14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'PDIS15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,8,144,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4843
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_PCSR_Bits',0,8,165,3,16,4,4
	.byte	'SEL0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SEL1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'SEL2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'SEL3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'SEL4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'SEL5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'SEL6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	190
	.byte	3,6,2,35,0,4
	.byte	'SEL10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'SEL11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,4
	.word	150
	.byte	19,1,2,35,0,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,5,8,133,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5209
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR0_Bits',0,8,206,2,16,4,4
	.byte	'PS0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'PS2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'PS3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,5,8,206,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5479
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR4_Bits',0,8,227,2,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	4,4,2,35,0,4
	.byte	'PS4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'PS5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'PS6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PS7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	150
	.byte	24,0,2,35,0,0,5,8,228,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5626
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR8_Bits',0,8,238,2,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'PS8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'PS9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'PS10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'PS11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,4
	.word	150
	.byte	20,0,2,35,0,0,5,8,239,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5795
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR12_Bits',0,8,216,2,16,4,4
	.byte	'reserved_0',0,2
	.word	190
	.byte	12,4,2,35,0,4
	.byte	'PS12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'PS13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'PS14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'PS15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,8,217,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5967
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR0_Bits',0,8,232,1,16,4,4
	.byte	'reserved_0',0,2
	.word	190
	.byte	16,0,2,35,0,4
	.byte	'PCL0',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'PCL2',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'PCL3',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'reserved_20',0,2
	.word	190
	.byte	12,0,2,35,2,0,5,8,140,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6142
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR4_Bits',0,8,253,1,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	20,12,2,35,0,4
	.byte	'PCL4',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'PCL5',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'PCL6',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'PCL7',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	8,0,2,35,3,0,5,8,162,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6316
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR8_Bits',0,8,136,2,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	24,8,2,35,0,4
	.byte	'PCL8',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'PCL9',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'PCL10',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'PCL11',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	173
	.byte	4,0,2,35,3,0,5,8,173,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6490
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR12_Bits',0,8,243,1,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	28,4,2,35,0,4
	.byte	'PCL12',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'PCL13',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'PCL14',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'PCL15',0,1
	.word	173
	.byte	1,0,2,35,3,0,5,8,151,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6666
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMSR_Bits',0,8,249,2,16,4,4
	.byte	'PS0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'PS2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'PS3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'PS4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'PS5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'PS6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PS7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'PS8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'PS9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'PS10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'PS11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'PS12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'PS13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'PS14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'PS15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,8,195,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6822
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_OMCR_Bits',0,8,147,2,16,4,4
	.byte	'reserved_0',0,2
	.word	190
	.byte	16,0,2,35,0,4
	.byte	'PCL0',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'PCL2',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'PCL3',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'PCL4',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'PCL5',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'PCL6',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'PCL7',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'PCL8',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'PCL9',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'PCL10',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'PCL11',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'PCL12',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'PCL13',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'PCL14',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'PCL15',0,1
	.word	173
	.byte	1,0,2,35,3,0,5,8,129,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7155
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_LPCR0_Bits',0,8,192,1,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,5,8,222,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7503
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_LPCR1_Bits',0,8,200,1,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,3
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,8,208,1,16,4,4
	.byte	'RDIS_CTRL',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'RX_DIS',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'TERM',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'LRXTERM',0,1
	.word	173
	.byte	5,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	150
	.byte	24,0,2,35,0,0,5,8,233,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7627
	.byte	4,2,35,0,6
	.byte	'B_P21',0
	.word	7711
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_LPCR2_Bits',0,8,218,1,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'LVDSR',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'LVDSRL',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,1
	.word	173
	.byte	2,4,2,35,1,4
	.byte	'TDIS_CTRL',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'TX_DIS',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'TX_PD',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'TX_PWDPD',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,8,246,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7891
	.byte	4,2,35,0,0,16,76
	.word	173
	.byte	17,75,0,3
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,82,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	32,0,2,35,0,0,5,8,134,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8144
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,45,16,4,4
	.byte	'EN0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	173
	.byte	1,0,2,35,3,0,5,8,251,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8231
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_P',0,8,185,6,25,128,2,6
	.byte	'OUT',0
	.word	1945
	.byte	4,2,35,0,6
	.byte	'OMR',0
	.word	2516
	.byte	4,2,35,4,6
	.byte	'ID',0
	.word	2635
	.byte	4,2,35,8,6
	.byte	'reserved_C',0
	.word	2675
	.byte	4,2,35,12,6
	.byte	'IOCR0',0
	.word	2859
	.byte	4,2,35,16,6
	.byte	'IOCR4',0
	.word	3074
	.byte	4,2,35,20,6
	.byte	'IOCR8',0
	.word	3291
	.byte	4,2,35,24,6
	.byte	'IOCR12',0
	.word	3511
	.byte	4,2,35,28,6
	.byte	'reserved_20',0
	.word	2675
	.byte	4,2,35,32,6
	.byte	'IN',0
	.word	3825
	.byte	4,2,35,36,6
	.byte	'reserved_28',0
	.word	3865
	.byte	24,2,35,40,6
	.byte	'PDR0',0
	.word	4138
	.byte	4,2,35,64,6
	.byte	'PDR1',0
	.word	4454
	.byte	4,2,35,68,6
	.byte	'reserved_48',0
	.word	4494
	.byte	8,2,35,72,6
	.byte	'ESR',0
	.word	4794
	.byte	4,2,35,80,6
	.byte	'reserved_54',0
	.word	4834
	.byte	12,2,35,84,6
	.byte	'PDISC',0
	.word	5169
	.byte	4,2,35,96,6
	.byte	'PCSR',0
	.word	5439
	.byte	4,2,35,100,6
	.byte	'reserved_68',0
	.word	4494
	.byte	8,2,35,104,6
	.byte	'OMSR0',0
	.word	5586
	.byte	4,2,35,112,6
	.byte	'OMSR4',0
	.word	5755
	.byte	4,2,35,116,6
	.byte	'OMSR8',0
	.word	5927
	.byte	4,2,35,120,6
	.byte	'OMSR12',0
	.word	6102
	.byte	4,2,35,124,6
	.byte	'OMCR0',0
	.word	6276
	.byte	4,3,35,128,1,6
	.byte	'OMCR4',0
	.word	6450
	.byte	4,3,35,132,1,6
	.byte	'OMCR8',0
	.word	6626
	.byte	4,3,35,136,1,6
	.byte	'OMCR12',0
	.word	6782
	.byte	4,3,35,140,1,6
	.byte	'OMSR',0
	.word	7115
	.byte	4,3,35,144,1,6
	.byte	'OMCR',0
	.word	7463
	.byte	4,3,35,148,1,6
	.byte	'reserved_98',0
	.word	4494
	.byte	8,3,35,152,1,6
	.byte	'LPCR0',0
	.word	7587
	.byte	4,3,35,160,1,6
	.byte	'LPCR1',0
	.word	7836
	.byte	4,3,35,164,1,6
	.byte	'LPCR2',0
	.word	8095
	.byte	4,3,35,168,1,6
	.byte	'reserved_A4',0
	.word	8135
	.byte	76,3,35,172,1,6
	.byte	'ACCEN1',0
	.word	8191
	.byte	4,3,35,248,1,6
	.byte	'ACCEN0',0
	.word	8758
	.byte	4,3,35,252,1,0,7
	.word	8798
	.byte	8
	.word	9401
	.byte	14,7,114,9,1,15
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,15
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,14,7,100,9,1,15
	.byte	'IfxPort_OutputIdx_general',0,128,1,15
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,15
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,15
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,15
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,15
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,15
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,15
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0
.L259:
	.byte	9
	.byte	'IfxPort_setPinModeOutput',0,3,7,176,4,17,1,1
.L262:
	.byte	10
	.byte	'port',0,7,176,4,49
	.word	9406
.L264:
	.byte	10
	.byte	'pinIndex',0,7,176,4,61
	.word	173
.L266:
	.byte	10
	.byte	'mode',0,7,176,4,90
	.word	9411
.L268:
	.byte	10
	.byte	'index',0,7,176,4,114
	.word	9480
.L270:
	.byte	11,0,14,7,152,1,9,4,15
	.byte	'IfxPort_State_notChanged',0,0,15
	.byte	'IfxPort_State_high',0,1,15
	.byte	'IfxPort_State_low',0,128,128,4,15
	.byte	'IfxPort_State_toggled',0,129,128,4,0,9
	.byte	'IfxPort_setPinState',0,3,7,182,4,17,1,1,10
	.byte	'port',0,7,182,4,44
	.word	9406
	.byte	10
	.byte	'pinIndex',0,7,182,4,56
	.word	173
	.byte	10
	.byte	'action',0,7,182,4,80
	.word	9793
	.byte	11,0,3
	.byte	'_Ifx_SRC_SRCR_Bits',0,10,45,16,4,4
	.byte	'SRPN',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	173
	.byte	2,6,2,35,1,4
	.byte	'SRE',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'TOS',0,1
	.word	173
	.byte	2,3,2,35,1,4
	.byte	'reserved_13',0,1
	.word	173
	.byte	3,0,2,35,1,4
	.byte	'ECC',0,1
	.word	173
	.byte	6,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	173
	.byte	2,0,2,35,2,4
	.byte	'SRR',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'CLRR',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'SETR',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'IOV',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'IOVCLR',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'SWS',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'SWSCLR',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	173
	.byte	1,0,2,35,3,0,5,10,70,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	9974
	.byte	4,2,35,0,0,7
	.word	10264
	.byte	8
	.word	10303
	.byte	9
	.byte	'IfxSrc_clearRequest',0,3,9,230,1,17,1,1,10
	.byte	'src',0,9,230,1,60
	.word	10308
	.byte	11,0,9
	.byte	'IfxSrc_enable',0,3,9,248,1,17,1,1,10
	.byte	'src',0,9,248,1,54
	.word	10308
	.byte	11,0
.L186:
	.byte	14,11,49,9,1,15
	.byte	'IfxSrc_Tos_cpu0',0,0,15
	.byte	'IfxSrc_Tos_cpu1',0,1,15
	.byte	'IfxSrc_Tos_cpu2',0,2,15
	.byte	'IfxSrc_Tos_dma',0,3,0,9
	.byte	'IfxSrc_init',0,3,9,254,1,17,1,1,10
	.byte	'src',0,9,254,1,52
	.word	10308
	.byte	10
	.byte	'typOfService',0,9,254,1,68
	.word	10393
	.byte	10
	.byte	'priority',0,9,254,1,95
	.word	190
	.byte	18,11,0,0,3
	.byte	'_Ifx_I2C_CLC1_Bits',0,13,110,16,4,4
	.byte	'DISR',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'DISS',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'SPEN',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'EDIS',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'SBWE',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'FSOE',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	173
	.byte	2,0,2,35,0,4
	.byte	'RMC',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,13,211,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10547
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_ID_Bits',0,13,228,1,16,4,4
	.byte	'MOD_REV',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'MODNUMBER',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,13,204,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10768
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_RUNCTRL_Bits',0,13,239,2,16,4,4
	.byte	'RUN',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	150
	.byte	31,0,2,35,0,0,5,13,230,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10895
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_ENDDCTRL_Bits',0,13,132,1,16,4,4
	.byte	'SETRSC',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SETEND',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,5,13,222,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11001
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_FDIVCFG_Bits',0,13,170,1,16,4,4
	.byte	'DEC',0,2
	.word	190
	.byte	11,5,2,35,0,4
	.byte	'reserved_11',0,1
	.word	173
	.byte	5,0,2,35,1,4
	.byte	'INC',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	8,0,2,35,3,0,5,13,138,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11129
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_FDIVHIGHCFG_Bits',0,13,179,1,16,4,4
	.byte	'DEC',0,2
	.word	190
	.byte	11,5,2,35,0,4
	.byte	'reserved_11',0,1
	.word	173
	.byte	5,0,2,35,1,4
	.byte	'INC',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	8,0,2,35,3,0,5,13,149,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11274
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_ADDRCFG_Bits',0,13,88,16,4,4
	.byte	'ADR',0,2
	.word	190
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	173
	.byte	6,0,2,35,1,4
	.byte	'TBAM',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'GCE',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'MCE',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'MnS',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'SONA',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'SOPE',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'reserved_22',0,2
	.word	190
	.byte	10,0,2,35,2,0,5,13,178,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11423
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_BUSSTAT_Bits',0,13,102,16,4,4
	.byte	'BS',0,1
	.word	173
	.byte	2,6,2,35,0,4
	.byte	'RnW',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,4
	.word	150
	.byte	29,0,2,35,0,0,5,13,189,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11645
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_FIFOCFG_Bits',0,13,195,1,16,4,4
	.byte	'RXBS',0,1
	.word	173
	.byte	2,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	2,4,2,35,0,4
	.byte	'TXBS',0,1
	.word	173
	.byte	2,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	173
	.byte	2,0,2,35,0,4
	.byte	'RXFA',0,1
	.word	173
	.byte	2,6,2,35,1,4
	.byte	'reserved_10',0,1
	.word	173
	.byte	2,4,2,35,1,4
	.byte	'TXFA',0,1
	.word	173
	.byte	2,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	173
	.byte	2,0,2,35,1,4
	.byte	'RXFC',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'TXFC',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	190
	.byte	14,0,2,35,2,0,5,13,171,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11764
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_MRPSCTRL_Bits',0,13,174,2,16,4,4
	.byte	'MRPS',0,2
	.word	190
	.byte	14,2,2,35,0,4
	.byte	'reserved_14',0,4
	.word	150
	.byte	18,0,2,35,0,0,5,13,164,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12042
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_RPSSTAT_Bits',0,13,232,2,16,4,4
	.byte	'RPS',0,2
	.word	190
	.byte	14,2,2,35,0,4
	.byte	'reserved_14',0,4
	.word	150
	.byte	18,0,2,35,0,0,5,13,219,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12151
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_TPSCTRL_Bits',0,13,138,3,16,4,4
	.byte	'TPS',0,2
	.word	190
	.byte	14,2,2,35,0,4
	.byte	'reserved_14',0,4
	.word	150
	.byte	18,0,2,35,0,0,5,13,135,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12258
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_FFSSTAT_Bits',0,13,188,1,16,4,4
	.byte	'FFS',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,5,13,160,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12365
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_TIMCFG_Bits',0,13,252,2,16,4,4
	.byte	'SDA_DEL_HD_DAT',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'HS_SDA_DEL_HD_DAT',0,2
	.word	190
	.byte	3,7,2,35,0,4
	.byte	'SCL_DEL_HD_STA',0,1
	.word	173
	.byte	3,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	173
	.byte	2,2,2,35,1,4
	.byte	'EN_SCL_LOW_LEN',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'FS_SCL_LOW',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'HS_SDA_DEL',0,1
	.word	173
	.byte	3,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	173
	.byte	5,0,2,35,2,4
	.byte	'SCL_LOW_LEN',0,1
	.word	173
	.byte	8,0,2,35,3,0,5,13,252,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12471
	.byte	4,2,35,0,0,16,28
	.word	173
	.byte	17,27,0,3
	.byte	'_Ifx_I2C_ERRIRQSM_Bits',0,13,150,1,16,4,4
	.byte	'RXF_UFL',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'RXF_OFL',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'TXF_UFL',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'TXF_OFL',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,5,13,244,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12768
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_ERRIRQSS_Bits',0,13,160,1,16,4,4
	.byte	'RXF_UFL',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'RXF_OFL',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'TXF_UFL',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'TXF_OFL',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,5,13,255,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12936
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_ERRIRQSC_Bits',0,13,140,1,16,4,4
	.byte	'RXF_UFL',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'RXF_OFL',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'TXF_UFL',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'TXF_OFL',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,5,13,233,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13104
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_PIRQSM_Bits',0,13,194,2,16,4,4
	.byte	'AM',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'GC',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'MC',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'AL',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'NACK',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'TX_END',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'RX',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,4
	.word	150
	.byte	25,0,2,35,0,0,5,13,186,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13272
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_PIRQSS_Bits',0,13,207,2,16,4,4
	.byte	'AM',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'GC',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'MC',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'AL',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'NACK',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'TX_END',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'RX',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,4
	.word	150
	.byte	25,0,2,35,0,0,5,13,197,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13466
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_PIRQSC_Bits',0,13,181,2,16,4,4
	.byte	'AM',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'GC',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'MC',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'AL',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'NACK',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'TX_END',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'RX',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,4
	.word	150
	.byte	25,0,2,35,0,0,5,13,175,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13660
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_RIS_Bits',0,13,220,2,16,4,4
	.byte	'LSREQ_INT',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SREQ_INT',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'LBREQ_INT',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'BREQ_INT',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'I2C_ERR_INT',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'I2C_P_INT',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,5,13,208,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13854
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_IMSC_Bits',0,13,236,1,16,4,4
	.byte	'LSREQ_INT',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SREQ_INT',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'LBREQ_INT',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'BREQ_INT',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'I2C_ERR_INT',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'I2C_P_INT',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,5,13,215,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14067
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_MIS_Bits',0,13,154,2,16,4,4
	.byte	'LSREQ_INT',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SREQ_INT',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'LBREQ_INT',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'BREQ_INT',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'I2C_ERR_INT',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'I2C_P_INT',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,5,13,142,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14281
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_ICR_Bits',0,13,218,1,16,4,4
	.byte	'LSREQ_INT',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SREQ_INT',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'LBREQ_INT',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'BREQ_INT',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,5,13,193,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14494
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_ISR_Bits',0,13,248,1,16,4,4
	.byte	'LSREQ_INT',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SREQ_INT',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'LBREQ_INT',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'BREQ_INT',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'I2C_ERR_INT',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'I2C_P_INT',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,5,13,226,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14663
	.byte	4,2,35,0,0,16,236,254,1
	.word	173
	.byte	17,235,254,1,0,3
	.byte	'_Ifx_I2C_TXD_Bits',0,13,145,3,16,4,4
	.byte	'TXD',0,4
	.word	150
	.byte	32,0,2,35,0,0,5,13,146,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14889
	.byte	4,2,35,0,0,16,252,127
	.word	173
	.byte	17,251,127,0,3
	.byte	'_Ifx_I2C_RXD_Bits',0,13,246,2,16,4,4
	.byte	'RXD',0,4
	.word	150
	.byte	32,0,2,35,0,0,5,13,241,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14980
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_CLC_Bits',0,13,124,16,4,4
	.byte	'DISR',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'DISS',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,5,13,200,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15060
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_MODID_Bits',0,13,166,2,16,4,4
	.byte	'MOD_REV',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'MOD_TYPE',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	190
	.byte	16,0,2,35,2,0,5,13,153,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15178
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_GPCTL_Bits',0,13,211,1,16,4,4
	.byte	'PISEL',0,1
	.word	173
	.byte	3,5,2,35,0,4
	.byte	'reserved_3',0,4
	.word	150
	.byte	29,0,2,35,0,0,5,13,182,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15305
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_ACCEN0_Bits',0,13,45,16,4,4
	.byte	'EN0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	173
	.byte	1,0,2,35,3,0,5,13,156,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15411
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_ACCEN1_Bits',0,13,82,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	32,0,2,35,0,0,5,13,167,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15980
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_KRST0_Bits',0,13,132,2,16,4,4
	.byte	'RST',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'RSTSTAT',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,5,13,237,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16069
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_KRST1_Bits',0,13,140,2,16,4,4
	.byte	'RST',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	150
	.byte	31,0,2,35,0,0,5,13,248,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16192
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_I2C_KRSTCLR_Bits',0,13,147,2,16,4,4
	.byte	'CLR',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	150
	.byte	31,0,2,35,0,0,5,13,131,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16296
	.byte	4,2,35,0,0,16,224,1
	.word	173
	.byte	17,223,1,0,3
	.byte	'_Ifx_I2C',0,13,165,6,25,128,130,4,6
	.byte	'CLC1',0
	.word	10728
	.byte	4,2,35,0,6
	.byte	'reserved_4',0
	.word	2675
	.byte	4,2,35,4,6
	.byte	'ID',0
	.word	10855
	.byte	4,2,35,8,6
	.byte	'reserved_C',0
	.word	2675
	.byte	4,2,35,12,6
	.byte	'RUNCTRL',0
	.word	10961
	.byte	4,2,35,16,6
	.byte	'ENDDCTRL',0
	.word	11089
	.byte	4,2,35,20,6
	.byte	'FDIVCFG',0
	.word	11234
	.byte	4,2,35,24,6
	.byte	'FDIVHIGHCFG',0
	.word	11383
	.byte	4,2,35,28,6
	.byte	'ADDRCFG',0
	.word	11605
	.byte	4,2,35,32,6
	.byte	'BUSSTAT',0
	.word	11724
	.byte	4,2,35,36,6
	.byte	'FIFOCFG',0
	.word	12002
	.byte	4,2,35,40,6
	.byte	'MRPSCTRL',0
	.word	12111
	.byte	4,2,35,44,6
	.byte	'RPSSTAT',0
	.word	12218
	.byte	4,2,35,48,6
	.byte	'TPSCTRL',0
	.word	12325
	.byte	4,2,35,52,6
	.byte	'FFSSTAT',0
	.word	12431
	.byte	4,2,35,56,6
	.byte	'reserved_3C',0
	.word	2675
	.byte	4,2,35,60,6
	.byte	'TIMCFG',0
	.word	12719
	.byte	4,2,35,64,6
	.byte	'reserved_44',0
	.word	12759
	.byte	28,2,35,68,6
	.byte	'ERRIRQSM',0
	.word	12896
	.byte	4,2,35,96,6
	.byte	'ERRIRQSS',0
	.word	13064
	.byte	4,2,35,100,6
	.byte	'ERRIRQSC',0
	.word	13232
	.byte	4,2,35,104,6
	.byte	'reserved_6C',0
	.word	2675
	.byte	4,2,35,108,6
	.byte	'PIRQSM',0
	.word	13426
	.byte	4,2,35,112,6
	.byte	'PIRQSS',0
	.word	13620
	.byte	4,2,35,116,6
	.byte	'PIRQSC',0
	.word	13814
	.byte	4,2,35,120,6
	.byte	'reserved_7C',0
	.word	2675
	.byte	4,2,35,124,6
	.byte	'RIS',0
	.word	14027
	.byte	4,3,35,128,1,6
	.byte	'IMSC',0
	.word	14241
	.byte	4,3,35,132,1,6
	.byte	'MIS',0
	.word	14454
	.byte	4,3,35,136,1,6
	.byte	'ICR',0
	.word	14623
	.byte	4,3,35,140,1,6
	.byte	'ISR',0
	.word	14836
	.byte	4,3,35,144,1,6
	.byte	'reserved_94',0
	.word	14876
	.byte	236,254,1,3,35,148,1,6
	.byte	'TXD',0
	.word	14929
	.byte	4,4,35,128,128,2,6
	.byte	'reserved_8004',0
	.word	14969
	.byte	252,127,4,35,132,128,2,6
	.byte	'RXD',0
	.word	15020
	.byte	4,4,35,128,128,3,6
	.byte	'reserved_C004',0
	.word	14969
	.byte	252,127,4,35,132,128,3,6
	.byte	'CLC',0
	.word	15138
	.byte	4,4,35,128,128,4,6
	.byte	'MODID',0
	.word	15265
	.byte	4,4,35,132,128,4,6
	.byte	'GPCTL',0
	.word	15371
	.byte	4,4,35,136,128,4,6
	.byte	'ACCEN0',0
	.word	15940
	.byte	4,4,35,140,128,4,6
	.byte	'ACCEN1',0
	.word	16029
	.byte	4,4,35,144,128,4,6
	.byte	'KRST0',0
	.word	16152
	.byte	4,4,35,148,128,4,6
	.byte	'KRST1',0
	.word	16256
	.byte	4,4,35,152,128,4,6
	.byte	'KRSTCLR',0
	.word	16362
	.byte	4,4,35,156,128,4,6
	.byte	'reserved_10020',0
	.word	16402
	.byte	224,1,4,35,160,128,4,0,7
	.word	16413
.L171:
	.byte	8
	.word	17234
	.byte	14,12,87,9,1,15
	.byte	'IfxI2c_ProtocolInterruptSource_addressMatch',0,0,15
	.byte	'IfxI2c_ProtocolInterruptSource_generalCall',0,1,15
	.byte	'IfxI2c_ProtocolInterruptSource_masterCode',0,2,15
	.byte	'IfxI2c_ProtocolInterruptSource_arbitrationLost',0,3,15
	.byte	'IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived',0,4,15
	.byte	'IfxI2c_ProtocolInterruptSource_transmissionEnd',0,5,15
	.byte	'IfxI2c_ProtocolInterruptSource_receiveMode',0,6,0
.L292:
	.byte	9
	.byte	'IfxI2c_clearProtocolInterruptSource',0,3,12,217,4,17,1,1
.L294:
	.byte	10
	.byte	'i2c',0,12,217,4,62
	.word	17239
.L296:
	.byte	10
	.byte	'source',0,12,217,4,98
	.word	17244
.L298:
	.byte	11,0
.L189:
	.byte	12
	.byte	'IfxI2c_getBurstDataTransferSrcPointer',0,3,12,197,5,35
	.word	10308
	.byte	1,1
.L191:
	.byte	10
	.byte	'i2c',0,12,197,5,82
	.word	17239
.L193:
	.byte	11,0,14,12,53,9,1,15
	.byte	'IfxI2c_BusStatus_idle',0,0,15
	.byte	'IfxI2c_BusStatus_started',0,1,15
	.byte	'IfxI2c_BusStatus_busyMaster',0,2,15
	.byte	'IfxI2c_BusStatus_remoteSlave',0,3,0,12
	.byte	'IfxI2c_getBusStatus',0,3,12,216,5,29
	.word	17724
	.byte	1,1,10
	.byte	'i2c',0,12,216,5,58
	.word	17239
	.byte	11,0
.L199:
	.byte	12
	.byte	'IfxI2c_getErrorSrcPointer',0,3,12,234,5,35
	.word	10308
	.byte	1,1
.L201:
	.byte	10
	.byte	'i2c',0,12,234,5,70
	.word	17239
.L203:
	.byte	11,0
.L208:
	.byte	12
	.byte	'IfxI2c_getLastBurstDataTransferSrcPointer',0,3,12,247,5,35
	.word	10308
	.byte	1,1
.L210:
	.byte	10
	.byte	'i2c',0,12,247,5,86
	.word	17239
.L212:
	.byte	11,0
.L217:
	.byte	12
	.byte	'IfxI2c_getLastSingleDataTransferSrcPointer',0,3,12,138,6,35
	.word	10308
	.byte	1,1
.L219:
	.byte	10
	.byte	'i2c',0,12,138,6,87
	.word	17239
.L221:
	.byte	11,0
.L285:
	.byte	12
	.byte	'IfxI2c_getProtocolInterruptSourceStatus',0,3,12,163,6,20
	.word	173
	.byte	1,1
.L287:
	.byte	10
	.byte	'i2c',0,12,163,6,69
	.word	17239
.L289:
	.byte	10
	.byte	'source',0,12,163,6,105
	.word	17244
.L291:
	.byte	11,0
.L230:
	.byte	12
	.byte	'IfxI2c_getProtocolSrcPointer',0,3,12,169,6,35
	.word	10308
	.byte	1,1
.L232:
	.byte	10
	.byte	'i2c',0,12,169,6,73
	.word	17239
.L234:
	.byte	11,0
.L239:
	.byte	12
	.byte	'IfxI2c_getSingleDataTransferSrcPointer',0,3,12,182,6,35
	.word	10308
	.byte	1,1
.L241:
	.byte	10
	.byte	'i2c',0,12,182,6,83
	.word	17239
.L243:
	.byte	11,0,14,12,72,9,1,15
	.byte	'IfxI2c_PinSelect_a',0,0,15
	.byte	'IfxI2c_PinSelect_b',0,1,15
	.byte	'IfxI2c_PinSelect_c',0,2,15
	.byte	'IfxI2c_PinSelect_d',0,3,15
	.byte	'IfxI2c_PinSelect_e',0,4,15
	.byte	'IfxI2c_PinSelect_f',0,5,15
	.byte	'IfxI2c_PinSelect_g',0,6,15
	.byte	'IfxI2c_PinSelect_h',0,7,0
.L272:
	.byte	9
	.byte	'IfxI2c_setPinSelection',0,3,12,213,6,17,1,1
.L275:
	.byte	10
	.byte	'i2c',0,12,213,6,49
	.word	17239
.L277:
	.byte	10
	.byte	'pisel',0,12,213,6,71
	.word	18286
.L279:
	.byte	11,0
.L174:
	.byte	9
	.byte	'IfxI2c_stop',0,3,12,243,6,17,1,1
.L176:
	.byte	10
	.byte	'i2c',0,12,243,6,38
	.word	17239
.L178:
	.byte	11,0,19
	.word	166
	.byte	20
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,21
	.word	18556
	.byte	0,7
	.word	150
	.byte	8
	.word	150
	.byte	22
	.byte	'__cmpswapw',0
	.word	18598
	.byte	1,1,1,1,23
	.byte	'p',0
	.word	18603
	.byte	23
	.byte	'value',0
	.word	150
	.byte	23
	.byte	'compare',0
	.word	150
	.byte	0,24
	.word	896
	.byte	25
	.word	936
	.byte	25
	.word	954
	.byte	11,0,24
	.word	974
	.byte	25
	.word	1012
	.byte	25
	.word	1030
	.byte	11,0,26
	.byte	'IfxScuWdt_clearCpuEndinit',0,1,187,1,17,1,1,1,1,10
	.byte	'password',0,1,187,1,50
	.word	190
	.byte	0,26
	.byte	'IfxScuWdt_setCpuEndinit',0,1,209,1,17,1,1,1,1,10
	.byte	'password',0,1,209,1,48
	.word	190
	.byte	0,24
	.word	1050
	.byte	25
	.word	1101
	.byte	11,0,27
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,1,221,2,19
	.word	190
	.byte	1,1,1,1,24
	.word	1121
	.byte	11,0,24
	.word	1187
	.byte	25
	.word	1205
	.byte	11,0,24
	.word	1220
	.byte	25
	.word	1234
	.byte	25
	.word	1247
	.byte	11,0,24
	.word	1364
	.byte	11,0,24
	.word	1398
	.byte	11,0,24
	.word	1461
	.byte	25
	.word	1502
	.byte	11,0,24
	.word	1521
	.byte	25
	.word	1576
	.byte	11,0,24
	.word	1595
	.byte	25
	.word	1635
	.byte	25
	.word	1652
	.byte	11,0,24
	.word	9697
	.byte	25
	.word	9730
	.byte	25
	.word	9744
	.byte	25
	.word	9762
	.byte	25
	.word	9776
	.byte	11,0,24
	.word	9896
	.byte	25
	.word	9924
	.byte	25
	.word	9938
	.byte	25
	.word	9956
	.byte	11,0,14,7,75,9,1,15
	.byte	'IfxPort_Mode_inputNoPullDevice',0,0,15
	.byte	'IfxPort_Mode_inputPullDown',0,8,15
	.byte	'IfxPort_Mode_inputPullUp',0,16,15
	.byte	'IfxPort_Mode_outputPushPullGeneral',0,128,1,15
	.byte	'IfxPort_Mode_outputPushPullAlt1',0,136,1,15
	.byte	'IfxPort_Mode_outputPushPullAlt2',0,144,1,15
	.byte	'IfxPort_Mode_outputPushPullAlt3',0,152,1,15
	.byte	'IfxPort_Mode_outputPushPullAlt4',0,160,1,15
	.byte	'IfxPort_Mode_outputPushPullAlt5',0,168,1,15
	.byte	'IfxPort_Mode_outputPushPullAlt6',0,176,1,15
	.byte	'IfxPort_Mode_outputPushPullAlt7',0,184,1,15
	.byte	'IfxPort_Mode_outputOpenDrainGeneral',0,192,1,15
	.byte	'IfxPort_Mode_outputOpenDrainAlt1',0,200,1,15
	.byte	'IfxPort_Mode_outputOpenDrainAlt2',0,208,1,15
	.byte	'IfxPort_Mode_outputOpenDrainAlt3',0,216,1,15
	.byte	'IfxPort_Mode_outputOpenDrainAlt4',0,224,1,15
	.byte	'IfxPort_Mode_outputOpenDrainAlt5',0,232,1,15
	.byte	'IfxPort_Mode_outputOpenDrainAlt6',0,240,1,15
	.byte	'IfxPort_Mode_outputOpenDrainAlt7',0,248,1,0,26
	.byte	'IfxPort_setPinMode',0,7,227,2,17,1,1,1,1,10
	.byte	'port',0,7,227,2,43
	.word	9406
	.byte	10
	.byte	'pinIndex',0,7,227,2,55
	.word	173
	.byte	10
	.byte	'mode',0,7,227,2,78
	.word	18998
	.byte	0
.L257:
	.byte	14,7,124,9,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,15
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,15
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,15
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,15
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,15
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,15
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,15
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,15
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,26
	.byte	'IfxPort_setPinPadDriver',0,7,242,2,17,1,1,1,1,10
	.byte	'port',0,7,242,2,48
	.word	9406
	.byte	10
	.byte	'pinIndex',0,7,242,2,60
	.word	173
	.byte	10
	.byte	'padDriver',0,7,242,2,88
	.word	19742
	.byte	0
.L244:
	.byte	2
	.byte	'float',0,4,4,27
	.byte	'IfxScuCcu_getBaud1Frequency',0,14,197,6,20
	.word	20241
	.byte	1,1,1,1,24
	.word	10313
	.byte	25
	.word	10341
	.byte	11,0,24
	.word	10356
	.byte	25
	.word	10378
	.byte	11,0,24
	.word	10470
	.byte	25
	.word	10490
	.byte	25
	.word	10503
	.byte	25
	.word	10525
	.byte	18,28
	.word	10313
	.byte	25
	.word	10341
	.byte	29
	.word	10354
	.byte	0,11,0,0,24
	.word	17584
	.byte	25
	.word	17628
	.byte	25
	.word	17641
	.byte	11,0,24
	.word	17659
	.byte	25
	.word	17709
	.byte	11,0,24
	.word	17842
	.byte	25
	.word	17874
	.byte	11,0,24
	.word	17889
	.byte	25
	.word	17927
	.byte	11,0,24
	.word	17942
	.byte	25
	.word	17996
	.byte	11,0,24
	.word	18011
	.byte	25
	.word	18066
	.byte	11,0,24
	.word	18081
	.byte	25
	.word	18133
	.byte	25
	.word	18146
	.byte	11,0,24
	.word	18164
	.byte	25
	.word	18205
	.byte	11,0,24
	.word	18220
	.byte	25
	.word	18271
	.byte	11,0,24
	.word	18460
	.byte	25
	.word	18491
	.byte	25
	.word	18504
	.byte	11,0,24
	.word	18521
	.byte	25
	.word	18541
	.byte	11,0,30,7,170,1,9,8,6
	.byte	'port',0
	.word	9406
	.byte	4,2,35,0,6
	.byte	'pinIndex',0
	.word	173
	.byte	1,2,35,4,0,14,16,94,9,1,15
	.byte	'Ifx_RxSel_a',0,0,15
	.byte	'Ifx_RxSel_b',0,1,15
	.byte	'Ifx_RxSel_c',0,2,15
	.byte	'Ifx_RxSel_d',0,3,15
	.byte	'Ifx_RxSel_e',0,4,15
	.byte	'Ifx_RxSel_f',0,5,15
	.byte	'Ifx_RxSel_g',0,6,15
	.byte	'Ifx_RxSel_h',0,7,0,30,15,39,15,16,6
	.byte	'module',0
	.word	17239
	.byte	4,2,35,0,6
	.byte	'pin',0
	.word	20502
	.byte	8,2,35,4,6
	.byte	'inSelect',0
	.word	20541
	.byte	1,2,35,12,6
	.byte	'outSelect',0
	.word	9480
	.byte	1,2,35,13,0,19
	.word	20659
.L253:
	.byte	8
	.word	20731
	.byte	30,15,48,15,16,6
	.byte	'module',0
	.word	17239
	.byte	4,2,35,0,6
	.byte	'pin',0
	.word	20502
	.byte	8,2,35,4,6
	.byte	'inSelect',0
	.word	20541
	.byte	1,2,35,12,6
	.byte	'outSelect',0
	.word	9480
	.byte	1,2,35,13,0,19
	.word	20741
.L255:
	.byte	8
	.word	20813
	.byte	2
	.byte	'short int',0,2,5,31
	.byte	'__wchar_t',0,17,1,1
	.word	20823
	.byte	31
	.byte	'__size_t',0,17,1,1
	.word	150
	.byte	31
	.byte	'__ptrdiff_t',0,17,1,1
	.word	166
	.byte	32,1,8
	.word	20891
	.byte	31
	.byte	'__codeptr',0,17,1,1
	.word	20893
	.byte	31
	.byte	'uint8',0,18,89,24
	.word	173
	.byte	31
	.byte	'sint16',0,18,90,24
	.word	20823
	.byte	31
	.byte	'uint16',0,18,91,24
	.word	190
	.byte	2
	.byte	'long int',0,4,5,31
	.byte	'sint32',0,18,92,24
	.word	20960
	.byte	31
	.byte	'uint32',0,18,93,24
	.word	1440
	.byte	31
	.byte	'float32',0,18,94,24
	.word	20241
	.byte	31
	.byte	'boolean',0,18,104,24
	.word	173
	.byte	2
	.byte	'long long int',0,8,5,31
	.byte	'sint64',0,16,36,28
	.word	21034
	.byte	31
	.byte	'uint64',0,16,37,28
	.word	1150
	.byte	31
	.byte	'pvoid',0,16,40,28
	.word	1182
	.byte	31
	.byte	'Ifx_TickTime',0,16,43,28
	.word	21034
	.byte	31
	.byte	'Ifx_SizeT',0,16,56,16
	.word	20823
	.byte	31
	.byte	'Ifx_Priority',0,16,67,16
	.word	190
	.byte	31
	.byte	'Ifx_RxSel',0,16,104,3
	.word	20541
	.byte	14,19,131,11,9,1,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,31
	.byte	'IfxScu_CCUCON0_CLKSEL',0,19,135,11,3
	.word	21173
	.byte	14,19,145,11,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,31
	.byte	'IfxScu_WDTCON1_IR',0,19,150,11,3
	.word	21270
	.byte	3
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,2,45,16,4,4
	.byte	'EN0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_ACCEN0_Bits',0,2,79,3
	.word	21392
	.byte	3
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,2,82,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN1_Bits',0,2,85,3
	.word	21949
	.byte	3
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,2,88,16,4,4
	.byte	'STM0DIS',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'STM1DIS',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'STM2DIS',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,4
	.word	150
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,2,94,3
	.word	22026
	.byte	3
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,2,97,16,4,4
	.byte	'BAUD1DIV',0,1
	.word	173
	.byte	4,4,2,35,0,4
	.byte	'BAUD2DIV',0,1
	.word	173
	.byte	4,0,2,35,0,4
	.byte	'SRIDIV',0,1
	.word	173
	.byte	4,4,2,35,1,4
	.byte	'LPDIV',0,1
	.word	173
	.byte	4,0,2,35,1,4
	.byte	'SPBDIV',0,1
	.word	173
	.byte	4,4,2,35,2,4
	.byte	'FSI2DIV',0,1
	.word	173
	.byte	2,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	173
	.byte	2,0,2,35,2,4
	.byte	'FSIDIV',0,1
	.word	173
	.byte	2,6,2,35,3,4
	.byte	'ADCCLKSEL',0,1
	.word	173
	.byte	2,4,2,35,3,4
	.byte	'CLKSEL',0,1
	.word	173
	.byte	2,2,2,35,3,4
	.byte	'UP',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON0_Bits',0,2,111,3
	.word	22162
	.byte	3
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,2,114,16,4,4
	.byte	'CANDIV',0,1
	.word	173
	.byte	4,4,2,35,0,4
	.byte	'ERAYDIV',0,1
	.word	173
	.byte	4,0,2,35,0,4
	.byte	'STMDIV',0,1
	.word	173
	.byte	4,4,2,35,1,4
	.byte	'GTMDIV',0,1
	.word	173
	.byte	4,0,2,35,1,4
	.byte	'ETHDIV',0,1
	.word	173
	.byte	4,4,2,35,2,4
	.byte	'ASCLINFDIV',0,1
	.word	173
	.byte	4,0,2,35,2,4
	.byte	'ASCLINSDIV',0,1
	.word	173
	.byte	4,4,2,35,3,4
	.byte	'INSEL',0,1
	.word	173
	.byte	2,2,2,35,3,4
	.byte	'UP',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON1_Bits',0,2,126,3
	.word	22440
	.byte	3
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,2,129,1,16,4,4
	.byte	'BBBDIV',0,1
	.word	173
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	26,2,2,35,0,4
	.byte	'UP',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON2_Bits',0,2,135,1,3
	.word	22678
	.byte	3
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,2,138,1,16,4,4
	.byte	'PLLDIV',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'PLLSEL',0,1
	.word	173
	.byte	2,0,2,35,0,4
	.byte	'PLLERAYDIV',0,1
	.word	173
	.byte	6,2,2,35,1,4
	.byte	'PLLERAYSEL',0,1
	.word	173
	.byte	2,0,2,35,1,4
	.byte	'SRIDIV',0,1
	.word	173
	.byte	6,2,2,35,2,4
	.byte	'SRISEL',0,1
	.word	173
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	5,3,2,35,3,4
	.byte	'SLCK',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'UP',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON3_Bits',0,2,150,1,3
	.word	22806
	.byte	3
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,2,153,1,16,4,4
	.byte	'SPBDIV',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'SPBSEL',0,1
	.word	173
	.byte	2,0,2,35,0,4
	.byte	'GTMDIV',0,1
	.word	173
	.byte	6,2,2,35,1,4
	.byte	'GTMSEL',0,1
	.word	173
	.byte	2,0,2,35,1,4
	.byte	'STMDIV',0,1
	.word	173
	.byte	6,2,2,35,2,4
	.byte	'STMSEL',0,1
	.word	173
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	5,3,2,35,3,4
	.byte	'SLCK',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'UP',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON4_Bits',0,2,165,1,3
	.word	23049
	.byte	3
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,2,168,1,16,4,4
	.byte	'MAXDIV',0,1
	.word	173
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	26,2,2,35,0,4
	.byte	'UP',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON5_Bits',0,2,174,1,3
	.word	23284
	.byte	3
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,2,177,1,16,4,4
	.byte	'CPU0DIV',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON6_Bits',0,2,181,1,3
	.word	23412
	.byte	3
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,2,184,1,16,4,4
	.byte	'CPU1DIV',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON7_Bits',0,2,188,1,3
	.word	23512
	.byte	3
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,2,191,1,16,4,4
	.byte	'CPU2DIV',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON8_Bits',0,2,195,1,3
	.word	23612
	.byte	3
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,2,198,1,16,4,4
	.byte	'ADCDIV',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'ADCSEL',0,1
	.word	173
	.byte	2,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	150
	.byte	21,3,2,35,0,4
	.byte	'SLCK',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'UP',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON9_Bits',0,2,206,1,3
	.word	23712
	.byte	3
	.byte	'_Ifx_SCU_CHIPID_Bits',0,2,209,1,16,4,4
	.byte	'CHREV',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'CHTEC',0,1
	.word	173
	.byte	2,0,2,35,0,4
	.byte	'CHID',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'EEA',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'UCODE',0,1
	.word	173
	.byte	7,0,2,35,2,4
	.byte	'FSIZE',0,1
	.word	173
	.byte	4,4,2,35,3,4
	.byte	'SP',0,1
	.word	173
	.byte	2,2,2,35,3,4
	.byte	'SEC',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CHIPID_Bits',0,2,220,1,3
	.word	23874
	.byte	3
	.byte	'_Ifx_SCU_DTSCON_Bits',0,2,223,1,16,4,4
	.byte	'PWD',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'START',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	2,4,2,35,0,4
	.byte	'CAL',0,4
	.word	150
	.byte	20,8,2,35,0,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	7,1,2,35,3,4
	.byte	'SLCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_DTSCON_Bits',0,2,231,1,3
	.word	24082
	.byte	3
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,2,234,1,16,4,4
	.byte	'LOWER',0,2
	.word	190
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	173
	.byte	5,1,2,35,1,4
	.byte	'LLU',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'UPPER',0,2
	.word	190
	.byte	10,6,2,35,2,4
	.byte	'reserved_26',0,1
	.word	173
	.byte	4,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'UOF',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_DTSLIM_Bits',0,2,243,1,3
	.word	24247
	.byte	3
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,2,246,1,16,4,4
	.byte	'RESULT',0,2
	.word	190
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	173
	.byte	4,2,2,35,1,4
	.byte	'RDY',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'BUSY',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,2,253,1,3
	.word	24430
	.byte	3
	.byte	'_Ifx_SCU_EICR_Bits',0,2,128,2,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	4,4,2,35,0,4
	.byte	'EXIS0',0,1
	.word	173
	.byte	3,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'FEN0',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'REN0',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'LDEN0',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'EIEN0',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'INP0',0,1
	.word	173
	.byte	3,1,2,35,1,4
	.byte	'reserved_15',0,4
	.word	150
	.byte	5,12,2,35,0,4
	.byte	'EXIS1',0,1
	.word	173
	.byte	3,1,2,35,2,4
	.byte	'reserved_23',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'FEN1',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'REN1',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'LDEN1',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'EIEN1',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'INP1',0,1
	.word	173
	.byte	3,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EICR_Bits',0,2,147,2,3
	.word	24584
	.byte	3
	.byte	'_Ifx_SCU_EIFR_Bits',0,2,150,2,16,4,4
	.byte	'INTF0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'INTF1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'INTF2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'INTF3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'INTF4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'INTF5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'INTF6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'INTF7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	150
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_EIFR_Bits',0,2,161,2,3
	.word	24948
	.byte	3
	.byte	'_Ifx_SCU_EMSR_Bits',0,2,164,2,16,4,4
	.byte	'POL',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'MODE',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'ENON',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'PSEL',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,2
	.word	190
	.byte	12,0,2,35,0,4
	.byte	'EMSF',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'SEMSF',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	173
	.byte	6,0,2,35,2,4
	.byte	'EMSFM',0,1
	.word	173
	.byte	2,6,2,35,3,4
	.byte	'SEMSFM',0,1
	.word	173
	.byte	2,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	173
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_EMSR_Bits',0,2,177,2,3
	.word	25159
	.byte	3
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,2,180,2,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	7,1,2,35,0,4
	.byte	'EDCON',0,2
	.word	190
	.byte	2,7,2,35,0,4
	.byte	'reserved_9',0,4
	.word	150
	.byte	23,0,2,35,0,0,31
	.byte	'Ifx_SCU_ESRCFG_Bits',0,2,185,2,3
	.word	25411
	.byte	3
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,2,188,2,16,4,4
	.byte	'ARI',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'ARC',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_ESROCFG_Bits',0,2,193,2,3
	.word	25529
	.byte	3
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,2,196,2,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	28,4,2,35,0,4
	.byte	'EVR13OFF',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'BPEVR13OFF',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVR13CON_Bits',0,2,203,2,3
	.word	25640
	.byte	3
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,2,206,2,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	28,4,2,35,0,4
	.byte	'EVR33OFF',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'BPEVR33OFF',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVR33CON_Bits',0,2,213,2,3
	.word	25803
	.byte	3
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,2,216,2,16,4,4
	.byte	'ADC13V',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'ADC33V',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'ADCSWDV',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	7,1,2,35,3,4
	.byte	'VAL',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,2,223,2,3
	.word	25966
	.byte	3
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,2,226,2,16,4,4
	.byte	'DVS13TRIM',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'DVS33TRIM',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	7,1,2,35,3,4
	.byte	'VAL',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,2,233,2,3
	.word	26124
	.byte	3
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,2,236,2,16,4,4
	.byte	'EVR13OVMOD',0,1
	.word	173
	.byte	2,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	2,4,2,35,0,4
	.byte	'EVR13UVMOD',0,1
	.word	173
	.byte	2,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	173
	.byte	2,0,2,35,0,4
	.byte	'EVR33OVMOD',0,1
	.word	173
	.byte	2,6,2,35,1,4
	.byte	'reserved_10',0,1
	.word	173
	.byte	2,4,2,35,1,4
	.byte	'EVR33UVMOD',0,1
	.word	173
	.byte	2,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	173
	.byte	2,0,2,35,1,4
	.byte	'SWDOVMOD',0,1
	.word	173
	.byte	2,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	173
	.byte	2,4,2,35,2,4
	.byte	'SWDUVMOD',0,1
	.word	173
	.byte	2,2,2,35,2,4
	.byte	'reserved_22',0,2
	.word	190
	.byte	8,2,2,35,2,4
	.byte	'SLCK',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,2,252,2,3
	.word	26289
	.byte	3
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,2,255,2,16,4,4
	.byte	'OSCTRIM',0,2
	.word	190
	.byte	10,6,2,35,0,4
	.byte	'OSCPTAT',0,1
	.word	173
	.byte	6,0,2,35,1,4
	.byte	'OSCANASEL',0,1
	.word	173
	.byte	4,4,2,35,2,4
	.byte	'HPBGTRIM',0,2
	.word	190
	.byte	7,5,2,35,2,4
	.byte	'HPBGCLKEN',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'OSC3V3',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	173
	.byte	2,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,2,137,3,3
	.word	26657
	.byte	3
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,2,140,3,16,4,4
	.byte	'EVR13OVVAL',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'EVR33OVVAL',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'SWDOVVAL',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	6,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVROVMON_Bits',0,2,148,3,3
	.word	26878
	.byte	3
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,2,151,3,16,4,4
	.byte	'RST13TRIM',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	150
	.byte	16,8,2,35,0,4
	.byte	'RST13OFF',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'BPRST13OFF',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'RST33OFF',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'BPRST33OFF',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'RSTSWDOFF',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'BPRSTSWDOFF',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,2,163,3,3
	.word	27057
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,2,166,3,16,4,4
	.byte	'SD5P',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'SD5I',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'SD5D',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,2,173,3,3
	.word	27322
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,2,176,3,16,4,4
	.byte	'SD33P',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'SD33I',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'SD33D',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,2,183,3,3
	.word	27475
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,2,186,3,16,4,4
	.byte	'CT5REG0',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'CT5REG1',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'CT5REG2',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,2,193,3,3
	.word	27631
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,2,196,3,16,4,4
	.byte	'CT5REG3',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'CT5REG4',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	15,1,2,35,2,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,2,202,3,3
	.word	27793
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,2,205,3,16,4,4
	.byte	'CT33REG0',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'CT33REG1',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'CT33REG2',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,2,212,3,3
	.word	27936
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,2,215,3,16,4,4
	.byte	'CT33REG3',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'CT33REG4',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	15,1,2,35,2,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,2,221,3,3
	.word	28101
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,2,224,3,16,4,4
	.byte	'SDFREQSPRD',0,2
	.word	190
	.byte	16,0,2,35,0,4
	.byte	'SDFREQ',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'SDSTEP',0,1
	.word	173
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	173
	.byte	2,2,2,35,3,4
	.byte	'SDSAMPLE',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,2,232,3,3
	.word	28246
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,2,235,3,16,4,4
	.byte	'DRVP',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'SDMINMAXDC',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'DRVN',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'SDLUT',0,1
	.word	173
	.byte	6,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,2,243,3,3
	.word	28427
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,2,246,3,16,4,4
	.byte	'SDPWMPRE',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'SDPID',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'SDVOKLVL',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,2,253,3,3
	.word	28601
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,2,128,4,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'SYNCDIV',0,1
	.word	173
	.byte	3,5,2,35,1,4
	.byte	'reserved_11',0,4
	.word	150
	.byte	20,1,2,35,0,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,2,134,4,3
	.word	28761
	.byte	3
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,2,137,4,16,4,4
	.byte	'EVR13',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'OV13',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'EVR33',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'OV33',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'OVSWD',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'UV13',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'UV33',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'UVSWD',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'EXTPASS13',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'EXTPASS33',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'BGPROK',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'reserved_11',0,4
	.word	150
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,2,151,4,3
	.word	28905
	.byte	3
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,2,154,4,16,4,4
	.byte	'EVR13TRIM',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'SDVOUTSEL',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	14,2,2,35,2,4
	.byte	'SLCK',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,2,161,4,3
	.word	29179
	.byte	3
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,2,164,4,16,4,4
	.byte	'EVR13UVVAL',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'EVR33UVVAL',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'SWDUVVAL',0,1
	.word	173
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	6,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,2,172,4,3
	.word	29334
	.byte	3
	.byte	'_Ifx_SCU_EXTCON_Bits',0,2,175,4,16,4,4
	.byte	'EN0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'SEL0',0,1
	.word	173
	.byte	4,2,2,35,0,4
	.byte	'reserved_6',0,2
	.word	190
	.byte	10,0,2,35,0,4
	.byte	'EN1',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'NSEL',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'SEL1',0,1
	.word	173
	.byte	4,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	173
	.byte	2,0,2,35,2,4
	.byte	'DIV1',0,1
	.word	173
	.byte	8,0,2,35,3,0,31
	.byte	'Ifx_SCU_EXTCON_Bits',0,2,186,4,3
	.word	29513
	.byte	3
	.byte	'_Ifx_SCU_FDR_Bits',0,2,189,4,16,4,4
	.byte	'STEP',0,2
	.word	190
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	173
	.byte	4,2,2,35,1,4
	.byte	'DM',0,1
	.word	173
	.byte	2,0,2,35,1,4
	.byte	'RESULT',0,2
	.word	190
	.byte	10,6,2,35,2,4
	.byte	'reserved_26',0,1
	.word	173
	.byte	5,1,2,35,3,4
	.byte	'DISCLK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_FDR_Bits',0,2,197,4,3
	.word	29731
	.byte	3
	.byte	'_Ifx_SCU_FMR_Bits',0,2,200,4,16,4,4
	.byte	'FS0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'FS1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'FS2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'FS3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'FS4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'FS5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'FS6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'FS7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'FC0',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'FC1',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'FC2',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'FC3',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'FC4',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'FC5',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'FC6',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'FC7',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	8,0,2,35,3,0,31
	.byte	'Ifx_SCU_FMR_Bits',0,2,220,4,3
	.word	29894
	.byte	3
	.byte	'_Ifx_SCU_ID_Bits',0,2,223,4,16,4,4
	.byte	'MODREV',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_ID_Bits',0,2,228,4,3
	.word	30230
	.byte	3
	.byte	'_Ifx_SCU_IGCR_Bits',0,2,231,4,16,4,4
	.byte	'IPEN00',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'IPEN01',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'IPEN02',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'IPEN03',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'IPEN04',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'IPEN05',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'IPEN06',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'IPEN07',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	173
	.byte	5,3,2,35,1,4
	.byte	'GEEN0',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'IGP0',0,1
	.word	173
	.byte	2,0,2,35,1,4
	.byte	'IPEN10',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'IPEN11',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'IPEN12',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'IPEN13',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'IPEN14',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'IPEN15',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'IPEN16',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'IPEN17',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	5,3,2,35,3,4
	.byte	'GEEN1',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'IGP1',0,1
	.word	173
	.byte	2,0,2,35,3,0,31
	.byte	'Ifx_SCU_IGCR_Bits',0,2,255,4,3
	.word	30337
	.byte	3
	.byte	'_Ifx_SCU_IN_Bits',0,2,130,5,16,4,4
	.byte	'P0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_IN_Bits',0,2,135,5,3
	.word	30789
	.byte	3
	.byte	'_Ifx_SCU_IOCR_Bits',0,2,138,5,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	4,4,2,35,0,4
	.byte	'PC0',0,1
	.word	173
	.byte	4,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	173
	.byte	4,4,2,35,1,4
	.byte	'PC1',0,1
	.word	173
	.byte	4,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_IOCR_Bits',0,2,145,5,3
	.word	30888
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,2,148,5,16,4,4
	.byte	'LBISTREQ',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'LBISTREQP',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'PATTERNS',0,2
	.word	190
	.byte	14,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,2,154,5,3
	.word	31038
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,2,157,5,16,4,4
	.byte	'SEED',0,4
	.word	150
	.byte	23,9,2,35,0,4
	.byte	'reserved_23',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'SPLITSH',0,1
	.word	173
	.byte	3,5,2,35,3,4
	.byte	'BODY',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'LBISTFREQU',0,1
	.word	173
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,2,164,5,3
	.word	31187
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,2,167,5,16,4,4
	.byte	'SIGNATURE',0,4
	.word	150
	.byte	24,8,2,35,0,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	7,1,2,35,3,4
	.byte	'LBISTDONE',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,2,172,5,3
	.word	31348
	.byte	3
	.byte	'_Ifx_SCU_LCLCON_Bits',0,2,175,5,16,4,4
	.byte	'reserved_0',0,2
	.word	190
	.byte	16,0,2,35,0,4
	.byte	'LS',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,2
	.word	190
	.byte	14,1,2,35,2,4
	.byte	'LSEN',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_LCLCON_Bits',0,2,181,5,3
	.word	31478
	.byte	3
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,2,184,5,16,4,4
	.byte	'LCLT0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'LCLT1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_LCLTEST_Bits',0,2,189,5,3
	.word	31610
	.byte	3
	.byte	'_Ifx_SCU_MANID_Bits',0,2,192,5,16,4,4
	.byte	'DEPT',0,1
	.word	173
	.byte	5,3,2,35,0,4
	.byte	'MANUF',0,2
	.word	190
	.byte	11,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_MANID_Bits',0,2,197,5,3
	.word	31725
	.byte	3
	.byte	'_Ifx_SCU_OMR_Bits',0,2,200,5,16,4,4
	.byte	'PS0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,2
	.word	190
	.byte	14,0,2,35,0,4
	.byte	'PCL0',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	190
	.byte	14,0,2,35,2,0,31
	.byte	'Ifx_SCU_OMR_Bits',0,2,208,5,3
	.word	31836
	.byte	3
	.byte	'_Ifx_SCU_OSCCON_Bits',0,2,211,5,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PLLLV',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'OSCRES',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'GAINSEL',0,1
	.word	173
	.byte	2,3,2,35,0,4
	.byte	'MODE',0,1
	.word	173
	.byte	2,1,2,35,0,4
	.byte	'SHBY',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'PLLHV',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'X1D',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'X1DEN',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	173
	.byte	4,0,2,35,1,4
	.byte	'OSCVAL',0,1
	.word	173
	.byte	5,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	173
	.byte	2,1,2,35,2,4
	.byte	'APREN',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'CAP0EN',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'CAP1EN',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'CAP2EN',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'CAP3EN',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	173
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_OSCCON_Bits',0,2,232,5,3
	.word	31994
	.byte	3
	.byte	'_Ifx_SCU_OUT_Bits',0,2,235,5,16,4,4
	.byte	'P0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_OUT_Bits',0,2,240,5,3
	.word	32406
	.byte	3
	.byte	'_Ifx_SCU_OVCCON_Bits',0,2,243,5,16,4,4
	.byte	'CSEL0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'CSEL1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'CSEL2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,2
	.word	190
	.byte	13,0,2,35,0,4
	.byte	'OVSTRT',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'OVSTP',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'DCINVAL',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	173
	.byte	5,0,2,35,2,4
	.byte	'OVCONF',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'POVCONF',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	173
	.byte	6,0,2,35,3,0,31
	.byte	'Ifx_SCU_OVCCON_Bits',0,2,128,6,3
	.word	32507
	.byte	3
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,2,131,6,16,4,4
	.byte	'OVEN0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'OVEN1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'OVEN2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,4
	.word	150
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,2,137,6,3
	.word	32774
	.byte	3
	.byte	'_Ifx_SCU_PDISC_Bits',0,2,140,6,16,4,4
	.byte	'PDIS0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PDIS1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_PDISC_Bits',0,2,145,6,3
	.word	32910
	.byte	3
	.byte	'_Ifx_SCU_PDR_Bits',0,2,148,6,16,4,4
	.byte	'PD0',0,1
	.word	173
	.byte	3,5,2,35,0,4
	.byte	'PL0',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'PD1',0,1
	.word	173
	.byte	3,1,2,35,0,4
	.byte	'PL1',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	150
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_PDR_Bits',0,2,155,6,3
	.word	33021
	.byte	3
	.byte	'_Ifx_SCU_PDRR_Bits',0,2,158,6,16,4,4
	.byte	'PDR0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PDR1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'PDR2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'PDR3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'PDR4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'PDR5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'PDR6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PDR7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	150
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_PDRR_Bits',0,2,169,6,3
	.word	33154
	.byte	3
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,2,172,6,16,4,4
	.byte	'VCOBYP',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'VCOPWD',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'MODEN',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'SETFINDIS',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'CLRFINDIS',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'OSCDISCDIS',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	190
	.byte	2,7,2,35,0,4
	.byte	'NDIV',0,1
	.word	173
	.byte	7,0,2,35,1,4
	.byte	'PLLPWD',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'RESLD',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	173
	.byte	5,0,2,35,2,4
	.byte	'PDIV',0,1
	.word	173
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	173
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_PLLCON0_Bits',0,2,189,6,3
	.word	33357
	.byte	3
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,2,192,6,16,4,4
	.byte	'K2DIV',0,1
	.word	173
	.byte	7,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'K3DIV',0,1
	.word	173
	.byte	7,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'K1DIV',0,1
	.word	173
	.byte	7,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	190
	.byte	9,0,2,35,2,0,31
	.byte	'Ifx_SCU_PLLCON1_Bits',0,2,200,6,3
	.word	33713
	.byte	3
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,2,203,6,16,4,4
	.byte	'MODCFG',0,2
	.word	190
	.byte	16,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_PLLCON2_Bits',0,2,207,6,3
	.word	33891
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,2,210,6,16,4,4
	.byte	'VCOBYP',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'VCOPWD',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	2,4,2,35,0,4
	.byte	'SETFINDIS',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'CLRFINDIS',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'OSCDISCDIS',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	190
	.byte	2,7,2,35,0,4
	.byte	'NDIV',0,1
	.word	173
	.byte	5,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	173
	.byte	2,0,2,35,1,4
	.byte	'PLLPWD',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'RESLD',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	173
	.byte	5,0,2,35,2,4
	.byte	'PDIV',0,1
	.word	173
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	173
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,2,227,6,3
	.word	33991
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,2,230,6,16,4,4
	.byte	'K2DIV',0,1
	.word	173
	.byte	7,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'K3DIV',0,1
	.word	173
	.byte	4,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	173
	.byte	4,0,2,35,1,4
	.byte	'K1DIV',0,1
	.word	173
	.byte	7,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	190
	.byte	9,0,2,35,2,0,31
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,2,238,6,3
	.word	34361
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,2,241,6,16,4,4
	.byte	'VCOBYST',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PWDSTAT',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'VCOLOCK',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'FINDIS',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'K1RDY',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'K2RDY',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,2,250,6,3
	.word	34547
	.byte	3
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,2,253,6,16,4,4
	.byte	'VCOBYST',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'VCOLOCK',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'FINDIS',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'K1RDY',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'K2RDY',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'MODRUN',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	150
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,2,136,7,3
	.word	34745
	.byte	3
	.byte	'_Ifx_SCU_PMCSR_Bits',0,2,139,7,16,4,4
	.byte	'REQSLP',0,1
	.word	173
	.byte	2,6,2,35,0,4
	.byte	'SMUSLP',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	173
	.byte	5,0,2,35,0,4
	.byte	'PMST',0,1
	.word	173
	.byte	3,5,2,35,1,4
	.byte	'reserved_11',0,4
	.word	150
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR_Bits',0,2,146,7,3
	.word	34978
	.byte	3
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,2,149,7,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'ESR1WKEN',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'PINAWKEN',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'PINBWKEN',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'ESR0DFEN',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'ESR0EDCON',0,1
	.word	173
	.byte	2,1,2,35,0,4
	.byte	'ESR1DFEN',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'ESR1EDCON',0,1
	.word	173
	.byte	2,6,2,35,1,4
	.byte	'PINADFEN',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'PINAEDCON',0,1
	.word	173
	.byte	2,3,2,35,1,4
	.byte	'PINBDFEN',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'PINBEDCON',0,1
	.word	173
	.byte	2,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'STBYRAMSEL',0,1
	.word	173
	.byte	2,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	173
	.byte	2,3,2,35,2,4
	.byte	'TRISTEN',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'TRISTREQ',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'PORSTDF',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'PWRWKEN',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'DCDCSYNC',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'BLNKFIL',0,1
	.word	173
	.byte	3,3,2,35,3,4
	.byte	'ESR0TRIST',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,2,175,7,3
	.word	35130
	.byte	3
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,2,178,7,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'CPUIDLSEL',0,1
	.word	173
	.byte	3,5,2,35,1,4
	.byte	'reserved_11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'IRADIS',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'reserved_13',0,4
	.word	150
	.byte	11,8,2,35,0,4
	.byte	'CPUSEL',0,1
	.word	173
	.byte	3,5,2,35,3,4
	.byte	'STBYEVEN',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'STBYEV',0,1
	.word	173
	.byte	3,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,2,189,7,3
	.word	35678
	.byte	3
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,2,192,7,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	2,6,2,35,0,4
	.byte	'ESR1WKP',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'ESR1OVRUN',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'PINAWKP',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'PINAOVRUN',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'PINBWKP',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PINBOVRUN',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'PWRWKP',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'PORSTDF',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'HWCFGEVR',0,1
	.word	173
	.byte	3,3,2,35,1,4
	.byte	'STBYRAM',0,1
	.word	173
	.byte	2,1,2,35,1,4
	.byte	'TRIST',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	173
	.byte	4,4,2,35,2,4
	.byte	'ESR1WKEN',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'PINAWKEN',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'PINBWKEN',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'PWRWKEN',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'BLNKFIL',0,1
	.word	173
	.byte	3,5,2,35,3,4
	.byte	'ESR0TRIST',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	173
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,2,214,7,3
	.word	35923
	.byte	3
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,2,217,7,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	2,6,2,35,0,4
	.byte	'ESR1WKPCLR',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'ESR1OVRUNCLR',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'PINAWKPCLR',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'PINAOVRUNCLR',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'PINBWKPCLR',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PINBOVRUNCLR',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'PWRWKPCLR',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,4
	.word	150
	.byte	23,0,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,2,228,7,3
	.word	36384
	.byte	3
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,2,231,7,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'CLRC',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,2
	.word	190
	.byte	10,4,2,35,0,4
	.byte	'CSS0',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'CSS1',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'CSS2',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'USRINFO',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_RSTCON2_Bits',0,2,241,7,3
	.word	36654
	.byte	3
	.byte	'_Ifx_SCU_RSTCON_Bits',0,2,244,7,16,4,4
	.byte	'ESR0',0,1
	.word	173
	.byte	2,6,2,35,0,4
	.byte	'ESR1',0,1
	.word	173
	.byte	2,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	173
	.byte	2,2,2,35,0,4
	.byte	'SMU',0,1
	.word	173
	.byte	2,0,2,35,0,4
	.byte	'SW',0,1
	.word	173
	.byte	2,6,2,35,1,4
	.byte	'STM0',0,1
	.word	173
	.byte	2,4,2,35,1,4
	.byte	'STM1',0,1
	.word	173
	.byte	2,2,2,35,1,4
	.byte	'STM2',0,1
	.word	173
	.byte	2,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_RSTCON_Bits',0,2,255,7,3
	.word	36863
	.byte	3
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,2,130,8,16,4,4
	.byte	'ESR0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'ESR1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'SMU',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'SW',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'STM0',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'STM1',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'STM2',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'PORST',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'CB0',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'CB1',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'CB3',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	173
	.byte	2,1,2,35,2,4
	.byte	'EVR13',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'EVR33',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'SWD',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	173
	.byte	2,4,2,35,3,4
	.byte	'STBYR',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	173
	.byte	3,0,2,35,3,0,31
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,2,153,8,3
	.word	37074
	.byte	3
	.byte	'_Ifx_SCU_SAFECON_Bits',0,2,156,8,16,4,4
	.byte	'HBT',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	150
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_SCU_SAFECON_Bits',0,2,160,8,3
	.word	37506
	.byte	3
	.byte	'_Ifx_SCU_STSTAT_Bits',0,2,163,8,16,4,4
	.byte	'HWCFG',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'FTM',0,1
	.word	173
	.byte	7,1,2,35,1,4
	.byte	'MODE',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'FCBAE',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'LUDIS',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'TRSTL',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'SPDEN',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	173
	.byte	3,0,2,35,2,4
	.byte	'RAMINT',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'reserved_25',0,1
	.word	173
	.byte	7,0,2,35,3,0,31
	.byte	'Ifx_SCU_STSTAT_Bits',0,2,176,8,3
	.word	37602
	.byte	3
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,2,179,8,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SWRSTREQ',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,2,184,8,3
	.word	37862
	.byte	3
	.byte	'_Ifx_SCU_SYSCON_Bits',0,2,187,8,16,4,4
	.byte	'CCTRIG0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'RAMINTM',0,1
	.word	173
	.byte	2,4,2,35,0,4
	.byte	'SETLUDIS',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	173
	.byte	3,0,2,35,0,4
	.byte	'DATM',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,4
	.word	150
	.byte	23,0,2,35,0,0,31
	.byte	'Ifx_SCU_SYSCON_Bits',0,2,196,8,3
	.word	37987
	.byte	3
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,2,199,8,16,4,4
	.byte	'ESR0T',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,2,206,8,3
	.word	38184
	.byte	3
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,2,209,8,16,4,4
	.byte	'ESR0T',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,2,216,8,3
	.word	38337
	.byte	3
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,2,219,8,16,4,4
	.byte	'ESR0T',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSET_Bits',0,2,226,8,3
	.word	38490
	.byte	3
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,2,229,8,16,4,4
	.byte	'ESR0T',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,2,236,8,3
	.word	38643
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,2,245,8,3
	.word	212
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,2,132,9,3
	.word	348
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,2,148,9,3
	.word	592
	.byte	3
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,2,151,9,16,4,4
	.byte	'ENDINIT',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'LCK',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'PW',0,2
	.word	190
	.byte	14,0,2,35,0,4
	.byte	'REL',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,2,157,9,3
	.word	38898
	.byte	3
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,2,160,9,16,4,4
	.byte	'CLRIRF',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'IR0',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'DR',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'IR1',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'UR',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PAR',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'TCR',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'TCTR',0,1
	.word	173
	.byte	7,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,2,173,9,3
	.word	39024
	.byte	3
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,2,176,9,16,4,4
	.byte	'AE',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'OE',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'IS0',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'DS',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'TO',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'IS1',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'US',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PAS',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'TCS',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'TCT',0,1
	.word	173
	.byte	7,0,2,35,1,4
	.byte	'TIM',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,2,189,9,3
	.word	39276
	.byte	5,2,197,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	21392
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN0',0,2,205,9,3
	.word	39495
	.byte	5,2,208,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	21949
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN1',0,2,216,9,3
	.word	39559
	.byte	5,2,219,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	22026
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ARSTDIS',0,2,227,9,3
	.word	39623
	.byte	5,2,230,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	22162
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON0',0,2,238,9,3
	.word	39688
	.byte	5,2,241,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	22440
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON1',0,2,249,9,3
	.word	39753
	.byte	5,2,252,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	22678
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON2',0,2,132,10,3
	.word	39818
	.byte	5,2,135,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	22806
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON3',0,2,143,10,3
	.word	39883
	.byte	5,2,146,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23049
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON4',0,2,154,10,3
	.word	39948
	.byte	5,2,157,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23284
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON5',0,2,165,10,3
	.word	40013
	.byte	5,2,168,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23412
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON6',0,2,176,10,3
	.word	40078
	.byte	5,2,179,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23512
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON7',0,2,187,10,3
	.word	40143
	.byte	5,2,190,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23612
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON8',0,2,198,10,3
	.word	40208
	.byte	5,2,201,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23712
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON9',0,2,209,10,3
	.word	40273
	.byte	5,2,212,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	23874
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CHIPID',0,2,220,10,3
	.word	40338
	.byte	5,2,223,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24082
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_DTSCON',0,2,231,10,3
	.word	40402
	.byte	5,2,234,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24247
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_DTSLIM',0,2,242,10,3
	.word	40466
	.byte	5,2,245,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24430
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_DTSSTAT',0,2,253,10,3
	.word	40530
	.byte	5,2,128,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24584
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EICR',0,2,136,11,3
	.word	40595
	.byte	5,2,139,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24948
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EIFR',0,2,147,11,3
	.word	40657
	.byte	5,2,150,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25159
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EMSR',0,2,158,11,3
	.word	40719
	.byte	5,2,161,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25411
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ESRCFG',0,2,169,11,3
	.word	40781
	.byte	5,2,172,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25529
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ESROCFG',0,2,180,11,3
	.word	40845
	.byte	5,2,183,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25640
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVR13CON',0,2,191,11,3
	.word	40910
	.byte	5,2,194,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25803
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVR33CON',0,2,202,11,3
	.word	40976
	.byte	5,2,205,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25966
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRADCSTAT',0,2,213,11,3
	.word	41042
	.byte	5,2,216,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26124
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRDVSTAT',0,2,224,11,3
	.word	41110
	.byte	5,2,227,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26289
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRMONCTRL',0,2,235,11,3
	.word	41177
	.byte	5,2,238,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26657
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVROSCCTRL',0,2,246,11,3
	.word	41245
	.byte	5,2,249,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26878
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVROVMON',0,2,129,12,3
	.word	41313
	.byte	5,2,132,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27057
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRRSTCON',0,2,140,12,3
	.word	41379
	.byte	5,2,143,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27322
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,2,151,12,3
	.word	41446
	.byte	5,2,154,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27475
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,2,162,12,3
	.word	41515
	.byte	5,2,165,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27631
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,2,173,12,3
	.word	41584
	.byte	5,2,176,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27793
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,2,184,12,3
	.word	41653
	.byte	5,2,187,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27936
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,2,195,12,3
	.word	41722
	.byte	5,2,198,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28101
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,2,206,12,3
	.word	41791
	.byte	5,2,209,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28246
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCTRL1',0,2,217,12,3
	.word	41860
	.byte	5,2,220,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28427
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCTRL2',0,2,228,12,3
	.word	41928
	.byte	5,2,231,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28601
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCTRL3',0,2,239,12,3
	.word	41996
	.byte	5,2,242,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28761
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCTRL4',0,2,250,12,3
	.word	42064
	.byte	5,2,253,12,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28905
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSTAT',0,2,133,13,3
	.word	42132
	.byte	5,2,136,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29179
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRTRIM',0,2,144,13,3
	.word	42197
	.byte	5,2,147,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29334
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRUVMON',0,2,155,13,3
	.word	42262
	.byte	5,2,158,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29513
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EXTCON',0,2,166,13,3
	.word	42328
	.byte	5,2,169,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29731
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_FDR',0,2,177,13,3
	.word	42392
	.byte	5,2,180,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29894
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_FMR',0,2,188,13,3
	.word	42453
	.byte	5,2,191,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30230
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ID',0,2,199,13,3
	.word	42514
	.byte	5,2,202,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30337
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_IGCR',0,2,210,13,3
	.word	42574
	.byte	5,2,213,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30789
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_IN',0,2,221,13,3
	.word	42636
	.byte	5,2,224,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30888
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_IOCR',0,2,232,13,3
	.word	42696
	.byte	5,2,235,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31038
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL0',0,2,243,13,3
	.word	42758
	.byte	5,2,246,13,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31187
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL1',0,2,254,13,3
	.word	42826
	.byte	5,2,129,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31348
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL2',0,2,137,14,3
	.word	42894
	.byte	5,2,140,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31478
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LCLCON',0,2,148,14,3
	.word	42962
	.byte	5,2,151,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31610
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LCLTEST',0,2,159,14,3
	.word	43026
	.byte	5,2,162,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31725
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_MANID',0,2,170,14,3
	.word	43091
	.byte	5,2,173,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31836
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OMR',0,2,181,14,3
	.word	43154
	.byte	5,2,184,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31994
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OSCCON',0,2,192,14,3
	.word	43215
	.byte	5,2,195,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32406
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OUT',0,2,203,14,3
	.word	43279
	.byte	5,2,206,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32507
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OVCCON',0,2,214,14,3
	.word	43340
	.byte	5,2,217,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32774
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OVCENABLE',0,2,225,14,3
	.word	43404
	.byte	5,2,228,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32910
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PDISC',0,2,236,14,3
	.word	43471
	.byte	5,2,239,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33021
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PDR',0,2,247,14,3
	.word	43534
	.byte	5,2,250,14,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33154
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PDRR',0,2,130,15,3
	.word	43595
	.byte	5,2,133,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33357
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLCON0',0,2,141,15,3
	.word	43657
	.byte	5,2,144,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33713
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLCON1',0,2,152,15,3
	.word	43722
	.byte	5,2,155,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33891
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLCON2',0,2,163,15,3
	.word	43787
	.byte	5,2,166,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33991
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLERAYCON0',0,2,174,15,3
	.word	43852
	.byte	5,2,177,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34361
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLERAYCON1',0,2,185,15,3
	.word	43921
	.byte	5,2,188,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34547
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLERAYSTAT',0,2,196,15,3
	.word	43990
	.byte	5,2,199,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34745
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLSTAT',0,2,207,15,3
	.word	44059
	.byte	5,2,210,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	34978
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR',0,2,218,15,3
	.word	44124
	.byte	5,2,221,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	35130
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWCR0',0,2,229,15,3
	.word	44187
	.byte	5,2,232,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	35678
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWCR1',0,2,240,15,3
	.word	44252
	.byte	5,2,243,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	35923
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWSTAT',0,2,251,15,3
	.word	44317
	.byte	5,2,254,15,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36384
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWSTATCLR',0,2,134,16,3
	.word	44383
	.byte	5,2,137,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36863
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_RSTCON',0,2,145,16,3
	.word	44452
	.byte	5,2,148,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	36654
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_RSTCON2',0,2,156,16,3
	.word	44516
	.byte	5,2,159,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37074
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_RSTSTAT',0,2,167,16,3
	.word	44581
	.byte	5,2,170,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37506
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SAFECON',0,2,178,16,3
	.word	44646
	.byte	5,2,181,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37602
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_STSTAT',0,2,189,16,3
	.word	44711
	.byte	5,2,192,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37862
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SWRSTCON',0,2,200,16,3
	.word	44775
	.byte	5,2,203,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	37987
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SYSCON',0,2,211,16,3
	.word	44841
	.byte	5,2,214,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38184
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPCLR',0,2,222,16,3
	.word	44905
	.byte	5,2,225,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38337
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPDIS',0,2,233,16,3
	.word	44970
	.byte	5,2,236,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38490
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSET',0,2,244,16,3
	.word	45035
	.byte	5,2,247,16,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38643
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSTAT',0,2,255,16,3
	.word	45100
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON0',0,2,138,17,3
	.word	308
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON1',0,2,149,17,3
	.word	552
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_SR',0,2,160,17,3
	.word	783
	.byte	5,2,163,17,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38898
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_CON0',0,2,171,17,3
	.word	45251
	.byte	5,2,174,17,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	39024
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_CON1',0,2,182,17,3
	.word	45318
	.byte	5,2,185,17,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	39276
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_SR',0,2,193,17,3
	.word	45385
	.byte	7
	.word	823
	.byte	31
	.byte	'Ifx_SCU_WDTCPU',0,2,209,17,3
	.word	45450
	.byte	3
	.byte	'_Ifx_SCU_WDTS',0,2,212,17,25,12,6
	.byte	'CON0',0
	.word	45251
	.byte	4,2,35,0,6
	.byte	'CON1',0
	.word	45318
	.byte	4,2,35,4,6
	.byte	'SR',0
	.word	45385
	.byte	4,2,35,8,0,7
	.word	45479
	.byte	31
	.byte	'Ifx_SCU_WDTS',0,2,217,17,3
	.word	45540
	.byte	16,8
	.word	40781
	.byte	17,1,0,16,12
	.word	44124
	.byte	17,2,0,7
	.word	45479
	.byte	16,36
	.word	823
	.byte	17,2,0,7
	.word	45590
	.byte	16,16
	.word	173
	.byte	17,15,0,16,40
	.word	173
	.byte	17,39,0,16,16
	.word	40595
	.byte	17,3,0,16,16
	.word	42574
	.byte	17,3,0,16,180,3
	.word	173
	.byte	17,179,3,0,3
	.byte	'_Ifx_SCU',0,2,230,17,25,128,8,6
	.byte	'reserved_0',0
	.word	4494
	.byte	8,2,35,0,6
	.byte	'ID',0
	.word	42514
	.byte	4,2,35,8,6
	.byte	'reserved_C',0
	.word	2675
	.byte	4,2,35,12,6
	.byte	'OSCCON',0
	.word	43215
	.byte	4,2,35,16,6
	.byte	'PLLSTAT',0
	.word	44059
	.byte	4,2,35,20,6
	.byte	'PLLCON0',0
	.word	43657
	.byte	4,2,35,24,6
	.byte	'PLLCON1',0
	.word	43722
	.byte	4,2,35,28,6
	.byte	'PLLCON2',0
	.word	43787
	.byte	4,2,35,32,6
	.byte	'PLLERAYSTAT',0
	.word	43990
	.byte	4,2,35,36,6
	.byte	'PLLERAYCON0',0
	.word	43852
	.byte	4,2,35,40,6
	.byte	'PLLERAYCON1',0
	.word	43921
	.byte	4,2,35,44,6
	.byte	'CCUCON0',0
	.word	39688
	.byte	4,2,35,48,6
	.byte	'CCUCON1',0
	.word	39753
	.byte	4,2,35,52,6
	.byte	'FDR',0
	.word	42392
	.byte	4,2,35,56,6
	.byte	'EXTCON',0
	.word	42328
	.byte	4,2,35,60,6
	.byte	'CCUCON2',0
	.word	39818
	.byte	4,2,35,64,6
	.byte	'CCUCON3',0
	.word	39883
	.byte	4,2,35,68,6
	.byte	'CCUCON4',0
	.word	39948
	.byte	4,2,35,72,6
	.byte	'CCUCON5',0
	.word	40013
	.byte	4,2,35,76,6
	.byte	'RSTSTAT',0
	.word	44581
	.byte	4,2,35,80,6
	.byte	'reserved_54',0
	.word	2675
	.byte	4,2,35,84,6
	.byte	'RSTCON',0
	.word	44452
	.byte	4,2,35,88,6
	.byte	'ARSTDIS',0
	.word	39623
	.byte	4,2,35,92,6
	.byte	'SWRSTCON',0
	.word	44775
	.byte	4,2,35,96,6
	.byte	'RSTCON2',0
	.word	44516
	.byte	4,2,35,100,6
	.byte	'reserved_68',0
	.word	2675
	.byte	4,2,35,104,6
	.byte	'EVRRSTCON',0
	.word	41379
	.byte	4,2,35,108,6
	.byte	'ESRCFG',0
	.word	45567
	.byte	8,2,35,112,6
	.byte	'ESROCFG',0
	.word	40845
	.byte	4,2,35,120,6
	.byte	'SYSCON',0
	.word	44841
	.byte	4,2,35,124,6
	.byte	'CCUCON6',0
	.word	40078
	.byte	4,3,35,128,1,6
	.byte	'CCUCON7',0
	.word	40143
	.byte	4,3,35,132,1,6
	.byte	'CCUCON8',0
	.word	40208
	.byte	4,3,35,136,1,6
	.byte	'CCUCON9',0
	.word	40273
	.byte	4,3,35,140,1,6
	.byte	'reserved_90',0
	.word	4834
	.byte	12,3,35,144,1,6
	.byte	'PDR',0
	.word	43534
	.byte	4,3,35,156,1,6
	.byte	'IOCR',0
	.word	42696
	.byte	4,3,35,160,1,6
	.byte	'OUT',0
	.word	43279
	.byte	4,3,35,164,1,6
	.byte	'OMR',0
	.word	43154
	.byte	4,3,35,168,1,6
	.byte	'IN',0
	.word	42636
	.byte	4,3,35,172,1,6
	.byte	'EVRSTAT',0
	.word	42132
	.byte	4,3,35,176,1,6
	.byte	'EVRDVSTAT',0
	.word	41110
	.byte	4,3,35,180,1,6
	.byte	'EVR13CON',0
	.word	40910
	.byte	4,3,35,184,1,6
	.byte	'EVR33CON',0
	.word	40976
	.byte	4,3,35,188,1,6
	.byte	'STSTAT',0
	.word	44711
	.byte	4,3,35,192,1,6
	.byte	'reserved_C4',0
	.word	2675
	.byte	4,3,35,196,1,6
	.byte	'PMSWCR0',0
	.word	44187
	.byte	4,3,35,200,1,6
	.byte	'PMSWSTAT',0
	.word	44317
	.byte	4,3,35,204,1,6
	.byte	'PMSWSTATCLR',0
	.word	44383
	.byte	4,3,35,208,1,6
	.byte	'PMCSR',0
	.word	45576
	.byte	12,3,35,212,1,6
	.byte	'DTSSTAT',0
	.word	40530
	.byte	4,3,35,224,1,6
	.byte	'DTSCON',0
	.word	40402
	.byte	4,3,35,228,1,6
	.byte	'PMSWCR1',0
	.word	44252
	.byte	4,3,35,232,1,6
	.byte	'reserved_EC',0
	.word	2675
	.byte	4,3,35,236,1,6
	.byte	'WDTS',0
	.word	45585
	.byte	12,3,35,240,1,6
	.byte	'EMSR',0
	.word	40719
	.byte	4,3,35,252,1,6
	.byte	'WDTCPU',0
	.word	45599
	.byte	36,3,35,128,2,6
	.byte	'TRAPSTAT',0
	.word	45100
	.byte	4,3,35,164,2,6
	.byte	'TRAPSET',0
	.word	45035
	.byte	4,3,35,168,2,6
	.byte	'TRAPCLR',0
	.word	44905
	.byte	4,3,35,172,2,6
	.byte	'TRAPDIS',0
	.word	44970
	.byte	4,3,35,176,2,6
	.byte	'LCLCON0',0
	.word	42962
	.byte	4,3,35,180,2,6
	.byte	'LCLCON1',0
	.word	42962
	.byte	4,3,35,184,2,6
	.byte	'LCLTEST',0
	.word	43026
	.byte	4,3,35,188,2,6
	.byte	'CHIPID',0
	.word	40338
	.byte	4,3,35,192,2,6
	.byte	'MANID',0
	.word	43091
	.byte	4,3,35,196,2,6
	.byte	'reserved_148',0
	.word	4494
	.byte	8,3,35,200,2,6
	.byte	'SAFECON',0
	.word	44646
	.byte	4,3,35,208,2,6
	.byte	'reserved_154',0
	.word	45604
	.byte	16,3,35,212,2,6
	.byte	'LBISTCTRL0',0
	.word	42758
	.byte	4,3,35,228,2,6
	.byte	'LBISTCTRL1',0
	.word	42826
	.byte	4,3,35,232,2,6
	.byte	'LBISTCTRL2',0
	.word	42894
	.byte	4,3,35,236,2,6
	.byte	'reserved_170',0
	.word	12759
	.byte	28,3,35,240,2,6
	.byte	'PDISC',0
	.word	43471
	.byte	4,3,35,140,3,6
	.byte	'reserved_190',0
	.word	4494
	.byte	8,3,35,144,3,6
	.byte	'EVRTRIM',0
	.word	42197
	.byte	4,3,35,152,3,6
	.byte	'EVRADCSTAT',0
	.word	41042
	.byte	4,3,35,156,3,6
	.byte	'EVRUVMON',0
	.word	42262
	.byte	4,3,35,160,3,6
	.byte	'EVROVMON',0
	.word	41313
	.byte	4,3,35,164,3,6
	.byte	'EVRMONCTRL',0
	.word	41177
	.byte	4,3,35,168,3,6
	.byte	'reserved_1AC',0
	.word	2675
	.byte	4,3,35,172,3,6
	.byte	'EVRSDCTRL1',0
	.word	41860
	.byte	4,3,35,176,3,6
	.byte	'EVRSDCTRL2',0
	.word	41928
	.byte	4,3,35,180,3,6
	.byte	'EVRSDCTRL3',0
	.word	41996
	.byte	4,3,35,184,3,6
	.byte	'EVRSDCTRL4',0
	.word	42064
	.byte	4,3,35,188,3,6
	.byte	'EVRSDCOEFF1',0
	.word	41446
	.byte	4,3,35,192,3,6
	.byte	'EVRSDCOEFF2',0
	.word	41515
	.byte	4,3,35,196,3,6
	.byte	'EVRSDCOEFF3',0
	.word	41584
	.byte	4,3,35,200,3,6
	.byte	'EVRSDCOEFF4',0
	.word	41653
	.byte	4,3,35,204,3,6
	.byte	'EVRSDCOEFF5',0
	.word	41722
	.byte	4,3,35,208,3,6
	.byte	'EVRSDCOEFF6',0
	.word	41791
	.byte	4,3,35,212,3,6
	.byte	'EVROSCCTRL',0
	.word	41245
	.byte	4,3,35,216,3,6
	.byte	'reserved_1DC',0
	.word	2675
	.byte	4,3,35,220,3,6
	.byte	'OVCENABLE',0
	.word	43404
	.byte	4,3,35,224,3,6
	.byte	'OVCCON',0
	.word	43340
	.byte	4,3,35,228,3,6
	.byte	'reserved_1E8',0
	.word	45613
	.byte	40,3,35,232,3,6
	.byte	'EICR',0
	.word	45622
	.byte	16,3,35,144,4,6
	.byte	'EIFR',0
	.word	40657
	.byte	4,3,35,160,4,6
	.byte	'FMR',0
	.word	42453
	.byte	4,3,35,164,4,6
	.byte	'PDRR',0
	.word	43595
	.byte	4,3,35,168,4,6
	.byte	'IGCR',0
	.word	45631
	.byte	16,3,35,172,4,6
	.byte	'reserved_23C',0
	.word	2675
	.byte	4,3,35,188,4,6
	.byte	'DTSLIM',0
	.word	40466
	.byte	4,3,35,192,4,6
	.byte	'reserved_244',0
	.word	45640
	.byte	180,3,3,35,196,4,6
	.byte	'ACCEN1',0
	.word	39559
	.byte	4,3,35,248,7,6
	.byte	'ACCEN0',0
	.word	39495
	.byte	4,3,35,252,7,0,7
	.word	45651
	.byte	31
	.byte	'Ifx_SCU',0,2,210,18,3
	.word	47631
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'_Ifx_CPU_A_Bits',0,20,45,16,4,4
	.byte	'ADDR',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_A_Bits',0,20,48,3
	.word	47669
	.byte	3
	.byte	'_Ifx_CPU_BIV_Bits',0,20,51,16,4,4
	.byte	'VSS',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'BIV',0,4
	.word	47653
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_BIV_Bits',0,20,55,3
	.word	47730
	.byte	3
	.byte	'_Ifx_CPU_BTV_Bits',0,20,58,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'BTV',0,4
	.word	47653
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_BTV_Bits',0,20,62,3
	.word	47809
	.byte	3
	.byte	'_Ifx_CPU_CCNT_Bits',0,20,65,16,4,4
	.byte	'CountValue',0,4
	.word	47653
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	47653
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_CCNT_Bits',0,20,69,3
	.word	47895
	.byte	3
	.byte	'_Ifx_CPU_CCTRL_Bits',0,20,72,16,4,4
	.byte	'CM',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'CE',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'M1',0,4
	.word	47653
	.byte	3,27,2,35,0,4
	.byte	'M2',0,4
	.word	47653
	.byte	3,24,2,35,0,4
	.byte	'M3',0,4
	.word	47653
	.byte	3,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	47653
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_CPU_CCTRL_Bits',0,20,80,3
	.word	47984
	.byte	3
	.byte	'_Ifx_CPU_COMPAT_Bits',0,20,83,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'RM',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'SP',0,4
	.word	47653
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	47653
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_COMPAT_Bits',0,20,89,3
	.word	48130
	.byte	3
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,20,92,16,4,4
	.byte	'CORE_ID',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47653
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_CORE_ID_Bits',0,20,96,3
	.word	48257
	.byte	3
	.byte	'_Ifx_CPU_CPR_L_Bits',0,20,99,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'LOWBND',0,4
	.word	47653
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_L_Bits',0,20,103,3
	.word	48355
	.byte	3
	.byte	'_Ifx_CPU_CPR_U_Bits',0,20,106,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'UPPBND',0,4
	.word	47653
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_U_Bits',0,20,110,3
	.word	48448
	.byte	3
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,20,113,16,4,4
	.byte	'MOD_REV',0,4
	.word	47653
	.byte	8,24,2,35,0,4
	.byte	'MOD_32B',0,4
	.word	47653
	.byte	8,16,2,35,0,4
	.byte	'MOD',0,4
	.word	47653
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPU_ID_Bits',0,20,118,3
	.word	48541
	.byte	3
	.byte	'_Ifx_CPU_CPXE_Bits',0,20,121,16,4,4
	.byte	'XE',0,4
	.word	47653
	.byte	8,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47653
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPXE_Bits',0,20,125,3
	.word	48649
	.byte	3
	.byte	'_Ifx_CPU_CREVT_Bits',0,20,128,1,16,4,4
	.byte	'EVTA',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	47653
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	47653
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	47653
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47653
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_CREVT_Bits',0,20,136,1,3
	.word	48736
	.byte	3
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,20,139,1,16,4,4
	.byte	'CID',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47653
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_CUS_ID_Bits',0,20,143,1,3
	.word	48890
	.byte	3
	.byte	'_Ifx_CPU_D_Bits',0,20,146,1,16,4,4
	.byte	'DATA',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_D_Bits',0,20,149,1,3
	.word	48984
	.byte	3
	.byte	'_Ifx_CPU_DATR_Bits',0,20,152,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'SBE',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'reserved_4',0,4
	.word	47653
	.byte	5,23,2,35,0,4
	.byte	'CWE',0,4
	.word	47653
	.byte	1,22,2,35,0,4
	.byte	'CFE',0,4
	.word	47653
	.byte	1,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	47653
	.byte	3,18,2,35,0,4
	.byte	'SOE',0,4
	.word	47653
	.byte	1,17,2,35,0,4
	.byte	'SME',0,4
	.word	47653
	.byte	1,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47653
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_DATR_Bits',0,20,163,1,3
	.word	49047
	.byte	3
	.byte	'_Ifx_CPU_DBGSR_Bits',0,20,166,1,16,4,4
	.byte	'DE',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'HALT',0,4
	.word	47653
	.byte	2,29,2,35,0,4
	.byte	'SIH',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'SUSP',0,4
	.word	47653
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	47653
	.byte	1,26,2,35,0,4
	.byte	'PREVSUSP',0,4
	.word	47653
	.byte	1,25,2,35,0,4
	.byte	'PEVT',0,4
	.word	47653
	.byte	1,24,2,35,0,4
	.byte	'EVTSRC',0,4
	.word	47653
	.byte	5,19,2,35,0,4
	.byte	'reserved_13',0,4
	.word	47653
	.byte	19,0,2,35,0,0,31
	.byte	'Ifx_CPU_DBGSR_Bits',0,20,177,1,3
	.word	49265
	.byte	3
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,20,180,1,16,4,4
	.byte	'DTA',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	47653
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_DBGTCR_Bits',0,20,184,1,3
	.word	49480
	.byte	3
	.byte	'_Ifx_CPU_DCON0_Bits',0,20,187,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'DCBYP',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	47653
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_CPU_DCON0_Bits',0,20,192,1,3
	.word	49574
	.byte	3
	.byte	'_Ifx_CPU_DCON2_Bits',0,20,195,1,16,4,4
	.byte	'DCACHE_SZE',0,4
	.word	47653
	.byte	16,16,2,35,0,4
	.byte	'DSCRATCH_SZE',0,4
	.word	47653
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_DCON2_Bits',0,20,199,1,3
	.word	49690
	.byte	3
	.byte	'_Ifx_CPU_DCX_Bits',0,20,202,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	6,26,2,35,0,4
	.byte	'DCXValue',0,4
	.word	47653
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_CPU_DCX_Bits',0,20,206,1,3
	.word	49791
	.byte	3
	.byte	'_Ifx_CPU_DEADD_Bits',0,20,209,1,16,4,4
	.byte	'ERROR_ADDRESS',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_DEADD_Bits',0,20,212,1,3
	.word	49884
	.byte	3
	.byte	'_Ifx_CPU_DIEAR_Bits',0,20,215,1,16,4,4
	.byte	'TA',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_DIEAR_Bits',0,20,218,1,3
	.word	49964
	.byte	3
	.byte	'_Ifx_CPU_DIETR_Bits',0,20,221,1,16,4,4
	.byte	'IED',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'IE_T',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'IE_C',0,4
	.word	47653
	.byte	1,29,2,35,0,4
	.byte	'IE_S',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'IE_BI',0,4
	.word	47653
	.byte	1,27,2,35,0,4
	.byte	'E_INFO',0,4
	.word	47653
	.byte	6,21,2,35,0,4
	.byte	'IE_DUAL',0,4
	.word	47653
	.byte	1,20,2,35,0,4
	.byte	'IE_SP',0,4
	.word	47653
	.byte	1,19,2,35,0,4
	.byte	'IE_BS',0,4
	.word	47653
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	47653
	.byte	18,0,2,35,0,0,31
	.byte	'Ifx_CPU_DIETR_Bits',0,20,233,1,3
	.word	50033
	.byte	3
	.byte	'_Ifx_CPU_DMS_Bits',0,20,236,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'DMSValue',0,4
	.word	47653
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_DMS_Bits',0,20,240,1,3
	.word	50262
	.byte	3
	.byte	'_Ifx_CPU_DPR_L_Bits',0,20,243,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'LOWBND',0,4
	.word	47653
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_L_Bits',0,20,247,1,3
	.word	50355
	.byte	3
	.byte	'_Ifx_CPU_DPR_U_Bits',0,20,250,1,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'UPPBND',0,4
	.word	47653
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_U_Bits',0,20,254,1,3
	.word	50450
	.byte	3
	.byte	'_Ifx_CPU_DPRE_Bits',0,20,129,2,16,4,4
	.byte	'RE',0,4
	.word	47653
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47653
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPRE_Bits',0,20,133,2,3
	.word	50545
	.byte	3
	.byte	'_Ifx_CPU_DPWE_Bits',0,20,136,2,16,4,4
	.byte	'WE',0,4
	.word	47653
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47653
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPWE_Bits',0,20,140,2,3
	.word	50635
	.byte	3
	.byte	'_Ifx_CPU_DSTR_Bits',0,20,143,2,16,4,4
	.byte	'SRE',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'GAE',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'LBE',0,4
	.word	47653
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47653
	.byte	3,26,2,35,0,4
	.byte	'CRE',0,4
	.word	47653
	.byte	1,25,2,35,0,4
	.byte	'reserved_7',0,4
	.word	47653
	.byte	7,18,2,35,0,4
	.byte	'DTME',0,4
	.word	47653
	.byte	1,17,2,35,0,4
	.byte	'LOE',0,4
	.word	47653
	.byte	1,16,2,35,0,4
	.byte	'SDE',0,4
	.word	47653
	.byte	1,15,2,35,0,4
	.byte	'SCE',0,4
	.word	47653
	.byte	1,14,2,35,0,4
	.byte	'CAC',0,4
	.word	47653
	.byte	1,13,2,35,0,4
	.byte	'MPE',0,4
	.word	47653
	.byte	1,12,2,35,0,4
	.byte	'CLE',0,4
	.word	47653
	.byte	1,11,2,35,0,4
	.byte	'reserved_21',0,4
	.word	47653
	.byte	3,8,2,35,0,4
	.byte	'ALN',0,4
	.word	47653
	.byte	1,7,2,35,0,4
	.byte	'reserved_25',0,4
	.word	47653
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_CPU_DSTR_Bits',0,20,161,2,3
	.word	50725
	.byte	3
	.byte	'_Ifx_CPU_EXEVT_Bits',0,20,164,2,16,4,4
	.byte	'EVTA',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	47653
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	47653
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	47653
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47653
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_EXEVT_Bits',0,20,172,2,3
	.word	51049
	.byte	3
	.byte	'_Ifx_CPU_FCX_Bits',0,20,175,2,16,4,4
	.byte	'FCXO',0,4
	.word	47653
	.byte	16,16,2,35,0,4
	.byte	'FCXS',0,4
	.word	47653
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	47653
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_CPU_FCX_Bits',0,20,180,2,3
	.word	51203
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,20,183,2,16,4,4
	.byte	'TST',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'TCL',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	47653
	.byte	6,24,2,35,0,4
	.byte	'RM',0,4
	.word	47653
	.byte	2,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	47653
	.byte	8,14,2,35,0,4
	.byte	'FXE',0,4
	.word	47653
	.byte	1,13,2,35,0,4
	.byte	'FUE',0,4
	.word	47653
	.byte	1,12,2,35,0,4
	.byte	'FZE',0,4
	.word	47653
	.byte	1,11,2,35,0,4
	.byte	'FVE',0,4
	.word	47653
	.byte	1,10,2,35,0,4
	.byte	'FIE',0,4
	.word	47653
	.byte	1,9,2,35,0,4
	.byte	'reserved_23',0,4
	.word	47653
	.byte	3,6,2,35,0,4
	.byte	'FX',0,4
	.word	47653
	.byte	1,5,2,35,0,4
	.byte	'FU',0,4
	.word	47653
	.byte	1,4,2,35,0,4
	.byte	'FZ',0,4
	.word	47653
	.byte	1,3,2,35,0,4
	.byte	'FV',0,4
	.word	47653
	.byte	1,2,2,35,0,4
	.byte	'FI',0,4
	.word	47653
	.byte	1,1,2,35,0,4
	.byte	'reserved_31',0,4
	.word	47653
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,20,202,2,3
	.word	51309
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,20,205,2,16,4,4
	.byte	'OPC',0,4
	.word	47653
	.byte	8,24,2,35,0,4
	.byte	'FMT',0,4
	.word	47653
	.byte	1,23,2,35,0,4
	.byte	'reserved_9',0,4
	.word	47653
	.byte	7,16,2,35,0,4
	.byte	'DREG',0,4
	.word	47653
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	47653
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,20,212,2,3
	.word	51658
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,20,215,2,16,4,4
	.byte	'PC',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,20,218,2,3
	.word	51818
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,20,221,2,16,4,4
	.byte	'SRC1',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,20,224,2,3
	.word	51899
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,20,227,2,16,4,4
	.byte	'SRC2',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,20,230,2,3
	.word	51986
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,20,233,2,16,4,4
	.byte	'SRC3',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,20,236,2,3
	.word	52073
	.byte	3
	.byte	'_Ifx_CPU_ICNT_Bits',0,20,239,2,16,4,4
	.byte	'CountValue',0,4
	.word	47653
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	47653
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_ICNT_Bits',0,20,243,2,3
	.word	52160
	.byte	3
	.byte	'_Ifx_CPU_ICR_Bits',0,20,246,2,16,4,4
	.byte	'CCPN',0,4
	.word	47653
	.byte	10,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	47653
	.byte	5,17,2,35,0,4
	.byte	'IE',0,4
	.word	47653
	.byte	1,16,2,35,0,4
	.byte	'PIPN',0,4
	.word	47653
	.byte	10,6,2,35,0,4
	.byte	'reserved_26',0,4
	.word	47653
	.byte	6,0,2,35,0,0,31
	.byte	'Ifx_CPU_ICR_Bits',0,20,253,2,3
	.word	52251
	.byte	3
	.byte	'_Ifx_CPU_ISP_Bits',0,20,128,3,16,4,4
	.byte	'ISP',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_ISP_Bits',0,20,131,3,3
	.word	52394
	.byte	3
	.byte	'_Ifx_CPU_LCX_Bits',0,20,134,3,16,4,4
	.byte	'LCXO',0,4
	.word	47653
	.byte	16,16,2,35,0,4
	.byte	'LCXS',0,4
	.word	47653
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	47653
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_CPU_LCX_Bits',0,20,139,3,3
	.word	52460
	.byte	3
	.byte	'_Ifx_CPU_M1CNT_Bits',0,20,142,3,16,4,4
	.byte	'CountValue',0,4
	.word	47653
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	47653
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_M1CNT_Bits',0,20,146,3,3
	.word	52566
	.byte	3
	.byte	'_Ifx_CPU_M2CNT_Bits',0,20,149,3,16,4,4
	.byte	'CountValue',0,4
	.word	47653
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	47653
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_M2CNT_Bits',0,20,153,3,3
	.word	52659
	.byte	3
	.byte	'_Ifx_CPU_M3CNT_Bits',0,20,156,3,16,4,4
	.byte	'CountValue',0,4
	.word	47653
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	47653
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_M3CNT_Bits',0,20,160,3,3
	.word	52752
	.byte	3
	.byte	'_Ifx_CPU_PC_Bits',0,20,163,3,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'PC',0,4
	.word	47653
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_PC_Bits',0,20,167,3,3
	.word	52845
	.byte	3
	.byte	'_Ifx_CPU_PCON0_Bits',0,20,170,3,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'PCBYP',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	47653
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCON0_Bits',0,20,175,3,3
	.word	52930
	.byte	3
	.byte	'_Ifx_CPU_PCON1_Bits',0,20,178,3,16,4,4
	.byte	'PCINV',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'PBINV',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	47653
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCON1_Bits',0,20,183,3,3
	.word	53046
	.byte	3
	.byte	'_Ifx_CPU_PCON2_Bits',0,20,186,3,16,4,4
	.byte	'PCACHE_SZE',0,4
	.word	47653
	.byte	16,16,2,35,0,4
	.byte	'PSCRATCH_SZE',0,4
	.word	47653
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCON2_Bits',0,20,190,3,3
	.word	53157
	.byte	3
	.byte	'_Ifx_CPU_PCXI_Bits',0,20,193,3,16,4,4
	.byte	'PCXO',0,4
	.word	47653
	.byte	16,16,2,35,0,4
	.byte	'PCXS',0,4
	.word	47653
	.byte	4,12,2,35,0,4
	.byte	'UL',0,4
	.word	47653
	.byte	1,11,2,35,0,4
	.byte	'PIE',0,4
	.word	47653
	.byte	1,10,2,35,0,4
	.byte	'PCPN',0,4
	.word	47653
	.byte	10,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCXI_Bits',0,20,200,3,3
	.word	53258
	.byte	3
	.byte	'_Ifx_CPU_PIEAR_Bits',0,20,203,3,16,4,4
	.byte	'TA',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_PIEAR_Bits',0,20,206,3,3
	.word	53388
	.byte	3
	.byte	'_Ifx_CPU_PIETR_Bits',0,20,209,3,16,4,4
	.byte	'IED',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'IE_T',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'IE_C',0,4
	.word	47653
	.byte	1,29,2,35,0,4
	.byte	'IE_S',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'IE_BI',0,4
	.word	47653
	.byte	1,27,2,35,0,4
	.byte	'E_INFO',0,4
	.word	47653
	.byte	6,21,2,35,0,4
	.byte	'IE_DUAL',0,4
	.word	47653
	.byte	1,20,2,35,0,4
	.byte	'IE_SP',0,4
	.word	47653
	.byte	1,19,2,35,0,4
	.byte	'IE_BS',0,4
	.word	47653
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	47653
	.byte	18,0,2,35,0,0,31
	.byte	'Ifx_CPU_PIETR_Bits',0,20,221,3,3
	.word	53457
	.byte	3
	.byte	'_Ifx_CPU_PMA0_Bits',0,20,224,3,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	13,19,2,35,0,4
	.byte	'DAC',0,4
	.word	47653
	.byte	3,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47653
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PMA0_Bits',0,20,229,3,3
	.word	53686
	.byte	3
	.byte	'_Ifx_CPU_PMA1_Bits',0,20,232,3,16,4,4
	.byte	'reserved_0',0,4
	.word	47653
	.byte	14,18,2,35,0,4
	.byte	'CAC',0,4
	.word	47653
	.byte	2,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47653
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PMA1_Bits',0,20,237,3,3
	.word	53799
	.byte	3
	.byte	'_Ifx_CPU_PMA2_Bits',0,20,240,3,16,4,4
	.byte	'PSI',0,4
	.word	47653
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	47653
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PMA2_Bits',0,20,244,3,3
	.word	53912
	.byte	3
	.byte	'_Ifx_CPU_PSTR_Bits',0,20,247,3,16,4,4
	.byte	'FRE',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'FBE',0,4
	.word	47653
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47653
	.byte	9,20,2,35,0,4
	.byte	'FPE',0,4
	.word	47653
	.byte	1,19,2,35,0,4
	.byte	'reserved_13',0,4
	.word	47653
	.byte	1,18,2,35,0,4
	.byte	'FME',0,4
	.word	47653
	.byte	1,17,2,35,0,4
	.byte	'reserved_15',0,4
	.word	47653
	.byte	17,0,2,35,0,0,31
	.byte	'Ifx_CPU_PSTR_Bits',0,20,129,4,3
	.word	54003
	.byte	3
	.byte	'_Ifx_CPU_PSW_Bits',0,20,132,4,16,4,4
	.byte	'CDC',0,4
	.word	47653
	.byte	7,25,2,35,0,4
	.byte	'CDE',0,4
	.word	47653
	.byte	1,24,2,35,0,4
	.byte	'GW',0,4
	.word	47653
	.byte	1,23,2,35,0,4
	.byte	'IS',0,4
	.word	47653
	.byte	1,22,2,35,0,4
	.byte	'IO',0,4
	.word	47653
	.byte	2,20,2,35,0,4
	.byte	'PRS',0,4
	.word	47653
	.byte	2,18,2,35,0,4
	.byte	'S',0,4
	.word	47653
	.byte	1,17,2,35,0,4
	.byte	'reserved_15',0,4
	.word	47653
	.byte	12,5,2,35,0,4
	.byte	'SAV',0,4
	.word	47653
	.byte	1,4,2,35,0,4
	.byte	'AV',0,4
	.word	47653
	.byte	1,3,2,35,0,4
	.byte	'SV',0,4
	.word	47653
	.byte	1,2,2,35,0,4
	.byte	'V',0,4
	.word	47653
	.byte	1,1,2,35,0,4
	.byte	'C',0,4
	.word	47653
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_PSW_Bits',0,20,147,4,3
	.word	54206
	.byte	3
	.byte	'_Ifx_CPU_SEGEN_Bits',0,20,150,4,16,4,4
	.byte	'ADFLIP',0,4
	.word	47653
	.byte	8,24,2,35,0,4
	.byte	'ADTYPE',0,4
	.word	47653
	.byte	2,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	47653
	.byte	21,1,2,35,0,4
	.byte	'AE',0,4
	.word	47653
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_SEGEN_Bits',0,20,156,4,3
	.word	54449
	.byte	3
	.byte	'_Ifx_CPU_SMACON_Bits',0,20,159,4,16,4,4
	.byte	'PC',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'PT',0,4
	.word	47653
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47653
	.byte	5,24,2,35,0,4
	.byte	'DC',0,4
	.word	47653
	.byte	1,23,2,35,0,4
	.byte	'reserved_9',0,4
	.word	47653
	.byte	1,22,2,35,0,4
	.byte	'DT',0,4
	.word	47653
	.byte	1,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	47653
	.byte	13,8,2,35,0,4
	.byte	'IODT',0,4
	.word	47653
	.byte	1,7,2,35,0,4
	.byte	'reserved_25',0,4
	.word	47653
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_CPU_SMACON_Bits',0,20,171,4,3
	.word	54577
	.byte	3
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,20,174,4,16,4,4
	.byte	'EN',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,20,177,4,3
	.word	54818
	.byte	3
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,20,180,4,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,20,183,4,3
	.word	54901
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,20,186,4,16,4,4
	.byte	'EN',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,20,189,4,3
	.word	54992
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,20,192,4,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,20,195,4,3
	.word	55083
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,20,198,4,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	150
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,20,202,4,3
	.word	55182
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,20,205,4,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	150
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,20,209,4,3
	.word	55289
	.byte	3
	.byte	'_Ifx_CPU_SWEVT_Bits',0,20,212,4,16,4,4
	.byte	'EVTA',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	47653
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	47653
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	47653
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47653
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_SWEVT_Bits',0,20,220,4,3
	.word	55396
	.byte	3
	.byte	'_Ifx_CPU_SYSCON_Bits',0,20,223,4,16,4,4
	.byte	'FCDSF',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'PROTEN',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'TPROTEN',0,4
	.word	47653
	.byte	1,29,2,35,0,4
	.byte	'IS',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'IT',0,4
	.word	47653
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	47653
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_SYSCON_Bits',0,20,231,4,3
	.word	55550
	.byte	3
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,20,234,4,16,4,4
	.byte	'ASI',0,4
	.word	47653
	.byte	5,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	47653
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,20,238,4,3
	.word	55711
	.byte	3
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,20,241,4,16,4,4
	.byte	'TEXP0',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'TEXP1',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'TEXP2',0,4
	.word	47653
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	47653
	.byte	13,16,2,35,0,4
	.byte	'TTRAP',0,4
	.word	47653
	.byte	1,15,2,35,0,4
	.byte	'reserved_17',0,4
	.word	47653
	.byte	15,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_CON_Bits',0,20,249,4,3
	.word	55809
	.byte	3
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,20,252,4,16,4,4
	.byte	'Timer',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,20,255,4,3
	.word	55981
	.byte	3
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,20,130,5,16,4,4
	.byte	'ADDR',0,4
	.word	47653
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_TR_ADR_Bits',0,20,133,5,3
	.word	56061
	.byte	3
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,20,136,5,16,4,4
	.byte	'EVTA',0,4
	.word	47653
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	47653
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	47653
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	47653
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47653
	.byte	4,20,2,35,0,4
	.byte	'TYP',0,4
	.word	47653
	.byte	1,19,2,35,0,4
	.byte	'RNG',0,4
	.word	47653
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	47653
	.byte	1,17,2,35,0,4
	.byte	'ASI_EN',0,4
	.word	47653
	.byte	1,16,2,35,0,4
	.byte	'ASI',0,4
	.word	47653
	.byte	5,11,2,35,0,4
	.byte	'reserved_21',0,4
	.word	47653
	.byte	6,5,2,35,0,4
	.byte	'AST',0,4
	.word	47653
	.byte	1,4,2,35,0,4
	.byte	'ALD',0,4
	.word	47653
	.byte	1,3,2,35,0,4
	.byte	'reserved_29',0,4
	.word	47653
	.byte	3,0,2,35,0,0,31
	.byte	'Ifx_CPU_TR_EVT_Bits',0,20,153,5,3
	.word	56134
	.byte	3
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,20,156,5,16,4,4
	.byte	'T0',0,4
	.word	47653
	.byte	1,31,2,35,0,4
	.byte	'T1',0,4
	.word	47653
	.byte	1,30,2,35,0,4
	.byte	'T2',0,4
	.word	47653
	.byte	1,29,2,35,0,4
	.byte	'T3',0,4
	.word	47653
	.byte	1,28,2,35,0,4
	.byte	'T4',0,4
	.word	47653
	.byte	1,27,2,35,0,4
	.byte	'T5',0,4
	.word	47653
	.byte	1,26,2,35,0,4
	.byte	'T6',0,4
	.word	47653
	.byte	1,25,2,35,0,4
	.byte	'T7',0,4
	.word	47653
	.byte	1,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	47653
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,20,167,5,3
	.word	56452
	.byte	5,20,175,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47669
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_A',0,20,183,5,3
	.word	56647
	.byte	5,20,186,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47730
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_BIV',0,20,194,5,3
	.word	56706
	.byte	5,20,197,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47809
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_BTV',0,20,205,5,3
	.word	56767
	.byte	5,20,208,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47895
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CCNT',0,20,216,5,3
	.word	56828
	.byte	5,20,219,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	47984
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CCTRL',0,20,227,5,3
	.word	56890
	.byte	5,20,230,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48130
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_COMPAT',0,20,238,5,3
	.word	56953
	.byte	5,20,241,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48257
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CORE_ID',0,20,249,5,3
	.word	57017
	.byte	5,20,252,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48355
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_L',0,20,132,6,3
	.word	57082
	.byte	5,20,135,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48448
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_U',0,20,143,6,3
	.word	57145
	.byte	5,20,146,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48541
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPU_ID',0,20,154,6,3
	.word	57208
	.byte	5,20,157,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48649
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPXE',0,20,165,6,3
	.word	57272
	.byte	5,20,168,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48736
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CREVT',0,20,176,6,3
	.word	57334
	.byte	5,20,179,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48890
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CUS_ID',0,20,187,6,3
	.word	57397
	.byte	5,20,190,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	48984
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_D',0,20,198,6,3
	.word	57461
	.byte	5,20,201,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49047
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DATR',0,20,209,6,3
	.word	57520
	.byte	5,20,212,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49265
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DBGSR',0,20,220,6,3
	.word	57582
	.byte	5,20,223,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49480
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DBGTCR',0,20,231,6,3
	.word	57645
	.byte	5,20,234,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49574
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DCON0',0,20,242,6,3
	.word	57709
	.byte	5,20,245,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49690
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DCON2',0,20,253,6,3
	.word	57772
	.byte	5,20,128,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49791
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DCX',0,20,136,7,3
	.word	57835
	.byte	5,20,139,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49884
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DEADD',0,20,147,7,3
	.word	57896
	.byte	5,20,150,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	49964
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DIEAR',0,20,158,7,3
	.word	57959
	.byte	5,20,161,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50033
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DIETR',0,20,169,7,3
	.word	58022
	.byte	5,20,172,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50262
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DMS',0,20,180,7,3
	.word	58085
	.byte	5,20,183,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50355
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_L',0,20,191,7,3
	.word	58146
	.byte	5,20,194,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50450
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_U',0,20,202,7,3
	.word	58209
	.byte	5,20,205,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50545
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPRE',0,20,213,7,3
	.word	58272
	.byte	5,20,216,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50635
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPWE',0,20,224,7,3
	.word	58334
	.byte	5,20,227,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	50725
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DSTR',0,20,235,7,3
	.word	58396
	.byte	5,20,238,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51049
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_EXEVT',0,20,246,7,3
	.word	58458
	.byte	5,20,249,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51203
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FCX',0,20,129,8,3
	.word	58521
	.byte	5,20,132,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51309
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,20,140,8,3
	.word	58582
	.byte	5,20,143,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51658
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,20,151,8,3
	.word	58652
	.byte	5,20,154,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51818
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,20,162,8,3
	.word	58722
	.byte	5,20,165,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51899
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,20,173,8,3
	.word	58791
	.byte	5,20,176,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	51986
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,20,184,8,3
	.word	58862
	.byte	5,20,187,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52073
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,20,195,8,3
	.word	58933
	.byte	5,20,198,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52160
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_ICNT',0,20,206,8,3
	.word	59004
	.byte	5,20,209,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52251
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_ICR',0,20,217,8,3
	.word	59066
	.byte	5,20,220,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52394
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_ISP',0,20,228,8,3
	.word	59127
	.byte	5,20,231,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52460
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_LCX',0,20,239,8,3
	.word	59188
	.byte	5,20,242,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52566
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_M1CNT',0,20,250,8,3
	.word	59249
	.byte	5,20,253,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52659
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_M2CNT',0,20,133,9,3
	.word	59312
	.byte	5,20,136,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52752
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_M3CNT',0,20,144,9,3
	.word	59375
	.byte	5,20,147,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52845
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PC',0,20,155,9,3
	.word	59438
	.byte	5,20,158,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	52930
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCON0',0,20,166,9,3
	.word	59498
	.byte	5,20,169,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53046
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCON1',0,20,177,9,3
	.word	59561
	.byte	5,20,180,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53157
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCON2',0,20,188,9,3
	.word	59624
	.byte	5,20,191,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53258
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCXI',0,20,199,9,3
	.word	59687
	.byte	5,20,202,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53388
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PIEAR',0,20,210,9,3
	.word	59749
	.byte	5,20,213,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53457
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PIETR',0,20,221,9,3
	.word	59812
	.byte	5,20,224,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53686
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PMA0',0,20,232,9,3
	.word	59875
	.byte	5,20,235,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53799
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PMA1',0,20,243,9,3
	.word	59937
	.byte	5,20,246,9,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	53912
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PMA2',0,20,254,9,3
	.word	59999
	.byte	5,20,129,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54003
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PSTR',0,20,137,10,3
	.word	60061
	.byte	5,20,140,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54206
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PSW',0,20,148,10,3
	.word	60123
	.byte	5,20,151,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54449
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SEGEN',0,20,159,10,3
	.word	60184
	.byte	5,20,162,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54577
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SMACON',0,20,170,10,3
	.word	60247
	.byte	5,20,173,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54818
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_ACCENA',0,20,181,10,3
	.word	60311
	.byte	5,20,184,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54901
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_ACCENB',0,20,192,10,3
	.word	60381
	.byte	5,20,195,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	54992
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,20,203,10,3
	.word	60451
	.byte	5,20,206,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55083
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,20,214,10,3
	.word	60525
	.byte	5,20,217,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55182
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,20,225,10,3
	.word	60599
	.byte	5,20,228,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55289
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,20,236,10,3
	.word	60669
	.byte	5,20,239,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55396
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SWEVT',0,20,247,10,3
	.word	60739
	.byte	5,20,250,10,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55550
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SYSCON',0,20,130,11,3
	.word	60802
	.byte	5,20,133,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55711
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TASK_ASI',0,20,141,11,3
	.word	60866
	.byte	5,20,144,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55809
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_CON',0,20,152,11,3
	.word	60932
	.byte	5,20,155,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	55981
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_TIMER',0,20,163,11,3
	.word	60997
	.byte	5,20,166,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	56061
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TR_ADR',0,20,174,11,3
	.word	61064
	.byte	5,20,177,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	56134
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TR_EVT',0,20,185,11,3
	.word	61128
	.byte	5,20,188,11,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	56452
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TRIG_ACC',0,20,196,11,3
	.word	61192
	.byte	3
	.byte	'_Ifx_CPU_CPR',0,20,207,11,25,8,6
	.byte	'L',0
	.word	57082
	.byte	4,2,35,0,6
	.byte	'U',0
	.word	57145
	.byte	4,2,35,4,0,7
	.word	61258
	.byte	31
	.byte	'Ifx_CPU_CPR',0,20,211,11,3
	.word	61300
	.byte	3
	.byte	'_Ifx_CPU_DPR',0,20,214,11,25,8,6
	.byte	'L',0
	.word	58146
	.byte	4,2,35,0,6
	.byte	'U',0
	.word	58209
	.byte	4,2,35,4,0,7
	.word	61326
	.byte	31
	.byte	'Ifx_CPU_DPR',0,20,218,11,3
	.word	61368
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN',0,20,221,11,25,16,6
	.byte	'LA',0
	.word	60599
	.byte	4,2,35,0,6
	.byte	'UA',0
	.word	60669
	.byte	4,2,35,4,6
	.byte	'ACCENA',0
	.word	60451
	.byte	4,2,35,8,6
	.byte	'ACCENB',0
	.word	60525
	.byte	4,2,35,12,0,7
	.word	61394
	.byte	31
	.byte	'Ifx_CPU_SPROT_RGN',0,20,227,11,3
	.word	61476
	.byte	16,12
	.word	60997
	.byte	17,2,0,3
	.byte	'_Ifx_CPU_TPS',0,20,230,11,25,16,6
	.byte	'CON',0
	.word	60932
	.byte	4,2,35,0,6
	.byte	'TIMER',0
	.word	61508
	.byte	12,2,35,4,0,7
	.word	61517
	.byte	31
	.byte	'Ifx_CPU_TPS',0,20,234,11,3
	.word	61565
	.byte	3
	.byte	'_Ifx_CPU_TR',0,20,237,11,25,8,6
	.byte	'EVT',0
	.word	61128
	.byte	4,2,35,0,6
	.byte	'ADR',0
	.word	61064
	.byte	4,2,35,4,0,7
	.word	61591
	.byte	31
	.byte	'Ifx_CPU_TR',0,20,241,11,3
	.word	61636
	.byte	31
	.byte	'IfxCpu_ResourceCpu',0,6,89,3
	.word	1263
	.byte	31
	.byte	'Ifx_SRC_SRCR_Bits',0,10,62,3
	.word	9974
	.byte	31
	.byte	'Ifx_SRC_SRCR',0,10,78,3
	.word	10264
	.byte	3
	.byte	'_Ifx_SRC_AGBT',0,10,89,25,4,6
	.byte	'SR',0
	.word	10264
	.byte	4,2,35,0,0,7
	.word	61735
	.byte	31
	.byte	'Ifx_SRC_AGBT',0,10,92,3
	.word	61767
	.byte	3
	.byte	'_Ifx_SRC_ASCLIN',0,10,95,25,12,6
	.byte	'TX',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'RX',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	10264
	.byte	4,2,35,8,0,7
	.word	61793
	.byte	31
	.byte	'Ifx_SRC_ASCLIN',0,10,100,3
	.word	61852
	.byte	3
	.byte	'_Ifx_SRC_BCUSPB',0,10,103,25,4,6
	.byte	'SBSRC',0
	.word	10264
	.byte	4,2,35,0,0,7
	.word	61880
	.byte	31
	.byte	'Ifx_SRC_BCUSPB',0,10,106,3
	.word	61917
	.byte	16,64
	.word	10264
	.byte	17,15,0,3
	.byte	'_Ifx_SRC_CAN',0,10,109,25,64,6
	.byte	'INT',0
	.word	61945
	.byte	64,2,35,0,0,7
	.word	61954
	.byte	31
	.byte	'Ifx_SRC_CAN',0,10,112,3
	.word	61986
	.byte	3
	.byte	'_Ifx_SRC_CCU6',0,10,115,25,16,6
	.byte	'SR0',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	10264
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	10264
	.byte	4,2,35,12,0,7
	.word	62011
	.byte	31
	.byte	'Ifx_SRC_CCU6',0,10,121,3
	.word	62083
	.byte	16,8
	.word	10264
	.byte	17,1,0,3
	.byte	'_Ifx_SRC_CERBERUS',0,10,124,25,8,6
	.byte	'SR',0
	.word	62109
	.byte	8,2,35,0,0,7
	.word	62118
	.byte	31
	.byte	'Ifx_SRC_CERBERUS',0,10,127,3
	.word	62154
	.byte	3
	.byte	'_Ifx_SRC_CIF',0,10,130,1,25,16,6
	.byte	'MI',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'MIEP',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'ISP',0
	.word	10264
	.byte	4,2,35,8,6
	.byte	'MJPEG',0
	.word	10264
	.byte	4,2,35,12,0,7
	.word	62184
	.byte	31
	.byte	'Ifx_SRC_CIF',0,10,136,1,3
	.word	62258
	.byte	3
	.byte	'_Ifx_SRC_CPU',0,10,139,1,25,4,6
	.byte	'SBSRC',0
	.word	10264
	.byte	4,2,35,0,0,7
	.word	62284
	.byte	31
	.byte	'Ifx_SRC_CPU',0,10,142,1,3
	.word	62319
	.byte	16,24
	.word	10264
	.byte	17,5,0,3
	.byte	'_Ifx_SRC_DAM',0,10,145,1,25,24,6
	.byte	'SR',0
	.word	62345
	.byte	24,2,35,0,0,7
	.word	62354
	.byte	31
	.byte	'Ifx_SRC_DAM',0,10,148,1,3
	.word	62386
	.byte	16,128,2
	.word	10264
	.byte	17,63,0,3
	.byte	'_Ifx_SRC_DMA',0,10,151,1,25,144,2,6
	.byte	'ERR',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'reserved_4',0
	.word	4834
	.byte	12,2,35,4,6
	.byte	'CH',0
	.word	62412
	.byte	128,2,2,35,16,0,7
	.word	62422
	.byte	31
	.byte	'Ifx_SRC_DMA',0,10,156,1,3
	.word	62489
	.byte	3
	.byte	'_Ifx_SRC_DSADC',0,10,159,1,25,8,6
	.byte	'SRM',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'SRA',0
	.word	10264
	.byte	4,2,35,4,0,7
	.word	62515
	.byte	31
	.byte	'Ifx_SRC_DSADC',0,10,163,1,3
	.word	62563
	.byte	3
	.byte	'_Ifx_SRC_EMEM',0,10,166,1,25,4,6
	.byte	'SR',0
	.word	10264
	.byte	4,2,35,0,0,7
	.word	62591
	.byte	31
	.byte	'Ifx_SRC_EMEM',0,10,169,1,3
	.word	62624
	.byte	3
	.byte	'_Ifx_SRC_ERAY',0,10,172,1,25,80,6
	.byte	'INT',0
	.word	62109
	.byte	8,2,35,0,6
	.byte	'TINT',0
	.word	62109
	.byte	8,2,35,8,6
	.byte	'NDAT',0
	.word	62109
	.byte	8,2,35,16,6
	.byte	'MBSC',0
	.word	62109
	.byte	8,2,35,24,6
	.byte	'OBUSY',0
	.word	10264
	.byte	4,2,35,32,6
	.byte	'IBUSY',0
	.word	10264
	.byte	4,2,35,36,6
	.byte	'reserved_28',0
	.word	45613
	.byte	40,2,35,40,0,7
	.word	62651
	.byte	31
	.byte	'Ifx_SRC_ERAY',0,10,181,1,3
	.word	62778
	.byte	3
	.byte	'_Ifx_SRC_ETH',0,10,184,1,25,4,6
	.byte	'SR',0
	.word	10264
	.byte	4,2,35,0,0,7
	.word	62805
	.byte	31
	.byte	'Ifx_SRC_ETH',0,10,187,1,3
	.word	62837
	.byte	3
	.byte	'_Ifx_SRC_FCE',0,10,190,1,25,4,6
	.byte	'SR',0
	.word	10264
	.byte	4,2,35,0,0,7
	.word	62863
	.byte	31
	.byte	'Ifx_SRC_FCE',0,10,193,1,3
	.word	62895
	.byte	3
	.byte	'_Ifx_SRC_GPSR',0,10,196,1,25,32,6
	.byte	'SR0',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	10264
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	10264
	.byte	4,2,35,12,6
	.byte	'reserved_10',0
	.word	45604
	.byte	16,2,35,16,0,7
	.word	62921
	.byte	31
	.byte	'Ifx_SRC_GPSR',0,10,203,1,3
	.word	63015
	.byte	3
	.byte	'_Ifx_SRC_GPT12',0,10,206,1,25,48,6
	.byte	'CIRQ',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'T2',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'T3',0
	.word	10264
	.byte	4,2,35,8,6
	.byte	'T4',0
	.word	10264
	.byte	4,2,35,12,6
	.byte	'T5',0
	.word	10264
	.byte	4,2,35,16,6
	.byte	'T6',0
	.word	10264
	.byte	4,2,35,20,6
	.byte	'reserved_18',0
	.word	3865
	.byte	24,2,35,24,0,7
	.word	63042
	.byte	31
	.byte	'Ifx_SRC_GPT12',0,10,215,1,3
	.word	63159
	.byte	16,12
	.word	10264
	.byte	17,2,0,16,32
	.word	10264
	.byte	17,7,0,16,32
	.word	63196
	.byte	17,0,0,16,88
	.word	173
	.byte	17,87,0,16,108
	.word	10264
	.byte	17,26,0,16,96
	.word	173
	.byte	17,95,0,16,128,1
	.word	63196
	.byte	17,3,0,16,128,3
	.word	173
	.byte	17,255,2,0,16,96
	.word	63196
	.byte	17,2,0,16,160,3
	.word	173
	.byte	17,159,3,0,16,16
	.word	10264
	.byte	17,3,0,16,80
	.word	63282
	.byte	17,4,0,16,176,2
	.word	173
	.byte	17,175,2,0,16,48
	.word	173
	.byte	17,47,0,3
	.byte	'_Ifx_SRC_GTM',0,10,218,1,25,208,18,6
	.byte	'AEIIRQ',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'ARUIRQ',0
	.word	63187
	.byte	12,2,35,4,6
	.byte	'reserved_10',0
	.word	2675
	.byte	4,2,35,16,6
	.byte	'BRCIRQ',0
	.word	10264
	.byte	4,2,35,20,6
	.byte	'CMPIRQ',0
	.word	10264
	.byte	4,2,35,24,6
	.byte	'SPEIRQ',0
	.word	62109
	.byte	8,2,35,28,6
	.byte	'reserved_24',0
	.word	4494
	.byte	8,2,35,36,6
	.byte	'PSM',0
	.word	63205
	.byte	32,2,35,44,6
	.byte	'reserved_4C',0
	.word	63214
	.byte	88,2,35,76,6
	.byte	'DPLL',0
	.word	63223
	.byte	108,3,35,164,1,6
	.byte	'reserved_110',0
	.word	63232
	.byte	96,3,35,144,2,6
	.byte	'ERR',0
	.word	10264
	.byte	4,3,35,240,2,6
	.byte	'reserved_174',0
	.word	4834
	.byte	12,3,35,244,2,6
	.byte	'TIM',0
	.word	63241
	.byte	128,1,3,35,128,3,6
	.byte	'reserved_200',0
	.word	63251
	.byte	128,3,3,35,128,4,6
	.byte	'MCS',0
	.word	63241
	.byte	128,1,3,35,128,7,6
	.byte	'reserved_400',0
	.word	63251
	.byte	128,3,3,35,128,8,6
	.byte	'TOM',0
	.word	63262
	.byte	96,3,35,128,11,6
	.byte	'reserved_5E0',0
	.word	63271
	.byte	160,3,3,35,224,11,6
	.byte	'ATOM',0
	.word	63291
	.byte	80,3,35,128,15,6
	.byte	'reserved_7D0',0
	.word	63300
	.byte	176,2,3,35,208,15,6
	.byte	'MCSW0',0
	.word	63282
	.byte	16,3,35,128,18,6
	.byte	'reserved_910',0
	.word	63311
	.byte	48,3,35,144,18,6
	.byte	'MCSW1',0
	.word	63282
	.byte	16,3,35,192,18,0,7
	.word	63320
	.byte	31
	.byte	'Ifx_SRC_GTM',0,10,244,1,3
	.word	63782
	.byte	3
	.byte	'_Ifx_SRC_HSCT',0,10,247,1,25,4,6
	.byte	'SR',0
	.word	10264
	.byte	4,2,35,0,0,7
	.word	63808
	.byte	31
	.byte	'Ifx_SRC_HSCT',0,10,250,1,3
	.word	63841
	.byte	3
	.byte	'_Ifx_SRC_HSM',0,10,253,1,25,8,6
	.byte	'HSM',0
	.word	62109
	.byte	8,2,35,0,0,7
	.word	63868
	.byte	31
	.byte	'Ifx_SRC_HSM',0,10,128,2,3
	.word	63901
	.byte	3
	.byte	'_Ifx_SRC_HSSL',0,10,131,2,25,16,6
	.byte	'COK',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'RDI',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	10264
	.byte	4,2,35,8,6
	.byte	'TRG',0
	.word	10264
	.byte	4,2,35,12,0,7
	.word	63927
	.byte	31
	.byte	'Ifx_SRC_HSSL',0,10,137,2,3
	.word	64000
	.byte	16,56
	.word	173
	.byte	17,55,0,3
	.byte	'_Ifx_SRC_I2C',0,10,140,2,25,80,6
	.byte	'BREQ',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'LBREQ',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'SREQ',0
	.word	10264
	.byte	4,2,35,8,6
	.byte	'LSREQ',0
	.word	10264
	.byte	4,2,35,12,6
	.byte	'ERR',0
	.word	10264
	.byte	4,2,35,16,6
	.byte	'P',0
	.word	10264
	.byte	4,2,35,20,6
	.byte	'reserved_18',0
	.word	64027
	.byte	56,2,35,24,0,7
	.word	64036
	.byte	31
	.byte	'Ifx_SRC_I2C',0,10,149,2,3
	.word	64159
	.byte	3
	.byte	'_Ifx_SRC_LMU',0,10,152,2,25,4,6
	.byte	'SR',0
	.word	10264
	.byte	4,2,35,0,0,7
	.word	64185
	.byte	31
	.byte	'Ifx_SRC_LMU',0,10,155,2,3
	.word	64217
	.byte	3
	.byte	'_Ifx_SRC_MSC',0,10,158,2,25,20,6
	.byte	'SR0',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	10264
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	10264
	.byte	4,2,35,12,6
	.byte	'SR4',0
	.word	10264
	.byte	4,2,35,16,0,7
	.word	64243
	.byte	31
	.byte	'Ifx_SRC_MSC',0,10,165,2,3
	.word	64328
	.byte	3
	.byte	'_Ifx_SRC_PMU',0,10,168,2,25,4,6
	.byte	'SR',0
	.word	10264
	.byte	4,2,35,0,0,7
	.word	64354
	.byte	31
	.byte	'Ifx_SRC_PMU',0,10,171,2,3
	.word	64386
	.byte	3
	.byte	'_Ifx_SRC_PSI5',0,10,174,2,25,32,6
	.byte	'SR',0
	.word	63196
	.byte	32,2,35,0,0,7
	.word	64412
	.byte	31
	.byte	'Ifx_SRC_PSI5',0,10,177,2,3
	.word	64445
	.byte	3
	.byte	'_Ifx_SRC_PSI5S',0,10,180,2,25,32,6
	.byte	'SR',0
	.word	63196
	.byte	32,2,35,0,0,7
	.word	64472
	.byte	31
	.byte	'Ifx_SRC_PSI5S',0,10,183,2,3
	.word	64506
	.byte	3
	.byte	'_Ifx_SRC_QSPI',0,10,186,2,25,24,6
	.byte	'TX',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'RX',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	10264
	.byte	4,2,35,8,6
	.byte	'PT',0
	.word	10264
	.byte	4,2,35,12,6
	.byte	'reserved_10',0
	.word	2675
	.byte	4,2,35,16,6
	.byte	'U',0
	.word	10264
	.byte	4,2,35,20,0,7
	.word	64534
	.byte	31
	.byte	'Ifx_SRC_QSPI',0,10,194,2,3
	.word	64636
	.byte	3
	.byte	'_Ifx_SRC_SCU',0,10,197,2,25,20,6
	.byte	'DTS',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'ERU',0
	.word	63282
	.byte	16,2,35,4,0,7
	.word	64663
	.byte	31
	.byte	'Ifx_SRC_SCU',0,10,201,2,3
	.word	64709
	.byte	16,40
	.word	10264
	.byte	17,9,0,3
	.byte	'_Ifx_SRC_SENT',0,10,204,2,25,40,6
	.byte	'SR',0
	.word	64735
	.byte	40,2,35,0,0,7
	.word	64744
	.byte	31
	.byte	'Ifx_SRC_SENT',0,10,207,2,3
	.word	64777
	.byte	3
	.byte	'_Ifx_SRC_SMU',0,10,210,2,25,12,6
	.byte	'SR',0
	.word	63187
	.byte	12,2,35,0,0,7
	.word	64804
	.byte	31
	.byte	'Ifx_SRC_SMU',0,10,213,2,3
	.word	64836
	.byte	3
	.byte	'_Ifx_SRC_STM',0,10,216,2,25,8,6
	.byte	'SR0',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10264
	.byte	4,2,35,4,0,7
	.word	64862
	.byte	31
	.byte	'Ifx_SRC_STM',0,10,220,2,3
	.word	64908
	.byte	3
	.byte	'_Ifx_SRC_VADCCG',0,10,223,2,25,16,6
	.byte	'SR0',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	10264
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	10264
	.byte	4,2,35,12,0,7
	.word	64934
	.byte	31
	.byte	'Ifx_SRC_VADCCG',0,10,229,2,3
	.word	65009
	.byte	3
	.byte	'_Ifx_SRC_VADCG',0,10,232,2,25,16,6
	.byte	'SR0',0
	.word	10264
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	10264
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	10264
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	10264
	.byte	4,2,35,12,0,7
	.word	65038
	.byte	31
	.byte	'Ifx_SRC_VADCG',0,10,238,2,3
	.word	65112
	.byte	3
	.byte	'_Ifx_SRC_XBAR',0,10,241,2,25,4,6
	.byte	'SRC',0
	.word	10264
	.byte	4,2,35,0,0,7
	.word	65140
	.byte	31
	.byte	'Ifx_SRC_XBAR',0,10,244,2,3
	.word	65174
	.byte	16,4
	.word	61735
	.byte	17,0,0,7
	.word	65201
	.byte	3
	.byte	'_Ifx_SRC_GAGBT',0,10,129,3,25,4,6
	.byte	'AGBT',0
	.word	65210
	.byte	4,2,35,0,0,7
	.word	65215
	.byte	31
	.byte	'Ifx_SRC_GAGBT',0,10,132,3,3
	.word	65251
	.byte	16,48
	.word	61793
	.byte	17,3,0,7
	.word	65279
	.byte	3
	.byte	'_Ifx_SRC_GASCLIN',0,10,135,3,25,48,6
	.byte	'ASCLIN',0
	.word	65288
	.byte	48,2,35,0,0,7
	.word	65293
	.byte	31
	.byte	'Ifx_SRC_GASCLIN',0,10,138,3,3
	.word	65333
	.byte	7
	.word	61880
	.byte	3
	.byte	'_Ifx_SRC_GBCU',0,10,141,3,25,4,6
	.byte	'SPB',0
	.word	65363
	.byte	4,2,35,0,0,7
	.word	65368
	.byte	31
	.byte	'Ifx_SRC_GBCU',0,10,144,3,3
	.word	65402
	.byte	16,64
	.word	61954
	.byte	17,0,0,7
	.word	65429
	.byte	3
	.byte	'_Ifx_SRC_GCAN',0,10,147,3,25,64,6
	.byte	'CAN',0
	.word	65438
	.byte	64,2,35,0,0,7
	.word	65443
	.byte	31
	.byte	'Ifx_SRC_GCAN',0,10,150,3,3
	.word	65477
	.byte	16,32
	.word	62011
	.byte	17,1,0,7
	.word	65504
	.byte	3
	.byte	'_Ifx_SRC_GCCU6',0,10,153,3,25,32,6
	.byte	'CCU6',0
	.word	65513
	.byte	32,2,35,0,0,7
	.word	65518
	.byte	31
	.byte	'Ifx_SRC_GCCU6',0,10,156,3,3
	.word	65554
	.byte	7
	.word	62118
	.byte	3
	.byte	'_Ifx_SRC_GCERBERUS',0,10,159,3,25,8,6
	.byte	'CERBERUS',0
	.word	65582
	.byte	8,2,35,0,0,7
	.word	65587
	.byte	31
	.byte	'Ifx_SRC_GCERBERUS',0,10,162,3,3
	.word	65631
	.byte	16,16
	.word	62184
	.byte	17,0,0,7
	.word	65663
	.byte	3
	.byte	'_Ifx_SRC_GCIF',0,10,165,3,25,16,6
	.byte	'CIF',0
	.word	65672
	.byte	16,2,35,0,0,7
	.word	65677
	.byte	31
	.byte	'Ifx_SRC_GCIF',0,10,168,3,3
	.word	65711
	.byte	16,12
	.word	62284
	.byte	17,2,0,7
	.word	65738
	.byte	3
	.byte	'_Ifx_SRC_GCPU',0,10,171,3,25,12,6
	.byte	'CPU',0
	.word	65747
	.byte	12,2,35,0,0,7
	.word	65752
	.byte	31
	.byte	'Ifx_SRC_GCPU',0,10,174,3,3
	.word	65786
	.byte	16,24
	.word	62354
	.byte	17,0,0,7
	.word	65813
	.byte	3
	.byte	'_Ifx_SRC_GDAM',0,10,177,3,25,24,6
	.byte	'DAM',0
	.word	65822
	.byte	24,2,35,0,0,7
	.word	65827
	.byte	31
	.byte	'Ifx_SRC_GDAM',0,10,180,3,3
	.word	65861
	.byte	16,144,2
	.word	62422
	.byte	17,0,0,7
	.word	65888
	.byte	3
	.byte	'_Ifx_SRC_GDMA',0,10,183,3,25,144,2,6
	.byte	'DMA',0
	.word	65898
	.byte	144,2,2,35,0,0,7
	.word	65903
	.byte	31
	.byte	'Ifx_SRC_GDMA',0,10,186,3,3
	.word	65939
	.byte	16,48
	.word	62515
	.byte	17,5,0,7
	.word	65966
	.byte	3
	.byte	'_Ifx_SRC_GDSADC',0,10,189,3,25,48,6
	.byte	'DSADC',0
	.word	65975
	.byte	48,2,35,0,0,7
	.word	65980
	.byte	31
	.byte	'Ifx_SRC_GDSADC',0,10,192,3,3
	.word	66018
	.byte	16,4
	.word	62591
	.byte	17,0,0,7
	.word	66047
	.byte	3
	.byte	'_Ifx_SRC_GEMEM',0,10,195,3,25,4,6
	.byte	'EMEM',0
	.word	66056
	.byte	4,2,35,0,0,7
	.word	66061
	.byte	31
	.byte	'Ifx_SRC_GEMEM',0,10,198,3,3
	.word	66097
	.byte	16,80
	.word	62651
	.byte	17,0,0,7
	.word	66125
	.byte	3
	.byte	'_Ifx_SRC_GERAY',0,10,201,3,25,80,6
	.byte	'ERAY',0
	.word	66134
	.byte	80,2,35,0,0,7
	.word	66139
	.byte	31
	.byte	'Ifx_SRC_GERAY',0,10,204,3,3
	.word	66175
	.byte	16,4
	.word	62805
	.byte	17,0,0,7
	.word	66203
	.byte	3
	.byte	'_Ifx_SRC_GETH',0,10,207,3,25,4,6
	.byte	'ETH',0
	.word	66212
	.byte	4,2,35,0,0,7
	.word	66217
	.byte	31
	.byte	'Ifx_SRC_GETH',0,10,210,3,3
	.word	66251
	.byte	16,4
	.word	62863
	.byte	17,0,0,7
	.word	66278
	.byte	3
	.byte	'_Ifx_SRC_GFCE',0,10,213,3,25,4,6
	.byte	'FCE',0
	.word	66287
	.byte	4,2,35,0,0,7
	.word	66292
	.byte	31
	.byte	'Ifx_SRC_GFCE',0,10,216,3,3
	.word	66326
	.byte	16,96
	.word	62921
	.byte	17,2,0,7
	.word	66353
	.byte	3
	.byte	'_Ifx_SRC_GGPSR',0,10,219,3,25,96,6
	.byte	'GPSR',0
	.word	66362
	.byte	96,2,35,0,0,7
	.word	66367
	.byte	31
	.byte	'Ifx_SRC_GGPSR',0,10,222,3,3
	.word	66403
	.byte	16,48
	.word	63042
	.byte	17,0,0,7
	.word	66431
	.byte	3
	.byte	'_Ifx_SRC_GGPT12',0,10,225,3,25,48,6
	.byte	'GPT12',0
	.word	66440
	.byte	48,2,35,0,0,7
	.word	66445
	.byte	31
	.byte	'Ifx_SRC_GGPT12',0,10,228,3,3
	.word	66483
	.byte	16,208,18
	.word	63320
	.byte	17,0,0,7
	.word	66512
	.byte	3
	.byte	'_Ifx_SRC_GGTM',0,10,231,3,25,208,18,6
	.byte	'GTM',0
	.word	66522
	.byte	208,18,2,35,0,0,7
	.word	66527
	.byte	31
	.byte	'Ifx_SRC_GGTM',0,10,234,3,3
	.word	66563
	.byte	16,4
	.word	63808
	.byte	17,0,0,7
	.word	66590
	.byte	3
	.byte	'_Ifx_SRC_GHSCT',0,10,237,3,25,4,6
	.byte	'HSCT',0
	.word	66599
	.byte	4,2,35,0,0,7
	.word	66604
	.byte	31
	.byte	'Ifx_SRC_GHSCT',0,10,240,3,3
	.word	66640
	.byte	16,8
	.word	63868
	.byte	17,0,0,7
	.word	66668
	.byte	3
	.byte	'_Ifx_SRC_GHSM',0,10,243,3,25,8,6
	.byte	'HSM',0
	.word	66677
	.byte	8,2,35,0,0,7
	.word	66682
	.byte	31
	.byte	'Ifx_SRC_GHSM',0,10,246,3,3
	.word	66716
	.byte	16,64
	.word	63927
	.byte	17,3,0,7
	.word	66743
	.byte	3
	.byte	'_Ifx_SRC_GHSSL',0,10,249,3,25,68,6
	.byte	'HSSL',0
	.word	66752
	.byte	64,2,35,0,6
	.byte	'EXI',0
	.word	10264
	.byte	4,2,35,64,0,7
	.word	66757
	.byte	31
	.byte	'Ifx_SRC_GHSSL',0,10,253,3,3
	.word	66806
	.byte	16,80
	.word	64036
	.byte	17,0,0,7
	.word	66834
	.byte	3
	.byte	'_Ifx_SRC_GI2C',0,10,128,4,25,80,6
	.byte	'I2C',0
	.word	66843
	.byte	80,2,35,0,0,7
	.word	66848
	.byte	31
	.byte	'Ifx_SRC_GI2C',0,10,131,4,3
	.word	66882
	.byte	16,4
	.word	64185
	.byte	17,0,0,7
	.word	66909
	.byte	3
	.byte	'_Ifx_SRC_GLMU',0,10,134,4,25,4,6
	.byte	'LMU',0
	.word	66918
	.byte	4,2,35,0,0,7
	.word	66923
	.byte	31
	.byte	'Ifx_SRC_GLMU',0,10,137,4,3
	.word	66957
	.byte	16,40
	.word	64243
	.byte	17,1,0,7
	.word	66984
	.byte	3
	.byte	'_Ifx_SRC_GMSC',0,10,140,4,25,40,6
	.byte	'MSC',0
	.word	66993
	.byte	40,2,35,0,0,7
	.word	66998
	.byte	31
	.byte	'Ifx_SRC_GMSC',0,10,143,4,3
	.word	67032
	.byte	16,8
	.word	64354
	.byte	17,1,0,7
	.word	67059
	.byte	3
	.byte	'_Ifx_SRC_GPMU',0,10,146,4,25,8,6
	.byte	'PMU',0
	.word	67068
	.byte	8,2,35,0,0,7
	.word	67073
	.byte	31
	.byte	'Ifx_SRC_GPMU',0,10,149,4,3
	.word	67107
	.byte	16,32
	.word	64412
	.byte	17,0,0,7
	.word	67134
	.byte	3
	.byte	'_Ifx_SRC_GPSI5',0,10,152,4,25,32,6
	.byte	'PSI5',0
	.word	67143
	.byte	32,2,35,0,0,7
	.word	67148
	.byte	31
	.byte	'Ifx_SRC_GPSI5',0,10,155,4,3
	.word	67184
	.byte	16,32
	.word	64472
	.byte	17,0,0,7
	.word	67212
	.byte	3
	.byte	'_Ifx_SRC_GPSI5S',0,10,158,4,25,32,6
	.byte	'PSI5S',0
	.word	67221
	.byte	32,2,35,0,0,7
	.word	67226
	.byte	31
	.byte	'Ifx_SRC_GPSI5S',0,10,161,4,3
	.word	67264
	.byte	16,96
	.word	64534
	.byte	17,3,0,7
	.word	67293
	.byte	3
	.byte	'_Ifx_SRC_GQSPI',0,10,164,4,25,96,6
	.byte	'QSPI',0
	.word	67302
	.byte	96,2,35,0,0,7
	.word	67307
	.byte	31
	.byte	'Ifx_SRC_GQSPI',0,10,167,4,3
	.word	67343
	.byte	7
	.word	64663
	.byte	3
	.byte	'_Ifx_SRC_GSCU',0,10,170,4,25,20,6
	.byte	'SCU',0
	.word	67371
	.byte	20,2,35,0,0,7
	.word	67376
	.byte	31
	.byte	'Ifx_SRC_GSCU',0,10,173,4,3
	.word	67410
	.byte	16,40
	.word	64744
	.byte	17,0,0,7
	.word	67437
	.byte	3
	.byte	'_Ifx_SRC_GSENT',0,10,176,4,25,40,6
	.byte	'SENT',0
	.word	67446
	.byte	40,2,35,0,0,7
	.word	67451
	.byte	31
	.byte	'Ifx_SRC_GSENT',0,10,179,4,3
	.word	67487
	.byte	16,12
	.word	64804
	.byte	17,0,0,7
	.word	67515
	.byte	3
	.byte	'_Ifx_SRC_GSMU',0,10,182,4,25,12,6
	.byte	'SMU',0
	.word	67524
	.byte	12,2,35,0,0,7
	.word	67529
	.byte	31
	.byte	'Ifx_SRC_GSMU',0,10,185,4,3
	.word	67563
	.byte	16,24
	.word	64862
	.byte	17,2,0,7
	.word	67590
	.byte	3
	.byte	'_Ifx_SRC_GSTM',0,10,188,4,25,24,6
	.byte	'STM',0
	.word	67599
	.byte	24,2,35,0,0,7
	.word	67604
	.byte	31
	.byte	'Ifx_SRC_GSTM',0,10,191,4,3
	.word	67638
	.byte	16,128,1
	.word	65038
	.byte	17,7,0,7
	.word	67665
	.byte	16,160,1
	.word	173
	.byte	17,159,1,0,16,32
	.word	64934
	.byte	17,1,0,7
	.word	67691
	.byte	3
	.byte	'_Ifx_SRC_GVADC',0,10,194,4,25,192,2,6
	.byte	'G',0
	.word	67675
	.byte	128,1,2,35,0,6
	.byte	'reserved_80',0
	.word	67680
	.byte	160,1,3,35,128,1,6
	.byte	'CG',0
	.word	67700
	.byte	32,3,35,160,2,0,7
	.word	67705
	.byte	31
	.byte	'Ifx_SRC_GVADC',0,10,199,4,3
	.word	67776
	.byte	7
	.word	65140
	.byte	3
	.byte	'_Ifx_SRC_GXBAR',0,10,202,4,25,4,6
	.byte	'XBAR',0
	.word	67804
	.byte	4,2,35,0,0,7
	.word	67809
	.byte	31
	.byte	'Ifx_SRC_GXBAR',0,10,205,4,3
	.word	67845
	.byte	14,5,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,31
	.byte	'IfxCpu_CounterMode',0,5,122,3
	.word	67873
	.byte	30,5,132,1,9,6,6
	.byte	'counter',0
	.word	1440
	.byte	4,2,35,0,6
	.byte	'overlfow',0
	.word	173
	.byte	1,2,35,4,0,31
	.byte	'IfxCpu_Counter',0,5,136,1,3
	.word	67960
	.byte	30,5,144,1,9,32,6
	.byte	'instruction',0
	.word	67960
	.byte	6,2,35,0,6
	.byte	'clock',0
	.word	67960
	.byte	6,2,35,6,6
	.byte	'counter1',0
	.word	67960
	.byte	6,2,35,12,6
	.byte	'counter2',0
	.word	67960
	.byte	6,2,35,18,6
	.byte	'counter3',0
	.word	67960
	.byte	6,2,35,24,0,31
	.byte	'IfxCpu_Perf',0,5,151,1,3
	.word	68026
	.byte	3
	.byte	'_Ifx_STM_ACCEN0_Bits',0,21,45,16,4,4
	.byte	'EN0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_STM_ACCEN0_Bits',0,21,79,3
	.word	68144
	.byte	3
	.byte	'_Ifx_STM_ACCEN1_Bits',0,21,82,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_ACCEN1_Bits',0,21,85,3
	.word	68701
	.byte	3
	.byte	'_Ifx_STM_CAP_Bits',0,21,88,16,4,4
	.byte	'STMCAP63_32',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_CAP_Bits',0,21,91,3
	.word	68778
	.byte	3
	.byte	'_Ifx_STM_CAPSV_Bits',0,21,94,16,4,4
	.byte	'STMCAP63_32',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_CAPSV_Bits',0,21,97,3
	.word	68850
	.byte	3
	.byte	'_Ifx_STM_CLC_Bits',0,21,100,16,4,4
	.byte	'DISR',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'DISS',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'EDIS',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_STM_CLC_Bits',0,21,107,3
	.word	68926
	.byte	3
	.byte	'_Ifx_STM_CMCON_Bits',0,21,110,16,4,4
	.byte	'MSIZE0',0,1
	.word	173
	.byte	5,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	173
	.byte	3,0,2,35,0,4
	.byte	'MSTART0',0,1
	.word	173
	.byte	5,3,2,35,1,4
	.byte	'reserved_13',0,1
	.word	173
	.byte	3,0,2,35,1,4
	.byte	'MSIZE1',0,1
	.word	173
	.byte	5,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	173
	.byte	3,0,2,35,2,4
	.byte	'MSTART1',0,1
	.word	173
	.byte	5,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	173
	.byte	3,0,2,35,3,0,31
	.byte	'Ifx_STM_CMCON_Bits',0,21,120,3
	.word	69067
	.byte	3
	.byte	'_Ifx_STM_CMP_Bits',0,21,123,16,4,4
	.byte	'CMPVAL',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_CMP_Bits',0,21,126,3
	.word	69285
	.byte	3
	.byte	'_Ifx_STM_ICR_Bits',0,21,129,1,16,4,4
	.byte	'CMP0EN',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'CMP0IR',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'CMP0OS',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'CMP1EN',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'CMP1IR',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'CMP1OS',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,4
	.word	150
	.byte	25,0,2,35,0,0,31
	.byte	'Ifx_STM_ICR_Bits',0,21,139,1,3
	.word	69352
	.byte	3
	.byte	'_Ifx_STM_ID_Bits',0,21,142,1,16,4,4
	.byte	'MODREV',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_STM_ID_Bits',0,21,147,1,3
	.word	69555
	.byte	3
	.byte	'_Ifx_STM_ISCR_Bits',0,21,150,1,16,4,4
	.byte	'CMP0IRR',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'CMP0IRS',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'CMP1IRR',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'CMP1IRS',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_STM_ISCR_Bits',0,21,157,1,3
	.word	69662
	.byte	3
	.byte	'_Ifx_STM_KRST0_Bits',0,21,160,1,16,4,4
	.byte	'RST',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'RSTSTAT',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_STM_KRST0_Bits',0,21,165,1,3
	.word	69813
	.byte	3
	.byte	'_Ifx_STM_KRST1_Bits',0,21,168,1,16,4,4
	.byte	'RST',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	150
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_STM_KRST1_Bits',0,21,172,1,3
	.word	69924
	.byte	3
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,21,175,1,16,4,4
	.byte	'CLR',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	150
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_STM_KRSTCLR_Bits',0,21,179,1,3
	.word	70016
	.byte	3
	.byte	'_Ifx_STM_OCS_Bits',0,21,182,1,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	24,8,2,35,0,4
	.byte	'SUS',0,1
	.word	173
	.byte	4,4,2,35,3,4
	.byte	'SUS_P',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'SUSSTA',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	173
	.byte	2,0,2,35,3,0,31
	.byte	'Ifx_STM_OCS_Bits',0,21,189,1,3
	.word	70112
	.byte	3
	.byte	'_Ifx_STM_TIM0_Bits',0,21,192,1,16,4,4
	.byte	'STM31_0',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM0_Bits',0,21,195,1,3
	.word	70258
	.byte	3
	.byte	'_Ifx_STM_TIM0SV_Bits',0,21,198,1,16,4,4
	.byte	'STM31_0',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM0SV_Bits',0,21,201,1,3
	.word	70330
	.byte	3
	.byte	'_Ifx_STM_TIM1_Bits',0,21,204,1,16,4,4
	.byte	'STM35_4',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM1_Bits',0,21,207,1,3
	.word	70406
	.byte	3
	.byte	'_Ifx_STM_TIM2_Bits',0,21,210,1,16,4,4
	.byte	'STM39_8',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM2_Bits',0,21,213,1,3
	.word	70478
	.byte	3
	.byte	'_Ifx_STM_TIM3_Bits',0,21,216,1,16,4,4
	.byte	'STM43_12',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM3_Bits',0,21,219,1,3
	.word	70550
	.byte	3
	.byte	'_Ifx_STM_TIM4_Bits',0,21,222,1,16,4,4
	.byte	'STM47_16',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM4_Bits',0,21,225,1,3
	.word	70623
	.byte	3
	.byte	'_Ifx_STM_TIM5_Bits',0,21,228,1,16,4,4
	.byte	'STM51_20',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM5_Bits',0,21,231,1,3
	.word	70696
	.byte	3
	.byte	'_Ifx_STM_TIM6_Bits',0,21,234,1,16,4,4
	.byte	'STM63_32',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM6_Bits',0,21,237,1,3
	.word	70769
	.byte	5,21,245,1,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68144
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ACCEN0',0,21,253,1,3
	.word	70842
	.byte	5,21,128,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68701
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ACCEN1',0,21,136,2,3
	.word	70906
	.byte	5,21,139,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68778
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CAP',0,21,147,2,3
	.word	70970
	.byte	5,21,150,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68850
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CAPSV',0,21,158,2,3
	.word	71031
	.byte	5,21,161,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	68926
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CLC',0,21,169,2,3
	.word	71094
	.byte	5,21,172,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69067
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CMCON',0,21,180,2,3
	.word	71155
	.byte	5,21,183,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69285
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CMP',0,21,191,2,3
	.word	71218
	.byte	5,21,194,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69352
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ICR',0,21,202,2,3
	.word	71279
	.byte	5,21,205,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69555
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ID',0,21,213,2,3
	.word	71340
	.byte	5,21,216,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69662
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ISCR',0,21,224,2,3
	.word	71400
	.byte	5,21,227,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69813
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_KRST0',0,21,235,2,3
	.word	71462
	.byte	5,21,238,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	69924
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_KRST1',0,21,246,2,3
	.word	71525
	.byte	5,21,249,2,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70016
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_KRSTCLR',0,21,129,3,3
	.word	71588
	.byte	5,21,132,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70112
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_OCS',0,21,140,3,3
	.word	71653
	.byte	5,21,143,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70258
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM0',0,21,151,3,3
	.word	71714
	.byte	5,21,154,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70330
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM0SV',0,21,162,3,3
	.word	71776
	.byte	5,21,165,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70406
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM1',0,21,173,3,3
	.word	71840
	.byte	5,21,176,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70478
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM2',0,21,184,3,3
	.word	71902
	.byte	5,21,187,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70550
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM3',0,21,195,3,3
	.word	71964
	.byte	5,21,198,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70623
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM4',0,21,206,3,3
	.word	72026
	.byte	5,21,209,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70696
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM5',0,21,217,3,3
	.word	72088
	.byte	5,21,220,3,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	70769
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM6',0,21,228,3,3
	.word	72150
	.byte	3
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,22,45,16,4,4
	.byte	'EN0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,22,79,3
	.word	72212
	.byte	3
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,22,82,16,4,4
	.byte	'reserved_0',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,22,85,3
	.word	72773
	.byte	3
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,22,88,16,4,4
	.byte	'SEL',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	173
	.byte	2,0,2,35,0,4
	.byte	'CLR',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'DIS',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,4
	.word	150
	.byte	22,0,2,35,0,0,31
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,22,95,3
	.word	72854
	.byte	3
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,22,98,16,4,4
	.byte	'VLD0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'VLD1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'VLD2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'VLD3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'VLD4',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'VLD5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'VLD6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'VLD7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'VLD8',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'VLD9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,4
	.word	150
	.byte	22,0,2,35,0,0,31
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,22,111,3
	.word	73007
	.byte	3
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,22,114,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	150
	.byte	19,8,2,35,0,4
	.byte	'ERR',0,1
	.word	173
	.byte	6,2,2,35,3,4
	.byte	'VLD',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'CLR',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,22,121,3
	.word	73255
	.byte	3
	.byte	'_Ifx_FLASH_COMM0_Bits',0,22,124,16,4,4
	.byte	'STATUS',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	150
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_FLASH_COMM0_Bits',0,22,128,1,3
	.word	73401
	.byte	3
	.byte	'_Ifx_FLASH_COMM1_Bits',0,22,131,1,16,4,4
	.byte	'STATUS',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'DATA',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_COMM1_Bits',0,22,136,1,3
	.word	73499
	.byte	3
	.byte	'_Ifx_FLASH_COMM2_Bits',0,22,139,1,16,4,4
	.byte	'STATUS',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'DATA',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_COMM2_Bits',0,22,144,1,3
	.word	73615
	.byte	3
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,22,147,1,16,4,4
	.byte	'RCODE',0,4
	.word	150
	.byte	22,10,2,35,0,4
	.byte	'reserved_22',0,2
	.word	190
	.byte	8,2,2,35,2,4
	.byte	'EDCERRINJ',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'ECCORDIS',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_ECCRD_Bits',0,22,153,1,3
	.word	73731
	.byte	3
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,22,156,1,16,4,4
	.byte	'RCODE',0,4
	.word	150
	.byte	22,10,2,35,0,4
	.byte	'reserved_22',0,2
	.word	190
	.byte	8,2,2,35,2,4
	.byte	'EDCERRINJ',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'ECCORDIS',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_ECCRP_Bits',0,22,162,1,3
	.word	73871
	.byte	3
	.byte	'_Ifx_FLASH_ECCW_Bits',0,22,165,1,16,4,4
	.byte	'WCODE',0,4
	.word	150
	.byte	22,10,2,35,0,4
	.byte	'reserved_22',0,2
	.word	190
	.byte	8,2,2,35,2,4
	.byte	'DECENCDIS',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'PECENCDIS',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_ECCW_Bits',0,22,171,1,3
	.word	74011
	.byte	3
	.byte	'_Ifx_FLASH_FCON_Bits',0,22,174,1,16,4,4
	.byte	'WSPFLASH',0,1
	.word	173
	.byte	4,4,2,35,0,4
	.byte	'WSECPF',0,1
	.word	173
	.byte	2,2,2,35,0,4
	.byte	'WSDFLASH',0,2
	.word	190
	.byte	6,4,2,35,0,4
	.byte	'WSECDF',0,1
	.word	173
	.byte	3,1,2,35,1,4
	.byte	'IDLE',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'ESLDIS',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'SLEEP',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'NSAFECC',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'STALL',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'RES21',0,1
	.word	173
	.byte	2,2,2,35,2,4
	.byte	'RES23',0,1
	.word	173
	.byte	2,0,2,35,2,4
	.byte	'VOPERM',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'SQERM',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'PROERM',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	173
	.byte	3,2,2,35,3,4
	.byte	'PR5V',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'EOBM',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_FCON_Bits',0,22,193,1,3
	.word	74150
	.byte	3
	.byte	'_Ifx_FLASH_FPRO_Bits',0,22,196,1,16,4,4
	.byte	'PROINP',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'PRODISP',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'PROIND',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'PRODISD',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'PROINHSMCOTP',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'RES5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'PROINOTP',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'RES7',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'PROINDBG',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'PRODISDBG',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'PROINHSM',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'reserved_11',0,1
	.word	173
	.byte	5,0,2,35,1,4
	.byte	'DCFP',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'DDFP',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'DDFPX',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'DDFD',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'ENPE',0,1
	.word	173
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	173
	.byte	8,0,2,35,3,0,31
	.byte	'Ifx_FLASH_FPRO_Bits',0,22,218,1,3
	.word	74512
	.byte	3
	.byte	'_Ifx_FLASH_FSR_Bits',0,22,221,1,16,4,4
	.byte	'FABUSY',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'D0BUSY',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'D1BUSY',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'P0BUSY',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'P1BUSY',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'RES5',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'RES6',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'PROG',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'ERASE',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'PFPAGE',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'DFPAGE',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'OPER',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'SQER',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'PROER',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'PFSBER',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'PFDBER',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'PFMBER',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'RES17',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'DFSBER',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'DFDBER',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'DFTBER',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'DFMBER',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'SRIADDERR',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	190
	.byte	2,7,2,35,2,4
	.byte	'PVER',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'EVER',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'SPND',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'SLM',0,1
	.word	173
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	173
	.byte	1,2,2,35,3,4
	.byte	'ORIER',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_FSR_Bits',0,22,254,1,3
	.word	74953
	.byte	3
	.byte	'_Ifx_FLASH_HSMFCON_Bits',0,22,129,2,16,4,4
	.byte	'LCKHSMUCB',0,1
	.word	173
	.byte	2,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	150
	.byte	22,8,2,35,0,4
	.byte	'VOPERM',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'SQERM',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	173
	.byte	5,1,2,35,3,4
	.byte	'EOBM',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_HSMFCON_Bits',0,22,137,2,3
	.word	75561
	.byte	3
	.byte	'_Ifx_FLASH_HSMFSR_Bits',0,22,140,2,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	2,6,2,35,0,4
	.byte	'D1BUSY',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	173
	.byte	4,1,2,35,0,4
	.byte	'PROG',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'ERASE',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'DFPAGE',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'OPER',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'SQER',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'reserved_13',0,4
	.word	150
	.byte	12,7,2,35,0,4
	.byte	'PVER',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'EVER',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'SPND',0,1
	.word	173
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	173
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_FLASH_HSMFSR_Bits',0,22,156,2,3
	.word	75741
	.byte	3
	.byte	'_Ifx_FLASH_HSMMARD_Bits',0,22,159,2,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SELD1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'SPND',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'SPNDERR',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,4
	.word	150
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMMARD_Bits',0,22,167,2,3
	.word	76063
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRAD_Bits',0,22,170,2,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	3,5,2,35,0,4
	.byte	'ADD',0,4
	.word	150
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMRRAD_Bits',0,22,174,2,3
	.word	76244
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRCT_Bits',0,22,177,2,16,4,4
	.byte	'STRT',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'STP',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'BUSY',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'DONE',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'ERR',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	173
	.byte	3,0,2,35,0,4
	.byte	'EOBM',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	173
	.byte	7,0,2,35,1,4
	.byte	'CNT',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_HSMRRCT_Bits',0,22,188,2,3
	.word	76344
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRD0_Bits',0,22,191,2,16,4,4
	.byte	'DATA',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMRRD0_Bits',0,22,194,2,3
	.word	76560
	.byte	3
	.byte	'_Ifx_FLASH_HSMRRD1_Bits',0,22,197,2,16,4,4
	.byte	'DATA',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMRRD1_Bits',0,22,200,2,3
	.word	76639
	.byte	3
	.byte	'_Ifx_FLASH_ID_Bits',0,22,203,2,16,4,4
	.byte	'MOD_REV',0,1
	.word	173
	.byte	8,0,2,35,0,4
	.byte	'MOD_TYPE',0,1
	.word	173
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_ID_Bits',0,22,208,2,3
	.word	76718
	.byte	3
	.byte	'_Ifx_FLASH_MARD_Bits',0,22,211,2,16,4,4
	.byte	'HMARGIN',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SELD0',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'SPND',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'SPNDERR',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,2
	.word	190
	.byte	10,1,2,35,0,4
	.byte	'TRAPDIS',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_MARD_Bits',0,22,221,2,3
	.word	76831
	.byte	3
	.byte	'_Ifx_FLASH_MARP_Bits',0,22,224,2,16,4,4
	.byte	'SELP0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SELP1',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'RES2',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'RES3',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,2
	.word	190
	.byte	11,1,2,35,0,4
	.byte	'TRAPDIS',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_MARP_Bits',0,22,233,2,3
	.word	77045
	.byte	3
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,22,236,2,16,4,4
	.byte	'L',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'NSAFECC',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'RAMIN',0,1
	.word	173
	.byte	2,4,2,35,0,4
	.byte	'RAMINSEL',0,1
	.word	173
	.byte	4,0,2,35,0,4
	.byte	'OSCCFG',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'MODE',0,1
	.word	173
	.byte	2,5,2,35,1,4
	.byte	'APREN',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'CAP0EN',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'CAP1EN',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'CAP2EN',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'CAP3EN',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'ESR0CNT',0,2
	.word	190
	.byte	12,4,2,35,2,4
	.byte	'RES29',0,1
	.word	173
	.byte	2,2,2,35,3,4
	.byte	'RES30',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'RPRO',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_PROCOND_Bits',0,22,253,2,3
	.word	77232
	.byte	3
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,22,128,3,16,4,4
	.byte	'OCDSDIS',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'DBGIFLCK',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'EDM',0,1
	.word	173
	.byte	2,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	150
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,22,134,3,3
	.word	77556
	.byte	3
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,22,137,3,16,4,4
	.byte	'HSMDBGDIS',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'DBGIFLCK',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'TSTIFLCK',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'HSMTSTDIS',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'RES15',0,2
	.word	190
	.byte	12,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,22,145,3,3
	.word	77699
	.byte	3
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,22,148,3,16,4,4
	.byte	'HSMBOOTEN',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'SSWWAIT',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'HSMDX',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'HSM6X',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'HSM16X',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'HSM17X',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'S6ROM',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'HSMENPINS',0,2
	.word	190
	.byte	2,7,2,35,0,4
	.byte	'HSMENRES',0,1
	.word	173
	.byte	2,5,2,35,1,4
	.byte	'DESTDBG',0,1
	.word	173
	.byte	2,3,2,35,1,4
	.byte	'BLKFLAN',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	173
	.byte	2,0,2,35,1,4
	.byte	'S16ROM',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'S17ROM',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	190
	.byte	14,0,2,35,2,0,31
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,22,165,3,3
	.word	77888
	.byte	3
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,22,168,3,16,4,4
	.byte	'S0ROM',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'S1ROM',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'S2ROM',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'S3ROM',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'S4ROM',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'S5ROM',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'S6ROM',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'S7ROM',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'S8ROM',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'S9ROM',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'S10ROM',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'S11ROM',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'S12ROM',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'S13ROM',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'S14ROM',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'S15ROM',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'S16ROM',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'S17ROM',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'S18ROM',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'S19ROM',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'S20ROM',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'S21ROM',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'S22ROM',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'S23ROM',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'S24ROM',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'S25ROM',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'S26ROM',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	173
	.byte	2,3,2,35,3,4
	.byte	'BML',0,1
	.word	173
	.byte	2,1,2,35,3,4
	.byte	'TP',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,22,200,3,3
	.word	78251
	.byte	3
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,22,203,3,16,4,4
	.byte	'S0L',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'S1L',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'S2L',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'S3L',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'S4L',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'S5L',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'S6L',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'S7L',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'S8L',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'S9L',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'S10L',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'S11L',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'S12L',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'S13L',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'S14L',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'S15L',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'S16L',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'S17L',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'S18L',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'S19L',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'S20L',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'S21L',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'S22L',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'S23L',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'S24L',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'S25L',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'S26L',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	173
	.byte	4,1,2,35,3,4
	.byte	'RPRO',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_PROCONP_Bits',0,22,234,3,3
	.word	78846
	.byte	3
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,22,237,3,16,4,4
	.byte	'S0WOP',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'S1WOP',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'S2WOP',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'S3WOP',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'S4WOP',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'S5WOP',0,1
	.word	173
	.byte	1,2,2,35,0,4
	.byte	'S6WOP',0,1
	.word	173
	.byte	1,1,2,35,0,4
	.byte	'S7WOP',0,1
	.word	173
	.byte	1,0,2,35,0,4
	.byte	'S8WOP',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'S9WOP',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'S10WOP',0,1
	.word	173
	.byte	1,5,2,35,1,4
	.byte	'S11WOP',0,1
	.word	173
	.byte	1,4,2,35,1,4
	.byte	'S12WOP',0,1
	.word	173
	.byte	1,3,2,35,1,4
	.byte	'S13WOP',0,1
	.word	173
	.byte	1,2,2,35,1,4
	.byte	'S14WOP',0,1
	.word	173
	.byte	1,1,2,35,1,4
	.byte	'S15WOP',0,1
	.word	173
	.byte	1,0,2,35,1,4
	.byte	'S16WOP',0,1
	.word	173
	.byte	1,7,2,35,2,4
	.byte	'S17WOP',0,1
	.word	173
	.byte	1,6,2,35,2,4
	.byte	'S18WOP',0,1
	.word	173
	.byte	1,5,2,35,2,4
	.byte	'S19WOP',0,1
	.word	173
	.byte	1,4,2,35,2,4
	.byte	'S20WOP',0,1
	.word	173
	.byte	1,3,2,35,2,4
	.byte	'S21WOP',0,1
	.word	173
	.byte	1,2,2,35,2,4
	.byte	'S22WOP',0,1
	.word	173
	.byte	1,1,2,35,2,4
	.byte	'S23WOP',0,1
	.word	173
	.byte	1,0,2,35,2,4
	.byte	'S24WOP',0,1
	.word	173
	.byte	1,7,2,35,3,4
	.byte	'S25WOP',0,1
	.word	173
	.byte	1,6,2,35,3,4
	.byte	'S26WOP',0,1
	.word	173
	.byte	1,5,2,35,3,4
	.byte	'reserved_27',0,1
	.word	173
	.byte	4,1,2,35,3,4
	.byte	'DATM',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,22,140,4,3
	.word	79370
	.byte	3
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,22,143,4,16,4,4
	.byte	'TAG',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,22,147,4,3
	.word	79952
	.byte	3
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,22,150,4,16,4,4
	.byte	'TAG',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,22,154,4,3
	.word	80054
	.byte	3
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,22,157,4,16,4,4
	.byte	'TAG',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	150
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,22,161,4,3
	.word	80156
	.byte	3
	.byte	'_Ifx_FLASH_RRAD_Bits',0,22,164,4,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	3,5,2,35,0,4
	.byte	'ADD',0,4
	.word	150
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RRAD_Bits',0,22,168,4,3
	.word	80258
	.byte	3
	.byte	'_Ifx_FLASH_RRCT_Bits',0,22,171,4,16,4,4
	.byte	'STRT',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'STP',0,1
	.word	173
	.byte	1,6,2,35,0,4
	.byte	'BUSY',0,1
	.word	173
	.byte	1,5,2,35,0,4
	.byte	'DONE',0,1
	.word	173
	.byte	1,4,2,35,0,4
	.byte	'ERR',0,1
	.word	173
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	173
	.byte	3,0,2,35,0,4
	.byte	'EOBM',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	173
	.byte	7,0,2,35,1,4
	.byte	'CNT',0,2
	.word	190
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_RRCT_Bits',0,22,182,4,3
	.word	80352
	.byte	3
	.byte	'_Ifx_FLASH_RRD0_Bits',0,22,185,4,16,4,4
	.byte	'DATA',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RRD0_Bits',0,22,188,4,3
	.word	80562
	.byte	3
	.byte	'_Ifx_FLASH_RRD1_Bits',0,22,191,4,16,4,4
	.byte	'DATA',0,4
	.word	150
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RRD1_Bits',0,22,194,4,3
	.word	80635
	.byte	3
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,22,197,4,16,4,4
	.byte	'SEL',0,1
	.word	173
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	173
	.byte	2,0,2,35,0,4
	.byte	'CLR',0,1
	.word	173
	.byte	1,7,2,35,1,4
	.byte	'DIS',0,1
	.word	173
	.byte	1,6,2,35,1,4
	.byte	'reserved_10',0,4
	.word	150
	.byte	22,0,2,35,0,0,31
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,22,204,4,3
	.word	80708
	.byte	3
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,22,207,4,16,4,4
	.byte	'VLD0',0,1
	.word	173
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	150
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,22,211,4,3
	.word	80863
	.byte	3
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,22,214,4,16,4,4
	.byte	'reserved_0',0,1
	.word	173
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	150
	.byte	19,8,2,35,0,4
	.byte	'ERR',0,1
	.word	173
	.byte	6,2,2,35,3,4
	.byte	'VLD',0,1
	.word	173
	.byte	1,1,2,35,3,4
	.byte	'CLR',0,1
	.word	173
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,22,221,4,3
	.word	80968
	.byte	5,22,229,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	72212
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ACCEN0',0,22,237,4,3
	.word	81116
	.byte	5,22,240,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	72773
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ACCEN1',0,22,248,4,3
	.word	81182
	.byte	5,22,251,4,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	72854
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_CBAB_CFG',0,22,131,5,3
	.word	81248
	.byte	5,22,134,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73007
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_CBAB_STAT',0,22,142,5,3
	.word	81316
	.byte	5,22,145,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73255
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_CBAB_TOP',0,22,153,5,3
	.word	81385
	.byte	5,22,156,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73401
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_COMM0',0,22,164,5,3
	.word	81453
	.byte	5,22,167,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73499
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_COMM1',0,22,175,5,3
	.word	81518
	.byte	5,22,178,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73615
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_COMM2',0,22,186,5,3
	.word	81583
	.byte	5,22,189,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73731
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ECCRD',0,22,197,5,3
	.word	81648
	.byte	5,22,200,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	73871
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ECCRP',0,22,208,5,3
	.word	81713
	.byte	5,22,211,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	74011
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ECCW',0,22,219,5,3
	.word	81778
	.byte	5,22,222,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	74150
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_FCON',0,22,230,5,3
	.word	81842
	.byte	5,22,233,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	74512
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_FPRO',0,22,241,5,3
	.word	81906
	.byte	5,22,244,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	74953
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_FSR',0,22,252,5,3
	.word	81970
	.byte	5,22,255,5,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	75561
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMFCON',0,22,135,6,3
	.word	82033
	.byte	5,22,138,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	75741
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMFSR',0,22,146,6,3
	.word	82100
	.byte	5,22,149,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76063
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMMARD',0,22,157,6,3
	.word	82166
	.byte	5,22,160,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76244
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMRRAD',0,22,168,6,3
	.word	82233
	.byte	5,22,171,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76344
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMRRCT',0,22,179,6,3
	.word	82300
	.byte	5,22,182,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76560
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMRRD0',0,22,190,6,3
	.word	82367
	.byte	5,22,193,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76639
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_HSMRRD1',0,22,201,6,3
	.word	82434
	.byte	5,22,204,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76718
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ID',0,22,212,6,3
	.word	82501
	.byte	5,22,215,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	76831
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_MARD',0,22,223,6,3
	.word	82563
	.byte	5,22,226,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	77045
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_MARP',0,22,234,6,3
	.word	82627
	.byte	5,22,237,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	77232
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCOND',0,22,245,6,3
	.word	82691
	.byte	5,22,248,6,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	77556
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONDBG',0,22,128,7,3
	.word	82758
	.byte	5,22,131,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	77699
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONHSM',0,22,139,7,3
	.word	82827
	.byte	5,22,142,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	77888
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,22,150,7,3
	.word	82896
	.byte	5,22,153,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	78251
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONOTP',0,22,161,7,3
	.word	82969
	.byte	5,22,164,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	78846
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONP',0,22,172,7,3
	.word	83038
	.byte	5,22,175,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	79370
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONWOP',0,22,183,7,3
	.word	83105
	.byte	5,22,186,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	79952
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG0',0,22,194,7,3
	.word	83174
	.byte	5,22,197,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80054
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG1',0,22,205,7,3
	.word	83242
	.byte	5,22,208,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80156
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG2',0,22,216,7,3
	.word	83310
	.byte	5,22,219,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80258
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RRAD',0,22,227,7,3
	.word	83378
	.byte	5,22,230,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80352
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RRCT',0,22,238,7,3
	.word	83442
	.byte	5,22,241,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80562
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RRD0',0,22,249,7,3
	.word	83506
	.byte	5,22,252,7,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80635
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RRD1',0,22,132,8,3
	.word	83570
	.byte	5,22,135,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80708
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_UBAB_CFG',0,22,143,8,3
	.word	83634
	.byte	5,22,146,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80863
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_UBAB_STAT',0,22,154,8,3
	.word	83702
	.byte	5,22,157,8,9,4,6
	.byte	'U',0
	.word	150
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	166
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	80968
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_UBAB_TOP',0,22,165,8,3
	.word	83771
	.byte	3
	.byte	'_Ifx_FLASH_CBAB',0,22,176,8,25,12,6
	.byte	'CFG',0
	.word	81248
	.byte	4,2,35,0,6
	.byte	'STAT',0
	.word	81316
	.byte	4,2,35,4,6
	.byte	'TOP',0
	.word	81385
	.byte	4,2,35,8,0,7
	.word	83839
	.byte	31
	.byte	'Ifx_FLASH_CBAB',0,22,181,8,3
	.word	83902
	.byte	3
	.byte	'_Ifx_FLASH_RDB',0,22,184,8,25,12,6
	.byte	'CFG0',0
	.word	83174
	.byte	4,2,35,0,6
	.byte	'CFG1',0
	.word	83242
	.byte	4,2,35,4,6
	.byte	'CFG2',0
	.word	83310
	.byte	4,2,35,8,0,7
	.word	83931
	.byte	31
	.byte	'Ifx_FLASH_RDB',0,22,189,8,3
	.word	83995
	.byte	3
	.byte	'_Ifx_FLASH_UBAB',0,22,192,8,25,12,6
	.byte	'CFG',0
	.word	83634
	.byte	4,2,35,0,6
	.byte	'STAT',0
	.word	83702
	.byte	4,2,35,4,6
	.byte	'TOP',0
	.word	83771
	.byte	4,2,35,8,0,7
	.word	84023
	.byte	31
	.byte	'Ifx_FLASH_UBAB',0,22,197,8,3
	.word	84086
	.byte	31
	.byte	'Ifx_P_ACCEN0_Bits',0,8,79,3
	.word	8231
	.byte	31
	.byte	'Ifx_P_ACCEN1_Bits',0,8,85,3
	.word	8144
	.byte	31
	.byte	'Ifx_P_ESR_Bits',0,8,107,3
	.word	4503
	.byte	31
	.byte	'Ifx_P_ID_Bits',0,8,115,3
	.word	2556
	.byte	31
	.byte	'Ifx_P_IN_Bits',0,8,137,1,3
	.word	3551
	.byte	31
	.byte	'Ifx_P_IOCR0_Bits',0,8,150,1,3
	.word	2684
	.byte	31
	.byte	'Ifx_P_IOCR12_Bits',0,8,163,1,3
	.word	3331
	.byte	31
	.byte	'Ifx_P_IOCR4_Bits',0,8,176,1,3
	.word	2899
	.byte	31
	.byte	'Ifx_P_IOCR8_Bits',0,8,189,1,3
	.word	3114
	.byte	31
	.byte	'Ifx_P_LPCR0_Bits',0,8,197,1,3
	.word	7503
	.byte	31
	.byte	'Ifx_P_LPCR1_Bits',0,8,205,1,3
	.word	7627
	.byte	31
	.byte	'Ifx_P_LPCR1_P21_Bits',0,8,215,1,3
	.word	7711
	.byte	31
	.byte	'Ifx_P_LPCR2_Bits',0,8,229,1,3
	.word	7891
	.byte	31
	.byte	'Ifx_P_OMCR0_Bits',0,8,240,1,3
	.word	6142
	.byte	31
	.byte	'Ifx_P_OMCR12_Bits',0,8,250,1,3
	.word	6666
	.byte	31
	.byte	'Ifx_P_OMCR4_Bits',0,8,133,2,3
	.word	6316
	.byte	31
	.byte	'Ifx_P_OMCR8_Bits',0,8,144,2,3
	.word	6490
	.byte	31
	.byte	'Ifx_P_OMCR_Bits',0,8,166,2,3
	.word	7155
	.byte	31
	.byte	'Ifx_P_OMR_Bits',0,8,203,2,3
	.word	1985
	.byte	31
	.byte	'Ifx_P_OMSR0_Bits',0,8,213,2,3
	.word	5479
	.byte	31
	.byte	'Ifx_P_OMSR12_Bits',0,8,224,2,3
	.word	5967
	.byte	31
	.byte	'Ifx_P_OMSR4_Bits',0,8,235,2,3
	.word	5626
	.byte	31
	.byte	'Ifx_P_OMSR8_Bits',0,8,246,2,3
	.word	5795
	.byte	31
	.byte	'Ifx_P_OMSR_Bits',0,8,140,3,3
	.word	6822
	.byte	31
	.byte	'Ifx_P_OUT_Bits',0,8,162,3,3
	.word	1669
	.byte	31
	.byte	'Ifx_P_PCSR_Bits',0,8,179,3,3
	.word	5209
	.byte	31
	.byte	'Ifx_P_PDISC_Bits',0,8,201,3,3
	.word	4843
	.byte	31
	.byte	'Ifx_P_PDR0_Bits',0,8,222,3,3
	.word	3874
	.byte	31
	.byte	'Ifx_P_PDR1_Bits',0,8,243,3,3
	.word	4178
	.byte	31
	.byte	'Ifx_P_ACCEN0',0,8,131,4,3
	.word	8758
	.byte	31
	.byte	'Ifx_P_ACCEN1',0,8,142,4,3
	.word	8191
	.byte	31
	.byte	'Ifx_P_ESR',0,8,153,4,3
	.word	4794
	.byte	31
	.byte	'Ifx_P_ID',0,8,164,4,3
	.word	2635
	.byte	31
	.byte	'Ifx_P_IN',0,8,175,4,3
	.word	3825
	.byte	31
	.byte	'Ifx_P_IOCR0',0,8,186,4,3
	.word	2859
	.byte	31
	.byte	'Ifx_P_IOCR12',0,8,197,4,3
	.word	3511
	.byte	31
	.byte	'Ifx_P_IOCR4',0,8,208,4,3
	.word	3074
	.byte	31
	.byte	'Ifx_P_IOCR8',0,8,219,4,3
	.word	3291
	.byte	31
	.byte	'Ifx_P_LPCR0',0,8,230,4,3
	.word	7587
	.byte	31
	.byte	'Ifx_P_LPCR1',0,8,243,4,3
	.word	7836
	.byte	31
	.byte	'Ifx_P_LPCR2',0,8,254,4,3
	.word	8095
	.byte	31
	.byte	'Ifx_P_OMCR',0,8,137,5,3
	.word	7463
	.byte	31
	.byte	'Ifx_P_OMCR0',0,8,148,5,3
	.word	6276
	.byte	31
	.byte	'Ifx_P_OMCR12',0,8,159,5,3
	.word	6782
	.byte	31
	.byte	'Ifx_P_OMCR4',0,8,170,5,3
	.word	6450
	.byte	31
	.byte	'Ifx_P_OMCR8',0,8,181,5,3
	.word	6626
	.byte	31
	.byte	'Ifx_P_OMR',0,8,192,5,3
	.word	2516
	.byte	31
	.byte	'Ifx_P_OMSR',0,8,203,5,3
	.word	7115
	.byte	31
	.byte	'Ifx_P_OMSR0',0,8,214,5,3
	.word	5586
	.byte	31
	.byte	'Ifx_P_OMSR12',0,8,225,5,3
	.word	6102
	.byte	31
	.byte	'Ifx_P_OMSR4',0,8,236,5,3
	.word	5755
	.byte	31
	.byte	'Ifx_P_OMSR8',0,8,247,5,3
	.word	5927
	.byte	31
	.byte	'Ifx_P_OUT',0,8,130,6,3
	.word	1945
	.byte	31
	.byte	'Ifx_P_PCSR',0,8,141,6,3
	.word	5439
	.byte	31
	.byte	'Ifx_P_PDISC',0,8,152,6,3
	.word	5169
	.byte	31
	.byte	'Ifx_P_PDR0',0,8,163,6,3
	.word	4138
	.byte	31
	.byte	'Ifx_P_PDR1',0,8,174,6,3
	.word	4454
	.byte	7
	.word	8798
	.byte	31
	.byte	'Ifx_P',0,8,223,6,3
	.word	85433
	.byte	14,7,63,9,1,15
	.byte	'IfxPort_InputMode_undefined',0,127,15
	.byte	'IfxPort_InputMode_noPullDevice',0,0,15
	.byte	'IfxPort_InputMode_pullDown',0,8,15
	.byte	'IfxPort_InputMode_pullUp',0,16,0,31
	.byte	'IfxPort_InputMode',0,7,69,3
	.word	85453
	.byte	31
	.byte	'IfxPort_Mode',0,7,96,3
	.word	18998
	.byte	31
	.byte	'IfxPort_OutputIdx',0,7,110,3
	.word	9480
	.byte	31
	.byte	'IfxPort_OutputMode',0,7,118,3
	.word	9411
	.byte	31
	.byte	'IfxPort_PadDriver',0,7,138,1,3
	.word	19742
	.byte	31
	.byte	'IfxPort_State',0,7,158,1,3
	.word	9793
	.byte	31
	.byte	'IfxPort_Pin',0,7,174,1,3
	.word	20502
	.byte	33,1,1,8
	.word	85749
	.byte	31
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,14,129,1,16
	.word	85752
	.byte	30,14,197,5,9,8,6
	.byte	'value',0
	.word	1440
	.byte	4,2,35,0,6
	.byte	'mask',0
	.word	1440
	.byte	4,2,35,4,0,31
	.byte	'IfxScuCcu_CcuconRegConfig',0,14,201,5,3
	.word	85797
	.byte	30,14,206,5,9,8,6
	.byte	'pDivider',0
	.word	173
	.byte	1,2,35,0,6
	.byte	'nDivider',0
	.word	173
	.byte	1,2,35,1,6
	.byte	'k2Initial',0
	.word	173
	.byte	1,2,35,2,6
	.byte	'waitTime',0
	.word	20241
	.byte	4,2,35,4,0,31
	.byte	'IfxScuCcu_InitialStepConfig',0,14,212,5,3
	.word	85868
	.byte	30,14,216,5,9,12,6
	.byte	'k2Step',0
	.word	173
	.byte	1,2,35,0,6
	.byte	'waitTime',0
	.word	20241
	.byte	4,2,35,2,6
	.byte	'hookFunction',0
	.word	85757
	.byte	4,2,35,8,0,31
	.byte	'IfxScuCcu_PllStepsConfig',0,14,221,5,3
	.word	85985
	.byte	8
	.word	85749
	.byte	30,14,229,5,9,56,6
	.byte	'ccucon0',0
	.word	85797
	.byte	8,2,35,0,6
	.byte	'ccucon1',0
	.word	85797
	.byte	8,2,35,8,6
	.byte	'ccucon2',0
	.word	85797
	.byte	8,2,35,16,6
	.byte	'ccucon5',0
	.word	85797
	.byte	8,2,35,24,6
	.byte	'ccucon6',0
	.word	85797
	.byte	8,2,35,32,6
	.byte	'ccucon7',0
	.word	85797
	.byte	8,2,35,40,6
	.byte	'ccucon8',0
	.word	85797
	.byte	8,2,35,48,0,31
	.byte	'IfxScuCcu_ClockDistributionConfig',0,14,238,5,3
	.word	86087
	.byte	30,14,242,5,9,8,6
	.byte	'value',0
	.word	1440
	.byte	4,2,35,0,6
	.byte	'mask',0
	.word	1440
	.byte	4,2,35,4,0,31
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,14,246,5,3
	.word	86256
	.byte	8
	.word	85985
	.byte	30,14,251,5,9,16,6
	.byte	'numOfPllDividerSteps',0
	.word	173
	.byte	1,2,35,0,6
	.byte	'pllDividerStep',0
	.word	86332
	.byte	4,2,35,4,6
	.byte	'pllInitialStep',0
	.word	85868
	.byte	8,2,35,8,0,31
	.byte	'IfxScuCcu_SysPllConfig',0,14,128,6,3
	.word	86337
	.byte	31
	.byte	'Ifx_I2C_ACCEN0_Bits',0,13,79,3
	.word	15411
	.byte	31
	.byte	'Ifx_I2C_ACCEN1_Bits',0,13,85,3
	.word	15980
	.byte	31
	.byte	'Ifx_I2C_ADDRCFG_Bits',0,13,99,3
	.word	11423
	.byte	31
	.byte	'Ifx_I2C_BUSSTAT_Bits',0,13,107,3
	.word	11645
	.byte	31
	.byte	'Ifx_I2C_CLC1_Bits',0,13,121,3
	.word	10547
	.byte	31
	.byte	'Ifx_I2C_CLC_Bits',0,13,129,1,3
	.word	15060
	.byte	31
	.byte	'Ifx_I2C_ENDDCTRL_Bits',0,13,137,1,3
	.word	11001
	.byte	31
	.byte	'Ifx_I2C_ERRIRQSC_Bits',0,13,147,1,3
	.word	13104
	.byte	31
	.byte	'Ifx_I2C_ERRIRQSM_Bits',0,13,157,1,3
	.word	12768
	.byte	31
	.byte	'Ifx_I2C_ERRIRQSS_Bits',0,13,167,1,3
	.word	12936
	.byte	31
	.byte	'Ifx_I2C_FDIVCFG_Bits',0,13,176,1,3
	.word	11129
	.byte	31
	.byte	'Ifx_I2C_FDIVHIGHCFG_Bits',0,13,185,1,3
	.word	11274
	.byte	31
	.byte	'Ifx_I2C_FFSSTAT_Bits',0,13,192,1,3
	.word	12365
	.byte	31
	.byte	'Ifx_I2C_FIFOCFG_Bits',0,13,208,1,3
	.word	11764
	.byte	31
	.byte	'Ifx_I2C_GPCTL_Bits',0,13,215,1,3
	.word	15305
	.byte	31
	.byte	'Ifx_I2C_ICR_Bits',0,13,225,1,3
	.word	14494
	.byte	31
	.byte	'Ifx_I2C_ID_Bits',0,13,233,1,3
	.word	10768
	.byte	31
	.byte	'Ifx_I2C_IMSC_Bits',0,13,245,1,3
	.word	14067
	.byte	31
	.byte	'Ifx_I2C_ISR_Bits',0,13,129,2,3
	.word	14663
	.byte	31
	.byte	'Ifx_I2C_KRST0_Bits',0,13,137,2,3
	.word	16069
	.byte	31
	.byte	'Ifx_I2C_KRST1_Bits',0,13,144,2,3
	.word	16192
	.byte	31
	.byte	'Ifx_I2C_KRSTCLR_Bits',0,13,151,2,3
	.word	16296
	.byte	31
	.byte	'Ifx_I2C_MIS_Bits',0,13,163,2,3
	.word	14281
	.byte	31
	.byte	'Ifx_I2C_MODID_Bits',0,13,171,2,3
	.word	15178
	.byte	31
	.byte	'Ifx_I2C_MRPSCTRL_Bits',0,13,178,2,3
	.word	12042
	.byte	31
	.byte	'Ifx_I2C_PIRQSC_Bits',0,13,191,2,3
	.word	13660
	.byte	31
	.byte	'Ifx_I2C_PIRQSM_Bits',0,13,204,2,3
	.word	13272
	.byte	31
	.byte	'Ifx_I2C_PIRQSS_Bits',0,13,217,2,3
	.word	13466
	.byte	31
	.byte	'Ifx_I2C_RIS_Bits',0,13,229,2,3
	.word	13854
	.byte	31
	.byte	'Ifx_I2C_RPSSTAT_Bits',0,13,236,2,3
	.word	12151
	.byte	31
	.byte	'Ifx_I2C_RUNCTRL_Bits',0,13,243,2,3
	.word	10895
	.byte	31
	.byte	'Ifx_I2C_RXD_Bits',0,13,249,2,3
	.word	14980
	.byte	31
	.byte	'Ifx_I2C_TIMCFG_Bits',0,13,135,3,3
	.word	12471
	.byte	31
	.byte	'Ifx_I2C_TPSCTRL_Bits',0,13,142,3,3
	.word	12258
	.byte	31
	.byte	'Ifx_I2C_TXD_Bits',0,13,148,3,3
	.word	14889
	.byte	31
	.byte	'Ifx_I2C_ACCEN0',0,13,164,3,3
	.word	15940
	.byte	31
	.byte	'Ifx_I2C_ACCEN1',0,13,175,3,3
	.word	16029
	.byte	31
	.byte	'Ifx_I2C_ADDRCFG',0,13,186,3,3
	.word	11605
	.byte	31
	.byte	'Ifx_I2C_BUSSTAT',0,13,197,3,3
	.word	11724
	.byte	31
	.byte	'Ifx_I2C_CLC',0,13,208,3,3
	.word	15138
	.byte	31
	.byte	'Ifx_I2C_CLC1',0,13,219,3,3
	.word	10728
	.byte	31
	.byte	'Ifx_I2C_ENDDCTRL',0,13,230,3,3
	.word	11089
	.byte	31
	.byte	'Ifx_I2C_ERRIRQSC',0,13,241,3,3
	.word	13232
	.byte	31
	.byte	'Ifx_I2C_ERRIRQSM',0,13,252,3,3
	.word	12896
	.byte	31
	.byte	'Ifx_I2C_ERRIRQSS',0,13,135,4,3
	.word	13064
	.byte	31
	.byte	'Ifx_I2C_FDIVCFG',0,13,146,4,3
	.word	11234
	.byte	31
	.byte	'Ifx_I2C_FDIVHIGHCFG',0,13,157,4,3
	.word	11383
	.byte	31
	.byte	'Ifx_I2C_FFSSTAT',0,13,168,4,3
	.word	12431
	.byte	31
	.byte	'Ifx_I2C_FIFOCFG',0,13,179,4,3
	.word	12002
	.byte	31
	.byte	'Ifx_I2C_GPCTL',0,13,190,4,3
	.word	15371
	.byte	31
	.byte	'Ifx_I2C_ICR',0,13,201,4,3
	.word	14623
	.byte	31
	.byte	'Ifx_I2C_ID',0,13,212,4,3
	.word	10855
	.byte	31
	.byte	'Ifx_I2C_IMSC',0,13,223,4,3
	.word	14241
	.byte	31
	.byte	'Ifx_I2C_ISR',0,13,234,4,3
	.word	14836
	.byte	31
	.byte	'Ifx_I2C_KRST0',0,13,245,4,3
	.word	16152
	.byte	31
	.byte	'Ifx_I2C_KRST1',0,13,128,5,3
	.word	16256
	.byte	31
	.byte	'Ifx_I2C_KRSTCLR',0,13,139,5,3
	.word	16362
	.byte	31
	.byte	'Ifx_I2C_MIS',0,13,150,5,3
	.word	14454
	.byte	31
	.byte	'Ifx_I2C_MODID',0,13,161,5,3
	.word	15265
	.byte	31
	.byte	'Ifx_I2C_MRPSCTRL',0,13,172,5,3
	.word	12111
	.byte	31
	.byte	'Ifx_I2C_PIRQSC',0,13,183,5,3
	.word	13814
	.byte	31
	.byte	'Ifx_I2C_PIRQSM',0,13,194,5,3
	.word	13426
	.byte	31
	.byte	'Ifx_I2C_PIRQSS',0,13,205,5,3
	.word	13620
	.byte	31
	.byte	'Ifx_I2C_RIS',0,13,216,5,3
	.word	14027
	.byte	31
	.byte	'Ifx_I2C_RPSSTAT',0,13,227,5,3
	.word	12218
	.byte	31
	.byte	'Ifx_I2C_RUNCTRL',0,13,238,5,3
	.word	10961
	.byte	31
	.byte	'Ifx_I2C_RXD',0,13,249,5,3
	.word	15020
	.byte	31
	.byte	'Ifx_I2C_TIMCFG',0,13,132,6,3
	.word	12719
	.byte	31
	.byte	'Ifx_I2C_TPSCTRL',0,13,143,6,3
	.word	12325
	.byte	31
	.byte	'Ifx_I2C_TXD',0,13,154,6,3
	.word	14929
	.byte	7
	.word	16413
	.byte	31
	.byte	'Ifx_I2C',0,13,212,6,3
	.word	88286
	.byte	19
	.word	20659
	.byte	31
	.byte	'IfxI2c_Scl_InOut',0,15,45,3
	.word	88308
	.byte	19
	.word	20741
	.byte	31
	.byte	'IfxI2c_Sda_InOut',0,15,54,3
	.word	88338
	.byte	31
	.byte	'IfxSrc_Tos',0,11,55,3
	.word	10393
	.byte	31
	.byte	'IfxI2c_BusStatus',0,12,59,3
	.word	17724
	.byte	14,12,64,9,1,15
	.byte	'IfxI2c_ErrorInterruptSource_rxFifoUnderflow',0,0,15
	.byte	'IfxI2c_ErrorInterruptSource_rxFifoOverflow',0,1,15
	.byte	'IfxI2c_ErrorInterruptSource_txFifoUnderflow',0,2,15
	.byte	'IfxI2c_ErrorInterruptSource_txFifoOverflow',0,3,0,31
	.byte	'IfxI2c_ErrorInterruptSource',0,12,70,3
	.word	88412
	.byte	31
	.byte	'IfxI2c_PinSelect',0,12,82,3
	.word	18286
	.byte	31
	.byte	'IfxI2c_ProtocolInterruptSource',0,12,96,3
	.word	17244
	.byte	14,12,101,9,1,15
	.byte	'IfxI2c_SleepMode_enable',0,0,15
	.byte	'IfxI2c_SleepMode_disable',0,1,0,31
	.byte	'IfxI2c_SleepMode',0,12,105,3
	.word	88700
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L68:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,19,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,4,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,5,23,1,58,15,59,15,57,15,11,15,0,0,6,13,0,3,8,73
	.byte	19,11,15,56,9,0,0,7,53,0,73,19,0,0,8,15,0,73,19,0,0,9,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0
	.byte	10,5,0,3,8,58,15,59,15,57,15,73,19,0,0,11,11,0,0,0,12,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39
	.byte	12,0,0,13,59,0,3,8,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0,0
	.byte	17,33,0,47,15,0,0,18,11,1,0,0,19,38,0,73,19,0,0,20,46,1,3,8,54,15,39,12,63,12,60,12,0,0,21,5,0,73,19,0
	.byte	0,22,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,23,5,0,3,8,73,19,0,0,24,46,1,49,19,0,0,25,5,0,49,19,0
	.byte	0,26,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,27,46,0,3,8,58,15,59,15,57,15,73,19,54,15
	.byte	39,12,63,12,60,12,0,0,28,29,1,49,19,0,0,29,11,0,49,19,0,0,30,19,1,58,15,59,15,57,15,11,15,0,0,31,22,0
	.byte	3,8,58,15,59,15,57,15,73,19,0,0,32,21,0,54,15,0,0,33,21,0,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L69:
	.word	.L361-.L360
.L360:
	.half	3
	.word	.L363-.L362
.L362:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0
	.byte	'IfxCpu_cfg.h',0,2,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Port\\Std\\IfxPort.h',0,0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Src\\Std\\IfxSrc.h',0,0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'IfxSrc_cfg.h',0,2,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'IfxI2c_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuCcu.h',0,0,0,0
	.byte	'IfxI2c_PinMap.h',0,3,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Ifx_Types.h',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Platform_Types.h',0,0
	.byte	0,0
	.byte	'IfxScu_cfg.h',0,2,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'IfxStm_regdef.h',0,1,0,0
	.byte	'IfxFlash_regdef.h',0,1,0,0,0
.L363:
.L361:
	.sdecl	'.debug_info',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_info'
.L70:
	.word	259
	.half	3
	.word	.L71
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L73,.L72
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_configureAsMaster',0,1,35,6,1,1,1
	.word	.L27,.L170,.L26
	.byte	4
	.byte	'i2c',0,1,35,40
	.word	.L171,.L172
	.byte	5
	.word	.L173
	.byte	6
	.word	.L174,.L27,.L175
	.byte	7
	.word	.L176,.L177
	.byte	8
	.word	.L178,.L27,.L175
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_abbrev'
.L71:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,29,1,49,16
	.byte	17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_line'
.L72:
	.word	.L365-.L364
.L364:
	.half	3
	.word	.L367-.L366
.L366:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L367:
	.byte	4,2,5,22,7,0,5,2
	.word	.L27
	.byte	3,244,6,1,5,20,1,4,1,5,25,9
	.half	.L175-.L27
	.byte	3,179,121,1,5,19,9
	.half	.L368-.L175
	.byte	3,1,1,5,25,9
	.half	.L369-.L368
	.byte	1,9
	.half	.L370-.L369
	.byte	3,1,1,9
	.half	.L371-.L370
	.byte	3,1,1,9
	.half	.L372-.L371
	.byte	3,1,1,9
	.half	.L373-.L372
	.byte	3,2,1,5,19,9
	.half	.L374-.L373
	.byte	3,1,1,5,25,9
	.half	.L375-.L374
	.byte	1,5,19,9
	.half	.L376-.L375
	.byte	3,1,1,5,25,9
	.half	.L377-.L376
	.byte	1,5,1,9
	.half	.L378-.L377
	.byte	3,5,1,7,9
	.half	.L74-.L378
	.byte	0,1,1
.L365:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_ranges'
.L73:
	.word	-1,.L27,0,.L74-.L27,0,0
.L173:
	.word	-1,.L27,0,.L170-.L27,-1,.L29,0,.L164-.L29,-1,.L31,0,.L154-.L31,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_info'
.L75:
	.word	235
	.half	3
	.word	.L76
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L78,.L77
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_disableModule',0,1,56,6,1,1,1
	.word	.L33,.L179,.L32
	.byte	4
	.byte	'i2c',0,1,56,36
	.word	.L171,.L180
	.byte	5
	.word	.L181
	.byte	6
	.byte	'pwd',0,1,58,12
	.word	.L182,.L183
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_abbrev'
.L76:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_line'
.L77:
	.word	.L380-.L379
.L379:
	.half	3
	.word	.L382-.L381
.L381:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L382:
	.byte	5,6,7,0,5,2
	.word	.L33
	.byte	3,55,1,5,50,9
	.half	.L314-.L33
	.byte	3,2,1,5,16,9
	.half	.L313-.L314
	.byte	1,5,31,9
	.half	.L316-.L313
	.byte	3,2,1,5,15,9
	.half	.L315-.L316
	.byte	3,2,1,5,21,9
	.half	.L383-.L315
	.byte	1,5,15,9
	.half	.L384-.L383
	.byte	3,2,1,5,22,9
	.half	.L2-.L384
	.byte	1,5,32,9
	.half	.L385-.L2
	.byte	1,5,29,7,9
	.half	.L386-.L385
	.byte	3,3,1,5,1,9
	.half	.L79-.L386
	.byte	3,1,0,1,1
.L380:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_ranges'
.L78:
	.word	-1,.L33,0,.L79-.L33,0,0
.L181:
	.word	-1,.L33,0,.L179-.L33,-1,.L35,0,.L169-.L35,-1,.L37,0,.L159-.L37,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_info'
.L80:
	.word	321
	.half	3
	.word	.L81
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L83,.L82
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_enableBurstDataTransferInterrupt',0,1,71,6,1,1,1
	.word	.L39,.L184,.L38
	.byte	4
	.byte	'i2c',0,1,71,55
	.word	.L171,.L185
	.byte	4
	.byte	'typeOfService',0,1,71,71
	.word	.L186,.L187
	.byte	4
	.byte	'priority',0,1,71,93
	.word	.L182,.L188
	.byte	5
	.word	.L39,.L184
	.byte	6
	.word	.L189,.L39,.L190
	.byte	7
	.word	.L191,.L192
	.byte	8
	.word	.L193,.L194
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_abbrev'
.L81:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_line'
.L82:
	.word	.L388-.L387
.L387:
	.half	3
	.word	.L390-.L389
.L389:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L390:
	.byte	4,2,5,17,7,0,5,2
	.word	.L39
	.byte	3,198,5,1,5,5,9
	.half	.L391-.L39
	.byte	1,5,38,7,9
	.half	.L392-.L391
	.byte	3,2,1,5,9,9
	.half	.L393-.L392
	.byte	1,5,38,9
	.half	.L3-.L393
	.byte	3,4,1,5,9,9
	.half	.L4-.L3
	.byte	1,4,1,5,1,9
	.half	.L190-.L4
	.byte	3,128,123,1,7,9
	.half	.L84-.L190
	.byte	0,1,1
.L388:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_ranges'
.L83:
	.word	-1,.L39,0,.L84-.L39,0,0
.L194:
	.word	-1,.L39,0,.L190-.L39,-1,.L41,0,.L149-.L41,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_info'
.L85:
	.word	313
	.half	3
	.word	.L86
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L88,.L87
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_enableErrorInterrupt',0,1,80,6,1,1,1
	.word	.L43,.L195,.L42
	.byte	4
	.byte	'i2c',0,1,80,43
	.word	.L171,.L196
	.byte	4
	.byte	'typeOfService',0,1,80,59
	.word	.L186,.L197
	.byte	4
	.byte	'priority',0,1,80,81
	.word	.L182,.L198
	.byte	5
	.word	.L43,.L195
	.byte	6
	.word	.L199,.L43,.L200
	.byte	7
	.word	.L201,.L202
	.byte	8
	.word	.L203,.L43,.L200
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_abbrev'
.L86:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_line'
.L87:
	.word	.L395-.L394
.L394:
	.half	3
	.word	.L397-.L396
.L396:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L397:
	.byte	4,2,5,17,7,0,5,2
	.word	.L43
	.byte	3,235,5,1,5,5,9
	.half	.L398-.L43
	.byte	1,5,38,7,9
	.half	.L399-.L398
	.byte	3,2,1,5,9,9
	.half	.L400-.L399
	.byte	1,5,38,9
	.half	.L5-.L400
	.byte	3,4,1,5,9,9
	.half	.L6-.L5
	.byte	1,4,1,5,1,9
	.half	.L200-.L6
	.byte	3,228,122,1,7,9
	.half	.L89-.L200
	.byte	0,1,1
.L395:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_ranges'
.L88:
	.word	-1,.L43,0,.L89-.L43,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_info'
.L90:
	.word	329
	.half	3
	.word	.L91
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L93,.L92
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_enableLastBurstDataTransferInterrupt',0,1,89,6,1,1,1
	.word	.L45,.L204,.L44
	.byte	4
	.byte	'i2c',0,1,89,59
	.word	.L171,.L205
	.byte	4
	.byte	'typeOfService',0,1,89,75
	.word	.L186,.L206
	.byte	4
	.byte	'priority',0,1,89,97
	.word	.L182,.L207
	.byte	5
	.word	.L45,.L204
	.byte	6
	.word	.L208,.L45,.L209
	.byte	7
	.word	.L210,.L211
	.byte	8
	.word	.L212,.L45,.L209
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_abbrev'
.L91:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_line'
.L92:
	.word	.L402-.L401
.L401:
	.half	3
	.word	.L404-.L403
.L403:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L404:
	.byte	4,2,5,17,7,0,5,2
	.word	.L45
	.byte	3,248,5,1,5,5,9
	.half	.L405-.L45
	.byte	1,5,38,7,9
	.half	.L406-.L405
	.byte	3,2,1,5,9,9
	.half	.L407-.L406
	.byte	1,5,38,9
	.half	.L7-.L407
	.byte	3,4,1,5,9,9
	.half	.L8-.L7
	.byte	1,4,1,5,1,9
	.half	.L209-.L8
	.byte	3,224,122,1,7,9
	.half	.L94-.L209
	.byte	0,1,1
.L402:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_ranges'
.L93:
	.word	-1,.L45,0,.L94-.L45,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_info'
.L95:
	.word	330
	.half	3
	.word	.L96
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L98,.L97
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_enableLastSingleDataTransferInterrupt',0,1,98,6,1,1,1
	.word	.L47,.L213,.L46
	.byte	4
	.byte	'i2c',0,1,98,60
	.word	.L171,.L214
	.byte	4
	.byte	'typeOfService',0,1,98,76
	.word	.L186,.L215
	.byte	4
	.byte	'priority',0,1,98,98
	.word	.L182,.L216
	.byte	5
	.word	.L47,.L213
	.byte	6
	.word	.L217,.L47,.L218
	.byte	7
	.word	.L219,.L220
	.byte	8
	.word	.L221,.L47,.L218
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_abbrev'
.L96:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_line'
.L97:
	.word	.L409-.L408
.L408:
	.half	3
	.word	.L411-.L410
.L410:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L411:
	.byte	4,2,5,17,7,0,5,2
	.word	.L47
	.byte	3,139,6,1,5,5,9
	.half	.L412-.L47
	.byte	1,5,38,7,9
	.half	.L413-.L412
	.byte	3,2,1,5,9,9
	.half	.L414-.L413
	.byte	1,5,38,9
	.half	.L9-.L414
	.byte	3,4,1,5,9,9
	.half	.L10-.L9
	.byte	1,4,1,5,1,9
	.half	.L218-.L10
	.byte	3,214,122,1,7,9
	.half	.L99-.L218
	.byte	0,1,1
.L409:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_ranges'
.L98:
	.word	-1,.L47,0,.L99-.L47,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_info'
.L100:
	.word	238
	.half	3
	.word	.L101
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L103,.L102
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_enableModule',0,1,107,6,1,1,1
	.word	.L49,.L222,.L48
	.byte	4
	.byte	'i2c',0,1,107,35
	.word	.L171,.L223
	.byte	5
	.word	.L49,.L222
	.byte	6
	.byte	'pwd',0,1,109,12
	.word	.L182,.L224
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_abbrev'
.L101:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_line'
.L102:
	.word	.L416-.L415
.L415:
	.half	3
	.word	.L418-.L417
.L417:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L418:
	.byte	5,6,7,0,5,2
	.word	.L49
	.byte	3,234,0,1,5,50,9
	.half	.L322-.L49
	.byte	3,2,1,5,16,9
	.half	.L321-.L322
	.byte	1,5,31,9
	.half	.L324-.L321
	.byte	3,2,1,5,15,9
	.half	.L323-.L324
	.byte	3,1,1,5,21,9
	.half	.L419-.L323
	.byte	1,5,15,9
	.half	.L420-.L419
	.byte	3,2,1,5,22,9
	.half	.L11-.L420
	.byte	1,5,33,9
	.half	.L421-.L11
	.byte	1,5,23,7,9
	.half	.L422-.L421
	.byte	3,3,1,5,21,1,5,23,9
	.half	.L12-.L422
	.byte	3,2,1,5,33,9
	.half	.L423-.L12
	.byte	1,5,16,7,9
	.half	.L424-.L423
	.byte	3,3,1,5,22,9
	.half	.L425-.L424
	.byte	1,5,23,9
	.half	.L13-.L425
	.byte	3,2,1,5,34,9
	.half	.L426-.L13
	.byte	1,5,23,7,9
	.half	.L427-.L426
	.byte	3,4,1,5,21,1,5,29,9
	.half	.L428-.L427
	.byte	3,4,1,5,21,9
	.half	.L326-.L428
	.byte	3,125,1,9
	.half	.L429-.L326
	.byte	3,1,1,5,29,9
	.half	.L430-.L429
	.byte	3,2,1,5,1,7,9
	.half	.L104-.L430
	.byte	3,1,0,1,1
.L416:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_ranges'
.L103:
	.word	-1,.L49,0,.L104-.L49,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_info'
.L105:
	.word	320
	.half	3
	.word	.L106
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L108,.L107
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_enableProtocolInterrupt',0,1,136,1,6,1,1,1
	.word	.L51,.L225,.L50
	.byte	4
	.byte	'i2c',0,1,136,1,43
	.word	.L226,.L227
	.byte	4
	.byte	'typeOfService',0,1,136,1,59
	.word	.L186,.L228
	.byte	4
	.byte	'priority',0,1,136,1,81
	.word	.L182,.L229
	.byte	5
	.word	.L51,.L225
	.byte	6
	.word	.L230,.L51,.L231
	.byte	7
	.word	.L232,.L233
	.byte	8
	.word	.L234,.L51,.L231
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_abbrev'
.L106:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_line'
.L107:
	.word	.L432-.L431
.L431:
	.half	3
	.word	.L434-.L433
.L433:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L434:
	.byte	4,2,5,17,7,0,5,2
	.word	.L51
	.byte	3,170,6,1,5,5,9
	.half	.L435-.L51
	.byte	1,5,38,7,9
	.half	.L436-.L435
	.byte	3,2,1,5,9,9
	.half	.L437-.L436
	.byte	1,5,38,9
	.half	.L14-.L437
	.byte	3,4,1,5,9,9
	.half	.L15-.L14
	.byte	1,4,1,5,1,9
	.half	.L231-.L15
	.byte	3,221,122,1,7,9
	.half	.L109-.L231
	.byte	0,1,1
.L432:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_ranges'
.L108:
	.word	-1,.L51,0,.L109-.L51,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_info'
.L110:
	.word	330
	.half	3
	.word	.L111
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L113,.L112
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_enableSingleDataTransferInterrupt',0,1,145,1,6,1,1,1
	.word	.L53,.L235,.L52
	.byte	4
	.byte	'i2c',0,1,145,1,56
	.word	.L171,.L236
	.byte	4
	.byte	'typeOfService',0,1,145,1,72
	.word	.L186,.L237
	.byte	4
	.byte	'priority',0,1,145,1,94
	.word	.L182,.L238
	.byte	5
	.word	.L53,.L235
	.byte	6
	.word	.L239,.L53,.L240
	.byte	7
	.word	.L241,.L242
	.byte	8
	.word	.L243,.L53,.L240
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_abbrev'
.L111:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_line'
.L112:
	.word	.L439-.L438
.L438:
	.half	3
	.word	.L441-.L440
.L440:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L441:
	.byte	4,2,5,17,7,0,5,2
	.word	.L53
	.byte	3,183,6,1,5,5,9
	.half	.L442-.L53
	.byte	1,5,38,7,9
	.half	.L443-.L442
	.byte	3,2,1,5,9,9
	.half	.L444-.L443
	.byte	1,5,38,9
	.half	.L16-.L444
	.byte	3,4,1,5,9,9
	.half	.L17-.L16
	.byte	1,4,1,5,1,9
	.half	.L240-.L17
	.byte	3,217,122,1,7,9
	.half	.L114-.L240
	.byte	0,1,1
.L439:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_ranges'
.L113:
	.word	-1,.L53,0,.L114-.L53,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_info'
.L115:
	.word	299
	.half	3
	.word	.L116
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L118,.L117
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_getBaudrate',0,1,154,1,9
	.word	.L244
	.byte	1,1,1
	.word	.L55,.L245,.L54
	.byte	4
	.byte	'i2c',0,1,154,1,37
	.word	.L171,.L246
	.byte	5
	.word	.L55,.L245
	.byte	6
	.byte	'inc',0,1,156,1,13
	.word	.L247,.L248
	.byte	6
	.byte	'dec',0,1,157,1,13
	.word	.L182,.L249
	.byte	6
	.byte	'rmc',0,1,158,1,13
	.word	.L247,.L250
	.byte	6
	.byte	'fKernel',0,1,159,1,13
	.word	.L244,.L251
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_abbrev'
.L116:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_line'
.L117:
	.word	.L446-.L445
.L445:
	.half	3
	.word	.L448-.L447
.L447:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L448:
	.byte	5,37,7,0,5,2
	.word	.L55
	.byte	3,155,1,1,9
	.half	.L328-.L55
	.byte	3,1,1,5,34,9
	.half	.L449-.L328
	.byte	3,1,1,5,50,9
	.half	.L329-.L449
	.byte	3,1,1,5,36,9
	.half	.L327-.L329
	.byte	3,2,1,5,40,9
	.half	.L330-.L327
	.byte	1,5,23,9
	.half	.L450-.L330
	.byte	1,5,21,9
	.half	.L331-.L450
	.byte	1,5,47,9
	.half	.L451-.L331
	.byte	1,5,28,9
	.half	.L452-.L451
	.byte	1,5,1,3,1,1,7,9
	.half	.L119-.L452
	.byte	0,1,1
.L446:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_ranges'
.L118:
	.word	-1,.L55,0,.L119-.L55,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_info'
.L120:
	.word	464
	.half	3
	.word	.L121
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L123,.L122
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_initSclSdaPin',0,1,165,1,6,1,1,1
	.word	.L57,.L252,.L56
	.byte	4
	.byte	'scl',0,1,165,1,51
	.word	.L253,.L254
	.byte	4
	.byte	'sda',0,1,165,1,80
	.word	.L255,.L256
	.byte	4
	.byte	'padDriver',0,1,165,1,103
	.word	.L257,.L258
	.byte	5
	.word	.L57,.L252
	.byte	6
	.word	.L259,.L260,.L261
	.byte	7
	.word	.L262,.L263
	.byte	7
	.word	.L264,.L265
	.byte	7
	.word	.L266,.L267
	.byte	7
	.word	.L268,.L269
	.byte	8
	.word	.L270,.L260,.L261
	.byte	0,6
	.word	.L259,.L261,.L271
	.byte	7
	.word	.L262,.L263
	.byte	7
	.word	.L264,.L265
	.byte	7
	.word	.L266,.L267
	.byte	7
	.word	.L268,.L269
	.byte	8
	.word	.L270,.L261,.L271
	.byte	0,6
	.word	.L272,.L273,.L274
	.byte	7
	.word	.L275,.L276
	.byte	7
	.word	.L277,.L278
	.byte	9
	.word	.L279,.L280
	.byte	0,6
	.word	.L272,.L281,.L282
	.byte	7
	.word	.L275,.L276
	.byte	7
	.word	.L277,.L278
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_abbrev'
.L121:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_line'
.L122:
	.word	.L454-.L453
.L453:
	.half	3
	.word	.L456-.L455
.L455:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Port\\Std\\IfxPort.h',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L456:
	.byte	5,6,7,0,5,2
	.word	.L57
	.byte	3,164,1,1,5,73,9
	.half	.L334-.L57
	.byte	3,3,1,5,6,9
	.half	.L335-.L334
	.byte	3,125,1,4,2,5,61,9
	.half	.L260-.L335
	.byte	3,141,3,1,4,1,5,38,3,246,124,1,5,53,9
	.half	.L333-.L260
	.byte	1,4,2,5,40,9
	.half	.L332-.L333
	.byte	3,138,3,1,4,1,5,73,9
	.half	.L261-.L332
	.byte	3,247,124,1,5,38,9
	.half	.L457-.L261
	.byte	1,4,2,5,61,9
	.half	.L458-.L457
	.byte	3,137,3,1,4,1,5,53,3,247,124,1,4,2,5,40,9
	.half	.L459-.L458
	.byte	3,137,3,1,4,1,5,37,9
	.half	.L271-.L459
	.byte	3,248,124,1,5,52,9
	.half	.L460-.L271
	.byte	1,5,63,9
	.half	.L461-.L460
	.byte	1,5,37,9
	.half	.L462-.L461
	.byte	3,1,1,5,52,9
	.half	.L463-.L462
	.byte	1,5,63,9
	.half	.L464-.L463
	.byte	1,5,31,9
	.half	.L465-.L464
	.byte	3,1,1,4,3,5,17,9
	.half	.L273-.L465
	.byte	3,171,5,1,4,1,5,62,9
	.half	.L274-.L273
	.byte	3,213,122,1,4,3,5,17,9
	.half	.L281-.L274
	.byte	3,171,5,1,5,24,9
	.half	.L466-.L281
	.byte	1,4,1,5,1,9
	.half	.L282-.L466
	.byte	3,214,122,1,7,9
	.half	.L124-.L282
	.byte	0,1,1
.L454:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_ranges'
.L123:
	.word	-1,.L57,0,.L124-.L57,0,0
.L280:
	.word	-1,.L57,.L273-.L57,.L274-.L57,.L281-.L57,.L282-.L57,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_info'
.L125:
	.word	312
	.half	3
	.word	.L126
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L128,.L127
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_releaseBus',0,1,176,1,6,1,1,1
	.word	.L59,.L283,.L58
	.byte	4
	.byte	'i2c',0,1,176,1,33
	.word	.L171,.L284
	.byte	5
	.word	.L59,.L283
	.byte	6
	.word	.L285,.L20,.L286
	.byte	7
	.word	.L287,.L288
	.byte	7
	.word	.L289,.L290
	.byte	8
	.word	.L291,.L20,.L286
	.byte	0,6
	.word	.L292,.L293,.L19
	.byte	7
	.word	.L294,.L295
	.byte	7
	.word	.L296,.L297
	.byte	8
	.word	.L298,.L293,.L19
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_abbrev'
.L126:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_line'
.L127:
	.word	.L468-.L467
.L467:
	.half	3
	.word	.L470-.L469
.L469:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L470:
	.byte	5,23,7,0,5,2
	.word	.L59
	.byte	3,178,1,1,5,5,9
	.half	.L471-.L59
	.byte	1,5,24,7,9
	.half	.L472-.L471
	.byte	3,2,1,5,32,9
	.half	.L473-.L472
	.byte	1,4,2,5,24,9
	.half	.L20-.L473
	.byte	3,240,4,1,4,1,5,117,9
	.half	.L286-.L20
	.byte	3,147,123,1,4,2,5,24,7,9
	.half	.L293-.L286
	.byte	3,163,3,1,5,19,1,4,1,5,1,9
	.half	.L19-.L293
	.byte	3,226,124,1,7,9
	.half	.L129-.L19
	.byte	0,1,1
.L468:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_ranges'
.L128:
	.word	-1,.L59,0,.L129-.L59,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_info'
.L130:
	.word	220
	.half	3
	.word	.L131
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L133,.L132
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_resetFifo',0,1,192,1,6,1,1,1
	.word	.L61,.L299,.L60
	.byte	4
	.byte	'i2c',0,1,192,1,32
	.word	.L171,.L300
	.byte	5
	.word	.L61,.L299
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_abbrev'
.L131:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_line'
.L132:
	.word	.L475-.L474
.L474:
	.half	3
	.word	.L477-.L476
.L476:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L477:
	.byte	5,27,7,0,5,2
	.word	.L61
	.byte	3,194,1,1,5,25,1,5,19,9
	.half	.L478-.L61
	.byte	3,1,1,5,25,9
	.half	.L479-.L478
	.byte	1,5,19,9
	.half	.L480-.L479
	.byte	3,1,1,5,25,9
	.half	.L481-.L480
	.byte	1,5,1,9
	.half	.L482-.L481
	.byte	3,5,1,7,9
	.half	.L134-.L482
	.byte	0,1,1
.L475:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_ranges'
.L133:
	.word	-1,.L61,0,.L134-.L61,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_info'
.L135:
	.word	243
	.half	3
	.word	.L136
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L138,.L137
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_resetModule',0,1,205,1,6,1,1,1
	.word	.L63,.L301,.L62
	.byte	4
	.byte	'i2c',0,1,205,1,34
	.word	.L171,.L302
	.byte	5
	.word	.L63,.L301
	.byte	6
	.byte	'passwd',0,1,207,1,12
	.word	.L182,.L303
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_abbrev'
.L136:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_line'
.L137:
	.word	.L484-.L483
.L483:
	.half	3
	.word	.L486-.L485
.L485:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L486:
	.byte	5,6,7,0,5,2
	.word	.L63
	.byte	3,204,1,1,5,53,9
	.half	.L337-.L63
	.byte	3,2,1,5,19,9
	.half	.L336-.L337
	.byte	1,5,31,9
	.half	.L339-.L336
	.byte	3,2,1,5,17,9
	.half	.L338-.L339
	.byte	3,1,1,5,22,9
	.half	.L487-.L338
	.byte	1,5,17,9
	.half	.L488-.L487
	.byte	3,1,1,5,22,9
	.half	.L489-.L488
	.byte	1,5,29,9
	.half	.L490-.L489
	.byte	3,1,1,5,20,9
	.half	.L341-.L490
	.byte	3,2,1,5,29,9
	.half	.L21-.L341
	.byte	1,5,37,9
	.half	.L491-.L21
	.byte	1,5,31,7,9
	.half	.L492-.L491
	.byte	3,4,1,5,19,9
	.half	.L343-.L492
	.byte	3,1,1,5,24,9
	.half	.L493-.L343
	.byte	1,5,29,9
	.half	.L494-.L493
	.byte	3,1,1,5,24,3,127,1,5,29,9
	.half	.L345-.L494
	.byte	3,1,1,5,1,7,9
	.half	.L139-.L345
	.byte	3,1,0,1,1
.L484:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_ranges'
.L138:
	.word	-1,.L63,0,.L139-.L63,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_info'
.L140:
	.word	327
	.half	3
	.word	.L141
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L143,.L142
	.byte	2
	.word	.L66
	.byte	3
	.byte	'IfxI2c_setBaudrate',0,1,224,1,6,1,1,1
	.word	.L65,.L304,.L64
	.byte	4
	.byte	'i2c',0,1,224,1,34
	.word	.L171,.L305
	.byte	4
	.byte	'baudrate',0,1,224,1,47
	.word	.L244,.L306
	.byte	5
	.word	.L65,.L304
	.byte	6
	.byte	'fKernel',0,1,226,1,13
	.word	.L244,.L307
	.byte	6
	.byte	'rmc',0,1,227,1,13
	.word	.L247,.L308
	.byte	6
	.byte	'dec',0,1,228,1,13
	.word	.L244,.L309
	.byte	5
	.word	.L22,.L304
	.byte	6
	.byte	'pwd',0,1,241,1,12
	.word	.L182,.L310
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_abbrev'
.L141:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_line'
.L142:
	.word	.L496-.L495
.L495:
	.half	3
	.word	.L498-.L497
.L497:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L498:
	.byte	5,6,7,0,5,2
	.word	.L65
	.byte	3,223,1,1,5,50,9
	.half	.L347-.L65
	.byte	3,2,1,5,34,9
	.half	.L346-.L347
	.byte	3,1,1,5,24,9
	.half	.L350-.L346
	.byte	3,2,1,5,22,9
	.half	.L351-.L350
	.byte	1,5,29,9
	.half	.L499-.L351
	.byte	1,5,43,9
	.half	.L500-.L499
	.byte	1,5,41,9
	.half	.L501-.L500
	.byte	1,5,48,9
	.half	.L502-.L501
	.byte	1,5,41,9
	.half	.L503-.L502
	.byte	1,5,15,9
	.half	.L352-.L503
	.byte	3,3,1,5,5,9
	.half	.L348-.L352
	.byte	1,5,51,9
	.half	.L504-.L348
	.byte	3,4,1,5,18,9
	.half	.L354-.L504
	.byte	1,5,50,9
	.half	.L22-.L354
	.byte	3,5,1,5,16,9
	.half	.L349-.L22
	.byte	1,5,31,9
	.half	.L358-.L349
	.byte	3,2,1,5,36,9
	.half	.L357-.L358
	.byte	3,2,1,5,34,1,5,51,9
	.half	.L505-.L357
	.byte	3,1,1,5,19,9
	.half	.L506-.L505
	.byte	1,5,49,9
	.half	.L507-.L506
	.byte	1,5,36,1,5,34,9
	.half	.L508-.L507
	.byte	1,5,29,9
	.half	.L509-.L508
	.byte	3,6,1,5,18,9
	.half	.L359-.L509
	.byte	3,123,1,5,34,9
	.half	.L510-.L359
	.byte	1,5,18,9
	.half	.L511-.L510
	.byte	3,1,1,5,34,9
	.half	.L512-.L511
	.byte	1,5,18,9
	.half	.L513-.L512
	.byte	3,1,1,5,34,9
	.half	.L514-.L513
	.byte	1,5,36,9
	.half	.L515-.L514
	.byte	3,1,1,5,34,1,5,29,9
	.half	.L516-.L515
	.byte	3,2,1,5,1,7,9
	.half	.L144-.L516
	.byte	3,1,0,1,1
.L496:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_ranges'
.L143:
	.word	-1,.L65,0,.L144-.L65,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_16')
	.sect	'.debug_info'
.L145:
	.word	185
	.half	3
	.word	.L146
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L148,.L147
	.byte	2
	.word	.L66
	.byte	3
	.byte	'.cocofun_16',0,1,71,6,1
	.word	.L41,.L149,.L40
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_16')
	.sect	'.debug_abbrev'
.L146:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_16')
	.sect	'.debug_line'
.L147:
	.word	.L518-.L517
.L517:
	.half	3
	.word	.L520-.L519
.L519:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Src\\Std\\IfxSrc.h',0,0,0,0,0
.L520:
	.byte	4,2,5,9,7,0,5,2
	.word	.L41
	.byte	3,204,5,1,4,3,5,17,9
	.half	.L521-.L41
	.byte	3,179,124,1,5,11,9
	.half	.L522-.L521
	.byte	3,1,1,5,17,9
	.half	.L523-.L522
	.byte	1,5,11,9
	.half	.L524-.L523
	.byte	3,103,1,5,17,9
	.half	.L525-.L524
	.byte	1,5,11,9
	.half	.L526-.L525
	.byte	3,18,1,5,16,9
	.half	.L527-.L526
	.byte	1,9
	.half	.L149-.L527
	.byte	0,1,1,4,2,5,9,0,5,2
	.word	.L41
	.byte	3,241,5,1,4,3,5,17,9
	.half	.L521-.L41
	.byte	3,142,124,1,5,11,9
	.half	.L522-.L521
	.byte	3,1,1,5,17,9
	.half	.L523-.L522
	.byte	1,5,11,9
	.half	.L524-.L523
	.byte	3,103,1,5,17,9
	.half	.L525-.L524
	.byte	1,5,11,9
	.half	.L526-.L525
	.byte	3,18,1,5,16,9
	.half	.L527-.L526
	.byte	1,9
	.half	.L149-.L527
	.byte	0,1,1,4,2,5,9,0,5,2
	.word	.L41
	.byte	3,254,5,1,4,3,5,17,9
	.half	.L521-.L41
	.byte	3,129,124,1,5,11,9
	.half	.L522-.L521
	.byte	3,1,1,5,17,9
	.half	.L523-.L522
	.byte	1,5,11,9
	.half	.L524-.L523
	.byte	3,103,1,5,17,9
	.half	.L525-.L524
	.byte	1,5,11,9
	.half	.L526-.L525
	.byte	3,18,1,5,16,9
	.half	.L527-.L526
	.byte	1,9
	.half	.L149-.L527
	.byte	0,1,1,4,2,5,9,0,5,2
	.word	.L41
	.byte	3,145,6,1,4,3,5,17,9
	.half	.L521-.L41
	.byte	3,238,123,1,5,11,9
	.half	.L522-.L521
	.byte	3,1,1,5,17,9
	.half	.L523-.L522
	.byte	1,5,11,9
	.half	.L524-.L523
	.byte	3,103,1,5,17,9
	.half	.L525-.L524
	.byte	1,5,11,9
	.half	.L526-.L525
	.byte	3,18,1,5,16,9
	.half	.L527-.L526
	.byte	1,9
	.half	.L149-.L527
	.byte	0,1,1,4,2,5,9,0,5,2
	.word	.L41
	.byte	3,176,6,1,4,3,5,17,9
	.half	.L521-.L41
	.byte	3,207,123,1,5,11,9
	.half	.L522-.L521
	.byte	3,1,1,5,17,9
	.half	.L523-.L522
	.byte	1,5,11,9
	.half	.L524-.L523
	.byte	3,103,1,5,17,9
	.half	.L525-.L524
	.byte	1,5,11,9
	.half	.L526-.L525
	.byte	3,18,1,5,16,9
	.half	.L527-.L526
	.byte	1,9
	.half	.L149-.L527
	.byte	0,1,1,4,2,5,9,0,5,2
	.word	.L41
	.byte	3,189,6,1,4,3,5,17,9
	.half	.L521-.L41
	.byte	3,194,123,1,5,11,9
	.half	.L522-.L521
	.byte	3,1,1,5,17,9
	.half	.L523-.L522
	.byte	1,5,11,9
	.half	.L524-.L523
	.byte	3,103,1,5,17,9
	.half	.L525-.L524
	.byte	1,5,11,9
	.half	.L526-.L525
	.byte	3,18,1,5,16,9
	.half	.L527-.L526
	.byte	1,9
	.half	.L149-.L527
	.byte	0,1,1
.L518:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_16')
	.sect	'.debug_ranges'
.L148:
	.word	-1,.L41,0,.L149-.L41,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_17')
	.sect	'.debug_info'
.L150:
	.word	185
	.half	3
	.word	.L151
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L153,.L152
	.byte	2
	.word	.L66
	.byte	3
	.byte	'.cocofun_17',0,1,35,6,1
	.word	.L31,.L154,.L30
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_17')
	.sect	'.debug_abbrev'
.L151:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_17')
	.sect	'.debug_line'
.L152:
	.word	.L529-.L528
.L528:
	.half	3
	.word	.L531-.L530
.L530:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L531:
	.byte	5,25,7,0,5,2
	.word	.L31
	.byte	3,47,1,5,19,9
	.half	.L532-.L31
	.byte	3,1,1,5,25,9
	.half	.L533-.L532
	.byte	1,5,19,9
	.half	.L534-.L533
	.byte	3,1,1,5,25,9
	.half	.L535-.L534
	.byte	1,5,19,9
	.half	.L536-.L535
	.byte	3,1,1,5,25,9
	.half	.L537-.L536
	.byte	1,5,19,9
	.half	.L538-.L537
	.byte	3,1,1,5,25,9
	.half	.L539-.L538
	.byte	1,9
	.half	.L154-.L539
	.byte	0,1,1,5,25,0,5,2
	.word	.L31
	.byte	3,196,1,1,5,19,9
	.half	.L532-.L31
	.byte	3,1,1,5,25,9
	.half	.L533-.L532
	.byte	1,5,19,9
	.half	.L534-.L533
	.byte	3,1,1,5,25,9
	.half	.L535-.L534
	.byte	1,5,19,9
	.half	.L536-.L535
	.byte	3,1,1,5,25,9
	.half	.L537-.L536
	.byte	1,5,19,9
	.half	.L538-.L537
	.byte	3,1,1,5,25,9
	.half	.L539-.L538
	.byte	1,9
	.half	.L312-.L539
	.byte	3,235,126,1,7,9
	.half	.L154-.L312
	.byte	0,1,1
.L529:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_17')
	.sect	'.debug_ranges'
.L153:
	.word	-1,.L31,0,.L154-.L31,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_18')
	.sect	'.debug_info'
.L155:
	.word	185
	.half	3
	.word	.L156
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L158,.L157
	.byte	2
	.word	.L66
	.byte	3
	.byte	'.cocofun_18',0,1,56,6,1
	.word	.L37,.L159,.L36
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_18')
	.sect	'.debug_abbrev'
.L156:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_18')
	.sect	'.debug_line'
.L157:
	.word	.L541-.L540
.L540:
	.half	3
	.word	.L543-.L542
.L542:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L543:
	.byte	5,21,7,0,5,2
	.word	.L37
	.byte	3,61,1,9
	.half	.L159-.L37
	.byte	0,1,1,5,22,0,5,2
	.word	.L37
	.byte	3,209,1,1,5,21,3,236,126,1,9
	.half	.L159-.L37
	.byte	0,1,1,5,22,0,5,2
	.word	.L37
	.byte	3,210,1,1,5,21,3,235,126,1,9
	.half	.L159-.L37
	.byte	0,1,1,5,24,0,5,2
	.word	.L37
	.byte	3,218,1,1,5,21,3,227,126,1,9
	.half	.L159-.L37
	.byte	0,1,1
.L541:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_18')
	.sect	'.debug_ranges'
.L158:
	.word	-1,.L37,0,.L159-.L37,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_19')
	.sect	'.debug_info'
.L160:
	.word	185
	.half	3
	.word	.L161
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L163,.L162
	.byte	2
	.word	.L66
	.byte	3
	.byte	'.cocofun_19',0,1,35,6,1
	.word	.L29,.L164,.L28
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_19')
	.sect	'.debug_abbrev'
.L161:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_19')
	.sect	'.debug_line'
.L162:
	.word	.L545-.L544
.L544:
	.half	3
	.word	.L547-.L546
.L546:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L547:
	.byte	5,25,7,0,5,2
	.word	.L29
	.byte	3,40,1,5,19,9
	.half	.L311-.L29
	.byte	3,1,1,9
	.half	.L164-.L311
	.byte	0,1,1,5,25,0,5,2
	.word	.L29
	.byte	3,41,1,5,19,9
	.half	.L311-.L29
	.byte	3,1,1,9
	.half	.L548-.L311
	.byte	3,127,1,7,9
	.half	.L164-.L548
	.byte	0,1,1,5,25,0,5,2
	.word	.L29
	.byte	3,42,1,5,19,9
	.half	.L311-.L29
	.byte	3,1,1,9
	.half	.L548-.L311
	.byte	3,126,1,7,9
	.half	.L164-.L548
	.byte	0,1,1
.L545:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_19')
	.sect	'.debug_ranges'
.L163:
	.word	-1,.L29,0,.L164-.L29,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_20')
	.sect	'.debug_info'
.L165:
	.word	185
	.half	3
	.word	.L166
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L168,.L167
	.byte	2
	.word	.L66
	.byte	3
	.byte	'.cocofun_20',0,1,56,6,1
	.word	.L35,.L169,.L34
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_20')
	.sect	'.debug_abbrev'
.L166:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_20')
	.sect	'.debug_line'
.L167:
	.word	.L550-.L549
.L549:
	.half	3
	.word	.L552-.L551
.L551:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L552:
	.byte	5,15,7,0,5,2
	.word	.L35
	.byte	3,61,1,9
	.half	.L169-.L35
	.byte	0,1,1,5,15,0,5,2
	.word	.L35
	.byte	3,63,1,9
	.half	.L553-.L35
	.byte	3,126,1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,21,0,5,2
	.word	.L35
	.byte	3,61,1,5,15,9
	.half	.L553-.L35
	.byte	1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,22,0,5,2
	.word	.L35
	.byte	3,209,1,1,5,15,9
	.half	.L553-.L35
	.byte	3,236,126,1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,22,0,5,2
	.word	.L35
	.byte	3,210,1,1,5,15,9
	.half	.L553-.L35
	.byte	3,235,126,1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,24,0,5,2
	.word	.L35
	.byte	3,218,1,1,5,15,9
	.half	.L553-.L35
	.byte	3,227,126,1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,15,0,5,2
	.word	.L35
	.byte	3,239,0,1,9
	.half	.L553-.L35
	.byte	3,78,1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,21,0,5,2
	.word	.L35
	.byte	3,239,0,1,5,15,9
	.half	.L553-.L35
	.byte	3,78,1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,15,0,5,2
	.word	.L35
	.byte	3,241,0,1,9
	.half	.L553-.L35
	.byte	3,76,1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,17,0,5,2
	.word	.L35
	.byte	3,209,1,1,5,15,9
	.half	.L553-.L35
	.byte	3,236,126,1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,17,0,5,2
	.word	.L35
	.byte	3,210,1,1,5,15,9
	.half	.L553-.L35
	.byte	3,235,126,1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,20,0,5,2
	.word	.L35
	.byte	3,213,1,1,5,15,9
	.half	.L553-.L35
	.byte	3,232,126,1,7,9
	.half	.L169-.L553
	.byte	0,1,1,5,19,0,5,2
	.word	.L35
	.byte	3,218,1,1,5,15,9
	.half	.L553-.L35
	.byte	3,227,126,1,7,9
	.half	.L169-.L553
	.byte	0,1,1
.L550:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_20')
	.sect	'.debug_ranges'
.L168:
	.word	-1,.L35,0,.L169-.L35,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_16')
	.sect	'.debug_loc'
.L40:
	.word	-1,.L41,0,.L149-.L41
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_17')
	.sect	'.debug_loc'
.L30:
	.word	-1,.L31,0,.L154-.L31
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_18')
	.sect	'.debug_loc'
.L36:
	.word	-1,.L37,0,.L159-.L37
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_19')
	.sect	'.debug_loc'
.L28:
	.word	-1,.L29,0,.L164-.L29
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_20')
	.sect	'.debug_loc'
.L34:
	.word	-1,.L35,0,.L169-.L35
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_loc'
.L26:
	.word	-1,.L27,0,.L170-.L27
	.half	2
	.byte	138,0
	.word	0,0
.L172:
	.word	-1,.L27,.L311-.L27,.L164-.L27
	.half	1
	.byte	100
	.word	.L31-.L27,.L312-.L27
	.half	1
	.byte	100
	.word	0,.L170-.L27
	.half	1
	.byte	100
	.word	0,0
.L177:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_loc'
.L32:
	.word	-1,.L33,0,.L179-.L33
	.half	2
	.byte	138,0
	.word	0,0
.L180:
	.word	-1,.L33,0,.L313-.L33
	.half	1
	.byte	100
	.word	.L314-.L33,.L315-.L33
	.half	1
	.byte	111
	.word	.L35-.L33,.L169-.L33
	.half	1
	.byte	111
	.word	.L37-.L33,.L317-.L33
	.half	1
	.byte	111
	.word	.L318-.L33,.L2-.L33
	.half	1
	.byte	111
	.word	0,0
.L183:
	.word	-1,.L33,.L313-.L33,.L315-.L33
	.half	1
	.byte	82
	.word	.L316-.L33,.L315-.L33
	.half	1
	.byte	88
	.word	.L35-.L33,.L169-.L33
	.half	1
	.byte	88
	.word	.L37-.L33,.L317-.L33
	.half	1
	.byte	88
	.word	.L318-.L33,.L179-.L33
	.half	1
	.byte	88
	.word	.L319-.L33,.L179-.L33
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_loc'
.L38:
	.word	-1,.L39,0,.L184-.L39
	.half	2
	.byte	138,0
	.word	0,0
.L185:
	.word	-1,.L39,.L41-.L39,.L320-.L39
	.half	1
	.byte	100
	.word	0,.L184-.L39
	.half	1
	.byte	100
	.word	0,0
.L192:
	.word	0,0
.L188:
	.word	-1,.L39,.L41-.L39,.L320-.L39
	.half	1
	.byte	85
	.word	0,.L184-.L39
	.half	1
	.byte	85
	.word	0,0
.L187:
	.word	-1,.L39,.L41-.L39,.L320-.L39
	.half	1
	.byte	84
	.word	0,.L184-.L39
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_loc'
.L42:
	.word	-1,.L43,0,.L195-.L43
	.half	2
	.byte	138,0
	.word	0,0
.L196:
	.word	-1,.L43,.L41-.L43,.L149-.L43
	.half	1
	.byte	100
	.word	0,.L195-.L43
	.half	1
	.byte	100
	.word	0,0
.L202:
	.word	0,0
.L198:
	.word	-1,.L43,.L41-.L43,.L149-.L43
	.half	1
	.byte	85
	.word	0,.L195-.L43
	.half	1
	.byte	85
	.word	0,0
.L197:
	.word	-1,.L43,.L41-.L43,.L149-.L43
	.half	1
	.byte	84
	.word	0,.L195-.L43
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_loc'
.L44:
	.word	-1,.L45,0,.L204-.L45
	.half	2
	.byte	138,0
	.word	0,0
.L205:
	.word	-1,.L45,.L41-.L45,.L149-.L45
	.half	1
	.byte	100
	.word	0,.L204-.L45
	.half	1
	.byte	100
	.word	0,0
.L211:
	.word	0,0
.L207:
	.word	-1,.L45,.L41-.L45,.L149-.L45
	.half	1
	.byte	85
	.word	0,.L204-.L45
	.half	1
	.byte	85
	.word	0,0
.L206:
	.word	-1,.L45,.L41-.L45,.L149-.L45
	.half	1
	.byte	84
	.word	0,.L204-.L45
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_loc'
.L46:
	.word	-1,.L47,0,.L213-.L47
	.half	2
	.byte	138,0
	.word	0,0
.L214:
	.word	-1,.L47,.L41-.L47,.L149-.L47
	.half	1
	.byte	100
	.word	0,.L213-.L47
	.half	1
	.byte	100
	.word	0,0
.L220:
	.word	0,0
.L216:
	.word	-1,.L47,.L41-.L47,.L149-.L47
	.half	1
	.byte	85
	.word	0,.L213-.L47
	.half	1
	.byte	85
	.word	0,0
.L215:
	.word	-1,.L47,.L41-.L47,.L149-.L47
	.half	1
	.byte	84
	.word	0,.L213-.L47
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_loc'
.L48:
	.word	-1,.L49,0,.L222-.L49
	.half	2
	.byte	138,0
	.word	0,0
.L223:
	.word	-1,.L49,0,.L321-.L49
	.half	1
	.byte	100
	.word	.L322-.L49,.L323-.L49
	.half	1
	.byte	111
	.word	.L35-.L49,.L169-.L49
	.half	1
	.byte	111
	.word	.L325-.L49,.L222-.L49
	.half	1
	.byte	111
	.word	0,0
.L224:
	.word	-1,.L49,.L321-.L49,.L323-.L49
	.half	1
	.byte	82
	.word	.L324-.L49,.L323-.L49
	.half	1
	.byte	88
	.word	.L35-.L49,.L169-.L49
	.half	1
	.byte	88
	.word	.L325-.L49,.L222-.L49
	.half	1
	.byte	88
	.word	.L326-.L49,.L222-.L49
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_loc'
.L50:
	.word	-1,.L51,0,.L225-.L51
	.half	2
	.byte	138,0
	.word	0,0
.L227:
	.word	-1,.L51,.L41-.L51,.L149-.L51
	.half	1
	.byte	100
	.word	0,.L225-.L51
	.half	1
	.byte	100
	.word	0,0
.L233:
	.word	0,0
.L229:
	.word	-1,.L51,.L41-.L51,.L149-.L51
	.half	1
	.byte	85
	.word	0,.L225-.L51
	.half	1
	.byte	85
	.word	0,0
.L228:
	.word	-1,.L51,.L41-.L51,.L149-.L51
	.half	1
	.byte	84
	.word	0,.L225-.L51
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_loc'
.L52:
	.word	-1,.L53,0,.L235-.L53
	.half	2
	.byte	138,0
	.word	0,0
.L236:
	.word	-1,.L53,.L41-.L53,.L149-.L53
	.half	1
	.byte	100
	.word	0,.L235-.L53
	.half	1
	.byte	100
	.word	0,0
.L242:
	.word	0,0
.L238:
	.word	-1,.L53,.L41-.L53,.L149-.L53
	.half	1
	.byte	85
	.word	0,.L235-.L53
	.half	1
	.byte	85
	.word	0,0
.L237:
	.word	-1,.L53,.L41-.L53,.L149-.L53
	.half	1
	.byte	84
	.word	0,.L235-.L53
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_loc'
.L54:
	.word	-1,.L55,0,.L245-.L55
	.half	2
	.byte	138,0
	.word	0,0
.L249:
	.word	-1,.L55,.L329-.L55,.L330-.L55
	.half	1
	.byte	89
	.word	0,0
.L251:
	.word	-1,.L55,.L327-.L55,.L245-.L55
	.half	1
	.byte	82
	.word	0,0
.L246:
	.word	-1,.L55,0,.L327-.L55
	.half	1
	.byte	100
	.word	0,0
.L248:
	.word	-1,.L55,.L328-.L55,.L245-.L55
	.half	1
	.byte	88
	.word	0,0
.L250:
	.word	-1,.L55,.L329-.L55,.L331-.L55
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_loc'
.L56:
	.word	-1,.L57,0,.L252-.L57
	.half	2
	.byte	138,0
	.word	0,0
.L276:
	.word	0,0
.L269:
	.word	0,0
.L267:
	.word	0,0
.L258:
	.word	-1,.L57,0,.L332-.L57
	.half	1
	.byte	84
	.word	.L335-.L57,.L252-.L57
	.half	1
	.byte	88
	.word	0,0
.L265:
	.word	0,0
.L278:
	.word	0,0
.L263:
	.word	0,0
.L254:
	.word	-1,.L57,0,.L333-.L57
	.half	1
	.byte	100
	.word	.L334-.L57,.L252-.L57
	.half	1
	.byte	111
	.word	0,0
.L256:
	.word	-1,.L57,0,.L261-.L57
	.half	1
	.byte	101
	.word	.L260-.L57,.L252-.L57
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_loc'
.L58:
	.word	-1,.L59,0,.L283-.L59
	.half	2
	.byte	138,0
	.word	0,0
.L284:
	.word	-1,.L59,0,.L283-.L59
	.half	1
	.byte	100
	.word	0,0
.L295:
	.word	0,0
.L288:
	.word	0,0
.L297:
	.word	0,0
.L290:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_loc'
.L60:
	.word	-1,.L61,0,.L299-.L61
	.half	2
	.byte	138,0
	.word	0,0
.L300:
	.word	-1,.L61,.L31-.L61,.L154-.L61
	.half	1
	.byte	100
	.word	0,.L299-.L61
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_loc'
.L62:
	.word	-1,.L63,0,.L301-.L63
	.half	2
	.byte	138,0
	.word	0,0
.L302:
	.word	-1,.L63,0,.L336-.L63
	.half	1
	.byte	100
	.word	.L337-.L63,.L338-.L63
	.half	1
	.byte	111
	.word	.L35-.L63,.L169-.L63
	.half	1
	.byte	111
	.word	.L37-.L63,.L317-.L63
	.half	1
	.byte	111
	.word	.L340-.L63,.L341-.L63
	.half	1
	.byte	111
	.word	.L342-.L63,.L343-.L63
	.half	1
	.byte	111
	.word	.L344-.L63,.L301-.L63
	.half	1
	.byte	111
	.word	0,0
.L303:
	.word	-1,.L63,.L336-.L63,.L338-.L63
	.half	1
	.byte	82
	.word	.L339-.L63,.L338-.L63
	.half	1
	.byte	88
	.word	.L35-.L63,.L169-.L63
	.half	1
	.byte	88
	.word	.L37-.L63,.L317-.L63
	.half	1
	.byte	88
	.word	.L340-.L63,.L341-.L63
	.half	1
	.byte	88
	.word	.L342-.L63,.L343-.L63
	.half	1
	.byte	88
	.word	.L344-.L63,.L301-.L63
	.half	1
	.byte	88
	.word	.L345-.L63,.L301-.L63
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_loc'
.L64:
	.word	-1,.L65,0,.L304-.L65
	.half	2
	.byte	138,0
	.word	0,0
.L306:
	.word	-1,.L65,0,.L346-.L65
	.half	1
	.byte	84
	.word	.L346-.L65,.L348-.L65
	.half	1
	.byte	88
	.word	0,0
.L309:
	.word	-1,.L65,.L352-.L65,.L353-.L65
	.half	5
	.byte	144,32,157,32,0
	.word	.L348-.L65,.L354-.L65
	.half	1
	.byte	88
	.word	.L354-.L65,.L355-.L65
	.half	5
	.byte	144,32,157,32,0
	.word	.L356-.L65,.L304-.L65
	.half	1
	.byte	88
	.word	.L356-.L65,.L22-.L65
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L307:
	.word	-1,.L65,.L346-.L65,.L349-.L65
	.half	1
	.byte	82
	.word	0,0
.L305:
	.word	-1,.L65,0,.L346-.L65
	.half	1
	.byte	100
	.word	.L347-.L65,.L304-.L65
	.half	1
	.byte	111
	.word	0,0
.L310:
	.word	-1,.L65,.L349-.L65,.L357-.L65
	.half	1
	.byte	82
	.word	.L358-.L65,.L304-.L65
	.half	1
	.byte	89
	.word	.L359-.L65,.L304-.L65
	.half	1
	.byte	84
	.word	0,0
.L308:
	.word	-1,.L65,.L350-.L65,.L351-.L65
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L554:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_frame'
	.word	24
	.word	.L554,.L27,.L170-.L27
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L554,.L33,.L179-.L33
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L554,.L39,.L184-.L39
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L554,.L43,.L195-.L43
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L554,.L45,.L204-.L45
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L554,.L47,.L213-.L47
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L554,.L49,.L222-.L49
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L554,.L51,.L225-.L51
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L554,.L53,.L235-.L53
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_frame'
	.word	12
	.word	.L554,.L55,.L245-.L55
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_frame'
	.word	12
	.word	.L554,.L57,.L252-.L57
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_frame'
	.word	24
	.word	.L554,.L59,.L283-.L59
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_frame'
	.word	24
	.word	.L554,.L61,.L299-.L61
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L554,.L63,.L301-.L63
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_frame'
	.word	12
	.word	.L554,.L65,.L304-.L65
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L555:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_19')
	.sect	'.debug_frame'
	.word	24
	.word	.L555,.L29,.L164-.L29
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_17')
	.sect	'.debug_frame'
	.word	24
	.word	.L555,.L31,.L154-.L31
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_20')
	.sect	'.debug_frame'
	.word	24
	.word	.L555,.L35,.L169-.L35
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_18')
	.sect	'.debug_frame'
	.word	24
	.word	.L555,.L37,.L159-.L37
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_16')
	.sect	'.debug_frame'
	.word	24
	.word	.L555,.L41,.L149-.L41
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   253      i2c->FDIVCFG.B.DEC           = (uint16)(dec + 0.5);
; ..\0_Src\4_McHal\Tricore\I2c\Std\IfxI2c.c	   254      i2c->TIMCFG.B.SDA_DEL_HD_DAT = 0x3F;
	; Module end
