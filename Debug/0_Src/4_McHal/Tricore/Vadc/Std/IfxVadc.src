	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Vadc\\Std\\.IfxVadc.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc27xc -D__CPU_TC27XC__ --core=tc1.6.x --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\2_CDrv\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.src ..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c'

	
$TC16X
	.sdecl	'.zrodata.IfxVadc..1.cnt',data,rom
	.sect	'.zrodata.IfxVadc..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	20000000
	.sdecl	'.zrodata.IfxVadc..2.cnt',data,rom
	.sect	'.zrodata.IfxVadc..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	500000
	.sdecl	'.zrodata.IfxVadc..3.cnt',data,rom
	.sect	'.zrodata.IfxVadc..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	19500000
	
	.sdecl	'.text.IfxVadc.IfxVadc_configExternalMultiplexerMode',code,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.text.IfxVadc.IfxVadc_configExternalMultiplexerMode'
	.align	2
	
	.global	IfxVadc_configExternalMultiplexerMode

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	     2   * \file IfxVadc.c
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	     3   * \brief VADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	     4   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	     5   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	     7   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	     8   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    10   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    11   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    15   * products.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    16   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    22   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    23   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    24  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    25  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    26  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    27  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    28  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    29  #include "IfxVadc.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    30  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    31  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    32  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    33  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    34  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    35  void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
; Function IfxVadc_configExternalMultiplexerMode
.L83:
IfxVadc_configExternalMultiplexerMode:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    36  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    37      Ifx_VADC_G_EMUXCTR emuxctr;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    38  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    39      emuxctr.B.EMXWC    = 1;
	extr.u	d15,d15,#24,#8
	ld.bu	d1,[a10]4
.L427:
	ld.bu	d0,[a10]
.L430:
	mov.aa	a15,a4
.L432:
	or	d15,#128
	mov.aa	a12,a5
.L433:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    40      emuxctr.B.EMUXMODE = mode;
	insert	d15,d15,d4,#2,#2
.L796:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    41      emuxctr.B.EMXCSS   = channelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    42      emuxctr.B.EMUXCH   = channels;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    43      emuxctr.B.EMUXSET  = startChannel;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    44      emuxctr.B.EMXCOD   = code;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    45      emuxctr.B.EMXST    = sampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    46      IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
	mov	d4,#15
.L428:
	insert	d15,d15,d1,#6,#1
.L434:
	insert	d15,d15,d15,#24,#8
.L797:
	insert	d15,d15,d5,#16,#10
.L798:
	insert	d15,d15,d6,#0,#3
.L799:
	extr.u	d1,d15,#24,#8
.L429:
	insert	d1,d1,d7,#4,#1
.L800:
	insert	d0,d1,d0,#5,#1
.L431:
	insert	d15,d15,d0,#24,#8
	call	IfxVadc_enableAccess
.L426:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    47      vadcG->EMUXCTR.U   = emuxctr.U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    48      emuxctr.B.EMXWC    = 0;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    49      vadcG->EMUXCTR.U   = emuxctr.U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    50      IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
	mov	d4,#15
	st.w	[a12]368,d15
.L801:
	insert	d15,d15,#0,#31,#1
	mov.aa	a4,a15
.L435:
	st.w	[a12]368,d15
.L802:
	j	IfxVadc_disableAccess
.L410:
	
__IfxVadc_configExternalMultiplexerMode_function_end:
	.size	IfxVadc_configExternalMultiplexerMode,__IfxVadc_configExternalMultiplexerMode_function_end-IfxVadc_configExternalMultiplexerMode
.L257:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_disableAccess',code,cluster('IfxVadc_disableAccess')
	.sect	'.text.IfxVadc.IfxVadc_disableAccess'
	.align	2
	
	.global	IfxVadc_disableAccess

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    51  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    52  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    53  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    54  void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
; Function IfxVadc_disableAccess
.L85:
IfxVadc_disableAccess:	.type	func
	mov.aa	a15,a4
.L437:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    55  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    56      uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d8,d4
	call	IfxScuWdt_getSafetyWatchdogPassword
.L436:
	mov	d9,d2
.L440:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    57      IfxScuWdt_clearSafetyEndinit(passwd);
	mov	d4,d9
	call	IfxScuWdt_clearSafetyEndinit
.L439:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    58  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    59      if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
	mov	d15,#32
.L631:
	jge.u	d8,d15,.L2
.L632:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    60      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    61          vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
	mov	d0,#1
	ld.w	d15,[a15]136
.L633:
	sha	d0,d0,d8
.L634:
	or	d15,d0
	st.w	[a15]136,d15
.L635:
	j	.L3
.L2:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    62      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    63      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    64      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    65          vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
	fcall	.cocofun_5
.L438:
	or	d0,d1
	st.w	[a15]140,d0
.L3:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    66      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    67  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    68      IfxScuWdt_setSafetyEndinit(passwd);
	mov	d4,d9
.L441:
	j	IfxScuWdt_setSafetyEndinit
.L308:
	
__IfxVadc_disableAccess_function_end:
	.size	IfxVadc_disableAccess,__IfxVadc_disableAccess_function_end-IfxVadc_disableAccess
.L182:
	; End of function
	
	.sdecl	'.text.IfxVadc..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.IfxVadc..cocofun_5'
	.align	2
; Function .cocofun_5
.L87:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	and	d15,d8,#31
	ld.w	d0,[a15]140
.L811:
	mov	d1,#1
.L812:
	sha	d1,d1,d15
	fret
.L267:
	; End of function
	.sdecl	'.text.IfxVadc.IfxVadc_disablePostCalibration',code,cluster('IfxVadc_disablePostCalibration')
	.sect	'.text.IfxVadc.IfxVadc_disablePostCalibration'
	.align	2
	
	.global	IfxVadc_disablePostCalibration

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    69  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    70  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    71  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    72  void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
; Function IfxVadc_disablePostCalibration
.L89:
IfxVadc_disablePostCalibration:	.type	func
	mov	d8,d4
	mov.aa	a15,a4
.L448:
	mov	d15,d5
.L442:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    73  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    74      if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
	jge.u	d8,#8,.L4
.L640:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    75      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    76          IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
	call	IfxVadc_enableAccess
.L321:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    77  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    78          uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
	mov	d0,#1
.L641:
	add	d1,d8,#16
.L642:
	sha	d0,d0,d1
.L444:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    79  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    80          if (disable == TRUE)
	jne	d15,#1,.L5
.L643:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    81          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    82              vadc->GLOBCFG.U |= mask;
	ld.w	d15,[a15]128
.L443:
	or	d15,d0
	j	.L6
.L4:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    83          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    84          else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    85          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    86              vadc->GLOBCFG.U &= ~mask;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    87          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    88  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    89          IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    90      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    91  }
	ret
.L5:
	mov	d1,#-1
	ld.w	d15,[a15]128
.L445:
	xor	d0,d1
.L446:
	and	d15,d0
.L6:
	st.w	[a15]128,d15
.L644:
	fcall	.cocofun_4
.L449:
	j	IfxVadc_disableAccess
.L315:
	
__IfxVadc_disablePostCalibration_function_end:
	.size	IfxVadc_disablePostCalibration,__IfxVadc_disablePostCalibration_function_end-IfxVadc_disablePostCalibration
.L187:
	; End of function
	
	.sdecl	'.text.IfxVadc..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.IfxVadc..cocofun_4'
	.align	2
; Function .cocofun_4
.L91:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	mov	d4,#31
	mov.aa	a4,a15
.L447:
	fret
.L262:
	; End of function
	.sdecl	'.text.IfxVadc.IfxVadc_enableAccess',code,cluster('IfxVadc_enableAccess')
	.sect	'.text.IfxVadc.IfxVadc_enableAccess'
	.align	2
	
	.global	IfxVadc_enableAccess

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    92  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    93  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    94  void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
; Function IfxVadc_enableAccess
.L93:
IfxVadc_enableAccess:	.type	func
	mov.aa	a15,a4
.L453:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    95  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    96      uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d8,d4
	call	IfxScuWdt_getSafetyWatchdogPassword
.L450:
	mov	d9,d2
.L452:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    97      IfxScuWdt_clearSafetyEndinit(passwd);
	mov	d4,d9
	call	IfxScuWdt_clearSafetyEndinit
.L451:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    98  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	    99      if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
	mov	d15,#32
.L649:
	jge.u	d8,d15,.L7
.L650:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   100      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   101          vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
	mov	d0,#1
	ld.w	d15,[a15]136
.L651:
	sha	d0,d0,d8
.L652:
	mov	d1,#-1
	xor	d0,d1
.L653:
	and	d15,d0
	st.w	[a15]136,d15
.L654:
	j	.L8
.L7:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   102      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   103      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   104      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   105          vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
	fcall	.cocofun_5
.L655:
	mov	d15,#-1
	xor	d1,d15
.L656:
	and	d0,d1
	st.w	[a15]140,d0
.L8:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   106      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   107  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   108      IfxScuWdt_setSafetyEndinit(passwd);
	mov	d4,d9
.L454:
	j	IfxScuWdt_setSafetyEndinit
.L323:
	
__IfxVadc_enableAccess_function_end:
	.size	IfxVadc_enableAccess,__IfxVadc_enableAccess_function_end-IfxVadc_enableAccess
.L192:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_enableGroupSync',code,cluster('IfxVadc_enableGroupSync')
	.sect	'.text.IfxVadc.IfxVadc_enableGroupSync'
	.align	2
	
	.global	IfxVadc_enableGroupSync

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   109  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   110  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   111  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   112  void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
; Function IfxVadc_enableGroupSync
.L95:
IfxVadc_enableGroupSync:	.type	func
	mov.aa	a15,a4
.L460:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   113  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   114      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	mov	d15,d4
	call	IfxScuWdt_getCpuWatchdogPassword
.L455:
	mov	d9,d2
.L459:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   115      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d9
	call	IfxScuWdt_clearCpuEndinit
.L331:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   116  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   117      // VADC Config: enable ADC group sync
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   118      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   119          Ifx_VADC_GLOBCFG vadcGlobCfg;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   120          vadcGlobCfg.U       = vadc->GLOBCFG.U;
	ld.w	d8,[a15]128
.L462:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   121          vadcGlobCfg.B.DIVWC = 1;
	insert	d8,d8,#1,#15,#1
.L661:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   122          vadcGlobCfg.B.DCMSB = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   123  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   124          IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	insert	d8,d8,#1,#7,#1
	fcall	.cocofun_4
.L456:
	call	IfxVadc_enableAccess
.L457:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   125          vadc->GLOBCFG.U = vadcGlobCfg.U;
	st.w	[a15]128,d8
.L662:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   126          IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_4
.L461:
	call	IfxVadc_disableAccess
.L332:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   127      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   128  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   129      if (ccu6Num == 0)
	jne	d15,#0,.L9
.L663:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   130      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   131          // CCU60 Config
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   132          CCU60_CLC.U = 0;
	st.w	0xf0002a00,d15
.L664:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   133  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   134          if (CCU60_CLC.U)
	ld.w	d15,0xf0002a00
.L458:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   135          {}
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   136  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   137          CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
	mov	d15,#4
.L665:
	st.w	0xf0002a54,d15
.L666:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   138          CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
	st.w	0xf0002a5c,d15
.L667:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   139          CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
	ld.bu	d15,0xf0002a81
.L668:
	or	d15,#128
	st.b	0xf0002a81,d15
.L669:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   140          CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
	mov	d15,#16896
	st.w	0xf0002a78,d15
.L670:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   141          CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
	ld.bu	d15,0xf0002a0c
.L671:
	insert	d15,d15,#0,#3,#3
	j	.L10
.L9:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   142      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   143      else if (ccu6Num == 1)
	jne	d15,#1,.L11
.L672:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   144      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   145          // CCU60 + CCU61 Config
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   146          CCU60_CLC.U = 0;
	mov	d15,#0
	st.w	0xf0002a00,d15
.L463:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   147          CCU61_CLC.U = 0;
	st.w	0xf0002b00,d15
.L673:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   148  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   149          if (CCU61_CLC.U)
	ld.w	d15,0xf0002b00
.L674:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   150          {}
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   151  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   152          CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
	mov	d15,#4
.L675:
	st.w	0xf0002b54,d15
.L676:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   153          CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
	st.w	0xf0002b5c,d15
.L677:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   154          CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
	ld.bu	d15,0xf0002b81
.L678:
	or	d15,#128
	st.b	0xf0002b81,d15
.L679:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   155          CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
	mov	d15,#16896
	st.w	0xf0002b78,d15
.L680:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   156          CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
	ld.bu	d15,0xf0002a0c
.L681:
	insert	d15,d15,#1,#3,#3
.L10:
	st.b	0xf0002a0c,d15
.L11:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   157      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   158  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   159      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d9
.L464:
	j	IfxScuWdt_setCpuEndinit
.L327:
	
__IfxVadc_enableGroupSync_function_end:
	.size	IfxVadc_enableGroupSync,__IfxVadc_enableGroupSync_function_end-IfxVadc_enableGroupSync
.L197:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getAdcAnalogFrequency',code,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.text.IfxVadc.IfxVadc_getAdcAnalogFrequency'
	.align	2
	
	.global	IfxVadc_getAdcAnalogFrequency

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   160  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   161  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   162  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   163  float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
; Function IfxVadc_getAdcAnalogFrequency
.L97:
IfxVadc_getAdcAnalogFrequency:	.type	func
	mov.aa	a15,a4
.L466:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   164  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   165      return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
	call	IfxScuCcu_getSpbFrequency
.L465:
	ld.bu	d15,[a15]128
	and	d15,#31
.L594:
	add	d15,#1
	utof	d15,d15
.L595:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   166  }
	div.f	d2,d2,d15
	ret
.L296:
	
__IfxVadc_getAdcAnalogFrequency_function_end:
	.size	IfxVadc_getAdcAnalogFrequency,__IfxVadc_getAdcAnalogFrequency_function_end-IfxVadc_getAdcAnalogFrequency
.L167:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getAdcDigitalFrequency',code,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.text.IfxVadc.IfxVadc_getAdcDigitalFrequency'
	.align	2
	
	.global	IfxVadc_getAdcDigitalFrequency

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   167  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   168  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   169  float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
; Function IfxVadc_getAdcDigitalFrequency
.L99:
IfxVadc_getAdcDigitalFrequency:	.type	func
	mov.aa	a15,a4
.L468:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   170  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   171      return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
	call	IfxScuCcu_getSpbFrequency
.L467:
	ld.bu	d15,[a15]129
	and	d15,#3
.L600:
	add	d15,#1
	utof	d15,d15
.L601:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   172  }
	div.f	d2,d2,d15
	ret
.L298:
	
__IfxVadc_getAdcDigitalFrequency_function_end:
	.size	IfxVadc_getAdcDigitalFrequency,__IfxVadc_getAdcDigitalFrequency_function_end-IfxVadc_getAdcDigitalFrequency
.L172:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getAdcModuleFrequency',code,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.text.IfxVadc.IfxVadc_getAdcModuleFrequency'
	.align	2
	
	.global	IfxVadc_getAdcModuleFrequency

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   173  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   174  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   175  float32 IfxVadc_getAdcModuleFrequency(void)
; Function IfxVadc_getAdcModuleFrequency
.L101:
IfxVadc_getAdcModuleFrequency:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   176  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   177      return IfxScuCcu_getSpbFrequency();
	j	IfxScuCcu_getSpbFrequency
.L335:
	
__IfxVadc_getAdcModuleFrequency_function_end:
	.size	IfxVadc_getAdcModuleFrequency,__IfxVadc_getAdcModuleFrequency_function_end-IfxVadc_getAdcModuleFrequency
.L202:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getBackgroundScanStatus',code,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.text.IfxVadc.IfxVadc_getBackgroundScanStatus'
	.align	2
	
	.global	IfxVadc_getBackgroundScanStatus

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   178  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   179  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   180  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   181  IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
; Function IfxVadc_getBackgroundScanStatus
.L103:
IfxVadc_getBackgroundScanStatus:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   182  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   183      IfxVadc_Status status = IfxVadc_Status_noError;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   184      uint8          i;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   185  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   186      for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   187      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   188          if (vadc->BRSPND[i].U)
	lea	a15,[a4]448
.L547:
	mov.a	a2,#7
.L15:
	ld.w	d15,[a15]
.L548:
	jeq	d15,#0,.L16
.L549:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   189          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   190              return IfxVadc_Status_channelsStillPending;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   191          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   192          else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   193          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   194              continue;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   195          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   196      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   197  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   198      return status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   199  }
	mov	d2,#6
	ret
.L16:
	add.a	a15,#4
	loop	a2,.L15
.L550:
	mov	d2,#0
	ret
.L269:
	
__IfxVadc_getBackgroundScanStatus_function_end:
	.size	IfxVadc_getBackgroundScanStatus,__IfxVadc_getBackgroundScanStatus_function_end-IfxVadc_getBackgroundScanStatus
.L142:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getChannelConversionTime',code,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.text.IfxVadc.IfxVadc_getChannelConversionTime'
	.align	2
	
	.global	IfxVadc_getChannelConversionTime

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   200  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   201  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   202  float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
; Function IfxVadc_getChannelConversionTime
.L105:
IfxVadc_getChannelConversionTime:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   203  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   204      float32                   conversionTime = 0.0;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   205      Ifx_VADC_G               *vadcG          = &vadc->G[group];
	sha	d15,d4,#10
	ld.bu	d0,[a10]
.L470:
	addsc.a	a15,a4,d15,#0
.L781:
	mov	d8,d6
.L472:
	lea	a15,[a15]1152
.L473:
	mov	d2,#0
.L475:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   206      uint32                    stc;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   207      IfxVadc_ChannelResolution resolution;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   208      uint32                    n;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   209  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   210      uint32                    inputClassNum;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   211  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   212      if (inputClass <= IfxVadc_InputClasses_group1)
	jge.u	d5,#2,.L19
.L782:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   213      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   214          inputClassNum = inputClass;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   215          stc           = vadcG->ICLASS[inputClassNum].B.STCS;
	addsc.a	a15,a15,d5,#2
.L474:
	ld.bu	d15,[a15]32
.L783:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   216          resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
	and	d10,d15,#31
	ld.bu	d15,[a15]33
.L476:
	j	.L20
.L19:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   217      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   218      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   219      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   220          inputClassNum = inputClass - IfxVadc_InputClasses_global0;
	add	d15,d5,#-2
.L478:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   221          stc           = vadc->GLOBICLASS[inputClassNum].B.STCS;
	addsc.a	a15,a4,d15,#2
.L477:
	ld.bu	d15,[a15]160
.L479:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   222          resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
	and	d10,d15,#31
	ld.bu	d15,[a15]161
.L20:
	and	d15,#7
.L784:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   223      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   224  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   225      switch (resolution)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   226      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   227      case IfxVadc_ChannelResolution_12bit: n     = 12;
	jeq	d15,#0,.L21
.L785:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   228          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   229      case IfxVadc_ChannelResolution_10bit: n     = 10;
	jeq	d15,#1,.L22
.L786:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   230          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   231      case IfxVadc_ChannelResolution_8bit: n      = 8;
	jeq	d15,#2,.L23
.L787:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   232          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   233      case IfxVadc_ChannelResolution_10bitFast: n = 10;
	jeq	d15,#5,.L24
.L788:
	j	.L25
.L21:
	mov	d9,#12
	j	.L26
.L23:
	mov	d9,#8
	j	.L27
.L24:
.L22:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   234          break;
	mov	d9,#10
	j	.L28

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   235      default: n                                  = 0;
.L25:
	mov	d9,d2

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   236          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   237      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   238  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   239      if (conversionMode == IfxVadc_ConversionType_Compatible)
.L28:
.L27:
.L26:
	jne	d0,#0,.L29
.L407:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   240      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   241          if (resolution != IfxVadc_ChannelResolution_10bitFast)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   242          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   243              /* Standard conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   244              uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   245              conversionTime = (float32)(2 + stc + n + pc) / analogFrequency + 2.0 / moduleFrequency;
	movh	d0,#16384
.L471:
	div.f	d11,d0,d7
.L408:
	jeq	d15,#5,.L30
.L409:
	call	IfxVadc_isPostCalibration
.L469:
	add	d9,d10
.L481:
	cadd	d9,d2,d9,#2
.L789:
	add	d9,#2
.L790:
	utof	d15,d9
	j	.L31
.L30:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   246          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   247          else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   248          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   249              /* Fast compare mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   250              conversionTime = (float32)(2 + stc + 2) / analogFrequency + 2.0 / moduleFrequency;
	add	d10,#4
.L480:
	utof	d15,d10
.L31:
	div.f	d15,d15,d8
.L791:
	add.f	d2,d15,d11
.L29:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   251          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   252      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   253      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   254      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   255          // do nothing
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   256      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   257  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   258      return conversionTime;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   259  }
	ret
.L390:
	
__IfxVadc_getChannelConversionTime_function_end:
	.size	IfxVadc_getChannelConversionTime,__IfxVadc_getChannelConversionTime_function_end-IfxVadc_getChannelConversionTime
.L252:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getQueueStatus',code,cluster('IfxVadc_getQueueStatus')
	.sect	'.text.IfxVadc.IfxVadc_getQueueStatus'
	.align	2
	
	.global	IfxVadc_getQueueStatus

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   260  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   261  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   262  IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
; Function IfxVadc_getQueueStatus
.L107:
IfxVadc_getQueueStatus:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   263  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   264      IfxVadc_Status status = IfxVadc_Status_noError;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   265  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   266      /* just fill level is checked */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   267      if (0x7 == group->QSR0.B.FILL)
	ld.bu	d15,[a4]136
	and	d15,#15
.L588:
	eq	d15,d15,#7
.L589:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   268      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   269          status = IfxVadc_Status_queueFull;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   270      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   271      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   272      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   273          status = IfxVadc_Status_noError;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   274      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   275  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   276      return status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   277  }
	sha	d2,d15,#2
	ret
.L293:
	
__IfxVadc_getQueueStatus_function_end:
	.size	IfxVadc_getQueueStatus,__IfxVadc_getQueueStatus_function_end-IfxVadc_getQueueStatus
.L162:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getResultBasedOnRequestSource',code,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.text.IfxVadc.IfxVadc_getResultBasedOnRequestSource'
	.align	2
	
	.global	IfxVadc_getResultBasedOnRequestSource

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   278  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   279  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   280  Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
; Function IfxVadc_getResultBasedOnRequestSource
.L109:
IfxVadc_getResultBasedOnRequestSource:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   281  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   282      sint32       sourceResultRegister = -1;
	mov	d15,#-1
.L482:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   283      Ifx_VADC_RES tmpResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   284  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   285      switch (sourceType)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   286      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   287      case IfxVadc_RequestSource_queue:
	jeq	d5,#0,.L34
.L555:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   288          sourceResultRegister = group->QCTRL0.B.SRCRESREG;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   289          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   290  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   291      case IfxVadc_RequestSource_scan:
	jeq	d5,#1,.L35
.L556:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   292          sourceResultRegister = group->ASCTRL.B.SRCRESREG;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   293          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   294  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   295      case IfxVadc_RequestSource_background:
	jeq	d5,#2,.L36
.L557:
	j	.L37
.L34:
	ld.bu	d15,[a5]128
.L483:
	j	.L38
.L35:
	ld.bu	d15,[a5]160
.L484:
	j	.L39
.L36:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   296          sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
	ld.bu	d15,[a4]512

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   297          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   298      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   299  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   300      if (sourceResultRegister > 0)
.L38:
.L39:
	and	d15,#15
.L37:
	jge	d15,#1,.L41
.L558:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   301      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   302          tmpResult.U = group->RES[sourceResultRegister].U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   303  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   304          return tmpResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   305      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   306      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   307      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   308          if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
	jne	d5,#2,.L42
.L559:
	addsc.a	a15,a5,d4,#2
.L560:
	ld.bu	d15,[a15]386
.L485:
	jz.t	d15:4,.L43
.L561:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   309          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   310              tmpResult.B.VF     = vadc->GLOBRES.B.VF;
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#7,#1
.L486:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   311              tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
	insert	d2,d2,d15,#31,#1
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#6,#1
.L562:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   312              tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
	insert	d2,d2,d15,#30,#1
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#4,#2
.L563:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   313              tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
	insert	d2,d2,d15,#28,#2
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#1,#3
.L564:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   314              tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
	insert	d2,d2,d15,#25,#3
	ld.hu	d15,[a4]770
	extr.u	d15,d15,#4,#5
.L565:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   315              tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
	insert	d2,d2,d15,#20,#5
	ld.bu	d15,[a4]770
	and	d15,#15
.L566:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   316              tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
	insert	d2,d2,d15,#16,#4
	ld.hu	d15,[a4]768
.L567:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   317  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   318              return tmpResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   319          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   320          else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   321          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   322              tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   323  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   324              return tmpResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   325          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   326      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   327  }
	insert	d2,d2,d15,#0,#16
	ret
.L43:
.L42:
	addsc.a	a15,a5,d4,#2
.L568:
	ld.bu	d15,[a15]386
	and	d15,#15
.L41:
	addsc.a	a15,a5,d15,#2
.L569:
	ld.w	d2,[a15]640
.L487:
	ret
.L275:
	
__IfxVadc_getResultBasedOnRequestSource_function_end:
	.size	IfxVadc_getResultBasedOnRequestSource,__IfxVadc_getResultBasedOnRequestSource_function_end-IfxVadc_getResultBasedOnRequestSource
.L147:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getScanStatus',code,cluster('IfxVadc_getScanStatus')
	.sect	'.text.IfxVadc.IfxVadc_getScanStatus'
	.align	2
	
	.global	IfxVadc_getScanStatus

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   328  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   329  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   330  IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
; Function IfxVadc_getScanStatus
.L111:
IfxVadc_getScanStatus:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   331  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   332      IfxVadc_Status status = IfxVadc_Status_noError;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   333  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   334      if (group->ASPND.U)
	ld.w	d15,[a4]172
.L574:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   335      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   336          return IfxVadc_Status_channelsStillPending;
	mov	d2,#6
.L575:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   337      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   338      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   339      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   340          return status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   341      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   342  }
	cmovn	d2,d15,#0
	ret
.L286:
	
__IfxVadc_getScanStatus_function_end:
	.size	IfxVadc_getScanStatus,__IfxVadc_getScanStatus_function_end-IfxVadc_getScanStatus
.L152:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getSrcAddress',code,cluster('IfxVadc_getSrcAddress')
	.sect	'.text.IfxVadc.IfxVadc_getSrcAddress'
	.align	2
	
	.global	IfxVadc_getSrcAddress

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   343  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   344  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   345  volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
; Function IfxVadc_getSrcAddress
.L113:
IfxVadc_getSrcAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   346  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   347      Ifx_SRC_SRCR *base;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   348  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   349      if (IfxVadc_SrcNr_shared0 <= index)
	jlt.u	d5,#4,.L49
.L690:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   350      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   351          index -= 4;
	add	d5,#-4
.L691:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   352  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   353          if ((group & 0x1) != 0)
	and	d15,d4,#1
.L692:
	ne	d15,d15,#0
	add	d4,d15,#8
.L49:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   354          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   355              group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   356          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   357          else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   358          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   359              group = IfxVadc_GroupId_global0;    /* Shared interrupt common 0 is used */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   360          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   361      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   362      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   363      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   364          /* do nothing */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   365      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   366  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   367      base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
	sha	d4,#2
	movh.a	a15,#@his(IfxVadc_cfg_srcAddresses)
.L488:
	add	d5,d4
	lea	a15,[a15]@los(IfxVadc_cfg_srcAddresses)
.L489:
	addsc.a	a15,a15,d5,#2
	ld.w	d15,[a15]
.L693:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   368  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   369      return &(base[0]);
	mov.a	a2,d15
.L694:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   370  }
	ret
.L337:
	
__IfxVadc_getSrcAddress_function_end:
	.size	IfxVadc_getSrcAddress,__IfxVadc_getSrcAddress_function_end-IfxVadc_getSrcAddress
.L207:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initialiseAdcArbiterClock',code,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.text.IfxVadc.IfxVadc_initialiseAdcArbiterClock'
	.align	2
	
	.global	IfxVadc_initialiseAdcArbiterClock

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   371  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   372  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   373  void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
; Function IfxVadc_initialiseAdcArbiterClock
.L115:
IfxVadc_initialiseAdcArbiterClock:	.type	func
	mov.aa	a15,a4
.L493:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   374  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   375      Ifx_VADC_GLOBCFG tempGLOBCFG;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   376      tempGLOBCFG.U       = vadc->GLOBCFG.U;
	ld.w	d8,[a15]128
.L492:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   377      tempGLOBCFG.B.DIVD  = arbiterClockDivider;
	extr.u	d15,d8,#8,#8
.L699:
	insert	d15,d15,d4,#0,#2
.L700:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   378      tempGLOBCFG.B.DIVWC = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   379      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
.L490:
	or	d15,#128
.L701:
	insert	d8,d8,d15,#8,#8
	call	IfxVadc_enableAccess
.L491:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   380      vadc->GLOBCFG.U     = tempGLOBCFG.U;
	st.w	[a15]128,d8
.L702:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   381      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_4
.L494:
	j	IfxVadc_disableAccess
.L341:
	
__IfxVadc_initialiseAdcArbiterClock_function_end:
	.size	IfxVadc_initialiseAdcArbiterClock,__IfxVadc_initialiseAdcArbiterClock_function_end-IfxVadc_initialiseAdcArbiterClock
.L212:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initialiseAdcConverterClock',code,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.text.IfxVadc.IfxVadc_initialiseAdcConverterClock'
	.align	2
	
	.global	IfxVadc_initialiseAdcConverterClock

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   382  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   383  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   384  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   385  void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
; Function IfxVadc_initialiseAdcConverterClock
.L117:
IfxVadc_initialiseAdcConverterClock:	.type	func
	mov.aa	a15,a4
.L498:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   386  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   387      Ifx_VADC_GLOBCFG tempGLOBCFG;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   388      tempGLOBCFG.U       = vadc->GLOBCFG.U;
	ld.w	d15,[a15]128
.L497:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   389      tempGLOBCFG.B.DIVA  = converterClockDivider;
	insert	d15,d15,d4,#0,#5
.L707:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   390      tempGLOBCFG.B.DIVWC = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   391      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
.L495:
	insert	d15,d15,#1,#15,#1
	call	IfxVadc_enableAccess
.L496:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   392      vadc->GLOBCFG.U     = tempGLOBCFG.U;
	st.w	[a15]128,d15
.L708:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   393      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_4
.L499:
	j	IfxVadc_disableAccess
.L345:
	
__IfxVadc_initialiseAdcConverterClock_function_end:
	.size	IfxVadc_initialiseAdcConverterClock,__IfxVadc_initialiseAdcConverterClock_function_end-IfxVadc_initialiseAdcConverterClock
.L217:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initializeFAdcD',code,cluster('IfxVadc_initializeFAdcD')
	.sect	'.text.IfxVadc.IfxVadc_initializeFAdcD'
	.align	2
	
	.global	IfxVadc_initializeFAdcD

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   394  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   395  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   396  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   397  uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
; Function IfxVadc_initializeFAdcD
.L119:
IfxVadc_initializeFAdcD:	.type	func
	mov.aa	a15,a4
.L501:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   398  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   399      uint32 divD;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   400      uint32 result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   401      uint32 fadc = IfxScuCcu_getSpbFrequency();
	mov	d15,d4
	call	IfxScuCcu_getSpbFrequency
.L500:
	ftouz	d8,d2
.L503:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   402  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   403      divD   = (fadc / fAdcD - 1);
	div.u	e0,d8,d15
.L713:
	add	d15,d0,#-1
.L502:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   404  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   405      divD   = __minu(divD, 0x3u);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   406  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   407      result = fadc / (divD + 1);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   408      IfxVadc_initialiseAdcArbiterClock(vadc, divD);
	min.u	d15,d15,#3
	mov.aa	a4,a15
.L504:
	mov	d4,d15
	call	IfxVadc_initialiseAdcArbiterClock
.L506:
	add	d15,#1
.L505:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   409      return result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   410  }
	div.u	e2,d8,d15
	ret
.L349:
	
__IfxVadc_initializeFAdcD_function_end:
	.size	IfxVadc_initializeFAdcD,__IfxVadc_initializeFAdcD_function_end-IfxVadc_initializeFAdcD
.L222:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initializeFAdcI',code,cluster('IfxVadc_initializeFAdcI')
	.sect	'.text.IfxVadc.IfxVadc_initializeFAdcI'
	.align	2
	
	.global	IfxVadc_initializeFAdcI

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   411  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   412  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   413  uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
; Function IfxVadc_initializeFAdcI
.L121:
IfxVadc_initializeFAdcI:	.type	func
	mov.aa	a15,a4
.L508:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   414  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   415      uint32 divA;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   416      uint32 result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   417      uint32 fadc = IfxScuCcu_getSpbFrequency();
	mov	d15,d4
	call	IfxScuCcu_getSpbFrequency
.L507:
	ftouz	d0,d2
.L510:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   418  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   419      /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   420      divA   = (fadc << 2) / fAdcI;
	sh	d1,d0,#2
.L718:
	div.u	e2,d1,d15
.L719:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   421  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   422      divA   = (divA + 2) >> 2; /* Round to nearest integer */
	add	d15,d2,#2
.L509:
	sh	d15,#-2
.L720:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   423      divA   = __minu(divA - 1, 0x1Fu);
	add	d15,#-1
.L721:
	min.u	d4,d15,#31
.L512:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   424      result = fadc / (divA + 1);
	add	d15,d4,#1
.L722:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   425  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   426      if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
	div.u	e8,d0,d15
	ld.w	d1,.1.cnt
.L513:
	jge.u	d1,d8,.L52
.L723:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   427      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   428          divA   = __minu(divA + 1, 0x1Fu);
	min.u	d4,d15,#31
.L724:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   429  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   430          result = fadc / (divA + 1);
	add	d15,d4,#1
.L725:
	div.u	e0,d0,d15
.L511:
	mov	d8,d0
.L52:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   431      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   432      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   433      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   434          /* do nothing */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   435      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   436  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   437      if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
	ld.w	d15,.2.cnt
.L726:
	ld.w	d0,.3.cnt
.L727:
	sub	d15,d8,d15
.L728:
	jge.u	d0,d15,.L53
.L729:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   438      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   439          result = 0;             /* Min / Max FAdcI frequency */
	mov	d8,#0
	j	.L54
.L53:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   440      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   441      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   442      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   443          IfxVadc_initialiseAdcConverterClock(vadc, divA);
	mov.aa	a4,a15
.L514:
	call	IfxVadc_initialiseAdcConverterClock
.L54:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   444      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   445  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   446      return result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   447  }
	mov	d2,d8
	ret
.L354:
	
__IfxVadc_initializeFAdcI_function_end:
	.size	IfxVadc_initializeFAdcI,__IfxVadc_initializeFAdcI_function_end-IfxVadc_initializeFAdcI
.L227:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_isPostCalibration',code,cluster('IfxVadc_isPostCalibration')
	.sect	'.text.IfxVadc.IfxVadc_isPostCalibration'
	.align	2
	
	.global	IfxVadc_isPostCalibration

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   448  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   449  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   450  boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
; Function IfxVadc_isPostCalibration
.L123:
IfxVadc_isPostCalibration:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   451  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   452      boolean pcEnabled;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   453  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   454      switch (group)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   455      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   456      case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
	jeq	d4,#0,.L56
.L734:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   457          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   458      case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
	jeq	d4,#1,.L57
.L735:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   459          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   460      case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
	jeq	d4,#2,.L58
.L736:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   461          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   462      case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
	jeq	d4,#3,.L59
.L737:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   463          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   464      case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
	jeq	d4,#4,.L60
.L738:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   465          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   466      case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
	jeq	d4,#5,.L61
.L739:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   467          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   468      case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
	jeq	d4,#6,.L62
.L740:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   469          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   470      case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
	jeq	d4,#7,.L63
.L741:
	j	.L64
.L56:
	ld.bu	d15,[a4]130
.L742:
	and	d15,#1
	j	.L65
.L57:
	ld.bu	d15,[a4]130
.L743:
	extr.u	d15,d15,#1,#1
	j	.L66
.L58:
	ld.bu	d15,[a4]130
.L744:
	extr.u	d15,d15,#2,#1
	j	.L67
.L59:
	ld.bu	d15,[a4]130
.L745:
	extr.u	d15,d15,#3,#1
	j	.L68
.L60:
	ld.bu	d15,[a4]130
.L746:
	extr.u	d15,d15,#4,#1
	j	.L69
.L61:
	ld.bu	d15,[a4]130
.L747:
	extr.u	d15,d15,#5,#1
	j	.L70
.L62:
	ld.bu	d15,[a4]130
.L748:
	extr.u	d15,d15,#6,#1
	j	.L71
.L63:
	ld.bu	d15,[a4]130
	extr.u	d15,d15,#7,#1

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   471          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   472      default: pcEnabled                = FALSE;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   473          break;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   474      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   475  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   476      return pcEnabled;
.L71:
.L70:
.L69:
.L68:
.L67:
.L66:
.L65:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   477  }
	eq	d2,d15,#0
	ret
.L64:
	mov	d2,#0
	ret
.L360:
	
__IfxVadc_isPostCalibration_function_end:
	.size	IfxVadc_isPostCalibration,__IfxVadc_isPostCalibration_function_end-IfxVadc_isPostCalibration
.L232:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_resetKernel',code,cluster('IfxVadc_resetKernel')
	.sect	'.text.IfxVadc.IfxVadc_resetKernel'
	.align	2
	
	.global	IfxVadc_resetKernel

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   478  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   479  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   480  void IfxVadc_resetKernel(Ifx_VADC *vadc)
; Function IfxVadc_resetKernel
.L125:
IfxVadc_resetKernel:	.type	func
	mov.aa	a15,a4
.L516:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   481  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   482      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L515:
	mov	d8,d2
.L518:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   483  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   484      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L517:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   485      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_4
.L519:
	call	IfxVadc_enableAccess
.L521:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   486      vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
	ld.bu	d15,[a15]48
.L753:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   487      vadc->KRST0.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   488      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L522:
	or	d15,#1
	st.b	[a15]48,d15
.L754:
	ld.bu	d15,[a15]52
.L755:
	or	d15,#1
	st.b	[a15]52,d15
.L756:
	call	IfxScuWdt_setCpuEndinit

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   489  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   490      while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
.L74:
	ld.bu	d15,[a15]52
.L757:
	jz.t	d15:1,.L74
.L758:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   491  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   492      {}
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   493  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   494      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L759:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   495      vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
	ld.bu	d15,[a15]44
.L760:
	or	d15,#1
	st.b	[a15]44,d15
.L520:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   496      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_4
.L523:
	call	IfxVadc_disableAccess
.L524:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   497      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L525:
	j	IfxScuWdt_setCpuEndinit
.L364:
	
__IfxVadc_resetKernel_function_end:
	.size	IfxVadc_resetKernel,__IfxVadc_resetKernel_function_end-IfxVadc_resetKernel
.L237:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_selectPowerSupplyVoltage',code,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.text.IfxVadc.IfxVadc_selectPowerSupplyVoltage'
	.align	2
	
	.global	IfxVadc_selectPowerSupplyVoltage

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   498  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   499  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   500  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   501  void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
; Function IfxVadc_selectPowerSupplyVoltage
.L127:
IfxVadc_selectPowerSupplyVoltage:	.type	func
	mov.aa	a15,a4
.L529:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   502  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   503      Ifx_VADC_GLOBCFG tempGLOBCFG;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   504      tempGLOBCFG.U       = vadc->GLOBCFG.U;
	ld.w	d8,[a15]128
.L528:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   505      tempGLOBCFG.B.LOSUP = supplyVoltage;
	extr.u	d15,d8,#8,#8
.L765:
	insert	d15,d15,d4,#6,#1
.L766:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   506      tempGLOBCFG.B.DIVWC = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   507      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
.L526:
	or	d15,#128
.L767:
	insert	d8,d8,d15,#8,#8
	call	IfxVadc_enableAccess
.L527:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   508      vadc->GLOBCFG.U     = tempGLOBCFG.U;
	st.w	[a15]128,d8
.L768:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   509      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_4
.L530:
	j	IfxVadc_disableAccess
.L367:
	
__IfxVadc_selectPowerSupplyVoltage_function_end:
	.size	IfxVadc_selectPowerSupplyVoltage,__IfxVadc_selectPowerSupplyVoltage_function_end-IfxVadc_selectPowerSupplyVoltage
.L242:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_setArbiterPriority',code,cluster('IfxVadc_setArbiterPriority')
	.sect	'.text.IfxVadc.IfxVadc_setArbiterPriority'
	.align	2
	
	.global	IfxVadc_setArbiterPriority

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   510  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   511  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   512  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   513  void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
; Function IfxVadc_setArbiterPriority
.L129:
IfxVadc_setArbiterPriority:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   514  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   515      if (slotEnable != FALSE)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   516      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   517          vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
	add	d0,d7,#24
.L606:
	jeq	d4,#0,.L75
.L607:
	sha	d4,d4,d0
	ld.w	d15,[a4]4
.L533:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   518          vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
	sh	d7,#2
.L532:
	or	d15,d4
	st.w	[a4]4,d15
.L608:
	mov	d0,#3
.L609:
	ld.w	d15,[a4]4
.L610:
	sha	d0,d0,d7
.L611:
	mov	d1,#-1
	xor	d0,d1
.L612:
	and	d15,d0
	st.w	[a4]4,d15
.L613:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   519          vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   520  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   521          if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   522          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   523              vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
	mov	d0,#1
.L614:
	ld.w	d15,[a4]4
.L615:
	sha	d5,d5,d7
.L531:
	add	d7,#3
.L616:
	or	d15,d5
	st.w	[a4]4,d15
.L617:
	sh	d0,d0,d7
.L618:
	jeq	d6,#0,.L76
.L619:
	ld.w	d15,[a4]4
.L620:
	or	d15,d0
	j	.L77
.L76:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   524          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   525          else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   526          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   527              vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
	ld.w	d15,[a4]4
.L621:
	xor	d0,d1
.L622:
	and	d15,d0
	j	.L78
.L75:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   528          }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   529      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   530      else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   531      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   532          vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
	mov	d1,#1
	ld.w	d15,[a4]4
.L623:
	sha	d1,d1,d0
.L624:
	mov	d0,#-1
	xor	d1,d0
.L625:
	and	d15,d1
.L77:
.L78:
	st.w	[a4]4,d15
.L626:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   533      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   534  }
	ret
.L300:
	
__IfxVadc_setArbiterPriority_function_end:
	.size	IfxVadc_setArbiterPriority,__IfxVadc_setArbiterPriority_function_end-IfxVadc_setArbiterPriority
.L177:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_setScan',code,cluster('IfxVadc_setScan')
	.sect	'.text.IfxVadc.IfxVadc_setScan'
	.align	2
	
	.global	IfxVadc_setScan

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   535  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   536  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   537  void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
; Function IfxVadc_setScan
.L131:
IfxVadc_setScan:	.type	func

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   538  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   539      /* select channels which should take part in the scan sequence */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   540      /* the mask allows to specify the channels which should be enabled/disabled */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   541      group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
	mov	d0,#-1
	ld.w	d15,[a4]168
.L580:
	xor	d0,d5
.L581:
	and	d15,d0
.L582:
	and	d4,d5
.L534:
	or	d15,d4
	st.w	[a4]168,d15
.L583:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   542  }
	ret
.L288:
	
__IfxVadc_setScan_function_end:
	.size	IfxVadc_setScan,__IfxVadc_setScan_function_end-IfxVadc_setScan
.L157:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_startupCalibration',code,cluster('IfxVadc_startupCalibration')
	.sect	'.text.IfxVadc.IfxVadc_startupCalibration'
	.align	2
	
	.global	IfxVadc_startupCalibration

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   543  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   544  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   545  void IfxVadc_startupCalibration(Ifx_VADC *vadc)
; Function IfxVadc_startupCalibration
.L133:
IfxVadc_startupCalibration:	.type	func
	mov.aa	a15,a4
.L535:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   546  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   547      boolean calibrationRunning;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   548      uint8   adcCalGroupNum;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   549  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   550      /* Start calibration */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   551      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
	call	IfxVadc_enableAccess
.L377:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    12   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    17   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    23   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    24   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    25   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    26   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    27   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    28   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    29   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    30   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    31   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    32   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    33   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    34   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    35   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    36   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    37   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    38   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    39   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    40   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    41   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    42   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    43   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    44   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    45  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    46  #ifndef IFXVADC_H
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    47  #define IFXVADC_H 1
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    48  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    50  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    52  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    53  #include "_Impl/IfxVadc_cfg.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    54  #include "_PinMap/IfxVadc_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    55  #include "IfxVadc_bf.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    56  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    57  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    58  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    59  #include "IfxCcu6_reg.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    60  #include "IfxCcu6_bf.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    61  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    63  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    64  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    65  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    66  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    67   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    68  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    69   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    70  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    71  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    72      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    73      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    74      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    75      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    76  } IfxVadc_AnalogConverterMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    77  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    78  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    79   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    81  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    82      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    83      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    84      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    85      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    86  } IfxVadc_ArbitrationRounds;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    87  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    88  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    89   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    91  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    92      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    93      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    94      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    95      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    96      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    97      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    98      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    99      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   100      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   101      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   102      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   103      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   104      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   105      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   106      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   107      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   108  } IfxVadc_BoundaryExtension;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   109  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   110  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   111   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   112  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   113  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   118  } IfxVadc_BoundarySelection;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   119  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   120  /** \brief VADC Channels
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   121   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   122  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   123  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   124      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   125      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   126      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   127      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   128      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   129      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   130      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   131      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   132      IfxVadc_ChannelId_7    = 7    /**< \brief Channel 7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   133  } IfxVadc_ChannelId;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   134  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   135  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   136   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   138  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   139      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   140      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   141  } IfxVadc_ChannelReference;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   142  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   143  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   144   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   145  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   146  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   147      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   148      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   149      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   150      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   151  } IfxVadc_ChannelResolution;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   152  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   153  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   154   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   155  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   156  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   157      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   158      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   159      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   160      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   161      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   162      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   163      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   164      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   165      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   166      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   169      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   170      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   171      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   172      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   173  } IfxVadc_ChannelResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   174  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   175  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   176   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   177   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   178  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   179  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   180      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   181      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   182                                                         * associated channel for EMUX control */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   183  } IfxVadc_ChannelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   184  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   185  /** \brief type of conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   186   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   188  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   189      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   190  } IfxVadc_ConversionType;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   191  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   192  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   193   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   194   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   195  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   196  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   197      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   198      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   199  } IfxVadc_EmuxCodingScheme;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   200  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   201  /** \brief Specifies the Emux interface
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   202   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   203  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   204  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   205      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   206      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   207  } IfxVadc_EmuxInterface;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   208  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   209  /** \brief External Multiplexer sample time control
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   210   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   211   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   212  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   213  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   214      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   215      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   216  } IfxVadc_EmuxSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   217  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   218  /** \brief specifies the External Channel Start select value
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   219   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   220   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   221  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   222  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   223      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   224      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   225      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   226      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   227      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   228      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   229      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   230      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   231  } IfxVadc_EmuxSelectValue;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   232  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   233  /** \brief Specifies External Multiplexer Mode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   234   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   235   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   236  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   237  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   238      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   239      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   240      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   241      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   242  } IfxVadc_ExternalMultiplexerMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   243  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   244  /** \brief FIFO mode enable
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   245   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   247  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   248      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   249      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   250      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   251      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   252  } IfxVadc_FifoMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   253  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   254  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   255   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   256  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   257  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   258      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   259      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   260      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   261      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   262  } IfxVadc_GatingMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   263  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   264  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   265   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   266  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   267  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   268      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   269      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   270      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   271      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   272      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   273      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   274      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   275      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   276      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   277      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   278      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   279      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   280      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   281      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   282      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   283      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   284  } IfxVadc_GatingSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   285  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   286  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   287   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   289  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   290      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   291      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   292      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   293      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   294  } IfxVadc_InputClasses;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   295  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   296  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   297   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   298  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   299  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   300      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   301      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   302      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   303      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   304  } IfxVadc_LimitCheck;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   305  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   306  /** \brief Low Power Supply Voltage Select
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   307   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   309  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   310      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   311      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   312  } IfxVadc_LowSupplyVoltageSelect;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   313  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   314  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   315   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   316  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   317  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   318      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   319      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   320      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   321      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   322      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   323      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   324      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   325      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   326      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   327      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   328      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   329      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   330      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   331      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   332      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   333      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   334      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   335      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   336      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   337      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   338      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   339      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   340      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   341      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   342      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   343      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   344      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   345      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   381  } IfxVadc_Protection;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   382  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   383  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   384   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   385  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   386  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   387      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   388      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   389      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   390      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   391  } IfxVadc_RequestSlotPriority;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   392  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   393  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   394   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   395  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   396  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   397      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   398      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   399  } IfxVadc_RequestSlotStartMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   400  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   401  /** \brief Request sources
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   402   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   403  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   404  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   405      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   406      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   407      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   408  } IfxVadc_RequestSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   409  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   410  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   411   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   412   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   413  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   414  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   415      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   416      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   417  } IfxVadc_SleepMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   418  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   419  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   420   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   421  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   422  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   423      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   424      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   425      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   426      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   427      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   428      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   429      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   430      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   431  } IfxVadc_SrcNr;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   432  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   433  /** \brief API return values defined in
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   434   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   435   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   436   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   437  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   438  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   439      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   440      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   441      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   442      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   443      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   444      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   445      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   446  } IfxVadc_Status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   448  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   449   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   450  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   451  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   452      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   453      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   454      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   455      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   456  } IfxVadc_TriggerMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   457  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   458  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   459   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   460  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   461  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   462      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   463      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   464      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   465      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   466      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   467      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   468      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   469      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   470      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   471      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   472      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   473      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   474      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   475      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   476      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   477      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   478  } IfxVadc_TriggerSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   479  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   480  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   481  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   482  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   483   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   484  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   485  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   486  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   487  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   488  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   489  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   490   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   491   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   492   * \param waitForRead wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   494   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   495  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   496  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   497  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   498   * \param vadc pointer to the VADC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   499   * \param waitForRead wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   501   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   502  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   503  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   504  /** \brief Enables the background sacn external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   505   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   507   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   508  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   509  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   510  /** \brief Gets the background scan gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   511   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   512   * \return background scan gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   513   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   514  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   515  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   516  /** \brief Gets the gating input selection.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   517   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   518   * \return background scan gating input selection.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   519   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   520  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   521  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   522  /** \brief Gets the requested background scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   523   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   524   * \return requested background scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   525   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   526  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   527  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   528  /** \brief Gets the requested background scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   529   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   530   * \return requested background scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   531   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   532  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   533  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   534  /** \brief Gets the background scan trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   535   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   536   * \return Gets the background scan external trigger source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   537   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   538  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   540  /** \brief Gets the background scan external trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   541   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   542   * \return background scan external trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   543   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   544  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   545  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   546  /** \brief get global input class resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   547   * \param vadc Pointer to the VADC Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   548   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   549   * \return ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   550   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   551  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   552  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   553  /** \brief return conversion result stored in the Global result Register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   554   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   555   * \return global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   556   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   557   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   558   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   559   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   560   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   561   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   562   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   563   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   564   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   565   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   566   * // configure background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   567   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   568   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   569   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   570   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   571   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   572   * // start the background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   573   * IfxVadc_startBackgroundScan(vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   574   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   575   * Ifx_VADC_GLOBRES result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   576   * result = IfxVadc_getGlobalResult (vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   577   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   578   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   579   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   580   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   581  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   582  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   583  /** \brief get global input class sample time in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   584   * \param vadc Pointer to the VADC Group Register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   585   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   586   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   587   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   588   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   589  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   590  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   591  /** \brief Get conversion result for the group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   592   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   593   * \param results pointer to scaled conversion results
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   594   * \param resultOffset offset for the first result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   595   * \param numResults number of results
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   597   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   598   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   599   * Ifx_VADC* vadc = &MODULE_VADC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   600   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   601   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   602   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   603   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   604   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   605   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   606   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   607   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   608   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   609   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   610   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   611   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   612   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   613   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   614   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   615   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   616   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   617   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   618   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   619   * // fetch the 2 results of conversion for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   620   * Ifx_VADC_RES results[10];
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   621   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   622   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   623   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   624   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   625  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   626  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   627  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   628   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   629   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   630   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   631   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   632   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   633   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   634   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   635   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   636   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   637   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   638   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   639   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   640   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   641   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   642   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   643   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   644   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   645   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   646   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   647   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   648   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   649   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   650   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   651   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   652   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   653   * // fetch the result of conversion from result register 0 for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   654   * Ifx_VADC_RES result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   655   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   656   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   657   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   658   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   659  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   660  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   661  /** \brief Returns the auto background scan status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   662   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   663   * \return TRUE if enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   664   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   665  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   666  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   667  /** \brief Returns the background scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   668   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   669   * \return background scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   670   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   671  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   672  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   673  /** \brief Enables/Disables continuous background auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   674   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   675   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   677   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   678  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   679  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   680  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   681   * \param vadc pointer to the VADC module registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   682   * \param groupId group index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   683   * \param channels specifies the channels which should be enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   684   * \param mask specifies the channels which should be modified
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   686   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   687   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   688   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   689   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   690   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   691   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   692   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   693   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   694   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   695   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   696   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   697   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   698   * // configure background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   699   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   700   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   701   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   702   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   703   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   704   * // start the background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   705   * IfxVadc_startBackgroundScan(vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   706   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   707   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   708   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   709  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   710  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   711  /** \brief Sets the background scan slot gating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   712   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   713   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   714   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   715   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   716   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   717  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   718  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   719  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   720   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   721   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   722   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   724   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   725  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   726  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   727  /** \brief Starts a background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   728   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   729   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   730   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   731   * \see IfxVadc_setBackgroundScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   732   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   733   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   734  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   735  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   736  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   737  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   738  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   739  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   740  /** \brief Gives the background scan status for a group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   741   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   742   * \return IfxVadc_Status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   743   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   744  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   745  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   746  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   747   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   748   * \param vadc VADC module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   749   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   750   * \param channel channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   751   * \param sourceType type of request source
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   752   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   753   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   754   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   755   * Ifx_VADC vadc;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   756   * vadc.vadc = &MODULE_VADC;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   757   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   758   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   759   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   760   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   761   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   762   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   763   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   764   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   765   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   766   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   767   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   768   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   769   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   770   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   771   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   772   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   773   * // fetch the result of conversion for channel 2 of group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   774   * Ifx_VADC_RESresult2;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   775   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   776   * Ifx_VADC_RESresult5;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   777   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   778   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   779   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   780   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   781  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   782  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   783  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   784  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   785  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   786   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   787  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   788  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   789  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   790  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   791  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   792  /** \brief Disables the scan slot external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   793   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   794   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   795   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   796  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   797  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   798  /** \brief Enables the scan slot external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   799   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   801   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   802  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   803  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   804  /** \brief Gets the request scan slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   805   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   806   * \return requested scan slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   807   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   808  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   809  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   810  /** \brief Gets the request scan slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   811   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   812   * \return request scan slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   813   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   814  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   815  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   816  /** \brief Gets the request scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   817   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   818   * \return request scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   819   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   820  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   821  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   822  /** \brief Gets the request scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   823   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   824   * \return request scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   825   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   826  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   827  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   828  /** \brief Gets the requested scan slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   829   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   830   * \return requested scan slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   831   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   832  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   833  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   834  /** \brief Gets the requested scan slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   835   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   836   * \return requested scan slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   837   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   838  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   839  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   840  /** \brief Gets the auto scan enable status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   841   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   842   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   843   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   844  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   845  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   846  /** \brief Returns the scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   847   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   848   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   849   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   850  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   851  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   852  /** \brief Enables/Disables continuous auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   853   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   854   * \param autoscanEnable whether autoscan is enabled or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   855   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   856   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   857  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   858  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   859  /** \brief Sets the scan slot gating configuration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   860   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   861   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   862   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   863   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   864   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   865  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   866  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   867  /** \brief Sets the scan slot trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   868   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   869   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   870   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   871   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   872   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   873  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   874  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   875  /** \brief Starts an autoscan on the specified group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   876   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   877   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   878   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   879   * See \ref IfxVadc_setScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   880   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   881   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   882  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   883  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   884  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   885  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   886  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   887  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   888  /** \brief Gives the scan status for a group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   889   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   890   * \return IfxVadc_Status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   891   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   892  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   893  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   894  /** \brief Configures an (auto-)scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   895   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   896   * \param channels specifies the channels which should be enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   897   * \param mask specifies the channels which should be modified
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   898   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   899   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   900   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   901   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   902   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   903   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   904   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   905   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   906   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   907   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   908   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   909   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   910   * // enable Auto-Scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   911   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   912   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   913   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   914   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   915   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   916   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   917   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   918  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   919  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   920  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   921  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   922  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   923   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   924  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   925  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   926  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   927  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   928  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   929  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   930   * refill incase of aborted conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   931   * source interrupt enable/disable
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   932   * external trigger control of the aborted conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   933   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   934   * \param channel specifies channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   935   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   936   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   937   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   938   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   939   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   940   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   941   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   942   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   943   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   944   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   945   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   946   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   947  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   948  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   949  /** \brief Clears all the queue entries including backup stage.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   950   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   951   * \param flushQueue Whether queue is cleared or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   952   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   953   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   954  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   955  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   956  /** \brief Disables the external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   957   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   959   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   960  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   961  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   962  /** \brief Enables the external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   963   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   964   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   965   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   966  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   967  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   968  /** \brief Gets the requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   969   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   970   * \return requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   971   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   972  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   973  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   974  /** \brief Gets the requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   975   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   976   * \return requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   977   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   978  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   979  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   980  /** \brief Gets the request queue slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   981   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   982   * \return requested queue slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   983   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   984  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   985  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   986  /** \brief Gets the requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   987   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   988   * \return requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   989   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   990  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   991  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   992  /** \brief Gets the requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   993   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   994   * \return requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   995   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   996  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   997  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   998  /** \brief Gets the requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   999   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1000   * \return requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1002  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1003  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1004  /** \brief Returns the queue slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1005   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1006   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1008  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1009  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1010  /** \brief Sets the gating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1011   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1012   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1013   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1014   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1015   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1016  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1017  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1018  /** \brief Sets the trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1019   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1020   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1021   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1022   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1023   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1024  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1025  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1026  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1027   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1028   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1029   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1030  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1031  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1032  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1033  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1034  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1035  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1036  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1037   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1038   * \return status of the Queue
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1039   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1040   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1041   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1042   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1043   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1044   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1046  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1047  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1048  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1049  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1050  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1051   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1052  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1053  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1054  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1055  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1056  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1057  /** \brief Initializes a EMUX output
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1058   * \param emux the Emux Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1059   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1060   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1061   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1062   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1063  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1064  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1065  /** \brief Initializes a GxBFL output
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1066   * \param gxBfl the GxBFL Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1067   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1068   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1071  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1072  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1073  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1074  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1075  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1076   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1077  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1078  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1079  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1080  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1081  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1082  /** \brief Calculate the time using analog frequency.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1083   * \param analogFrequency analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1084   * \param sampleTime sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1085   * \return sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1086   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1087  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1088  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1089  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1090  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1091  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1092  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1093  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1094   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1095   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1096   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1097  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1098  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1099  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1100   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1101   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1102   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1103  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1104  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1105  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1106  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1107  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1108   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1109  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1111  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1112  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1113  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1114  /** \brief Clears the all group requests.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1115   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1116   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1117   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1118  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1119  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1120  /** \brief Gets the ADC group arbitration round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1121   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1122   * \return ADC group arbitration round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1123   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1124  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1125  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1126  /** \brief Gets the channel esult service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1127   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1128   * \return channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1130  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1131  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1132  /** \brief Gets the channel esult service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1133   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1134   * \return channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1135   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1136  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1137  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1138  /** \brief Gets the channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1139   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1140   * \return channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1141   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1142  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1143  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1144  /** \brief Gets the configured master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1145   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1146   * \return configured master kernel index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1147   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1148  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1149  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1150  /** \brief Resets the ADC group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1151   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1154  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1155  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1156  /** \brief Sets analog converter group number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1157   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1158   * \param analogConverterMode group analog converter mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1161  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1162  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1163  /** \brief Sets the arbiter round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1164   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1165   * \param arbiterRoundLength arbiter round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1168  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1169  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1170  /** \brief Sets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1171   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1172   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1173   * \param resolution ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1174   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1175   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1176  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1177  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1178  /** \brief Sets the ADC input class sample time.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1179   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1180   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1181   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1182   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1183   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1184   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1185  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1186  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1187  /** \brief Sets the master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1188   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1189   * \param masterIndex master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1190   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1191   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1192  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1193  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1194  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1195  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1196  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1197  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1198  /** \brief Sets the Arbiter slot configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1199   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1200   * \param slotEnable enable/disable of slot.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1201   * \param prio channel request priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1202   * \param mode Channel Slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1203   * \param slot channel slot Request source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1206  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1207  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1208  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1209  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1210  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1211   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1212  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1213  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1214  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1215  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1216  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1217  /** \brief Disable VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1218   * \param vadc Pointer to VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1221  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1222  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1223  /** \brief Enable VADC kernel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1224   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1225   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1226   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1227  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1228  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1229  /** \brief gets ADC Calibration Flag CAL status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1230   * \param vadc pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1231   * \param adcCalGroupNum ADC CAL group number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1232   * \return CAL group status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1233   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1234  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1235  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1236  /** \brief Gets the global control configuration value.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1237   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1238   * \return global control configuration value.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1239   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1240  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1241  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1242  /** \brief get SUCAL bit field status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1243   * \param vadc Pointer to VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1244   * \return Indicate the start-up calibration phase
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1245   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1246  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1247  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1248  /** \brief initiates the calibration pulse phase.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1249   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1252  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1253  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1254  /** \brief Sets the channel conversion mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1255   * \param vadc pointer to VADC module registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1256   * \param inputClassNum global input class  number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1257   * \param resolution ADC channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1258   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1259   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1260  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1261  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1262  /** \brief Sets the sample time of ADC global class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1263   * \param vadc pointer to VADC module registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1264   * \param inputClassNum global input class  number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1265   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1266   * \param sampleTime the requested sample time for input class in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1267   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1268   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1269  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1270  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1271  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1272   * \param vadc pointer to VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1273   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1274   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1275   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1276  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1277  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1278  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1279  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1280  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1281  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1282  /** \brief Disable write access to the VADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1283   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1284   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1287  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1288  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1289  /** \brief Disables the post calibration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1290   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1291   * \param group Index of the group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1292   * \param disable disable or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1295  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1296  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1297  /** \brief Enable write access to the VADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1298   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1299   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1300   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1301   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1302  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1303  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1304  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1305   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1306   * \param ccu6Num selects CCU60 or CCU61
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1309  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1310  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1311  /** \brief Module Frequency in Hz
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1312   * \return Module Frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1313   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1314  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1315  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1316  /** \brief Gives the SRC source address.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1317   * \param group Index of the group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1318   * \param index SRC number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1319   * \return SRC source address
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1320   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1321  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1322  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1323  /** \brief Initialises ADC arbiter clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1324   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1325   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1326   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1327   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1328  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1329  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1330  /** \brief Initialises the ADC Converter clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1331   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1332   * \param converterClockDivider ADC converter clock divider.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1333   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1334   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1335  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1336  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1337  /** \brief Configure the FadcD vadc digital clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1338   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1339   * \param fAdcD ADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1340   * \return calculated ADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1341   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1342  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1343  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1344  /** \brief Configure the ADC analog clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1345   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1346   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1347   * \return ADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1349  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1350  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1351  /** \brief Return the post calibration status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1352   * \param vadc Pointer to VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1353   * \param group specifies Group ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1354   * \return TRUE if the post calibration is enabled for the group else false
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1355   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1356  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1357  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1358  /** \brief Resets the kernel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1359   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1362  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1363  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1364  /** \brief Select Low Power Supply Voltage
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1365   * \param vadc Pointer to Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1366   * \param supplyVoltage Select Supply Voltage
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1369  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1370  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1371  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1372   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1373   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1375  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1376  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1377  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1378  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1379  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1380   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1381  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1383  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1385  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1386  /** \brief Clears the channel request.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1387   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1388   * \param channelId channel id whose request to be cleared.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1391  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1392  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1393  /** \brief Enables the FIFO mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1394   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1395   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1396   * \param fifoMode FIFO mode .
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1397   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1399  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1400  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1401  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1402   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1403   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1404   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1405   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1406  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1407  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1408  /** \brief Gets the group's assigned channels.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1409   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1410   * \return group's assigned channels.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1411   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1412  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1413  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1414  /** \brief Gets the current ADC channel control configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1415   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1416   * \param channelIndex ADC channel number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1417   * \return current ADC channel control configuration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1418   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1419  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1420  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1421  /** \brief Gets the channel input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1422   * \param vadcG pointer to VADC Group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1423   * \param channelIndex specifies channel ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1424   * \return Input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1425   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1426  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1427  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1428  /** \brief Gets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1429   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1430   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1431   * \return ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1432   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1433  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1434  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1435  /** \brief Gets the ADC input class channel sample time.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1436   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1437   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1438   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1439   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1441  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1442  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1443  /** \brief Sets the channels with low priority as background channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1444   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1445   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1446   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1447   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1448  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1449  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1450  /** \brief Sets the target for result background source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1451   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1452   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1453   * \param globalResultUsage whether storage in global result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1454   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1455   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1456  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1457  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1458  /** \brief Selects boundary extension.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1459   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1460   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1461   * \param boundaryMode boundary extension mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1462   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1463   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1464  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1465  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1466  /** \brief Sets the channel event service request line.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1467   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1468   * \param channelSrcNr channel event Service Node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1469   * \param channel channel number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1470   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1471   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1472  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1473  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1474  /** \brief Sets the channel input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1475   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1476   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1477   * \param inputClass group input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1478   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1479   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1480  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1481  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1482  /** \brief Sets the channel event mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1483   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1484   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1485   * \param limitCheck channel event mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1486   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1487   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1488  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1489  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1490  /** \brief Sets channel as priority channel with in the group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1491   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1492   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1493   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1494   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1495  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1496  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1497  /** \brief Sets group's lower boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1498   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1499   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1500   * \param lowerBoundary group lower boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1501   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1502   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1503  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1504  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1505  /** \brief Selects the refernce input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1506   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1507   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1508   * \param reference reference input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1509   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1510   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1511  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1512  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1513  /** \brief Sets result event node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1514   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1515   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1516   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1517   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1519  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1520  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1521  /** \brief Sets result event node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1522   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1523   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1524   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1525   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1526   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1527  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1528  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1529  /** \brief Sets result store position.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1530   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1531   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1532   * \param rightAlignedStorage result store position.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1533   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1534   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1535  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1536  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1537  /** \brief Sets channel synchronization request.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1538   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1539   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1540   * \param synchonize whether channel synchronize or stand alone operation.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1541   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1542   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1543  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1544  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1545  /** \brief Sets group's upper boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1546   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1547   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1548   * \param upperBoundary group upper boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1549   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1550   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1551  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1552  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1553  /** \brief Sets the group result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1554   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1555   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1556   * \param resultRegister result register for group result storage.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1557   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1558   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1559  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1560  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1561  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1562  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1563  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1564  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1565  /** \brief get channel conversion timing
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1566   * \param vadc Pointer to VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1567   * \param group specifies the Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1568   * \param inputClass Input class used
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1569   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1570   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1571   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1572   * \return Channel conversion Time in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1573   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1574  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1575  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1576  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1577  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1578  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1579   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1580  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1581  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1582  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1583  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1584  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1585  /** \brief get global input class resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1586   * \param vadc Pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1587   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1588   * \return External channel resolution for global input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1589   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1590  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1591  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1592  /** \brief Get the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1593   * \param vadc pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1594   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1595   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1596   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1597   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1598  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1599  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1600  /** \brief get the external channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1601   * \param vadcG Pointer to VADC group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1602   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1603   * \return Adc input class External channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1604   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1605  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1606  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1607  /** \brief Gets the ADC input class sample time of external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1608   * \param vadcG Pointer to Register Group space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1609   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1610   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1611   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1612   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1613  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1614  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1615  /** \brief set the external channel resolution of Global class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1616   * \param vadc pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1617   * \param inputClassNum Global Input Class Number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1618   * \param resolution External Channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1619   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1620   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1621  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1622  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1623  /** \brief Sets the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1624   * \param vadc Pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1625   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1626   * \param analogFrequency ADC analog Frequency in HZ
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1627   * \param sampleTime the requested sample time for input class in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1628   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1629   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1630  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1631  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1632  /** \brief set the external channel resolution of ADC input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1633   * \param vadcG pointer to VADC Group Register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1634   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1635   * \param resolution input class external channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1636   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1637   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1638  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1639  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1640  /** \brief Sets the ADC input class sample time for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1641   * \param vadcG Pointer to VADC Group Register Space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1642   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1643   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1644   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1645   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1646   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1647  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1648  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1649  /** \brief Sets the Emux Interface for a particular group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1650   * \param vadc Pointer to VADC Module Space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1651   * \param emuxInterface specifies the EmuxInterface
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1652   * \param group specifies the group ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1653   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1654   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1655  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1656  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1657  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1658  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1659  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1660  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1661  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1662   * \param vadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1663   * \param vadcG Pointer to VADC group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1664   * \param mode External Multiplexer mode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1665   * \param channels Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1666   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1667   * \param code Output the channel number in binary code/gray code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1668   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1669   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1670   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1671   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1672  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1673  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1674  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1675  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1676  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1677  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1678  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1679  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1680  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1681  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1682      group->QINR0.U = channel | options;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1683  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1684  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1685  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1686  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1687  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1688      uint32 ticks;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1689  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1690      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1691  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1692      if (ticks > 31)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1693      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1694          ticks = (ticks / 16) + 15;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1695      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1696  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1697      ticks = __minu(ticks, 0xFFu);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1698  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1699      return ticks;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1701  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1702  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1703  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1705      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1707  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1708  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1709  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1711      vadcG->CEFCLR.U = 1 << channelId;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1713  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1714  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1715  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1717      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1718  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1719  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1720  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1721  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1722  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1723      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1724  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1725  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1726  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1727  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1728  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1729      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1730  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1731  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1732  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1733  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1734  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1735      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1736      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1737      vadc->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1738      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1740  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1741  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1742  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1744      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1746  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1747  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1748  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1750      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1752  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1753  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1754  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1756      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1758  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1759  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1760  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1762      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1764  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1765  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1766  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1768      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1769  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1770      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1771      vadc->CLC.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1772      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1773  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1774  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1775  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1776  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1777  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1778      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1779  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1780  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1781  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1782  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1783  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1784      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1785  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1786  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1787  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1788  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1789  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1790      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1791  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1792  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1793  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1794  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1795  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1796      uint8 status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1797      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1798      return status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1800  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1801  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1802  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1804      return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1806  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1807  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1808  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1810      Ifx_VADC_G_CHASS assignChannels;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1811      assignChannels.U = vadcG->CHASS.U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1812      return assignChannels;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1813  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1814  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1815  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1816  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1817  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1818      return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1819  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1820  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1821  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1822  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1823  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1824      return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1825  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1826  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1827  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1828  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1829  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1830      return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1831  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1832  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1833  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1834  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1835  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1836      return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1837  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1838  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1839  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1840  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1841  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1842      return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1843  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1844  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1845  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1846  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1847  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1848      return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1849  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1850  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1851  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1852  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1853  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1854      Ifx_VADC_CHCTR tempChctr;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1855      tempChctr.U = vadcG->CHCTR[channelIndex].U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1856      return tempChctr;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1857  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1858  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1859  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1860  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1861  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1862      return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1863  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1864  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1865  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1866  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1867  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1868      Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1869      resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1870      return resultServiceRequestNodePtr0;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1872  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1873  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1874  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1876      Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1877      resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1878      return resultServiceRequestNodePtr1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1879  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1880  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1881  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1882  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1883  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1884      Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1885      serviceRequestNodePtr.U = vadcG->CEVNP0.U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1886      return serviceRequestNodePtr;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1887  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1888  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1889  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1890  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1891  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1892      return (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CME;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1893  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1894  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1895  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1896  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1897  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1898      return (float32)(IFXVADC_SAMPLETIME_MIN + vadc->GLOBICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1899  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1900  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1901  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1902  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1903  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1904      return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CME;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1905  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1906  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1907  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1908  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1909  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1910      return (float32)(IFXVADC_SAMPLETIME_MIN + vadcG->ICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1911  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1912  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1913  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1914  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1915  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1916      Ifx_VADC_GLOBCFG globCfg;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1917      globCfg.U = vadc->GLOBCFG.U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1918      return globCfg;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1920  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1921  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1922  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1924      return (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1926  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1927  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1928  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1930      Ifx_VADC_GLOBRES tmpGlobalResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1931  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1932      tmpGlobalResult.U = vadc->GLOBRES.U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1933  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1934      return tmpGlobalResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1935  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1936  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1937  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1938  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1939  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1940      uint32 sampleTime = vadc->GLOBICLASS[inputClassNum].B.STCS;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1941  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1942      if (sampleTime > 16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1943      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1944          sampleTime = (sampleTime - 15) * 16;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1945      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1946  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1947      return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1948  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1949  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1950  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1951  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1952  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1953      return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1954  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1955  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1956  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1957  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1958  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1959      uint32 idx;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1960  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1961      for (idx = 0; idx < numResults; idx++)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1962      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1963          results[idx].U = group->RES[resultOffset + idx].U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1964      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1965  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1966  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1967  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1968  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1969  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1970      uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1971  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1972      if (sampleTime > 16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1973      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1974          sampleTime = (sampleTime - 15) * 16;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1975      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1976  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1977      return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1978  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1979  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1980  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1981  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1982  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1983      uint8 masterIndex = 0;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1984      masterIndex = vadcG->SYNCTR.B.STSEL;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1985      return masterIndex;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1986  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1987  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1988  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1989  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1990  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1991      return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1992  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1993  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1994  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1995  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1996  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1997      return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1998  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1999  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2000  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2001  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2002  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2003      return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2004  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2005  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2006  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2007  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2008  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2009      return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2010  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2011  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2012  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2013  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2014  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2015      return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2016  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2017  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2018  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2019  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2020  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2021      return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2022  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2023  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2024  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2025  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2026  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2027      Ifx_VADC_RES tmpResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2028  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2029      tmpResult.U = group->RES[resultIdx].U;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2030  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2031      return tmpResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2032  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2033  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2034  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2035  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2036  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2037      return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2038  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2039  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2040  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2041  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2042  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2043      return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2044  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2045  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2046  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2047  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2048  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2049      return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2050  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2051  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2052  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2053  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2054  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2055      return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2056  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2057  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2058  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2059  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2060  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2061      return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2062  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2063  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2064  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2065  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2066  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2067      return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2068  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2069  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2070  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2071  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2072  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2073      return (boolean)vadc->GLOBCFG.B.SUCAL;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2074  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2075  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2076  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2077  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2078  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2079      IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2080      IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2081  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2082  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2083  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2084  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2085  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2086      IfxPort_setPinModeOutput(gxBfl->pin.port, gxBfl->pin.pinIndex, outputMode, gxBfl->select);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2087      IfxPort_setPinPadDriver(gxBfl->pin.port, gxBfl->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2088  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2089  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2090  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2091  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2092  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  2093      vadc->GLOBCFG.B.SUCAL = 1;
	ld.bu	d15,[a15]131
.L773:
	or	d15,#128
	st.b	[a15]131,d15
.L378:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   552  tection_globalConfig);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   553      /* Set SUCAL bit */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   554      IfxVadc_initiateStartupCalibration(vadc);
	fcall	.cocofun_4
.L536:
	call	IfxVadc_disableAccess

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   555      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   556  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   557      /* Wait for hardware self-test and calibration to complete */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   558      /* Wait until Calibration is done */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   559      do
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   560      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   561          calibrationRunning = FALSE;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   562  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   563          for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   564          {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   565              if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   566              {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   567                  calibrationRunning = TRUE;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   568              }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   569              else
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   570              {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   571                  /* do nothing */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   572              }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   573          }
.L79:
	mov	d0,#0

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    12   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    17   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    23   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    24   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    25   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    26   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    27   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    28   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    29   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    30   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    31   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    32   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    33   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    34   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    35   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    36   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    37   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    38   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    39   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    40   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    41   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    42   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    43   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    44   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    45  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    46  #ifndef IFXVADC_H
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    47  #define IFXVADC_H 1
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    48  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    50  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    52  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    53  #include "_Impl/IfxVadc_cfg.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    54  #include "_PinMap/IfxVadc_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    55  #include "IfxVadc_bf.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    56  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    57  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    58  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    59  #include "IfxCcu6_reg.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    60  #include "IfxCcu6_bf.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    61  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    63  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    64  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    65  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    66  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    67   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    68  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    69   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    70  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    71  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    72      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    73      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    74      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    75      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    76  } IfxVadc_AnalogConverterMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    77  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    78  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    79   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    81  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    82      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    83      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    84      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    85      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    86  } IfxVadc_ArbitrationRounds;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    87  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    88  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    89   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    91  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    92      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    93      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    94      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    95      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    96      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    97      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    98      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    99      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   100      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   101      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   102      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   103      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   104      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   105      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   106      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   107      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   108  } IfxVadc_BoundaryExtension;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   109  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   110  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   111   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   112  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   113  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   118  } IfxVadc_BoundarySelection;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   119  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   120  /** \brief VADC Channels
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   121   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   122  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   123  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   124      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   125      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   126      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   127      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   128      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   129      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   130      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   131      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   132      IfxVadc_ChannelId_7    = 7    /**< \brief Channel 7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   133  } IfxVadc_ChannelId;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   134  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   135  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   136   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   138  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   139      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   140      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   141  } IfxVadc_ChannelReference;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   142  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   143  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   144   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   145  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   146  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   147      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   148      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   149      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   150      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   151  } IfxVadc_ChannelResolution;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   152  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   153  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   154   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   155  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   156  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   157      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   158      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   159      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   160      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   161      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   162      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   163      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   164      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   165      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   166      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   169      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   170      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   171      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   172      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   173  } IfxVadc_ChannelResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   174  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   175  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   176   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   177   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   178  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   179  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   180      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   181      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   182                                                         * associated channel for EMUX control */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   183  } IfxVadc_ChannelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   184  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   185  /** \brief type of conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   186   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   188  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   189      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   190  } IfxVadc_ConversionType;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   191  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   192  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   193   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   194   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   195  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   196  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   197      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   198      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   199  } IfxVadc_EmuxCodingScheme;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   200  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   201  /** \brief Specifies the Emux interface
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   202   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   203  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   204  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   205      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   206      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   207  } IfxVadc_EmuxInterface;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   208  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   209  /** \brief External Multiplexer sample time control
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   210   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   211   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   212  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   213  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   214      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   215      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   216  } IfxVadc_EmuxSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   217  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   218  /** \brief specifies the External Channel Start select value
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   219   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   220   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   221  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   222  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   223      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   224      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   225      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   226      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   227      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   228      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   229      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   230      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   231  } IfxVadc_EmuxSelectValue;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   232  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   233  /** \brief Specifies External Multiplexer Mode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   234   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   235   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   236  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   237  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   238      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   239      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   240      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   241      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   242  } IfxVadc_ExternalMultiplexerMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   243  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   244  /** \brief FIFO mode enable
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   245   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   247  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   248      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   249      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   250      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   251      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   252  } IfxVadc_FifoMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   253  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   254  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   255   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   256  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   257  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   258      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   259      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   260      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   261      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   262  } IfxVadc_GatingMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   263  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   264  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   265   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   266  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   267  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   268      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   269      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   270      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   271      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   272      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   273      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   274      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   275      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   276      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   277      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   278      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   279      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   280      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   281      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   282      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   283      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   284  } IfxVadc_GatingSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   285  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   286  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   287   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   289  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   290      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   291      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   292      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   293      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   294  } IfxVadc_InputClasses;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   295  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   296  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   297   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   298  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   299  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   300      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   301      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   302      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   303      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   304  } IfxVadc_LimitCheck;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   305  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   306  /** \brief Low Power Supply Voltage Select
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   307   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   309  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   310      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   311      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   312  } IfxVadc_LowSupplyVoltageSelect;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   313  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   314  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   315   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   316  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   317  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   318      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   319      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   320      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   321      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   322      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   323      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   324      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   325      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   326      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   327      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   328      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   329      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   330      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   331      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   332      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   333      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   334      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   335      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   336      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   337      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   338      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   339      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   340      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   341      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   342      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   343      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   344      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   345      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   381  } IfxVadc_Protection;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   382  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   383  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   384   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   385  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   386  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   387      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   388      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   389      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   390      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   391  } IfxVadc_RequestSlotPriority;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   392  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   393  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   394   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   395  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   396  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   397      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   398      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   399  } IfxVadc_RequestSlotStartMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   400  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   401  /** \brief Request sources
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   402   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   403  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   404  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   405      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   406      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   407      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   408  } IfxVadc_RequestSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   409  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   410  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   411   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   412   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   413  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   414  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   415      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   416      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   417  } IfxVadc_SleepMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   418  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   419  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   420   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   421  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   422  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   423      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   424      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   425      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   426      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   427      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   428      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   429      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   430      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   431  } IfxVadc_SrcNr;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   432  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   433  /** \brief API return values defined in
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   434   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   435   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   436   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   437  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   438  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   439      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   440      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   441      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   442      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   443      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   444      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   445      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   446  } IfxVadc_Status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   448  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   449   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   450  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   451  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   452      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   453      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   454      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   455      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   456  } IfxVadc_TriggerMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   457  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   458  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   459   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   460  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   461  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   462      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   463      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   464      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   465      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   466      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   467      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   468      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   469      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   470      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   471      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   472      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   473      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   474      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   475      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   476      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   477      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   478  } IfxVadc_TriggerSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   479  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   480  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   481  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   482  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   483   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   484  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   485  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   486  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   487  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   488  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   489  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   490   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   491   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   492   * \param waitForRead wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   494   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   495  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   496  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   497  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   498   * \param vadc pointer to the VADC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   499   * \param waitForRead wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   501   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   502  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   503  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   504  /** \brief Enables the background sacn external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   505   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   507   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   508  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   509  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   510  /** \brief Gets the background scan gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   511   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   512   * \return background scan gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   513   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   514  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   515  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   516  /** \brief Gets the gating input selection.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   517   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   518   * \return background scan gating input selection.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   519   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   520  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   521  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   522  /** \brief Gets the requested background scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   523   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   524   * \return requested background scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   525   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   526  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   527  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   528  /** \brief Gets the requested background scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   529   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   530   * \return requested background scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   531   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   532  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   533  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   534  /** \brief Gets the background scan trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   535   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   536   * \return Gets the background scan external trigger source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   537   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   538  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   540  /** \brief Gets the background scan external trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   541   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   542   * \return background scan external trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   543   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   544  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   545  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   546  /** \brief get global input class resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   547   * \param vadc Pointer to the VADC Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   548   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   549   * \return ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   550   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   551  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   552  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   553  /** \brief return conversion result stored in the Global result Register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   554   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   555   * \return global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   556   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   557   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   558   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   559   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   560   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   561   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   562   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   563   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   564   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   565   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   566   * // configure background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   567   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   568   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   569   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   570   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   571   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   572   * // start the background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   573   * IfxVadc_startBackgroundScan(vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   574   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   575   * Ifx_VADC_GLOBRES result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   576   * result = IfxVadc_getGlobalResult (vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   577   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   578   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   579   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   580   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   581  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   582  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   583  /** \brief get global input class sample time in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   584   * \param vadc Pointer to the VADC Group Register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   585   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   586   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   587   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   588   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   589  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   590  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   591  /** \brief Get conversion result for the group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   592   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   593   * \param results pointer to scaled conversion results
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   594   * \param resultOffset offset for the first result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   595   * \param numResults number of results
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   597   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   598   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   599   * Ifx_VADC* vadc = &MODULE_VADC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   600   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   601   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   602   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   603   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   604   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   605   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   606   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   607   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   608   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   609   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   610   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   611   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   612   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   613   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   614   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   615   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   616   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   617   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   618   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   619   * // fetch the 2 results of conversion for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   620   * Ifx_VADC_RES results[10];
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   621   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   622   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   623   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   624   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   625  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   626  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   627  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   628   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   629   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   630   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   631   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   632   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   633   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   634   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   635   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   636   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   637   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   638   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   639   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   640   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   641   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   642   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   643   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   644   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   645   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   646   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   647   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   648   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   649   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   650   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   651   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   652   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   653   * // fetch the result of conversion from result register 0 for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   654   * Ifx_VADC_RES result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   655   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   656   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   657   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   658   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   659  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   660  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   661  /** \brief Returns the auto background scan status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   662   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   663   * \return TRUE if enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   664   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   665  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   666  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   667  /** \brief Returns the background scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   668   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   669   * \return background scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   670   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   671  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   672  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   673  /** \brief Enables/Disables continuous background auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   674   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   675   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   677   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   678  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   679  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   680  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   681   * \param vadc pointer to the VADC module registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   682   * \param groupId group index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   683   * \param channels specifies the channels which should be enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   684   * \param mask specifies the channels which should be modified
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   686   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   687   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   688   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   689   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   690   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   691   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   692   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   693   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   694   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   695   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   696   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   697   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   698   * // configure background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   699   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   700   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   701   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   702   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   703   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   704   * // start the background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   705   * IfxVadc_startBackgroundScan(vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   706   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   707   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   708   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   709  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   710  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   711  /** \brief Sets the background scan slot gating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   712   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   713   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   714   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   715   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   716   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   717  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   718  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   719  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   720   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   721   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   722   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   724   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   725  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   726  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   727  /** \brief Starts a background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   728   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   729   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   730   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   731   * \see IfxVadc_setBackgroundScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   732   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   733   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   734  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   735  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   736  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   737  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   738  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   739  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   740  /** \brief Gives the background scan status for a group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   741   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   742   * \return IfxVadc_Status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   743   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   744  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   745  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   746  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   747   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   748   * \param vadc VADC module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   749   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   750   * \param channel channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   751   * \param sourceType type of request source
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   752   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   753   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   754   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   755   * Ifx_VADC vadc;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   756   * vadc.vadc = &MODULE_VADC;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   757   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   758   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   759   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   760   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   761   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   762   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   763   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   764   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   765   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   766   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   767   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   768   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   769   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   770   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   771   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   772   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   773   * // fetch the result of conversion for channel 2 of group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   774   * Ifx_VADC_RESresult2;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   775   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   776   * Ifx_VADC_RESresult5;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   777   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   778   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   779   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   780   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   781  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   782  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   783  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   784  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   785  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   786   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   787  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   788  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   789  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   790  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   791  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   792  /** \brief Disables the scan slot external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   793   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   794   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   795   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   796  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   797  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   798  /** \brief Enables the scan slot external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   799   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   801   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   802  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   803  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   804  /** \brief Gets the request scan slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   805   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   806   * \return requested scan slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   807   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   808  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   809  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   810  /** \brief Gets the request scan slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   811   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   812   * \return request scan slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   813   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   814  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   815  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   816  /** \brief Gets the request scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   817   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   818   * \return request scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   819   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   820  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   821  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   822  /** \brief Gets the request scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   823   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   824   * \return request scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   825   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   826  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   827  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   828  /** \brief Gets the requested scan slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   829   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   830   * \return requested scan slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   831   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   832  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   833  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   834  /** \brief Gets the requested scan slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   835   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   836   * \return requested scan slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   837   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   838  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   839  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   840  /** \brief Gets the auto scan enable status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   841   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   842   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   843   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   844  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   845  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   846  /** \brief Returns the scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   847   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   848   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   849   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   850  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   851  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   852  /** \brief Enables/Disables continuous auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   853   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   854   * \param autoscanEnable whether autoscan is enabled or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   855   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   856   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   857  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   858  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   859  /** \brief Sets the scan slot gating configuration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   860   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   861   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   862   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   863   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   864   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   865  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   866  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   867  /** \brief Sets the scan slot trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   868   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   869   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   870   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   871   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   872   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   873  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   874  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   875  /** \brief Starts an autoscan on the specified group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   876   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   877   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   878   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   879   * See \ref IfxVadc_setScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   880   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   881   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   882  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   883  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   884  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   885  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   886  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   887  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   888  /** \brief Gives the scan status for a group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   889   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   890   * \return IfxVadc_Status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   891   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   892  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   893  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   894  /** \brief Configures an (auto-)scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   895   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   896   * \param channels specifies the channels which should be enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   897   * \param mask specifies the channels which should be modified
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   898   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   899   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   900   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   901   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   902   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   903   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   904   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   905   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   906   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   907   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   908   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   909   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   910   * // enable Auto-Scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   911   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   912   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   913   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   914   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   915   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   916   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   917   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   918  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   919  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   920  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   921  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   922  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   923   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   924  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   925  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   926  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   927  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   928  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   929  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   930   * refill incase of aborted conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   931   * source interrupt enable/disable
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   932   * external trigger control of the aborted conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   933   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   934   * \param channel specifies channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   935   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   936   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   937   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   938   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   939   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   940   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   941   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   942   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   943   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   944   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   945   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   946   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   947  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   948  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   949  /** \brief Clears all the queue entries including backup stage.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   950   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   951   * \param flushQueue Whether queue is cleared or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   952   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   953   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   954  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   955  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   956  /** \brief Disables the external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   957   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   959   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   960  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   961  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   962  /** \brief Enables the external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   963   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   964   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   965   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   966  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   967  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   968  /** \brief Gets the requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   969   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   970   * \return requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   971   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   972  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   973  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   974  /** \brief Gets the requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   975   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   976   * \return requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   977   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   978  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   979  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   980  /** \brief Gets the request queue slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   981   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   982   * \return requested queue slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   983   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   984  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   985  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   986  /** \brief Gets the requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   987   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   988   * \return requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   989   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   990  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   991  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   992  /** \brief Gets the requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   993   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   994   * \return requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   995   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   996  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   997  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   998  /** \brief Gets the requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   999   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1000   * \return requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1002  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1003  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1004  /** \brief Returns the queue slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1005   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1006   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1008  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1009  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1010  /** \brief Sets the gating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1011   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1012   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1013   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1014   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1015   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1016  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1017  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1018  /** \brief Sets the trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1019   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1020   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1021   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1022   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1023   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1024  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1025  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1026  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1027   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1028   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1029   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1030  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1031  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1032  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1033  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1034  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1035  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1036  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1037   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1038   * \return status of the Queue
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1039   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1040   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1041   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1042   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1043   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1044   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1046  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1047  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1048  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1049  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1050  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1051   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1052  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1053  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1054  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1055  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1056  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1057  /** \brief Initializes a EMUX output
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1058   * \param emux the Emux Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1059   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1060   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1061   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1062   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1063  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1064  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1065  /** \brief Initializes a GxBFL output
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1066   * \param gxBfl the GxBFL Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1067   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1068   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1071  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1072  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1073  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1074  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1075  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1076   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1077  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1078  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1079  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1080  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1081  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1082  /** \brief Calculate the time using analog frequency.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1083   * \param analogFrequency analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1084   * \param sampleTime sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1085   * \return sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1086   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1087  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1088  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1089  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1090  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1091  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1092  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1093  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1094   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1095   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1096   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1097  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1098  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1099  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1100   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1101   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1102   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1103  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1104  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1105  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1106  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1107  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1108   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1109  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1111  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1112  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1113  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1114  /** \brief Clears the all group requests.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1115   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1116   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1117   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1118  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1119  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1120  /** \brief Gets the ADC group arbitration round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1121   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1122   * \return ADC group arbitration round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1123   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1124  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1125  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1126  /** \brief Gets the channel esult service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1127   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1128   * \return channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1130  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1131  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1132  /** \brief Gets the channel esult service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1133   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1134   * \return channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1135   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1136  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1137  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1138  /** \brief Gets the channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1139   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1140   * \return channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1141   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1142  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1143  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1144  /** \brief Gets the configured master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1145   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1146   * \return configured master kernel index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1147   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1148  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1149  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1150  /** \brief Resets the ADC group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1151   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1154  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1155  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1156  /** \brief Sets analog converter group number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1157   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1158   * \param analogConverterMode group analog converter mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1161  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1162  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1163  /** \brief Sets the arbiter round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1164   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1165   * \param arbiterRoundLength arbiter round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1168  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1169  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1170  /** \brief Sets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1171   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1172   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1173   * \param resolution ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1174   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1175   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1176  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1177  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1178  /** \brief Sets the ADC input class sample time.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1179   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1180   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1181   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1182   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1183   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1184   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1185  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1186  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1187  /** \brief Sets the master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1188   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1189   * \param masterIndex master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1190   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1191   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1192  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1193  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1194  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1195  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1196  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1197  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1198  /** \brief Sets the Arbiter slot configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1199   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1200   * \param slotEnable enable/disable of slot.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1201   * \param prio channel request priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1202   * \param mode Channel Slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1203   * \param slot channel slot Request source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1206  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1207  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1208  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1209  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1210  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1211   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1212  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1213  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1214  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1215  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1216  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1217  /** \brief Disable VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1218   * \param vadc Pointer to VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1221  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1222  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1223  /** \brief Enable VADC kernel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1224   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1225   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1226   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1227  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1228  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1229  /** \brief gets ADC Calibration Flag CAL status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1230   * \param vadc pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1231   * \param adcCalGroupNum ADC CAL group number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1232   * \return CAL group status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1233   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1234  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1235  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1236  /** \brief Gets the global control configuration value.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1237   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1238   * \return global control configuration value.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1239   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1240  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1241  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1242  /** \brief get SUCAL bit field status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1243   * \param vadc Pointer to VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1244   * \return Indicate the start-up calibration phase
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1245   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1246  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1247  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1248  /** \brief initiates the calibration pulse phase.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1249   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1252  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1253  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1254  /** \brief Sets the channel conversion mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1255   * \param vadc pointer to VADC module registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1256   * \param inputClassNum global input class  number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1257   * \param resolution ADC channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1258   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1259   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1260  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1261  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1262  /** \brief Sets the sample time of ADC global class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1263   * \param vadc pointer to VADC module registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1264   * \param inputClassNum global input class  number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1265   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1266   * \param sampleTime the requested sample time for input class in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1267   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1268   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1269  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1270  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1271  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1272   * \param vadc pointer to VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1273   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1274   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1275   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1276  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1277  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1278  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1279  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1280  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1281  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1282  /** \brief Disable write access to the VADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1283   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1284   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1287  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1288  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1289  /** \brief Disables the post calibration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1290   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1291   * \param group Index of the group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1292   * \param disable disable or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1295  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1296  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1297  /** \brief Enable write access to the VADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1298   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1299   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1300   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1301   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1302  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1303  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1304  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1305   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1306   * \param ccu6Num selects CCU60 or CCU61
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1309  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1310  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1311  /** \brief Module Frequency in Hz
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1312   * \return Module Frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1313   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1314  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1315  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1316  /** \brief Gives the SRC source address.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1317   * \param group Index of the group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1318   * \param index SRC number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1319   * \return SRC source address
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1320   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1321  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1322  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1323  /** \brief Initialises ADC arbiter clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1324   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1325   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1326   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1327   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1328  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1329  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1330  /** \brief Initialises the ADC Converter clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1331   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1332   * \param converterClockDivider ADC converter clock divider.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1333   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1334   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1335  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1336  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1337  /** \brief Configure the FadcD vadc digital clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1338   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1339   * \param fAdcD ADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1340   * \return calculated ADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1341   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1342  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1343  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1344  /** \brief Configure the ADC analog clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1345   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1346   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1347   * \return ADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1349  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1350  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1351  /** \brief Return the post calibration status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1352   * \param vadc Pointer to VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1353   * \param group specifies Group ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1354   * \return TRUE if the post calibration is enabled for the group else false
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1355   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1356  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1357  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1358  /** \brief Resets the kernel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1359   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1362  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1363  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1364  /** \brief Select Low Power Supply Voltage
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1365   * \param vadc Pointer to Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1366   * \param supplyVoltage Select Supply Voltage
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1369  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1370  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1371  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1372   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1373   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1375  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1376  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1377  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1378  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1379  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1380   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1381  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1383  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1385  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1386  /** \brief Clears the channel request.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1387   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1388   * \param channelId channel id whose request to be cleared.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1391  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1392  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1393  /** \brief Enables the FIFO mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1394   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1395   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1396   * \param fifoMode FIFO mode .
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1397   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1399  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1400  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1401  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1402   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1403   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1404   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1405   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1406  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1407  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1408  /** \brief Gets the group's assigned channels.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1409   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1410   * \return group's assigned channels.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1411   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1412  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1413  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1414  /** \brief Gets the current ADC channel control configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1415   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1416   * \param channelIndex ADC channel number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1417   * \return current ADC channel control configuration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1418   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1419  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1420  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1421  /** \brief Gets the channel input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1422   * \param vadcG pointer to VADC Group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1423   * \param channelIndex specifies channel ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1424   * \return Input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1425   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1426  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1427  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1428  /** \brief Gets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1429   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1430   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1431   * \return ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1432   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1433  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1434  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1435  /** \brief Gets the ADC input class channel sample time.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1436   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1437   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1438   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1439   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1441  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1442  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1443  /** \brief Sets the channels with low priority as background channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1444   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1445   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1446   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1447   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1448  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1449  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1450  /** \brief Sets the target for result background source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1451   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1452   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1453   * \param globalResultUsage whether storage in global result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1454   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1455   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1456  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1457  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1458  /** \brief Selects boundary extension.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1459   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1460   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1461   * \param boundaryMode boundary extension mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1462   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1463   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1464  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1465  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1466  /** \brief Sets the channel event service request line.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1467   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1468   * \param channelSrcNr channel event Service Node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1469   * \param channel channel number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1470   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1471   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1472  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1473  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1474  /** \brief Sets the channel input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1475   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1476   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1477   * \param inputClass group input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1478   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1479   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1480  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1481  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1482  /** \brief Sets the channel event mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1483   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1484   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1485   * \param limitCheck channel event mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1486   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1487   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1488  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1489  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1490  /** \brief Sets channel as priority channel with in the group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1491   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1492   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1493   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1494   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1495  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1496  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1497  /** \brief Sets group's lower boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1498   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1499   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1500   * \param lowerBoundary group lower boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1501   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1502   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1503  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1504  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1505  /** \brief Selects the refernce input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1506   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1507   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1508   * \param reference reference input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1509   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1510   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1511  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1512  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1513  /** \brief Sets result event node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1514   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1515   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1516   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1517   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1519  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1520  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1521  /** \brief Sets result event node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1522   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1523   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1524   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1525   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1526   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1527  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1528  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1529  /** \brief Sets result store position.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1530   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1531   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1532   * \param rightAlignedStorage result store position.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1533   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1534   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1535  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1536  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1537  /** \brief Sets channel synchronization request.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1538   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1539   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1540   * \param synchonize whether channel synchronize or stand alone operation.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1541   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1542   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1543  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1544  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1545  /** \brief Sets group's upper boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1546   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1547   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1548   * \param upperBoundary group upper boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1549   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1550   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1551  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1552  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1553  /** \brief Sets the group result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1554   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1555   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1556   * \param resultRegister result register for group result storage.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1557   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1558   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1559  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1560  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1561  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1562  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1563  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1564  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1565  /** \brief get channel conversion timing
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1566   * \param vadc Pointer to VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1567   * \param group specifies the Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1568   * \param inputClass Input class used
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1569   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1570   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1571   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1572   * \return Channel conversion Time in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1573   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1574  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1575  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1576  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1577  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1578  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1579   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1580  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1581  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1582  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1583  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1584  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1585  /** \brief get global input class resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1586   * \param vadc Pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1587   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1588   * \return External channel resolution for global input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1589   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1590  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1591  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1592  /** \brief Get the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1593   * \param vadc pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1594   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1595   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1596   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1597   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1598  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1599  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1600  /** \brief get the external channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1601   * \param vadcG Pointer to VADC group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1602   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1603   * \return Adc input class External channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1604   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1605  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1606  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1607  /** \brief Gets the ADC input class sample time of external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1608   * \param vadcG Pointer to Register Group space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1609   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1610   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1611   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1612   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1613  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1614  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1615  /** \brief set the external channel resolution of Global class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1616   * \param vadc pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1617   * \param inputClassNum Global Input Class Number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1618   * \param resolution External Channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1619   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1620   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1621  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1622  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1623  /** \brief Sets the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1624   * \param vadc Pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1625   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1626   * \param analogFrequency ADC analog Frequency in HZ
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1627   * \param sampleTime the requested sample time for input class in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1628   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1629   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1630  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1631  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1632  /** \brief set the external channel resolution of ADC input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1633   * \param vadcG pointer to VADC Group Register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1634   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1635   * \param resolution input class external channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1636   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1637   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1638  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1639  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1640  /** \brief Sets the ADC input class sample time for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1641   * \param vadcG Pointer to VADC Group Register Space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1642   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1643   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1644   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1645   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1646   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1647  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1648  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1649  /** \brief Sets the Emux Interface for a particular group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1650   * \param vadc Pointer to VADC Module Space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1651   * \param emuxInterface specifies the EmuxInterface
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1652   * \param group specifies the group ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1653   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1654   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1655  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1656  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1657  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1658  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1659  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1660  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1661  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1662   * \param vadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1663   * \param vadcG Pointer to VADC group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1664   * \param mode External Multiplexer mode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1665   * \param channels Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1666   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1667   * \param code Output the channel number in binary code/gray code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1668   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1669   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1670   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1671   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1672  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1673  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1674  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1675  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1676  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1677  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1678  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1679  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1680  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1681  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1682      group->QINR0.U = channel | options;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1683  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1684  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1685  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1686  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1687  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1688      uint32 ticks;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1689  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1690      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1691  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1692      if (ticks > 31)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1693      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1694          ticks = (ticks / 16) + 15;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1695      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1696  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1697      ticks = __minu(ticks, 0xFFu);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1698  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1699      return ticks;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1701  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1702  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1703  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1705      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1707  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1708  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1709  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1711      vadcG->CEFCLR.U = 1 << channelId;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1713  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1714  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1715  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1717      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1718  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1719  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1720  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1721  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1722  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1723      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1724  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1725  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1726  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1727  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1728  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1729      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1730  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1731  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1732  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1733  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1734  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1735      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1736      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1737      vadc->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1738      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1740  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1741  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1742  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1744      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1746  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1747  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1748  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1750      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1752  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1753  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1754  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1756      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1758  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1759  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1760  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1762      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1764  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1765  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1766  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1768      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1769  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1770      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1771      vadc->CLC.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1772      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1773  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1774  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1775  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1776  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1777  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1778      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1779  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1780  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1781  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1782  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1783  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1784      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1785  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1786  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1787  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1788  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1789  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1790      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1791  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1792  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1793  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1794  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1795  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1796      uint8 status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1797      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	lea	a2,[a15]1155
.L537:
	mov.a	a4,#7
.L80:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    12   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    17   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    23   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    24   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    25   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    26   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    27   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    28   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    29   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    30   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    31   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    32   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    33   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    34   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    35   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    36   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    37   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    38   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    39   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    40   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    41   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    42   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    43   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    44   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    45  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    46  #ifndef IFXVADC_H
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    47  #define IFXVADC_H 1
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    48  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    50  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    52  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    53  #include "_Impl/IfxVadc_cfg.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    54  #include "_PinMap/IfxVadc_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    55  #include "IfxVadc_bf.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    56  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    57  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    58  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    59  #include "IfxCcu6_reg.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    60  #include "IfxCcu6_bf.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    61  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    63  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    64  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    65  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    66  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    67   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    68  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    69   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    70  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    71  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    72      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    73      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    74      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    75      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    76  } IfxVadc_AnalogConverterMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    77  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    78  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    79   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    81  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    82      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    83      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    84      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    85      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    86  } IfxVadc_ArbitrationRounds;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    87  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    88  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    89   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    91  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    92      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    93      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    94      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    95      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    96      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    97      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    98      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    99      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   100      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   101      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   102      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   103      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   104      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   105      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   106      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   107      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   108  } IfxVadc_BoundaryExtension;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   109  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   110  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   111   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   112  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   113  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   118  } IfxVadc_BoundarySelection;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   119  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   120  /** \brief VADC Channels
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   121   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   122  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   123  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   124      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   125      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   126      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   127      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   128      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   129      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   130      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   131      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   132      IfxVadc_ChannelId_7    = 7    /**< \brief Channel 7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   133  } IfxVadc_ChannelId;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   134  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   135  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   136   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   138  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   139      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   140      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   141  } IfxVadc_ChannelReference;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   142  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   143  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   144   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   145  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   146  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   147      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   148      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   149      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   150      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   151  } IfxVadc_ChannelResolution;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   152  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   153  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   154   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   155  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   156  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   157      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   158      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   159      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   160      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   161      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   162      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   163      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   164      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   165      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   166      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   169      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   170      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   171      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   172      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   173  } IfxVadc_ChannelResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   174  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   175  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   176   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   177   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   178  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   179  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   180      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   181      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   182                                                         * associated channel for EMUX control */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   183  } IfxVadc_ChannelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   184  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   185  /** \brief type of conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   186   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   188  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   189      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   190  } IfxVadc_ConversionType;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   191  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   192  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   193   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   194   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   195  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   196  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   197      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   198      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   199  } IfxVadc_EmuxCodingScheme;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   200  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   201  /** \brief Specifies the Emux interface
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   202   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   203  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   204  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   205      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   206      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   207  } IfxVadc_EmuxInterface;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   208  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   209  /** \brief External Multiplexer sample time control
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   210   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   211   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   212  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   213  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   214      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   215      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   216  } IfxVadc_EmuxSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   217  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   218  /** \brief specifies the External Channel Start select value
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   219   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   220   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   221  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   222  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   223      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   224      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   225      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   226      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   227      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   228      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   229      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   230      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   231  } IfxVadc_EmuxSelectValue;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   232  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   233  /** \brief Specifies External Multiplexer Mode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   234   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   235   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   236  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   237  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   238      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   239      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   240      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   241      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   242  } IfxVadc_ExternalMultiplexerMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   243  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   244  /** \brief FIFO mode enable
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   245   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   247  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   248      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   249      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   250      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   251      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   252  } IfxVadc_FifoMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   253  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   254  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   255   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   256  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   257  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   258      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   259      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   260      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   261      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   262  } IfxVadc_GatingMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   263  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   264  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   265   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   266  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   267  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   268      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   269      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   270      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   271      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   272      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   273      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   274      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   275      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   276      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   277      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   278      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   279      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   280      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   281      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   282      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   283      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   284  } IfxVadc_GatingSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   285  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   286  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   287   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   289  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   290      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   291      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   292      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   293      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   294  } IfxVadc_InputClasses;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   295  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   296  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   297   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   298  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   299  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   300      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   301      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   302      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   303      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   304  } IfxVadc_LimitCheck;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   305  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   306  /** \brief Low Power Supply Voltage Select
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   307   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   309  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   310      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   311      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   312  } IfxVadc_LowSupplyVoltageSelect;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   313  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   314  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   315   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   316  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   317  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   318      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   319      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   320      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   321      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   322      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   323      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   324      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   325      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   326      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   327      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   328      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   329      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   330      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   331      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   332      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   333      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   334      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   335      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   336      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   337      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   338      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   339      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   340      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   341      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   342      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   343      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   344      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   345      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   381  } IfxVadc_Protection;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   382  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   383  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   384   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   385  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   386  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   387      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   388      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   389      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   390      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   391  } IfxVadc_RequestSlotPriority;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   392  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   393  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   394   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   395  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   396  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   397      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   398      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   399  } IfxVadc_RequestSlotStartMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   400  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   401  /** \brief Request sources
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   402   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   403  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   404  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   405      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   406      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   407      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   408  } IfxVadc_RequestSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   409  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   410  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   411   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   412   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   413  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   414  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   415      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   416      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   417  } IfxVadc_SleepMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   418  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   419  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   420   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   421  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   422  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   423      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   424      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   425      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   426      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   427      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   428      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   429      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   430      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   431  } IfxVadc_SrcNr;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   432  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   433  /** \brief API return values defined in
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   434   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   435   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   436   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   437  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   438  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   439      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   440      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   441      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   442      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   443      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   444      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   445      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   446  } IfxVadc_Status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   448  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   449   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   450  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   451  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   452      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   453      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   454      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   455      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   456  } IfxVadc_TriggerMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   457  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   458  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   459   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   460  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   461  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   462      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   463      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   464      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   465      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   466      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   467      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   468      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   469      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   470      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   471      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   472      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   473      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   474      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   475      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   476      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   477      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   478  } IfxVadc_TriggerSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   479  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   480  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   481  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   482  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   483   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   484  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   485  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   486  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   487  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   488  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   489  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   490   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   491   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   492   * \param waitForRead wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   494   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   495  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   496  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   497  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   498   * \param vadc pointer to the VADC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   499   * \param waitForRead wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   501   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   502  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   503  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   504  /** \brief Enables the background sacn external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   505   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   507   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   508  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   509  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   510  /** \brief Gets the background scan gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   511   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   512   * \return background scan gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   513   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   514  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   515  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   516  /** \brief Gets the gating input selection.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   517   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   518   * \return background scan gating input selection.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   519   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   520  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   521  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   522  /** \brief Gets the requested background scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   523   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   524   * \return requested background scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   525   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   526  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   527  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   528  /** \brief Gets the requested background scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   529   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   530   * \return requested background scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   531   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   532  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   533  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   534  /** \brief Gets the background scan trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   535   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   536   * \return Gets the background scan external trigger source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   537   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   538  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   540  /** \brief Gets the background scan external trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   541   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   542   * \return background scan external trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   543   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   544  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   545  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   546  /** \brief get global input class resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   547   * \param vadc Pointer to the VADC Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   548   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   549   * \return ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   550   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   551  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   552  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   553  /** \brief return conversion result stored in the Global result Register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   554   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   555   * \return global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   556   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   557   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   558   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   559   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   560   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   561   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   562   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   563   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   564   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   565   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   566   * // configure background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   567   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   568   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   569   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   570   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   571   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   572   * // start the background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   573   * IfxVadc_startBackgroundScan(vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   574   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   575   * Ifx_VADC_GLOBRES result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   576   * result = IfxVadc_getGlobalResult (vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   577   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   578   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   579   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   580   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   581  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   582  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   583  /** \brief get global input class sample time in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   584   * \param vadc Pointer to the VADC Group Register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   585   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   586   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   587   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   588   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   589  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   590  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   591  /** \brief Get conversion result for the group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   592   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   593   * \param results pointer to scaled conversion results
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   594   * \param resultOffset offset for the first result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   595   * \param numResults number of results
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   597   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   598   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   599   * Ifx_VADC* vadc = &MODULE_VADC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   600   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   601   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   602   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   603   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   604   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   605   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   606   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   607   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   608   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   609   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   610   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   611   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   612   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   613   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   614   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   615   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   616   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   617   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   618   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   619   * // fetch the 2 results of conversion for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   620   * Ifx_VADC_RES results[10];
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   621   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   622   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   623   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   624   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   625  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   626  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   627  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   628   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   629   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   630   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   631   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   632   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   633   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   634   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   635   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   636   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   637   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   638   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   639   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   640   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   641   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   642   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   643   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   644   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   645   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   646   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   647   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   648   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   649   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   650   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   651   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   652   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   653   * // fetch the result of conversion from result register 0 for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   654   * Ifx_VADC_RES result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   655   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   656   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   657   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   658   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   659  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   660  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   661  /** \brief Returns the auto background scan status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   662   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   663   * \return TRUE if enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   664   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   665  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   666  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   667  /** \brief Returns the background scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   668   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   669   * \return background scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   670   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   671  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   672  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   673  /** \brief Enables/Disables continuous background auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   674   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   675   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   677   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   678  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   679  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   680  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   681   * \param vadc pointer to the VADC module registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   682   * \param groupId group index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   683   * \param channels specifies the channels which should be enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   684   * \param mask specifies the channels which should be modified
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   686   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   687   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   688   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   689   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   690   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   691   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   692   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   693   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   694   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   695   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   696   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   697   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   698   * // configure background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   699   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   700   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   701   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   702   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   703   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   704   * // start the background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   705   * IfxVadc_startBackgroundScan(vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   706   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   707   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   708   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   709  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   710  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   711  /** \brief Sets the background scan slot gating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   712   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   713   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   714   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   715   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   716   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   717  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   718  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   719  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   720   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   721   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   722   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   724   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   725  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   726  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   727  /** \brief Starts a background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   728   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   729   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   730   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   731   * \see IfxVadc_setBackgroundScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   732   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   733   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   734  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   735  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   736  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   737  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   738  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   739  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   740  /** \brief Gives the background scan status for a group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   741   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   742   * \return IfxVadc_Status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   743   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   744  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   745  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   746  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   747   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   748   * \param vadc VADC module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   749   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   750   * \param channel channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   751   * \param sourceType type of request source
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   752   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   753   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   754   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   755   * Ifx_VADC vadc;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   756   * vadc.vadc = &MODULE_VADC;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   757   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   758   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   759   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   760   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   761   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   762   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   763   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   764   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   765   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   766   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   767   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   768   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   769   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   770   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   771   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   772   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   773   * // fetch the result of conversion for channel 2 of group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   774   * Ifx_VADC_RESresult2;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   775   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   776   * Ifx_VADC_RESresult5;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   777   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   778   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   779   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   780   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   781  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   782  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   783  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   784  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   785  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   786   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   787  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   788  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   789  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   790  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   791  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   792  /** \brief Disables the scan slot external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   793   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   794   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   795   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   796  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   797  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   798  /** \brief Enables the scan slot external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   799   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   801   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   802  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   803  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   804  /** \brief Gets the request scan slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   805   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   806   * \return requested scan slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   807   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   808  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   809  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   810  /** \brief Gets the request scan slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   811   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   812   * \return request scan slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   813   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   814  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   815  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   816  /** \brief Gets the request scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   817   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   818   * \return request scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   819   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   820  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   821  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   822  /** \brief Gets the request scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   823   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   824   * \return request scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   825   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   826  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   827  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   828  /** \brief Gets the requested scan slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   829   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   830   * \return requested scan slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   831   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   832  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   833  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   834  /** \brief Gets the requested scan slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   835   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   836   * \return requested scan slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   837   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   838  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   839  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   840  /** \brief Gets the auto scan enable status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   841   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   842   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   843   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   844  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   845  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   846  /** \brief Returns the scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   847   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   848   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   849   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   850  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   851  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   852  /** \brief Enables/Disables continuous auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   853   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   854   * \param autoscanEnable whether autoscan is enabled or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   855   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   856   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   857  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   858  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   859  /** \brief Sets the scan slot gating configuration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   860   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   861   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   862   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   863   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   864   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   865  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   866  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   867  /** \brief Sets the scan slot trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   868   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   869   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   870   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   871   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   872   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   873  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   874  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   875  /** \brief Starts an autoscan on the specified group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   876   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   877   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   878   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   879   * See \ref IfxVadc_setScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   880   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   881   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   882  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   883  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   884  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   885  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   886  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   887  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   888  /** \brief Gives the scan status for a group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   889   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   890   * \return IfxVadc_Status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   891   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   892  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   893  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   894  /** \brief Configures an (auto-)scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   895   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   896   * \param channels specifies the channels which should be enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   897   * \param mask specifies the channels which should be modified
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   898   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   899   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   900   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   901   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   902   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   903   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   904   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   905   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   906   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   907   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   908   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   909   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   910   * // enable Auto-Scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   911   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   912   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   913   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   914   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   915   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   916   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   917   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   918  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   919  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   920  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   921  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   922  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   923   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   924  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   925  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   926  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   927  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   928  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   929  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   930   * refill incase of aborted conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   931   * source interrupt enable/disable
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   932   * external trigger control of the aborted conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   933   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   934   * \param channel specifies channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   935   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   936   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   937   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   938   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   939   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   940   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   941   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   942   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   943   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   944   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   945   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   946   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   947  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   948  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   949  /** \brief Clears all the queue entries including backup stage.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   950   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   951   * \param flushQueue Whether queue is cleared or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   952   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   953   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   954  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   955  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   956  /** \brief Disables the external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   957   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   959   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   960  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   961  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   962  /** \brief Enables the external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   963   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   964   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   965   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   966  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   967  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   968  /** \brief Gets the requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   969   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   970   * \return requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   971   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   972  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   973  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   974  /** \brief Gets the requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   975   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   976   * \return requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   977   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   978  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   979  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   980  /** \brief Gets the request queue slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   981   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   982   * \return requested queue slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   983   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   984  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   985  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   986  /** \brief Gets the requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   987   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   988   * \return requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   989   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   990  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   991  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   992  /** \brief Gets the requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   993   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   994   * \return requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   995   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   996  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   997  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   998  /** \brief Gets the requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   999   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1000   * \return requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1002  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1003  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1004  /** \brief Returns the queue slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1005   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1006   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1008  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1009  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1010  /** \brief Sets the gating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1011   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1012   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1013   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1014   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1015   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1016  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1017  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1018  /** \brief Sets the trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1019   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1020   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1021   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1022   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1023   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1024  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1025  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1026  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1027   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1028   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1029   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1030  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1031  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1032  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1033  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1034  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1035  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1036  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1037   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1038   * \return status of the Queue
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1039   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1040   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1041   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1042   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1043   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1044   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1046  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1047  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1048  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1049  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1050  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1051   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1052  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1053  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1054  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1055  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1056  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1057  /** \brief Initializes a EMUX output
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1058   * \param emux the Emux Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1059   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1060   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1061   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1062   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1063  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1064  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1065  /** \brief Initializes a GxBFL output
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1066   * \param gxBfl the GxBFL Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1067   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1068   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1071  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1072  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1073  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1074  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1075  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1076   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1077  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1078  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1079  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1080  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1081  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1082  /** \brief Calculate the time using analog frequency.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1083   * \param analogFrequency analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1084   * \param sampleTime sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1085   * \return sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1086   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1087  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1088  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1089  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1090  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1091  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1092  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1093  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1094   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1095   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1096   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1097  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1098  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1099  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1100   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1101   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1102   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1103  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1104  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1105  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1106  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1107  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1108   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1109  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1111  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1112  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1113  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1114  /** \brief Clears the all group requests.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1115   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1116   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1117   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1118  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1119  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1120  /** \brief Gets the ADC group arbitration round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1121   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1122   * \return ADC group arbitration round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1123   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1124  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1125  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1126  /** \brief Gets the channel esult service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1127   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1128   * \return channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1130  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1131  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1132  /** \brief Gets the channel esult service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1133   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1134   * \return channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1135   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1136  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1137  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1138  /** \brief Gets the channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1139   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1140   * \return channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1141   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1142  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1143  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1144  /** \brief Gets the configured master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1145   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1146   * \return configured master kernel index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1147   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1148  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1149  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1150  /** \brief Resets the ADC group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1151   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1154  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1155  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1156  /** \brief Sets analog converter group number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1157   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1158   * \param analogConverterMode group analog converter mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1161  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1162  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1163  /** \brief Sets the arbiter round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1164   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1165   * \param arbiterRoundLength arbiter round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1168  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1169  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1170  /** \brief Sets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1171   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1172   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1173   * \param resolution ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1174   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1175   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1176  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1177  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1178  /** \brief Sets the ADC input class sample time.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1179   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1180   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1181   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1182   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1183   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1184   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1185  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1186  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1187  /** \brief Sets the master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1188   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1189   * \param masterIndex master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1190   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1191   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1192  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1193  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1194  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1195  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1196  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1197  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1198  /** \brief Sets the Arbiter slot configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1199   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1200   * \param slotEnable enable/disable of slot.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1201   * \param prio channel request priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1202   * \param mode Channel Slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1203   * \param slot channel slot Request source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1206  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1207  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1208  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1209  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1210  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1211   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1212  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1213  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1214  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1215  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1216  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1217  /** \brief Disable VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1218   * \param vadc Pointer to VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1221  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1222  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1223  /** \brief Enable VADC kernel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1224   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1225   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1226   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1227  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1228  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1229  /** \brief gets ADC Calibration Flag CAL status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1230   * \param vadc pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1231   * \param adcCalGroupNum ADC CAL group number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1232   * \return CAL group status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1233   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1234  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1235  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1236  /** \brief Gets the global control configuration value.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1237   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1238   * \return global control configuration value.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1239   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1240  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1241  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1242  /** \brief get SUCAL bit field status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1243   * \param vadc Pointer to VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1244   * \return Indicate the start-up calibration phase
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1245   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1246  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1247  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1248  /** \brief initiates the calibration pulse phase.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1249   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1252  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1253  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1254  /** \brief Sets the channel conversion mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1255   * \param vadc pointer to VADC module registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1256   * \param inputClassNum global input class  number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1257   * \param resolution ADC channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1258   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1259   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1260  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1261  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1262  /** \brief Sets the sample time of ADC global class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1263   * \param vadc pointer to VADC module registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1264   * \param inputClassNum global input class  number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1265   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1266   * \param sampleTime the requested sample time for input class in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1267   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1268   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1269  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1270  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1271  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1272   * \param vadc pointer to VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1273   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1274   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1275   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1276  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1277  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1278  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1279  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1280  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1281  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1282  /** \brief Disable write access to the VADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1283   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1284   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1287  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1288  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1289  /** \brief Disables the post calibration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1290   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1291   * \param group Index of the group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1292   * \param disable disable or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1295  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1296  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1297  /** \brief Enable write access to the VADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1298   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1299   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1300   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1301   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1302  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1303  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1304  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1305   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1306   * \param ccu6Num selects CCU60 or CCU61
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1309  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1310  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1311  /** \brief Module Frequency in Hz
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1312   * \return Module Frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1313   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1314  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1315  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1316  /** \brief Gives the SRC source address.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1317   * \param group Index of the group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1318   * \param index SRC number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1319   * \return SRC source address
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1320   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1321  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1322  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1323  /** \brief Initialises ADC arbiter clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1324   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1325   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1326   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1327   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1328  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1329  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1330  /** \brief Initialises the ADC Converter clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1331   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1332   * \param converterClockDivider ADC converter clock divider.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1333   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1334   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1335  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1336  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1337  /** \brief Configure the FadcD vadc digital clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1338   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1339   * \param fAdcD ADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1340   * \return calculated ADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1341   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1342  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1343  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1344  /** \brief Configure the ADC analog clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1345   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1346   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1347   * \return ADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1349  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1350  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1351  /** \brief Return the post calibration status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1352   * \param vadc Pointer to VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1353   * \param group specifies Group ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1354   * \return TRUE if the post calibration is enabled for the group else false
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1355   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1356  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1357  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1358  /** \brief Resets the kernel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1359   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1362  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1363  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1364  /** \brief Select Low Power Supply Voltage
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1365   * \param vadc Pointer to Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1366   * \param supplyVoltage Select Supply Voltage
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1369  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1370  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1371  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1372   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1373   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1375  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1376  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1377  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1378  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1379  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1380   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1381  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1383  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1385  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1386  /** \brief Clears the channel request.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1387   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1388   * \param channelId channel id whose request to be cleared.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1391  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1392  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1393  /** \brief Enables the FIFO mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1394   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1395   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1396   * \param fifoMode FIFO mode .
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1397   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1399  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1400  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1401  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1402   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1403   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1404   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1405   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1406  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1407  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1408  /** \brief Gets the group's assigned channels.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1409   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1410   * \return group's assigned channels.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1411   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1412  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1413  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1414  /** \brief Gets the current ADC channel control configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1415   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1416   * \param channelIndex ADC channel number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1417   * \return current ADC channel control configuration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1418   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1419  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1420  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1421  /** \brief Gets the channel input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1422   * \param vadcG pointer to VADC Group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1423   * \param channelIndex specifies channel ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1424   * \return Input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1425   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1426  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1427  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1428  /** \brief Gets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1429   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1430   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1431   * \return ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1432   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1433  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1434  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1435  /** \brief Gets the ADC input class channel sample time.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1436   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1437   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1438   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1439   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1441  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1442  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1443  /** \brief Sets the channels with low priority as background channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1444   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1445   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1446   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1447   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1448  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1449  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1450  /** \brief Sets the target for result background source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1451   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1452   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1453   * \param globalResultUsage whether storage in global result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1454   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1455   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1456  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1457  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1458  /** \brief Selects boundary extension.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1459   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1460   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1461   * \param boundaryMode boundary extension mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1462   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1463   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1464  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1465  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1466  /** \brief Sets the channel event service request line.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1467   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1468   * \param channelSrcNr channel event Service Node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1469   * \param channel channel number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1470   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1471   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1472  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1473  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1474  /** \brief Sets the channel input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1475   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1476   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1477   * \param inputClass group input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1478   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1479   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1480  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1481  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1482  /** \brief Sets the channel event mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1483   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1484   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1485   * \param limitCheck channel event mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1486   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1487   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1488  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1489  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1490  /** \brief Sets channel as priority channel with in the group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1491   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1492   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1493   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1494   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1495  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1496  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1497  /** \brief Sets group's lower boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1498   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1499   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1500   * \param lowerBoundary group lower boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1501   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1502   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1503  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1504  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1505  /** \brief Selects the refernce input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1506   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1507   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1508   * \param reference reference input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1509   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1510   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1511  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1512  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1513  /** \brief Sets result event node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1514   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1515   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1516   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1517   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1519  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1520  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1521  /** \brief Sets result event node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1522   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1523   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1524   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1525   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1526   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1527  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1528  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1529  /** \brief Sets result store position.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1530   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1531   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1532   * \param rightAlignedStorage result store position.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1533   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1534   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1535  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1536  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1537  /** \brief Sets channel synchronization request.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1538   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1539   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1540   * \param synchonize whether channel synchronize or stand alone operation.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1541   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1542   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1543  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1544  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1545  /** \brief Sets group's upper boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1546   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1547   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1548   * \param upperBoundary group upper boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1549   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1550   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1551  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1552  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1553  /** \brief Sets the group result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1554   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1555   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1556   * \param resultRegister result register for group result storage.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1557   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1558   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1559  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1560  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1561  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1562  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1563  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1564  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1565  /** \brief get channel conversion timing
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1566   * \param vadc Pointer to VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1567   * \param group specifies the Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1568   * \param inputClass Input class used
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1569   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1570   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1571   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1572   * \return Channel conversion Time in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1573   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1574  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1575  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1576  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1577  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1578  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1579   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1580  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1581  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1582  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1583  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1584  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1585  /** \brief get global input class resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1586   * \param vadc Pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1587   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1588   * \return External channel resolution for global input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1589   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1590  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1591  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1592  /** \brief Get the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1593   * \param vadc pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1594   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1595   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1596   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1597   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1598  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1599  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1600  /** \brief get the external channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1601   * \param vadcG Pointer to VADC group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1602   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1603   * \return Adc input class External channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1604   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1605  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1606  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1607  /** \brief Gets the ADC input class sample time of external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1608   * \param vadcG Pointer to Register Group space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1609   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1610   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1611   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1612   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1613  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1614  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1615  /** \brief set the external channel resolution of Global class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1616   * \param vadc pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1617   * \param inputClassNum Global Input Class Number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1618   * \param resolution External Channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1619   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1620   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1621  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1622  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1623  /** \brief Sets the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1624   * \param vadc Pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1625   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1626   * \param analogFrequency ADC analog Frequency in HZ
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1627   * \param sampleTime the requested sample time for input class in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1628   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1629   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1630  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1631  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1632  /** \brief set the external channel resolution of ADC input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1633   * \param vadcG pointer to VADC Group Register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1634   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1635   * \param resolution input class external channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1636   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1637   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1638  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1639  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1640  /** \brief Sets the ADC input class sample time for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1641   * \param vadcG Pointer to VADC Group Register Space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1642   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1643   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1644   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1645   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1646   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1647  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1648  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1649  /** \brief Sets the Emux Interface for a particular group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1650   * \param vadc Pointer to VADC Module Space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1651   * \param emuxInterface specifies the EmuxInterface
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1652   * \param group specifies the group ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1653   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1654   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1655  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1656  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1657  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1658  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1659  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1660  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1661  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1662   * \param vadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1663   * \param vadcG Pointer to VADC group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1664   * \param mode External Multiplexer mode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1665   * \param channels Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1666   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1667   * \param code Output the channel number in binary code/gray code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1668   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1669   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1670   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1671   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1672  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1673  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1674  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1675  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1676  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1677  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1678  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1679  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1680  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1681  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1682      group->QINR0.U = channel | options;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1683  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1684  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1685  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1686  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1687  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1688      uint32 ticks;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1689  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1690      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1691  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1692      if (ticks > 31)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1693      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1694          ticks = (ticks / 16) + 15;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1695      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1696  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1697      ticks = __minu(ticks, 0xFFu);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1698  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1699      return ticks;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1701  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1702  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1703  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1705      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1707  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1708  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1709  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1711      vadcG->CEFCLR.U = 1 << channelId;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1713  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1714  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1715  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1717      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1718  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1719  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1720  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1721  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1722  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1723      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1724  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1725  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1726  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1727  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1728  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1729      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1730  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1731  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1732  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1733  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1734  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1735      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1736      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1737      vadc->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1738      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1740  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1741  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1742  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1744      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1746  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1747  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1748  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1750      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1752  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1753  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1754  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1756      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1758  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1759  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1760  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1762      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1764  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1765  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1766  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1768      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1769  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1770      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1771      vadc->CLC.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1772      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1773  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1774  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1775  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1776  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1777  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1778      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1779  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1780  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1781  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1782  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1783  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1784      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1785  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1786  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1787  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1788  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1789  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1790      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1791  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1792  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1793  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1794  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1795  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1796      uint8 status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1797      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	ld.bu	d15,[a2]
.L774:
	lea	a2,[a2]1024
.L775:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    12   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    16   * products.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    17   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    23   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    24   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    25   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    26   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    27   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    28   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    29   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    30   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    31   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    32   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    33   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    34   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    35   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    36   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    37   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    38   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    39   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    40   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    41   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    42   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    43   * \ingroup IfxLld_Vadc_Std
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    44   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    45  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    46  #ifndef IFXVADC_H
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    47  #define IFXVADC_H 1
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    48  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    50  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    52  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    53  #include "_Impl/IfxVadc_cfg.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    54  #include "_PinMap/IfxVadc_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    55  #include "IfxVadc_bf.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    56  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    57  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    58  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    59  #include "IfxCcu6_reg.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    60  #include "IfxCcu6_bf.h"
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    61  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    63  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    64  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    65  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    66  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    67   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    68  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    69   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    70  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    71  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    72      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    73      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    74      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    75      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    76  } IfxVadc_AnalogConverterMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    77  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    78  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    79   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    80  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    81  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    82      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    83      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    84      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    85      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    86  } IfxVadc_ArbitrationRounds;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    87  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    88  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    89   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    91  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    92      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    93      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    94      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    95      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    96      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    97      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    98      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	    99      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   100      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   101      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   102      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   103      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   104      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   105      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   106      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   107      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   108  } IfxVadc_BoundaryExtension;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   109  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   110  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   111   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   112  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   113  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   118  } IfxVadc_BoundarySelection;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   119  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   120  /** \brief VADC Channels
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   121   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   122  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   123  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   124      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   125      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   126      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   127      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   128      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   129      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   130      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   131      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   132      IfxVadc_ChannelId_7    = 7    /**< \brief Channel 7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   133  } IfxVadc_ChannelId;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   134  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   135  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   136   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   137  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   138  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   139      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   140      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   141  } IfxVadc_ChannelReference;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   142  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   143  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   144   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   145  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   146  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   147      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   148      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   149      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   150      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   151  } IfxVadc_ChannelResolution;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   152  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   153  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   154   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   155  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   156  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   157      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   158      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   159      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   160      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   161      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   162      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   163      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   164      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   165      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   166      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   169      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   170      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   171      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   172      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   173  } IfxVadc_ChannelResult;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   174  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   175  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   176   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   177   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   178  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   179  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   180      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   181      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   182                                                         * associated channel for EMUX control */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   183  } IfxVadc_ChannelSelectionStyle;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   184  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   185  /** \brief type of conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   186   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   188  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   189      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   190  } IfxVadc_ConversionType;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   191  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   192  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   193   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   194   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   195  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   196  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   197      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   198      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   199  } IfxVadc_EmuxCodingScheme;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   200  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   201  /** \brief Specifies the Emux interface
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   202   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   203  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   204  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   205      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   206      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   207  } IfxVadc_EmuxInterface;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   208  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   209  /** \brief External Multiplexer sample time control
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   210   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   211   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   212  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   213  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   214      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   215      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   216  } IfxVadc_EmuxSampleTimeControl;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   217  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   218  /** \brief specifies the External Channel Start select value
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   219   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   220   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   221  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   222  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   223      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   224      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   225      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   226      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   227      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   228      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   229      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   230      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   231  } IfxVadc_EmuxSelectValue;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   232  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   233  /** \brief Specifies External Multiplexer Mode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   234   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   235   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   236  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   237  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   238      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   239      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   240      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   241      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   242  } IfxVadc_ExternalMultiplexerMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   243  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   244  /** \brief FIFO mode enable
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   245   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   246  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   247  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   248      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   249      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   250      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   251      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   252  } IfxVadc_FifoMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   253  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   254  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   255   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   256  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   257  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   258      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   259      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   260      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   261      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   262  } IfxVadc_GatingMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   263  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   264  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   265   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   266  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   267  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   268      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   269      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   270      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   271      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   272      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   273      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   274      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   275      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   276      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   277      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   278      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   279      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   280      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   281      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   282      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   283      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   284  } IfxVadc_GatingSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   285  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   286  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   287   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   288  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   289  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   290      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   291      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   292      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   293      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   294  } IfxVadc_InputClasses;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   295  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   296  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   297   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   298  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   299  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   300      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   301      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   302      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   303      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   304  } IfxVadc_LimitCheck;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   305  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   306  /** \brief Low Power Supply Voltage Select
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   307   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   308  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   309  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   310      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   311      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   312  } IfxVadc_LowSupplyVoltageSelect;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   313  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   314  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   315   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   316  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   317  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   318      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   319      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   320      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   321      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   322      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   323      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   324      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   325      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   326      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   327      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   328      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   329      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   330      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   331      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   332      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   333      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   334      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   335      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   336      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   337      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   338      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   339      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   340      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   341      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   342      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   343      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   344      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   345      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   381  } IfxVadc_Protection;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   382  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   383  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   384   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   385  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   386  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   387      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   388      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   389      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   390      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   391  } IfxVadc_RequestSlotPriority;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   392  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   393  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   394   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   395  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   396  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   397      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   398      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   399  } IfxVadc_RequestSlotStartMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   400  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   401  /** \brief Request sources
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   402   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   403  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   404  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   405      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   406      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   407      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   408  } IfxVadc_RequestSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   409  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   410  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   411   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   412   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   413  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   414  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   415      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   416      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   417  } IfxVadc_SleepMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   418  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   419  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   420   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   421  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   422  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   423      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   424      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   425      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   426      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   427      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   428      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   429      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   430      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   431  } IfxVadc_SrcNr;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   432  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   433  /** \brief API return values defined in
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   434   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   435   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   436   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   437  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   438  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   439      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   440      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   441      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   442      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   443      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   444      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   445      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   446  } IfxVadc_Status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   448  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   449   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   450  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   451  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   452      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   453      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   454      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   455      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   456  } IfxVadc_TriggerMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   457  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   458  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   459   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   460  typedef enum
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   461  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   462      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   463      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   464      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   465      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   466      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   467      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   468      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   469      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   470      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   471      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   472      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   473      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   474      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   475      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   476      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   477      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   478  } IfxVadc_TriggerSource;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   479  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   480  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   481  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   482  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   483   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   484  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   485  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   486  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   487  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   488  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   489  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   490   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   491   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   492   * \param waitForRead wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   493   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   494   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   495  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   496  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   497  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   498   * \param vadc pointer to the VADC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   499   * \param waitForRead wait for read mode enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   501   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   502  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   503  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   504  /** \brief Enables the background sacn external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   505   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   507   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   508  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   509  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   510  /** \brief Gets the background scan gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   511   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   512   * \return background scan gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   513   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   514  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   515  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   516  /** \brief Gets the gating input selection.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   517   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   518   * \return background scan gating input selection.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   519   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   520  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   521  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   522  /** \brief Gets the requested background scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   523   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   524   * \return requested background scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   525   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   526  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   527  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   528  /** \brief Gets the requested background scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   529   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   530   * \return requested background scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   531   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   532  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   533  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   534  /** \brief Gets the background scan trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   535   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   536   * \return Gets the background scan external trigger source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   537   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   538  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   540  /** \brief Gets the background scan external trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   541   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   542   * \return background scan external trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   543   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   544  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   545  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   546  /** \brief get global input class resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   547   * \param vadc Pointer to the VADC Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   548   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   549   * \return ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   550   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   551  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   552  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   553  /** \brief return conversion result stored in the Global result Register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   554   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   555   * \return global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   556   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   557   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   558   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   559   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   560   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   561   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   562   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   563   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   564   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   565   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   566   * // configure background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   567   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   568   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   569   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   570   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   571   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   572   * // start the background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   573   * IfxVadc_startBackgroundScan(vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   574   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   575   * Ifx_VADC_GLOBRES result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   576   * result = IfxVadc_getGlobalResult (vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   577   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   578   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   579   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   580   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   581  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   582  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   583  /** \brief get global input class sample time in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   584   * \param vadc Pointer to the VADC Group Register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   585   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   586   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   587   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   588   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   589  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   590  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   591  /** \brief Get conversion result for the group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   592   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   593   * \param results pointer to scaled conversion results
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   594   * \param resultOffset offset for the first result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   595   * \param numResults number of results
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   597   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   598   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   599   * Ifx_VADC* vadc = &MODULE_VADC
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   600   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   601   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   602   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   603   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   604   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   605   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   606   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   607   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   608   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   609   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   610   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   611   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   612   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   613   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   614   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   615   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   616   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   617   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   618   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   619   * // fetch the 2 results of conversion for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   620   * Ifx_VADC_RES results[10];
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   621   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   622   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   623   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   624   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   625  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   626  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   627  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   628   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   629   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   630   * \param resultIdx result register index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   631   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   632   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   633   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   634   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   635   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   636   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   637   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   638   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   639   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   640   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   641   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   642   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   643   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   644   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   645   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   646   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   647   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   648   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   649   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   650   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   651   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   652   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   653   * // fetch the result of conversion from result register 0 for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   654   * Ifx_VADC_RES result;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   655   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   656   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   657   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   658   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   659  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   660  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   661  /** \brief Returns the auto background scan status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   662   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   663   * \return TRUE if enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   664   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   665  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   666  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   667  /** \brief Returns the background scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   668   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   669   * \return background scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   670   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   671  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   672  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   673  /** \brief Enables/Disables continuous background auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   674   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   675   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   677   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   678  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   679  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   680  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   681   * \param vadc pointer to the VADC module registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   682   * \param groupId group index
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   683   * \param channels specifies the channels which should be enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   684   * \param mask specifies the channels which should be modified
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   686   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   687   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   688   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   689   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   690   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   691   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   692   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   693   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   694   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   695   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   696   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   697   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   698   * // configure background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   699   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   700   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   701   * // enable auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   702   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   703   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   704   * // start the background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   705   * IfxVadc_startBackgroundScan(vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   706   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   707   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   708   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   709  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   710  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   711  /** \brief Sets the background scan slot gating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   712   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   713   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   714   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   715   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   716   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   717  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   718  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   719  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   720   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   721   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   722   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   724   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   725  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   726  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   727  /** \brief Starts a background scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   728   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   729   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   730   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   731   * \see IfxVadc_setBackgroundScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   732   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   733   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   734  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   735  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   736  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   737  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   738  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   739  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   740  /** \brief Gives the background scan status for a group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   741   * \param vadc pointer to the VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   742   * \return IfxVadc_Status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   743   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   744  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   745  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   746  /** \brief Get conversion result (Function does not care about the alignment)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   747   * value = raw * gain + offset.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   748   * \param vadc VADC module pointer
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   749   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   750   * \param channel channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   751   * \param sourceType type of request source
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   752   * \return scaled Conversion result
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   753   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   754   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   755   * Ifx_VADC vadc;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   756   * vadc.vadc = &MODULE_VADC;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   757   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   758   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   759   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   760   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   761   * //confiure wait for read mode for global result register
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   762   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   763   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   764   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   765   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   766   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   767   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   768   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   769   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   770   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   771   * // wait for conversion to finish
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   772   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   773   * // fetch the result of conversion for channel 2 of group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   774   * Ifx_VADC_RESresult2;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   775   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   776   * Ifx_VADC_RESresult5;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   777   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   778   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   779   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   780   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   781  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   782  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   783  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   784  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   785  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   786   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   787  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   788  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   789  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   790  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   791  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   792  /** \brief Disables the scan slot external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   793   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   794   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   795   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   796  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   797  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   798  /** \brief Enables the scan slot external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   799   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   801   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   802  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   803  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   804  /** \brief Gets the request scan slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   805   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   806   * \return requested scan slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   807   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   808  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   809  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   810  /** \brief Gets the request scan slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   811   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   812   * \return request scan slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   813   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   814  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   815  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   816  /** \brief Gets the request scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   817   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   818   * \return request scan slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   819   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   820  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   821  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   822  /** \brief Gets the request scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   823   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   824   * \return request scan slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   825   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   826  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   827  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   828  /** \brief Gets the requested scan slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   829   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   830   * \return requested scan slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   831   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   832  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   833  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   834  /** \brief Gets the requested scan slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   835   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   836   * \return requested scan slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   837   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   838  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   839  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   840  /** \brief Gets the auto scan enable status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   841   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   842   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   843   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   844  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   845  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   846  /** \brief Returns the scan slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   847   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   848   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   849   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   850  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   851  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   852  /** \brief Enables/Disables continuous auto scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   853   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   854   * \param autoscanEnable whether autoscan is enabled or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   855   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   856   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   857  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   858  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   859  /** \brief Sets the scan slot gating configuration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   860   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   861   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   862   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   863   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   864   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   865  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   866  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   867  /** \brief Sets the scan slot trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   868   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   869   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   870   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   871   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   872   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   873  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   874  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   875  /** \brief Starts an autoscan on the specified group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   876   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   877   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   878   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   879   * See \ref IfxVadc_setScan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   880   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   881   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   882  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   883  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   884  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   885  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   886  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   887  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   888  /** \brief Gives the scan status for a group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   889   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   890   * \return IfxVadc_Status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   891   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   892  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   893  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   894  /** \brief Configures an (auto-)scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   895   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   896   * \param channels specifies the channels which should be enabled/disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   897   * \param mask specifies the channels which should be modified
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   898   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   899   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   900   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   901   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   902   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   903   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   904   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   905   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   906   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   907   * // configure scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   908   * IfxVadc_setScan(group, channels, mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   909   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   910   * // enable Auto-Scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   911   * IfxVadc_setAutoScan(group, TRUE);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   912   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   913   * // start the scan
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   914   * IfxVadc_startScan(group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   915   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   916   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   917   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   918  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   919  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   920  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   921  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   922  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   923   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   924  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   925  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   926  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   927  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   928  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   929  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   930   * refill incase of aborted conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   931   * source interrupt enable/disable
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   932   * external trigger control of the aborted conversion
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   933   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   934   * \param channel specifies channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   935   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   936   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   937   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   938   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   939   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   940   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   941   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   942   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   943   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   944   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   945   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   946   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   947  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   948  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   949  /** \brief Clears all the queue entries including backup stage.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   950   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   951   * \param flushQueue Whether queue is cleared or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   952   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   953   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   954  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   955  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   956  /** \brief Disables the external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   957   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   959   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   960  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   961  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   962  /** \brief Enables the external trigger.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   963   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   964   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   965   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   966  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   967  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   968  /** \brief Gets the requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   969   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   970   * \return requested queue slot gating mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   971   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   972  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   973  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   974  /** \brief Gets the requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   975   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   976   * \return requested queue slot gating input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   977   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   978  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   979  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   980  /** \brief Gets the request queue slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   981   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   982   * \return requested queue slot priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   983   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   984  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   985  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   986  /** \brief Gets the requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   987   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   988   * \return requested queue slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   989   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   990  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   991  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   992  /** \brief Gets the requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   993   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   994   * \return requested queue slot trigger input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   995   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   996  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   997  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   998  /** \brief Gets the requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	   999   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1000   * \return requested queue slot trigger mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1001   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1002  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1003  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1004  /** \brief Returns the queue slot requested status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1005   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1006   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1007   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1008  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1009  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1010  /** \brief Sets the gating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1011   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1012   * \param gatingSource gate input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1013   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1014   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1015   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1016  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1017  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1018  /** \brief Sets the trigger operating configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1019   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1020   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1021   * \param triggerSource trigger input for group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1022   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1023   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1024  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1025  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1026  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1027   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1028   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1029   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1030  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1031  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1032  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1033  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1034  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1035  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1036  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1037   * \param group pointer to the VADC group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1038   * \return status of the Queue
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1039   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1040   * \code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1041   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1042   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1043   * \endcode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1044   *
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1046  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1047  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1048  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1049  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1050  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1051   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1052  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1053  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1054  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1055  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1056  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1057  /** \brief Initializes a EMUX output
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1058   * \param emux the Emux Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1059   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1060   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1061   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1062   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1063  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1064  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1065  /** \brief Initializes a GxBFL output
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1066   * \param gxBfl the GxBFL Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1067   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1068   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1069   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1070   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1071  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1072  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1073  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1074  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1075  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1076   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1077  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1078  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1079  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1080  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1081  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1082  /** \brief Calculate the time using analog frequency.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1083   * \param analogFrequency analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1084   * \param sampleTime sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1085   * \return sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1086   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1087  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1088  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1089  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1090  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1091  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1092  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1093  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1094   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1095   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1096   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1097  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1098  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1099  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1100   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1101   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1102   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1103  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1104  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1105  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1106  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1107  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1108   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1109  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1111  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1112  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1113  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1114  /** \brief Clears the all group requests.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1115   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1116   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1117   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1118  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1119  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1120  /** \brief Gets the ADC group arbitration round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1121   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1122   * \return ADC group arbitration round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1123   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1124  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1125  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1126  /** \brief Gets the channel esult service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1127   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1128   * \return channel result service request node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1130  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1131  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1132  /** \brief Gets the channel esult service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1133   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1134   * \return channel result service request node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1135   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1136  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1137  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1138  /** \brief Gets the channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1139   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1140   * \return channel service request node pointer.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1141   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1142  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1143  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1144  /** \brief Gets the configured master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1145   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1146   * \return configured master kernel index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1147   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1148  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1149  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1150  /** \brief Resets the ADC group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1151   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1154  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1155  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1156  /** \brief Sets analog converter group number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1157   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1158   * \param analogConverterMode group analog converter mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1159   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1160   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1161  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1162  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1163  /** \brief Sets the arbiter round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1164   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1165   * \param arbiterRoundLength arbiter round length.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1166   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1167   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1168  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1169  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1170  /** \brief Sets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1171   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1172   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1173   * \param resolution ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1174   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1175   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1176  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1177  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1178  /** \brief Sets the ADC input class sample time.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1179   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1180   * \param inputClassNum input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1181   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1182   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1183   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1184   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1185  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1186  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1187  /** \brief Sets the master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1188   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1189   * \param masterIndex master index.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1190   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1191   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1192  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1193  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1194  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1195  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1196  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1197  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1198  /** \brief Sets the Arbiter slot configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1199   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1200   * \param slotEnable enable/disable of slot.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1201   * \param prio channel request priority.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1202   * \param mode Channel Slot start mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1203   * \param slot channel slot Request source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1204   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1205   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1206  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1207  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1208  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1209  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1210  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1211   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1212  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1213  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1214  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1215  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1216  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1217  /** \brief Disable VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1218   * \param vadc Pointer to VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1221  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1222  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1223  /** \brief Enable VADC kernel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1224   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1225   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1226   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1227  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1228  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1229  /** \brief gets ADC Calibration Flag CAL status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1230   * \param vadc pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1231   * \param adcCalGroupNum ADC CAL group number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1232   * \return CAL group status.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1233   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1234  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1235  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1236  /** \brief Gets the global control configuration value.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1237   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1238   * \return global control configuration value.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1239   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1240  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1241  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1242  /** \brief get SUCAL bit field status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1243   * \param vadc Pointer to VADC Module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1244   * \return Indicate the start-up calibration phase
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1245   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1246  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1247  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1248  /** \brief initiates the calibration pulse phase.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1249   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1250   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1251   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1252  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1253  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1254  /** \brief Sets the channel conversion mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1255   * \param vadc pointer to VADC module registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1256   * \param inputClassNum global input class  number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1257   * \param resolution ADC channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1258   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1259   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1260  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1261  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1262  /** \brief Sets the sample time of ADC global class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1263   * \param vadc pointer to VADC module registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1264   * \param inputClassNum global input class  number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1265   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1266   * \param sampleTime the requested sample time for input class in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1267   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1268   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1269  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1270  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1271  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1272   * \param vadc pointer to VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1273   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1274   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1275   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1276  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1277  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1278  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1279  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1280  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1281  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1282  /** \brief Disable write access to the VADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1283   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1284   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1285   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1286   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1287  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1288  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1289  /** \brief Disables the post calibration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1290   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1291   * \param group Index of the group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1292   * \param disable disable or not.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1295  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1296  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1297  /** \brief Enable write access to the VADC config/control registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1298   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1299   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1300   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1301   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1302  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1303  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1304  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1305   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1306   * \param ccu6Num selects CCU60 or CCU61
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1309  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1310  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1311  /** \brief Module Frequency in Hz
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1312   * \return Module Frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1313   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1314  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1315  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1316  /** \brief Gives the SRC source address.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1317   * \param group Index of the group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1318   * \param index SRC number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1319   * \return SRC source address
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1320   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1321  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1322  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1323  /** \brief Initialises ADC arbiter clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1324   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1325   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1326   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1327   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1328  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1329  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1330  /** \brief Initialises the ADC Converter clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1331   * \param vadc pointer to the base of VADC registers
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1332   * \param converterClockDivider ADC converter clock divider.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1333   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1334   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1335  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1336  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1337  /** \brief Configure the FadcD vadc digital clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1338   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1339   * \param fAdcD ADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1340   * \return calculated ADC digital clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1341   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1342  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1343  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1344  /** \brief Configure the ADC analog clock.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1345   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1346   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1347   * \return ADC analog clock frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1348   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1349  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1350  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1351  /** \brief Return the post calibration status
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1352   * \param vadc Pointer to VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1353   * \param group specifies Group ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1354   * \return TRUE if the post calibration is enabled for the group else false
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1355   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1356  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1357  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1358  /** \brief Resets the kernel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1359   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1362  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1363  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1364  /** \brief Select Low Power Supply Voltage
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1365   * \param vadc Pointer to Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1366   * \param supplyVoltage Select Supply Voltage
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1369  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1370  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1371  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1372   * \param vadc pointer to the base of VADC registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1373   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1374   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1375  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1376  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1377  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1378  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1379  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1380   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1381  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1382  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1383  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1384  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1385  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1386  /** \brief Clears the channel request.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1387   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1388   * \param channelId channel id whose request to be cleared.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1391  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1392  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1393  /** \brief Enables the FIFO mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1394   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1395   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1396   * \param fifoMode FIFO mode .
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1397   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1398   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1399  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1400  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1401  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1402   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1403   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1404   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1405   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1406  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1407  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1408  /** \brief Gets the group's assigned channels.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1409   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1410   * \return group's assigned channels.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1411   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1412  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1413  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1414  /** \brief Gets the current ADC channel control configurations.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1415   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1416   * \param channelIndex ADC channel number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1417   * \return current ADC channel control configuration.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1418   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1419  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1420  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1421  /** \brief Gets the channel input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1422   * \param vadcG pointer to VADC Group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1423   * \param channelIndex specifies channel ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1424   * \return Input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1425   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1426  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1427  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1428  /** \brief Gets the ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1429   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1430   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1431   * \return ADC input class channel resolution.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1432   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1433  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1434  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1435  /** \brief Gets the ADC input class channel sample time.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1436   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1437   * \param inputClassNum ADC input class number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1438   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1439   * \return ADC input class channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1441  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1442  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1443  /** \brief Sets the channels with low priority as background channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1444   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1445   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1446   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1447   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1448  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1449  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1450  /** \brief Sets the target for result background source.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1451   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1452   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1453   * \param globalResultUsage whether storage in global result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1454   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1455   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1456  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1457  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1458  /** \brief Selects boundary extension.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1459   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1460   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1461   * \param boundaryMode boundary extension mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1462   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1463   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1464  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1465  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1466  /** \brief Sets the channel event service request line.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1467   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1468   * \param channelSrcNr channel event Service Node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1469   * \param channel channel number.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1470   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1471   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1472  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1473  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1474  /** \brief Sets the channel input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1475   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1476   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1477   * \param inputClass group input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1478   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1479   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1480  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1481  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1482  /** \brief Sets the channel event mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1483   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1484   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1485   * \param limitCheck channel event mode.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1486   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1487   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1488  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1489  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1490  /** \brief Sets channel as priority channel with in the group.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1491   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1492   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1493   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1494   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1495  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1496  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1497  /** \brief Sets group's lower boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1498   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1499   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1500   * \param lowerBoundary group lower boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1501   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1502   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1503  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1504  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1505  /** \brief Selects the refernce input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1506   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1507   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1508   * \param reference reference input.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1509   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1510   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1511  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1512  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1513  /** \brief Sets result event node pointer 0.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1514   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1515   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1516   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1517   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1518   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1519  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1520  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1521  /** \brief Sets result event node pointer 1.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1522   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1523   * \param resultSrcNr channel result event service node.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1524   * \param resultRegister channel result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1525   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1526   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1527  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1528  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1529  /** \brief Sets result store position.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1530   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1531   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1532   * \param rightAlignedStorage result store position.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1533   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1534   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1535  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1536  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1537  /** \brief Sets channel synchronization request.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1538   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1539   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1540   * \param synchonize whether channel synchronize or stand alone operation.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1541   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1542   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1543  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1544  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1545  /** \brief Sets group's upper boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1546   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1547   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1548   * \param upperBoundary group upper boundary.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1549   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1550   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1551  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1552  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1553  /** \brief Sets the group result register.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1554   * \param vadcG pointer to VADC group registers.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1555   * \param channelIndex group channel id.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1556   * \param resultRegister result register for group result storage.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1557   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1558   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1559  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1560  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1561  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1562  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1563  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1564  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1565  /** \brief get channel conversion timing
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1566   * \param vadc Pointer to VADC module
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1567   * \param group specifies the Group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1568   * \param inputClass Input class used
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1569   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1570   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1571   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1572   * \return Channel conversion Time in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1573   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1574  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1575  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1576  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1577  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1578  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1579   * \{ */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1580  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1581  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1582  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1583  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1584  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1585  /** \brief get global input class resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1586   * \param vadc Pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1587   * \param inputClassNum global input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1588   * \return External channel resolution for global input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1589   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1590  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1591  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1592  /** \brief Get the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1593   * \param vadc pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1594   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1595   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1596   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1597   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1598  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1599  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1600  /** \brief get the external channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1601   * \param vadcG Pointer to VADC group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1602   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1603   * \return Adc input class External channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1604   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1605  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1606  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1607  /** \brief Gets the ADC input class sample time of external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1608   * \param vadcG Pointer to Register Group space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1609   * \param inputClassNum ADC input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1610   * \param analogFrequency ADC module analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1611   * \return ADC input class external channel sample time in sec.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1612   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1613  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1614  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1615  /** \brief set the external channel resolution of Global class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1616   * \param vadc pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1617   * \param inputClassNum Global Input Class Number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1618   * \param resolution External Channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1619   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1620   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1621  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1622  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1623  /** \brief Sets the sample time of ADC global class for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1624   * \param vadc Pointer to VADC Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1625   * \param inputClassNum Adc input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1626   * \param analogFrequency ADC analog Frequency in HZ
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1627   * \param sampleTime the requested sample time for input class in sec
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1628   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1629   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1630  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1631  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1632  /** \brief set the external channel resolution of ADC input class
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1633   * \param vadcG pointer to VADC Group Register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1634   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1635   * \param resolution input class external channel resolution
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1636   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1637   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1638  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1639  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1640  /** \brief Sets the ADC input class sample time for external channel.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1641   * \param vadcG Pointer to VADC Group Register Space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1642   * \param inputClassNum input class number
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1643   * \param analogFrequency ADC analog frequency in Hz.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1644   * \param sampleTime request sample time in sec for input class.
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1645   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1646   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1647  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1648  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1649  /** \brief Sets the Emux Interface for a particular group
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1650   * \param vadc Pointer to VADC Module Space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1651   * \param emuxInterface specifies the EmuxInterface
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1652   * \param group specifies the group ID
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1653   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1654   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1655  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1656  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1657  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1658  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1659  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1660  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1661  /**
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1662   * \param vadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1663   * \param vadcG Pointer to VADC group register space
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1664   * \param mode External Multiplexer mode
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1665   * \param channels Specifies channel Id
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1666   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1667   * \param code Output the channel number in binary code/gray code
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1668   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1669   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1670   * \return None
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1671   */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1672  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1673  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1674  /** \} */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1675  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1676  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1677  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1678  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1679  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1680  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1681  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1682      group->QINR0.U = channel | options;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1683  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1684  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1685  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1686  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1687  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1688      uint32 ticks;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1689  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1690      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1691  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1692      if (ticks > 31)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1693      {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1694          ticks = (ticks / 16) + 15;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1695      }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1696  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1697      ticks = __minu(ticks, 0xFFu);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1698  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1699      return ticks;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1700  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1701  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1702  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1703  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1704  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1705      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1706  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1707  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1708  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1709  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1710  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1711      vadcG->CEFCLR.U = 1 << channelId;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1712  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1713  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1714  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1715  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1716  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1717      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1718  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1719  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1720  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1721  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1722  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1723      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1724  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1725  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1726  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1727  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1728  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1729      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1730  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1731  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1732  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1733  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1734  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1735      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1736      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1737      vadc->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1738      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1740  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1741  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1742  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1744      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1746  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1747  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1748  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1750      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1752  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1753  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1754  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1756      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1758  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1759  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1760  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1762      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1764  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1765  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1766  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1768      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1769  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1770      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1771      vadc->CLC.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1772      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1773  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1774  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1775  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1776  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1777  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1778      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1779  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1780  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1781  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1782  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1783  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1784      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1785  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1786  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1787  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1788  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1789  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1790      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1791  }
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1792  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1793  
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1794  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1795  {
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1796      uint8 status;
; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.h	  1797      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	extr.u	d15,d15,#4,#1
.L538:
	cmov	d0,d15,#1
	loop	a4,.L80
.L383:
	jne	d0,#0,.L79
.L776:

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   574  }
	ret
.L372:
	
__IfxVadc_startupCalibration_function_end:
	.size	IfxVadc_startupCalibration,__IfxVadc_startupCalibration_function_end-IfxVadc_startupCalibration
.L247:
	; End of function
	
	.calls	'IfxVadc_configExternalMultiplexerMode','IfxVadc_enableAccess'
	.calls	'IfxVadc_configExternalMultiplexerMode','IfxVadc_disableAccess'
	.calls	'IfxVadc_disableAccess','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxVadc_disableAccess','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxVadc_disableAccess','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxVadc_disablePostCalibration','IfxVadc_enableAccess'
	.calls	'IfxVadc_disablePostCalibration','IfxVadc_disableAccess'
	.calls	'IfxVadc_enableAccess','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxVadc_enableAccess','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxVadc_enableAccess','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxVadc_enableGroupSync','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxVadc_enableGroupSync','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxVadc_enableGroupSync','IfxVadc_enableAccess'
	.calls	'IfxVadc_enableGroupSync','IfxVadc_disableAccess'
	.calls	'IfxVadc_enableGroupSync','IfxScuWdt_setCpuEndinit'
	.calls	'IfxVadc_getAdcAnalogFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_getAdcDigitalFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_getAdcModuleFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_getChannelConversionTime','IfxVadc_isPostCalibration'
	.calls	'IfxVadc_initialiseAdcArbiterClock','IfxVadc_enableAccess'
	.calls	'IfxVadc_initialiseAdcArbiterClock','IfxVadc_disableAccess'
	.calls	'IfxVadc_initialiseAdcConverterClock','IfxVadc_enableAccess'
	.calls	'IfxVadc_initialiseAdcConverterClock','IfxVadc_disableAccess'
	.calls	'IfxVadc_initializeFAdcD','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_initializeFAdcD','IfxVadc_initialiseAdcArbiterClock'
	.calls	'IfxVadc_initializeFAdcI','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_initializeFAdcI','IfxVadc_initialiseAdcConverterClock'
	.calls	'IfxVadc_resetKernel','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxVadc_resetKernel','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxVadc_resetKernel','IfxVadc_enableAccess'
	.calls	'IfxVadc_resetKernel','IfxScuWdt_setCpuEndinit'
	.calls	'IfxVadc_resetKernel','IfxVadc_disableAccess'
	.calls	'IfxVadc_selectPowerSupplyVoltage','IfxVadc_enableAccess'
	.calls	'IfxVadc_selectPowerSupplyVoltage','IfxVadc_disableAccess'
	.calls	'IfxVadc_startupCalibration','IfxVadc_enableAccess'
	.calls	'IfxVadc_startupCalibration','IfxVadc_disableAccess'
	.calls	'IfxVadc_disableAccess','.cocofun_5'
	.calls	'IfxVadc_disablePostCalibration','.cocofun_4'
	.calls	'IfxVadc_enableAccess','.cocofun_5'
	.calls	'IfxVadc_enableGroupSync','.cocofun_4'
	.calls	'IfxVadc_initialiseAdcArbiterClock','.cocofun_4'
	.calls	'IfxVadc_initialiseAdcConverterClock','.cocofun_4'
	.calls	'IfxVadc_resetKernel','.cocofun_4'
	.calls	'IfxVadc_selectPowerSupplyVoltage','.cocofun_4'
	.calls	'IfxVadc_startupCalibration','.cocofun_4'
	.calls	'IfxVadc_configExternalMultiplexerMode','',0
	.calls	'IfxVadc_disableAccess','',0
	.calls	'.cocofun_5','',0
	.calls	'IfxVadc_disablePostCalibration','',0
	.calls	'.cocofun_4','',0
	.calls	'IfxVadc_enableAccess','',0
	.calls	'IfxVadc_enableGroupSync','',0
	.calls	'IfxVadc_getAdcAnalogFrequency','',0
	.calls	'IfxVadc_getAdcDigitalFrequency','',0
	.calls	'IfxVadc_getAdcModuleFrequency','',0
	.calls	'IfxVadc_getBackgroundScanStatus','',0
	.calls	'IfxVadc_getChannelConversionTime','',0
	.calls	'IfxVadc_getQueueStatus','',0
	.calls	'IfxVadc_getResultBasedOnRequestSource','',0
	.calls	'IfxVadc_getScanStatus','',0
	.calls	'IfxVadc_getSrcAddress','',0
	.calls	'IfxVadc_initialiseAdcArbiterClock','',0
	.calls	'IfxVadc_initialiseAdcConverterClock','',0
	.calls	'IfxVadc_initializeFAdcD','',0
	.calls	'IfxVadc_initializeFAdcI','',0
	.calls	'IfxVadc_isPostCalibration','',0
	.calls	'IfxVadc_resetKernel','',0
	.calls	'IfxVadc_selectPowerSupplyVoltage','',0
	.calls	'IfxVadc_setArbiterPriority','',0
	.calls	'IfxVadc_setScan','',0
	.extern	IfxVadc_cfg_srcAddresses
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_clearSafetyEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_setSafetyEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxScuCcu_getSpbFrequency
	.calls	'IfxVadc_startupCalibration','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L135:
	.word	117964
	.half	3
	.word	.L136
	.byte	4
.L134:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L137
	.byte	2
	.byte	'__stopPerfCounters',0,3,1,217,1,17,1,1,3,0,4
	.byte	'unsigned long long int',0,8,7,5
	.byte	'void',0,6
	.word	207
	.byte	7
	.byte	'__ld64',0,3,2,110,19
	.word	181
	.byte	1,1,8
	.byte	'addr',0,2,110,32
	.word	213
	.byte	3,0,2
	.byte	'__st64',0,3,2,118,17,1,1,8
	.byte	'addr',0,2,118,30
	.word	213
	.byte	8
	.byte	'value',0,2,118,43
	.word	181
	.byte	3,0,4
	.byte	'unsigned int',0,4,7,4
	.byte	'int',0,4,5
.L272:
	.byte	4
	.byte	'unsigned char',0,1,8,9
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,45,16,4,10
	.byte	'SRPN',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	2,6,2,35,1,10
	.byte	'SRE',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'TOS',0,1
	.word	317
	.byte	2,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	317
	.byte	3,0,2,35,1,10
	.byte	'ECC',0,1
	.word	317
	.byte	6,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	317
	.byte	2,0,2,35,2,10
	.byte	'SRR',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'CLRR',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'SETR',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'IOV',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'IOVCLR',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'SWS',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'SWSCLR',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,4,70,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	334
	.byte	4,2,35,0,0,13
	.word	624
.L336:
	.byte	6
	.word	663
	.byte	2
	.byte	'IfxSrc_clearRequest',0,3,3,230,1,17,1,1,8
	.byte	'src',0,3,230,1,60
	.word	668
	.byte	3,0
.L313:
	.byte	4
	.byte	'unsigned short int',0,2,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,6,239,8,16,4,10
	.byte	'ENDINIT',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'PW',0,2
	.word	716
	.byte	14,0,2,35,0,10
	.byte	'REL',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,6,130,17,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	738
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,6,248,8,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'IR0',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	317
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,6,141,17,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	874
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,6,135,9,16,4,10
	.byte	'AE',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	317
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,6,152,17,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1118
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU',0,6,204,17,25,12,12
	.byte	'CON0',0
	.word	834
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	1078
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	1309
	.byte	4,2,35,8,0,13
	.word	1349
	.byte	6
	.word	1412
	.byte	2
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,5,130,3,17,1,1,8
	.byte	'watchdog',0,5,130,3,65
	.word	1417
	.byte	8
	.byte	'password',0,5,130,3,82
	.word	716
	.byte	3,0,2
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,5,222,3,17,1,1,8
	.byte	'watchdog',0,5,222,3,63
	.word	1417
	.byte	8
	.byte	'password',0,5,222,3,80
	.word	716
	.byte	3,0,7
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,5,187,3,19
	.word	716
	.byte	1,1,8
	.byte	'watchdog',0,5,187,3,74
	.word	1417
	.byte	3,0,9
	.byte	'_Ifx_P_OUT_Bits',0,8,143,3,16,4,10
	.byte	'P0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,8,250,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1647
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMR_Bits',0,8,169,2,16,4,10
	.byte	'PS0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'PCL0',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,8,184,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1963
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ID_Bits',0,8,110,16,4,10
	.byte	'MODREV',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,8,156,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2534
	.byte	4,2,35,0,0,14,4
	.word	317
	.byte	15,3,0,9
	.byte	'_Ifx_P_IOCR0_Bits',0,8,140,1,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'PC0',0,1
	.word	317
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'PC1',0,1
	.word	317
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	317
	.byte	3,5,2,35,2,10
	.byte	'PC2',0,1
	.word	317
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	3,5,2,35,3,10
	.byte	'PC3',0,1
	.word	317
	.byte	5,0,2,35,3,0,11,8,178,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2662
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR4_Bits',0,8,166,1,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'PC4',0,1
	.word	317
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'PC5',0,1
	.word	317
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	317
	.byte	3,5,2,35,2,10
	.byte	'PC6',0,1
	.word	317
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	3,5,2,35,3,10
	.byte	'PC7',0,1
	.word	317
	.byte	5,0,2,35,3,0,11,8,200,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2877
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR8_Bits',0,8,179,1,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'PC8',0,1
	.word	317
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'PC9',0,1
	.word	317
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	317
	.byte	3,5,2,35,2,10
	.byte	'PC10',0,1
	.word	317
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	3,5,2,35,3,10
	.byte	'PC11',0,1
	.word	317
	.byte	5,0,2,35,3,0,11,8,211,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3092
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR12_Bits',0,8,153,1,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'PC12',0,1
	.word	317
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'PC13',0,1
	.word	317
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	317
	.byte	3,5,2,35,2,10
	.byte	'PC14',0,1
	.word	317
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	3,5,2,35,3,10
	.byte	'PC15',0,1
	.word	317
	.byte	5,0,2,35,3,0,11,8,189,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3309
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IN_Bits',0,8,118,16,4,10
	.byte	'P0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,8,167,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3529
	.byte	4,2,35,0,0,14,24
	.word	317
	.byte	15,23,0,9
	.byte	'_Ifx_P_PDR0_Bits',0,8,204,3,16,4,10
	.byte	'PD0',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	317
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'PD2',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'PL2',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'PD3',0,1
	.word	317
	.byte	3,1,2,35,1,10
	.byte	'PL3',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'PD4',0,1
	.word	317
	.byte	3,5,2,35,2,10
	.byte	'PL4',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'PD5',0,1
	.word	317
	.byte	3,1,2,35,2,10
	.byte	'PL5',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'PD6',0,1
	.word	317
	.byte	3,5,2,35,3,10
	.byte	'PL6',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'PD7',0,1
	.word	317
	.byte	3,1,2,35,3,10
	.byte	'PL7',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,8,155,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3852
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PDR1_Bits',0,8,225,3,16,4,10
	.byte	'PD8',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'PL8',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PD9',0,1
	.word	317
	.byte	3,1,2,35,0,10
	.byte	'PL9',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'PD10',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'PL10',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'PD11',0,1
	.word	317
	.byte	3,1,2,35,1,10
	.byte	'PL11',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'PD12',0,1
	.word	317
	.byte	3,5,2,35,2,10
	.byte	'PL12',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'PD13',0,1
	.word	317
	.byte	3,1,2,35,2,10
	.byte	'PL13',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'PD14',0,1
	.word	317
	.byte	3,5,2,35,3,10
	.byte	'PL14',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'PD15',0,1
	.word	317
	.byte	3,1,2,35,3,10
	.byte	'PL15',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,8,166,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4156
	.byte	4,2,35,0,0,14,8
	.word	317
	.byte	15,7,0,9
	.byte	'_Ifx_P_ESR_Bits',0,8,88,16,4,10
	.byte	'EN0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,8,145,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4481
	.byte	4,2,35,0,0,14,12
	.word	317
	.byte	15,11,0,9
	.byte	'_Ifx_P_PDISC_Bits',0,8,182,3,16,4,10
	.byte	'PDIS0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'PDIS2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'PDIS3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PDIS4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'PDIS5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'PDIS6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PDIS7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'PDIS8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'PDIS9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'PDIS10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'PDIS11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'PDIS12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'PDIS13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'PDIS14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'PDIS15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,8,144,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4821
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PCSR_Bits',0,8,165,3,16,4,10
	.byte	'SEL0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'SEL1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'SEL2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'SEL3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'SEL4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'SEL5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'SEL6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	716
	.byte	3,6,2,35,0,10
	.byte	'SEL10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'SEL11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	294
	.byte	19,1,2,35,0,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,8,133,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5187
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR0_Bits',0,8,206,2,16,4,10
	.byte	'PS0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,11,8,206,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5457
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR4_Bits',0,8,227,2,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'PS4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,11,8,228,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5604
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR8_Bits',0,8,238,2,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'PS8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	294
	.byte	20,0,2,35,0,0,11,8,239,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5773
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR12_Bits',0,8,216,2,16,4,10
	.byte	'reserved_0',0,2
	.word	716
	.byte	12,4,2,35,0,10
	.byte	'PS12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,8,217,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5945
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR0_Bits',0,8,232,1,16,4,10
	.byte	'reserved_0',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	716
	.byte	12,0,2,35,2,0,11,8,140,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6120
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR4_Bits',0,8,253,1,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	20,12,2,35,0,10
	.byte	'PCL4',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	8,0,2,35,3,0,11,8,162,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6294
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR8_Bits',0,8,136,2,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	24,8,2,35,0,10
	.byte	'PCL8',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	317
	.byte	4,0,2,35,3,0,11,8,173,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6468
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR12_Bits',0,8,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	28,4,2,35,0,10
	.byte	'PCL12',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,8,151,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6644
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR_Bits',0,8,249,2,16,4,10
	.byte	'PS0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,8,195,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6800
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR_Bits',0,8,147,2,16,4,10
	.byte	'reserved_0',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,8,129,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7133
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_LPCR0_Bits',0,8,192,1,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,11,8,222,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7481
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_LPCR1_Bits',0,8,200,1,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,9
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,8,208,1,16,4,10
	.byte	'RDIS_CTRL',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'RX_DIS',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'TERM',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'LRXTERM',0,1
	.word	317
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,11,8,233,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7605
	.byte	4,2,35,0,12
	.byte	'B_P21',0
	.word	7689
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_LPCR2_Bits',0,8,218,1,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'LVDSR',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'LVDSRL',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	317
	.byte	2,4,2,35,1,10
	.byte	'TDIS_CTRL',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'TX_DIS',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'TX_PD',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'TX_PWDPD',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,8,246,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7869
	.byte	4,2,35,0,0,14,76
	.word	317
	.byte	15,75,0,9
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,82,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	32,0,2,35,0,0,11,8,134,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8122
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,45,16,4,10
	.byte	'EN0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,8,251,3,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8209
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P',0,8,185,6,25,128,2,12
	.byte	'OUT',0
	.word	1923
	.byte	4,2,35,0,12
	.byte	'OMR',0
	.word	2494
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	2613
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	2653
	.byte	4,2,35,12,12
	.byte	'IOCR0',0
	.word	2837
	.byte	4,2,35,16,12
	.byte	'IOCR4',0
	.word	3052
	.byte	4,2,35,20,12
	.byte	'IOCR8',0
	.word	3269
	.byte	4,2,35,24,12
	.byte	'IOCR12',0
	.word	3489
	.byte	4,2,35,28,12
	.byte	'reserved_20',0
	.word	2653
	.byte	4,2,35,32,12
	.byte	'IN',0
	.word	3803
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	3843
	.byte	24,2,35,40,12
	.byte	'PDR0',0
	.word	4116
	.byte	4,2,35,64,12
	.byte	'PDR1',0
	.word	4432
	.byte	4,2,35,68,12
	.byte	'reserved_48',0
	.word	4472
	.byte	8,2,35,72,12
	.byte	'ESR',0
	.word	4772
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	4812
	.byte	12,2,35,84,12
	.byte	'PDISC',0
	.word	5147
	.byte	4,2,35,96,12
	.byte	'PCSR',0
	.word	5417
	.byte	4,2,35,100,12
	.byte	'reserved_68',0
	.word	4472
	.byte	8,2,35,104,12
	.byte	'OMSR0',0
	.word	5564
	.byte	4,2,35,112,12
	.byte	'OMSR4',0
	.word	5733
	.byte	4,2,35,116,12
	.byte	'OMSR8',0
	.word	5905
	.byte	4,2,35,120,12
	.byte	'OMSR12',0
	.word	6080
	.byte	4,2,35,124,12
	.byte	'OMCR0',0
	.word	6254
	.byte	4,3,35,128,1,12
	.byte	'OMCR4',0
	.word	6428
	.byte	4,3,35,132,1,12
	.byte	'OMCR8',0
	.word	6604
	.byte	4,3,35,136,1,12
	.byte	'OMCR12',0
	.word	6760
	.byte	4,3,35,140,1,12
	.byte	'OMSR',0
	.word	7093
	.byte	4,3,35,144,1,12
	.byte	'OMCR',0
	.word	7441
	.byte	4,3,35,148,1,12
	.byte	'reserved_98',0
	.word	4472
	.byte	8,3,35,152,1,12
	.byte	'LPCR0',0
	.word	7565
	.byte	4,3,35,160,1,12
	.byte	'LPCR1',0
	.word	7814
	.byte	4,3,35,164,1,12
	.byte	'LPCR2',0
	.word	8073
	.byte	4,3,35,168,1,12
	.byte	'reserved_A4',0
	.word	8113
	.byte	76,3,35,172,1,12
	.byte	'ACCEN1',0
	.word	8169
	.byte	4,3,35,248,1,12
	.byte	'ACCEN0',0
	.word	8736
	.byte	4,3,35,252,1,0,13
	.word	8776
	.byte	6
	.word	9379
	.byte	16,7,114,9,1,17
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,17
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,16,7,100,9,1,17
	.byte	'IfxPort_OutputIdx_general',0,128,1,17
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,17
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,17
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,17
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,17
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,17
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,17
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,2
	.byte	'IfxPort_setPinModeOutput',0,3,7,176,4,17,1,1,8
	.byte	'port',0,7,176,4,49
	.word	9384
	.byte	8
	.byte	'pinIndex',0,7,176,4,61
	.word	317
	.byte	8
	.byte	'mode',0,7,176,4,90
	.word	9389
	.byte	8
	.byte	'index',0,7,176,4,114
	.word	9458
	.byte	3,0,16,7,152,1,9,4,17
	.byte	'IfxPort_State_notChanged',0,0,17
	.byte	'IfxPort_State_high',0,1,17
	.byte	'IfxPort_State_low',0,128,128,4,17
	.byte	'IfxPort_State_toggled',0,129,128,4,0,2
	.byte	'IfxPort_setPinState',0,3,7,182,4,17,1,1,8
	.byte	'port',0,7,182,4,44
	.word	9384
	.byte	8
	.byte	'pinIndex',0,7,182,4,56
	.word	317
	.byte	8
	.byte	'action',0,7,182,4,80
	.word	9771
	.byte	3,0,16,10,83,9,1,17
	.byte	'IfxCpu_ResourceCpu_0',0,0,17
	.byte	'IfxCpu_ResourceCpu_1',0,1,17
	.byte	'IfxCpu_ResourceCpu_2',0,2,17
	.byte	'IfxCpu_ResourceCpu_none',0,3,0,7
	.byte	'IfxCpu_getCoreIndex',0,3,9,170,5,31
	.word	9952
	.byte	1,1,3,0,7
	.byte	'IfxCpu_areInterruptsEnabled',0,3,9,185,4,20
	.word	317
	.byte	1,1,3,0
.L290:
	.byte	4
	.byte	'unsigned long int',0,4,7,7
	.byte	'IfxCpu_getPerformanceCounter',0,3,9,190,5,19
	.word	10129
	.byte	1,1,8
	.byte	'address',0,9,190,5,55
	.word	10129
	.byte	3,0,7
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,9,198,5,20
	.word	317
	.byte	1,1,8
	.byte	'address',0,9,198,5,70
	.word	10129
	.byte	3,0,2
	.byte	'IfxCpu_updatePerformanceCounter',0,3,9,153,7,17,1,1,8
	.byte	'address',0,9,153,7,56
	.word	10129
	.byte	8
	.byte	'count',0,9,153,7,72
	.word	10129
	.byte	3,0
.L295:
	.byte	4
	.byte	'float',0,4,4,7
	.byte	'IfxVadc_calculateSampleTime',0,3,11,150,13,19
	.word	10129
	.byte	1,1,8
	.byte	'analogFrequency',0,11,150,13,55
	.word	10358
	.byte	8
	.byte	'sampleTime',0,11,150,13,80
	.word	10358
	.byte	3,0,9
	.byte	'_Ifx_VADC_CLC_Bits',0,12,200,1,16,4,10
	.byte	'DISR',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,11,12,238,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10454
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_ID_Bits',0,12,193,6,16,4,10
	.byte	'MOD_REV',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'MOD_TYPE',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,12,221,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10612
	.byte	4,2,35,0,0,14,28
	.word	317
	.byte	15,27,0,9
	.byte	'_Ifx_VADC_OCS_Bits',0,12,223,6,16,4,10
	.byte	'TGS',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'TGB',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'TG_P',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	20,8,2,35,0,10
	.byte	'SUS',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	317
	.byte	2,0,2,35,3,0,11,12,137,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10746
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_KRSTCLR_Bits',0,12,216,6,16,4,10
	.byte	'CLR',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	294
	.byte	31,0,2,35,0,0,11,12,254,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10953
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_KRST1_Bits',0,12,209,6,16,4,10
	.byte	'RST',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	294
	.byte	31,0,2,35,0,0,11,12,243,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11060
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_KRST0_Bits',0,12,201,6,16,4,10
	.byte	'RST',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,11,12,232,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11165
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_ACCEN0_Bits',0,12,49,16,4,10
	.byte	'EN0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,150,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11289
	.byte	4,2,35,0,0,14,64
	.word	317
	.byte	15,63,0,9
	.byte	'_Ifx_VADC_GLOBCFG_Bits',0,12,210,5,16,4,10
	.byte	'DIVA',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	317
	.byte	2,1,2,35,0,10
	.byte	'DCMSB',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'DIVD',0,1
	.word	317
	.byte	2,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	317
	.byte	2,4,2,35,1,10
	.byte	'REFPC',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'LOSUP',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'DIVWC',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'DPCAL0',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'DPCAL1',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'DPCAL2',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'DPCAL3',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'DPCAL4',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'DPCAL5',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'DPCAL6',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'DPCAL7',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'SUCAL',0,1
	.word	317
	.byte	1,0,2,35,3,0
.L333:
	.byte	11,12,133,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11868
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_ACCPROT0_Bits',0,12,86,16,4,10
	.byte	'APC0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'APC1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'APC2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'APC3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'APC4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'APC5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'APC6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'APC7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	7,1,2,35,1,10
	.byte	'APEM',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'API0',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'API1',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'API2',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'API3',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'API4',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'API5',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'API6',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'API7',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'APGC',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,161,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12290
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_ACCPROT1_Bits',0,12,111,16,4,10
	.byte	'APS0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'APS1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'APS2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'APS3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'APS4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'APS5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'APS6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'APS7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	7,1,2,35,1,10
	.byte	'APTF',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'APR0',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'APR1',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'APR2',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'APR3',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'APR4',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'APR5',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'APR6',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'APR7',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	8,0,2,35,3,0,11,12,172,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12693
	.byte	4,2,35,0,0,14,16
	.word	317
	.byte	15,15,0,9
	.byte	'_Ifx_VADC_ICLASS_Bits',0,12,180,6,16,4,10
	.byte	'STCS',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	317
	.byte	3,0,2,35,0,10
	.byte	'CMS',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	317
	.byte	5,0,2,35,1,10
	.byte	'STCE',0,1
	.word	317
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	317
	.byte	3,0,2,35,2,10
	.byte	'CME',0,1
	.word	317
	.byte	3,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	317
	.byte	5,0,2,35,3,0,11,12,210,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13089
	.byte	4,2,35,0,0,14,8
	.word	13271
	.byte	15,1,0,9
	.byte	'_Ifx_VADC_GLOBBOUND_Bits',0,12,201,5,16,4,10
	.byte	'BOUNDARY0',0,2
	.word	716
	.byte	12,4,2,35,0,10
	.byte	'reserved_12',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'BOUNDARY1',0,2
	.word	716
	.byte	12,4,2,35,2,10
	.byte	'reserved_28',0,1
	.word	317
	.byte	4,0,2,35,3,0,11,12,250,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13320
	.byte	4,2,35,0,0,14,36
	.word	317
	.byte	15,35,0,9
	.byte	'_Ifx_VADC_GLOBEFLAG_Bits',0,12,234,5,16,4,10
	.byte	'SEVGLB',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	317
	.byte	7,0,2,35,0,10
	.byte	'REVGLB',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	317
	.byte	7,0,2,35,1,10
	.byte	'SEVGLBCLR',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	317
	.byte	7,0,2,35,2,10
	.byte	'REVGLBCLR',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	317
	.byte	7,0,2,35,3,0,11,12,144,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13489
	.byte	4,2,35,0,0,14,92
	.word	317
	.byte	15,91,0,9
	.byte	'_Ifx_VADC_GLOBEVNP_Bits',0,12,247,5,16,4,10
	.byte	'SEV0NP',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	716
	.byte	12,0,2,35,0,10
	.byte	'REV0NP',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	716
	.byte	12,0,2,35,2,0,11,12,155,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13738
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_GLOBTF_Bits',0,12,163,6,16,4,10
	.byte	'CDCH',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'CDGR',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'CDEN',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'CDSEL',0,1
	.word	317
	.byte	2,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	317
	.byte	4,1,2,35,1,10
	.byte	'CDWC',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'PDD',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'MDPD',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'MDPU',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	317
	.byte	4,1,2,35,2,10
	.byte	'MDWC',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	8,0,2,35,3,0,11,12,199,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13890
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_BRSSEL_Bits',0,12,174,1,16,4,10
	.byte	'CHSELGy',0,4
	.word	294
	.byte	32,0,2,35,0,0,11,12,216,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14172
	.byte	4,2,35,0,0,14,32
	.word	14220
	.byte	15,7,0,14,32
	.word	317
	.byte	15,31,0,9
	.byte	'_Ifx_VADC_BRSPND_Bits',0,12,168,1,16,4,10
	.byte	'CHPNDGy',0,4
	.word	294
	.byte	32,0,2,35,0,0,11,12,205,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14278
	.byte	4,2,35,0,0,14,32
	.word	14326
	.byte	15,7,0,9
	.byte	'_Ifx_VADC_BRSCTRL_Bits',0,12,135,1,16,4,10
	.byte	'SRCRESREG',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'XTSEL',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'XTLVL',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'XTMODE',0,1
	.word	317
	.byte	2,1,2,35,1,10
	.byte	'XTWC',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'GTSEL',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'GTLVL',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	317
	.byte	2,1,2,35,2,10
	.byte	'GTWC',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	8,0,2,35,3,0,11,12,183,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14375
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_BRSMR_Bits',0,12,151,1,16,4,10
	.byte	'ENGT',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'ENTR',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'ENSI',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'SCAN',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'LDM',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'REQGT',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'CLRPND',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'LDEV',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	317
	.byte	6,0,2,35,1,10
	.byte	'RPTDIS',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	716
	.byte	15,0,2,35,2,0,11,12,194,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14652
	.byte	4,2,35,0,0,14,120
	.word	317
	.byte	15,119,0,9
	.byte	'_Ifx_VADC_GLOBRCR_Bits',0,12,128,6,16,4,10
	.byte	'reserved_0',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'DRCTR',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'reserved_20',0,1
	.word	317
	.byte	4,0,2,35,2,10
	.byte	'WFR',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	317
	.byte	6,1,2,35,3,10
	.byte	'SRGEN',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,166,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14945
	.byte	4,2,35,0,0,14,124
	.word	317
	.byte	15,123,0,9
	.byte	'_Ifx_VADC_GLOBRES_Bits',0,12,139,6,16,4,10
	.byte	'RESULT',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'GNR',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'CHNR',0,2
	.word	716
	.byte	5,7,2,35,2,10
	.byte	'EMUX',0,1
	.word	317
	.byte	3,4,2,35,3,10
	.byte	'CRS',0,1
	.word	317
	.byte	2,2,2,35,3,10
	.byte	'FCR',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'VF',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,177,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15141
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_GLOBRESD_Bits',0,12,151,6,16,4,10
	.byte	'RESULT',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'GNR',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'CHNR',0,2
	.word	716
	.byte	5,7,2,35,2,10
	.byte	'EMUX',0,1
	.word	317
	.byte	3,4,2,35,3,10
	.byte	'CRS',0,1
	.word	317
	.byte	2,2,2,35,3,10
	.byte	'FCR',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'VF',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,188,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15320
	.byte	4,2,35,0,0,14,108
	.word	317
	.byte	15,107,0,9
	.byte	'_Ifx_VADC_EMUXSEL_Bits',0,12,210,1,16,4,10
	.byte	'EMUXGRP0',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'EMUXGRP1',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,11,12,249,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15509
	.byte	4,2,35,0,0,14,140,1
	.word	317
	.byte	15,139,1,0,9
	.byte	'_Ifx_VADC_G_ARBCFG_Bits',0,12,227,1,16,4,10
	.byte	'ANONC',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'ARBRND',0,1
	.word	317
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'ARBM',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'ANONS',0,1
	.word	317
	.byte	2,6,2,35,2,10
	.byte	'CSRC',0,1
	.word	317
	.byte	2,4,2,35,2,10
	.byte	'CHNR',0,2
	.word	716
	.byte	5,7,2,35,2,10
	.byte	'SYNRUN',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	317
	.byte	2,4,2,35,3,10
	.byte	'CAL',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'CALS',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'BUSY',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'SAMPLE',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,143,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15652
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ARBPR_Bits',0,12,247,1,16,4,10
	.byte	'PRIO0',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'CSM0',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PRIO1',0,1
	.word	317
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'CSM1',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'PRIO2',0,1
	.word	317
	.byte	2,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'CSM2',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	294
	.byte	12,8,2,35,0,10
	.byte	'ASEN0',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'ASEN1',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'ASEN2',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	317
	.byte	5,0,2,35,3,0,11,12,154,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15995
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_CHASS_Bits',0,12,163,3,16,4,10
	.byte	'ASSCH0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ASSCH1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'ASSCH2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'ASSCH3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'ASSCH4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'ASSCH5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'ASSCH6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'ASSCH7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'ASSCH8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'ASSCH9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'ASSCH10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'ASSCH11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'ASSCH12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'ASSCH13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'ASSCH14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'ASSCH15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'ASSCH16',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'ASSCH17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'ASSCH18',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'ASSCH19',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'ASSCH20',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'ASSCH21',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'ASSCH22',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'ASSCH23',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'ASSCH24',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'ASSCH25',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'ASSCH26',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'ASSCH27',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'ASSCH28',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'ASSCH29',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'ASSCH30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'ASSCH31',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,169,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16328
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_RRASS_Bits',0,12,235,4,16,4,10
	.byte	'ASSRR0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ASSRR1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'ASSRR2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'ASSRR3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'ASSRR4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'ASSRR5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'ASSRR6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'ASSRR7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'ASSRR8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'ASSRR9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'ASSRR10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'ASSRR11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'ASSRR12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'ASSRR13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'ASSRR14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'ASSRR15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,12,173,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16996
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ALIAS_Bits',0,12,218,1,16,4,10
	.byte	'ALIAS0',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	317
	.byte	3,0,2,35,0,10
	.byte	'ALIAS1',0,1
	.word	317
	.byte	5,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	294
	.byte	19,0,2,35,0,0,11,12,132,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17383
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_BOUND_Bits',0,12,241,2,16,4,10
	.byte	'BOUNDARY0',0,2
	.word	716
	.byte	12,4,2,35,0,10
	.byte	'reserved_12',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'BOUNDARY1',0,2
	.word	716
	.byte	12,4,2,35,2,10
	.byte	'reserved_28',0,1
	.word	317
	.byte	4,0,2,35,3,0,11,12,253,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17534
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_SYNCTR_Bits',0,12,168,5,16,4,10
	.byte	'STSEL',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'EVALR1',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'EVALR2',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'EVALR3',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,4
	.word	294
	.byte	25,0,2,35,0,0,11,12,228,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17692
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_BFL_Bits',0,12,186,2,16,4,10
	.byte	'BFL0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'BFL1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'BFL2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'BFL3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'BFA0',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'BFA1',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'BFA2',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'BFA3',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'BFI0',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'BFI1',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'BFI2',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'BFI3',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	716
	.byte	12,0,2,35,2,0,11,12,209,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17878
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_BFLS_Bits',0,12,226,2,16,4,10
	.byte	'BFC0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'BFC1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'BFC2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'BFC3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	716
	.byte	12,0,2,35,0,10
	.byte	'BFS0',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'BFS1',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'BFS2',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'BFS3',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	716
	.byte	12,0,2,35,2,0,11,12,242,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18206
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_BFLC_Bits',0,12,206,2,16,4,10
	.byte	'BFM0',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'BFM1',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'BFM2',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'BFM3',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,12,220,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18448
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_BFLNP_Bits',0,12,216,2,16,4,10
	.byte	'BFL0NP',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'BFL1NP',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'BFL2NP',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'BFL3NP',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,12,231,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18604
	.byte	4,2,35,0,0,14,40
	.word	317
	.byte	15,39,0,9
	.byte	'_Ifx_VADC_G_QCTRL0_Bits',0,12,237,3,16,4,10
	.byte	'SRCRESREG',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'XTSEL',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'XTLVL',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'XTMODE',0,1
	.word	317
	.byte	2,1,2,35,1,10
	.byte	'XTWC',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'GTSEL',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'GTLVL',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	317
	.byte	2,1,2,35,2,10
	.byte	'GTWC',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'TMEN',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	317
	.byte	2,1,2,35,3,10
	.byte	'TMWC',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,213,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18778
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QMR0_Bits',0,12,138,4,16,4,10
	.byte	'ENGT',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'ENTR',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	317
	.byte	5,0,2,35,0,10
	.byte	'CLRV',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'TREV',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'FLUSH',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'CEV',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'RPTDIS',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	716
	.byte	15,0,2,35,2,0,11,12,235,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19111
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QSR0_Bits',0,12,153,4,16,4,10
	.byte	'FILL',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'EMPTY',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'REQGT',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EV',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	294
	.byte	23,0,2,35,0,0,11,12,246,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19362
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_Q0R0_Bits',0,12,215,3,16,4,10
	.byte	'REQCHNR',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'RF',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'ENSI',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'EXTR',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'V',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	294
	.byte	23,0,2,35,0,0,11,12,191,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19561
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QBUR0_Bits',0,12,226,3,16,4,10
	.byte	'REQCHNR',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'RF',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'ENSI',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'EXTR',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'V',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	294
	.byte	23,0,2,35,0,0,11,12,202,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19730
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QINR0_Bits',0,12,128,4,16,4,10
	.byte	'REQCHNR',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'RF',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'ENSI',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'EXTR',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,11,12,224,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19900
	.byte	4,2,35,0,0,11,12,213,12,5,4,12
	.byte	'QBUR0',0
	.word	19860
	.byte	4,2,35,0,12
	.byte	'QINR0',0
	.word	20017
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ASCTRL_Bits',0,12,138,2,16,4,10
	.byte	'SRCRESREG',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'XTSEL',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'XTLVL',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'XTMODE',0,1
	.word	317
	.byte	2,1,2,35,1,10
	.byte	'XTWC',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'GTSEL',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'GTLVL',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	317
	.byte	2,1,2,35,2,10
	.byte	'GTWC',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'TMEN',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	317
	.byte	2,1,2,35,3,10
	.byte	'TMWC',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,165,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20094
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ASMR_Bits',0,12,157,2,16,4,10
	.byte	'ENGT',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'ENTR',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'ENSI',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'SCAN',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'LDM',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'REQGT',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'CLRPND',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'LDEV',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	317
	.byte	6,0,2,35,1,10
	.byte	'RPTDIS',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	716
	.byte	15,0,2,35,2,0,11,12,176,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20427
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ASSEL_Bits',0,12,180,2,16,4,10
	.byte	'CHSEL',0,4
	.word	294
	.byte	32,0,2,35,0,0,11,12,198,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20712
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ASPND_Bits',0,12,174,2,16,4,10
	.byte	'CHPND',0,4
	.word	294
	.byte	32,0,2,35,0,0,11,12,187,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20799
	.byte	4,2,35,0,0,14,80
	.word	317
	.byte	15,79,0,9
	.byte	'_Ifx_VADC_G_CEFLAG_Bits',0,12,136,3,16,4,10
	.byte	'CEV0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'CEV1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'CEV2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'CEV3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'CEV4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'CEV5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'CEV6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'CEV7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,11,12,147,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20895
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_REFLAG_Bits',0,12,187,4,16,4,10
	.byte	'REV0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'REV1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'REV2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'REV3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'REV4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'REV5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'REV6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'REV7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'REV8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'REV9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'REV10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'REV11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'REV12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'REV13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'REV14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'REV15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,12,140,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21116
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_SEFLAG_Bits',0,12,137,5,16,4,10
	.byte	'SEV0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'SEV1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,11,12,195,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21472
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_CEFCLR_Bits',0,12,250,2,16,4,10
	.byte	'CEV0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'CEV1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'CEV2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'CEV3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'CEV4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'CEV5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'CEV6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'CEV7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,11,12,136,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21597
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_REFCLR_Bits',0,12,165,4,16,4,10
	.byte	'REV0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'REV1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'REV2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'REV3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'REV4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'REV5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'REV6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'REV7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'REV8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'REV9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'REV10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'REV11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'REV12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'REV13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'REV14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'REV15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,12,129,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21818
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_SEFCLR_Bits',0,12,129,5,16,4,10
	.byte	'SEV0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'SEV1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,11,12,184,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22174
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_CEVNP0_Bits',0,12,150,3,16,4,10
	.byte	'CEV0NP',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'CEV1NP',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'CEV2NP',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'CEV3NP',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'CEV4NP',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'CEV5NP',0,1
	.word	317
	.byte	4,0,2,35,2,10
	.byte	'CEV6NP',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'CEV7NP',0,1
	.word	317
	.byte	4,0,2,35,3,0,11,12,158,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22299
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_REVNP0_Bits',0,12,209,4,16,4,10
	.byte	'REV0NP',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'REV1NP',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'REV2NP',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'REV3NP',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'REV4NP',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'REV5NP',0,1
	.word	317
	.byte	4,0,2,35,2,10
	.byte	'REV6NP',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'REV7NP',0,1
	.word	317
	.byte	4,0,2,35,3,0,11,12,151,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22514
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_REVNP1_Bits',0,12,222,4,16,4,10
	.byte	'REV8NP',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'REV9NP',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'REV10NP',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'REV11NP',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'REV12NP',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'REV13NP',0,1
	.word	317
	.byte	4,0,2,35,2,10
	.byte	'REV14NP',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'REV15NP',0,1
	.word	317
	.byte	4,0,2,35,3,0,11,12,162,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22729
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_SEVNP_Bits',0,12,145,5,16,4,10
	.byte	'SEV0NP',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'SEV1NP',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,11,12,206,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22950
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_SRACT_Bits',0,12,153,5,16,4,10
	.byte	'AGSR0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'AGSR1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'AGSR2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'AGSR3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'ASSR0',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'ASSR1',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'ASSR2',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'ASSR3',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	294
	.byte	20,0,2,35,0,0,11,12,217,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23078
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_EMUXCTR_Bits',0,12,200,3,16,4,10
	.byte	'EMUXSET',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	317
	.byte	5,0,2,35,0,10
	.byte	'EMUXACT',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	317
	.byte	5,0,2,35,1,10
	.byte	'EMUXCH',0,2
	.word	716
	.byte	10,6,2,35,2,10
	.byte	'EMUXMODE',0,1
	.word	317
	.byte	2,4,2,35,3,10
	.byte	'EMXCOD',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'EMXST',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'EMXCSS',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'EMXWC',0,1
	.word	317
	.byte	1,0,2,35,3,0
.L424:
	.byte	11,12,180,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23329
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_VFR_Bits',0,12,179,5,16,4,10
	.byte	'VF0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'VF1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'VF2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'VF3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'VF4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'VF5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'VF6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'VF7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'VF8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'VF9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'VF10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'VF11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'VF12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'VF13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'VF14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'VF15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,11,12,239,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23592
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_CHCTR_Bits',0,12,180,1,16,4,10
	.byte	'ICLSEL',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'BNDSELL',0,1
	.word	317
	.byte	2,2,2,35,0,10
	.byte	'BNDSELU',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'CHEVMODE',0,1
	.word	317
	.byte	2,6,2,35,1,10
	.byte	'SYNC',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'REFSEL',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'BNDSELX',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'RESREG',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'RESTBS',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'RESPOS',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	716
	.byte	6,4,2,35,2,10
	.byte	'BWDCH',0,1
	.word	317
	.byte	2,2,2,35,3,10
	.byte	'BWDEN',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,227,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23929
	.byte	4,2,35,0,0,14,64
	.word	24242
	.byte	15,15,0,9
	.byte	'_Ifx_VADC_RCR_Bits',0,12,236,6,16,4,10
	.byte	'reserved_0',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'DRCTR',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'DMM',0,1
	.word	317
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	317
	.byte	2,0,2,35,2,10
	.byte	'WFR',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'FEN',0,1
	.word	317
	.byte	2,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	317
	.byte	4,1,2,35,3,10
	.byte	'SRGEN',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,148,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24291
	.byte	4,2,35,0,0,14,64
	.word	24464
	.byte	15,15,0,9
	.byte	'_Ifx_VADC_RES_Bits',0,12,249,6,16,4,10
	.byte	'RESULT',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'DRC',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'CHNR',0,2
	.word	716
	.byte	5,7,2,35,2,10
	.byte	'EMUX',0,1
	.word	317
	.byte	3,4,2,35,3,10
	.byte	'CRS',0,1
	.word	317
	.byte	2,2,2,35,3,10
	.byte	'FCR',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'VF',0,1
	.word	317
	.byte	1,0,2,35,3,0
.L274:
	.byte	11,12,159,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24513
	.byte	4,2,35,0,0,14,64
	.word	24648
	.byte	15,15,0,9
	.byte	'_Ifx_VADC_RESD_Bits',0,12,133,7,16,4,10
	.byte	'RESULT',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'DRC',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'CHNR',0,2
	.word	716
	.byte	5,7,2,35,2,10
	.byte	'EMUX',0,1
	.word	317
	.byte	3,4,2,35,3,10
	.byte	'CRS',0,1
	.word	317
	.byte	2,2,2,35,3,10
	.byte	'FCR',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'VF',0,1
	.word	317
	.byte	1,0,2,35,3,0,11,12,170,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24697
	.byte	4,2,35,0,0,14,64
	.word	24833
	.byte	15,15,0,14,192,1
	.word	317
	.byte	15,191,1,0,9
	.byte	'_Ifx_VADC_G',0,12,189,12,25,128,8,12
	.byte	'ARBCFG',0
	.word	15955
	.byte	4,2,35,0,12
	.byte	'ARBPR',0
	.word	16288
	.byte	4,2,35,4,12
	.byte	'CHASS',0
	.word	16956
	.byte	4,2,35,8,12
	.byte	'RRASS',0
	.word	17343
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	13080
	.byte	16,2,35,16,12
	.byte	'ICLASS',0
	.word	13311
	.byte	8,2,35,32,12
	.byte	'reserved_28',0
	.word	4472
	.byte	8,2,35,40,12
	.byte	'ALIAS',0
	.word	17494
	.byte	4,2,35,48,12
	.byte	'reserved_34',0
	.word	2653
	.byte	4,2,35,52,12
	.byte	'BOUND',0
	.word	17652
	.byte	4,2,35,56,12
	.byte	'reserved_3C',0
	.word	2653
	.byte	4,2,35,60,12
	.byte	'SYNCTR',0
	.word	17838
	.byte	4,2,35,64,12
	.byte	'reserved_44',0
	.word	2653
	.byte	4,2,35,68,12
	.byte	'BFL',0
	.word	18166
	.byte	4,2,35,72,12
	.byte	'BFLS',0
	.word	18408
	.byte	4,2,35,76,12
	.byte	'BFLC',0
	.word	18564
	.byte	4,2,35,80,12
	.byte	'BFLNP',0
	.word	18729
	.byte	4,2,35,84,12
	.byte	'reserved_58',0
	.word	18769
	.byte	40,2,35,88,12
	.byte	'QCTRL0',0
	.word	19071
	.byte	4,3,35,128,1,12
	.byte	'QMR0',0
	.word	19322
	.byte	4,3,35,132,1,12
	.byte	'QSR0',0
	.word	19521
	.byte	4,3,35,136,1,12
	.byte	'Q0R0',0
	.word	19690
	.byte	4,3,35,140,1,18
	.word	20057
	.byte	4,3,35,144,1,12
	.byte	'reserved_94',0
	.word	4812
	.byte	12,3,35,148,1,12
	.byte	'ASCTRL',0
	.word	20387
	.byte	4,3,35,160,1,12
	.byte	'ASMR',0
	.word	20672
	.byte	4,3,35,164,1,12
	.byte	'ASSEL',0
	.word	20759
	.byte	4,3,35,168,1,12
	.byte	'ASPND',0
	.word	20846
	.byte	4,3,35,172,1,12
	.byte	'reserved_B0',0
	.word	20886
	.byte	80,3,35,176,1,12
	.byte	'CEFLAG',0
	.word	21076
	.byte	4,3,35,128,2,12
	.byte	'REFLAG',0
	.word	21432
	.byte	4,3,35,132,2,12
	.byte	'SEFLAG',0
	.word	21557
	.byte	4,3,35,136,2,12
	.byte	'reserved_10C',0
	.word	2653
	.byte	4,3,35,140,2,12
	.byte	'CEFCLR',0
	.word	21778
	.byte	4,3,35,144,2,12
	.byte	'REFCLR',0
	.word	22134
	.byte	4,3,35,148,2,12
	.byte	'SEFCLR',0
	.word	22259
	.byte	4,3,35,152,2,12
	.byte	'reserved_11C',0
	.word	2653
	.byte	4,3,35,156,2,12
	.byte	'CEVNP0',0
	.word	22474
	.byte	4,3,35,160,2,12
	.byte	'reserved_124',0
	.word	4812
	.byte	12,3,35,164,2,12
	.byte	'REVNP0',0
	.word	22689
	.byte	4,3,35,176,2,12
	.byte	'REVNP1',0
	.word	22910
	.byte	4,3,35,180,2,12
	.byte	'reserved_138',0
	.word	4472
	.byte	8,3,35,184,2,12
	.byte	'SEVNP',0
	.word	23038
	.byte	4,3,35,192,2,12
	.byte	'reserved_144',0
	.word	2653
	.byte	4,3,35,196,2,12
	.byte	'SRACT',0
	.word	23289
	.byte	4,3,35,200,2,12
	.byte	'reserved_14C',0
	.word	13480
	.byte	36,3,35,204,2,12
	.byte	'EMUXCTR',0
	.word	23552
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	2653
	.byte	4,3,35,244,2,12
	.byte	'VFR',0
	.word	23889
	.byte	4,3,35,248,2,12
	.byte	'reserved_17C',0
	.word	2653
	.byte	4,3,35,252,2,12
	.byte	'CHCTR',0
	.word	24282
	.byte	64,3,35,128,3,12
	.byte	'reserved_1C0',0
	.word	11859
	.byte	64,3,35,192,3,12
	.byte	'RCR',0
	.word	24504
	.byte	64,3,35,128,4,12
	.byte	'reserved_240',0
	.word	11859
	.byte	64,3,35,192,4,12
	.byte	'RES',0
	.word	24688
	.byte	64,3,35,128,5,12
	.byte	'reserved_2C0',0
	.word	11859
	.byte	64,3,35,192,5,12
	.byte	'RESD',0
	.word	24873
	.byte	64,3,35,128,6,12
	.byte	'reserved_340',0
	.word	24882
	.byte	192,1,3,35,192,6,0,14,128,64
	.word	24893
	.byte	15,7,0,13
	.word	25951
	.byte	14,128,55
	.word	317
	.byte	15,255,54,0,9
	.byte	'_Ifx_VADC',0,12,139,13,25,128,128,1,12
	.byte	'CLC',0
	.word	10572
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	2653
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	10697
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	10737
	.byte	28,2,35,12,12
	.byte	'OCS',0
	.word	10913
	.byte	4,2,35,40,12
	.byte	'KRSTCLR',0
	.word	11020
	.byte	4,2,35,44,12
	.byte	'KRST1',0
	.word	11125
	.byte	4,2,35,48,12
	.byte	'KRST0',0
	.word	11249
	.byte	4,2,35,52,12
	.byte	'reserved_38',0
	.word	2653
	.byte	4,2,35,56,12
	.byte	'ACCEN0',0
	.word	11819
	.byte	4,2,35,60,12
	.byte	'reserved_40',0
	.word	11859
	.byte	64,2,35,64,12
	.byte	'GLOBCFG',0
	.word	12250
	.byte	4,3,35,128,1,12
	.byte	'reserved_84',0
	.word	2653
	.byte	4,3,35,132,1,12
	.byte	'ACCPROT0',0
	.word	12653
	.byte	4,3,35,136,1,12
	.byte	'ACCPROT1',0
	.word	13040
	.byte	4,3,35,140,1,12
	.byte	'reserved_90',0
	.word	13080
	.byte	16,3,35,144,1,12
	.byte	'GLOBICLASS',0
	.word	13311
	.byte	8,3,35,160,1,12
	.byte	'reserved_A8',0
	.word	13080
	.byte	16,3,35,168,1,12
	.byte	'GLOBBOUND',0
	.word	13440
	.byte	4,3,35,184,1,12
	.byte	'reserved_BC',0
	.word	13480
	.byte	36,3,35,188,1,12
	.byte	'GLOBEFLAG',0
	.word	13689
	.byte	4,3,35,224,1,12
	.byte	'reserved_E4',0
	.word	13729
	.byte	92,3,35,228,1,12
	.byte	'GLOBEVNP',0
	.word	13850
	.byte	4,3,35,192,2,12
	.byte	'reserved_144',0
	.word	10737
	.byte	28,3,35,196,2,12
	.byte	'GLOBTF',0
	.word	14132
	.byte	4,3,35,224,2,12
	.byte	'reserved_164',0
	.word	10737
	.byte	28,3,35,228,2,12
	.byte	'BRSSEL',0
	.word	14260
	.byte	32,3,35,128,3,12
	.byte	'reserved_1A0',0
	.word	14269
	.byte	32,3,35,160,3,12
	.byte	'BRSPND',0
	.word	14366
	.byte	32,3,35,192,3,12
	.byte	'reserved_1E0',0
	.word	14269
	.byte	32,3,35,224,3,12
	.byte	'BRSCTRL',0
	.word	14612
	.byte	4,3,35,128,4,12
	.byte	'BRSMR',0
	.word	14896
	.byte	4,3,35,132,4,12
	.byte	'reserved_208',0
	.word	14936
	.byte	120,3,35,136,4,12
	.byte	'GLOBRCR',0
	.word	15092
	.byte	4,3,35,128,5,12
	.byte	'reserved_284',0
	.word	15132
	.byte	124,3,35,132,5,12
	.byte	'GLOBRES',0
	.word	15280
	.byte	4,3,35,128,6,12
	.byte	'reserved_304',0
	.word	15132
	.byte	124,3,35,132,6,12
	.byte	'GLOBRESD',0
	.word	15460
	.byte	4,3,35,128,7,12
	.byte	'reserved_384',0
	.word	15500
	.byte	108,3,35,132,7,12
	.byte	'EMUXSEL',0
	.word	15601
	.byte	4,3,35,240,7,12
	.byte	'reserved_3F4',0
	.word	15641
	.byte	140,1,3,35,244,7,12
	.byte	'G',0
	.word	25961
	.byte	128,64,3,35,128,9,12
	.byte	'reserved_2480',0
	.word	25966
	.byte	128,55,3,35,128,73,0,13
	.word	25977
.L270:
	.byte	6
	.word	26829
.L382:
	.byte	7
	.byte	'IfxVadc_getAdcCalibrationActiveState',0,3,11,130,14,18
	.word	317
	.byte	1,1
.L384:
	.byte	8
	.byte	'vadc',0,11,130,14,65
	.word	26834
.L386:
	.byte	8
	.byte	'adcCalGroupNum',0,11,130,14,77
	.word	317
.L388:
	.byte	3,0
.L376:
	.byte	2
	.byte	'IfxVadc_initiateStartupCalibration',0,3,11,171,16,17,1,1
.L379:
	.byte	8
	.byte	'vadc',0,11,171,16,62
	.word	26834
.L381:
	.byte	3,0,19
	.word	310
	.byte	20
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,21
	.word	26987
	.byte	0,13
	.word	294
	.byte	6
	.word	294
	.byte	22
	.byte	'__cmpswapw',0
	.word	27029
	.byte	1,1,1,1,23
	.byte	'p',0
	.word	27034
	.byte	23
	.byte	'value',0
	.word	294
	.byte	23
	.byte	'compare',0
	.word	294
	.byte	0,22
	.byte	'__minu',0
	.word	294
	.byte	1,1,1,1,21
	.word	294
	.byte	21
	.word	294
	.byte	0,24
	.word	152
	.byte	3,0,24
	.word	218
	.byte	25
	.word	236
	.byte	3,0,24
	.word	251
	.byte	25
	.word	265
	.byte	25
	.word	278
	.byte	3,0,24
	.word	673
	.byte	25
	.word	701
	.byte	3,0,24
	.word	1422
	.byte	25
	.word	1462
	.byte	25
	.word	1480
	.byte	3,0,24
	.word	1500
	.byte	25
	.word	1538
	.byte	25
	.word	1556
	.byte	3,0,26
	.byte	'IfxScuWdt_clearCpuEndinit',0,5,187,1,17,1,1,1,1,8
	.byte	'password',0,5,187,1,50
	.word	716
	.byte	0,26
	.byte	'IfxScuWdt_clearSafetyEndinit',0,5,199,1,17,1,1,1,1,8
	.byte	'password',0,5,199,1,53
	.word	716
	.byte	0,26
	.byte	'IfxScuWdt_setCpuEndinit',0,5,209,1,17,1,1,1,1,8
	.byte	'password',0,5,209,1,48
	.word	716
	.byte	0,26
	.byte	'IfxScuWdt_setSafetyEndinit',0,5,219,1,17,1,1,1,1,8
	.byte	'password',0,5,219,1,51
	.word	716
	.byte	0,24
	.word	1576
	.byte	25
	.word	1627
	.byte	3,0,27
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,5,221,2,19
	.word	716
	.byte	1,1,1,1,27
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,5,230,2,19
	.word	716
	.byte	1,1,1,1,24
	.word	9675
	.byte	25
	.word	9708
	.byte	25
	.word	9722
	.byte	25
	.word	9740
	.byte	25
	.word	9754
	.byte	3,0,24
	.word	9874
	.byte	25
	.word	9902
	.byte	25
	.word	9916
	.byte	25
	.word	9934
	.byte	3,0,24
	.word	10053
	.byte	3,0,24
	.word	10087
	.byte	3,0,24
	.word	10150
	.byte	25
	.word	10191
	.byte	3,0,24
	.word	10210
	.byte	25
	.word	10265
	.byte	3,0,24
	.word	10284
	.byte	25
	.word	10324
	.byte	25
	.word	10341
	.byte	3,0,27
	.byte	'IfxScuCcu_getSpbFrequency',0,13,159,7,20
	.word	10358
	.byte	1,1,1,1
.L268:
	.byte	16,11,181,3,9,1,17
	.byte	'IfxVadc_Status_noError',0,0,17
	.byte	'IfxVadc_Status_notInitialised',0,1,17
	.byte	'IfxVadc_Status_invalidGroup',0,2,17
	.byte	'IfxVadc_Status_invalidChannel',0,3,17
	.byte	'IfxVadc_Status_queueFull',0,4,17
	.byte	'IfxVadc_Status_noAccess',0,5,17
	.byte	'IfxVadc_Status_channelsStillPending',0,6,0,13
	.word	24893
.L277:
	.byte	6
	.word	27885
.L279:
	.byte	16,11,122,9,1,17
	.byte	'IfxVadc_ChannelId_none',0,127,17
	.byte	'IfxVadc_ChannelId_0',0,0,17
	.byte	'IfxVadc_ChannelId_1',0,1,17
	.byte	'IfxVadc_ChannelId_2',0,2,17
	.byte	'IfxVadc_ChannelId_3',0,3,17
	.byte	'IfxVadc_ChannelId_4',0,4,17
	.byte	'IfxVadc_ChannelId_5',0,5,17
	.byte	'IfxVadc_ChannelId_6',0,6,17
	.byte	'IfxVadc_ChannelId_7',0,7,0
.L281:
	.byte	16,11,147,3,9,1,17
	.byte	'IfxVadc_RequestSource_queue',0,0,17
	.byte	'IfxVadc_RequestSource_scan',0,1,17
	.byte	'IfxVadc_RequestSource_background',0,2,0
.L283:
	.byte	4
	.byte	'long int',0,4,5,24
	.word	10367
	.byte	25
	.word	10407
	.byte	25
	.word	10432
	.byte	3,0
.L303:
	.byte	16,11,129,3,9,1,17
	.byte	'IfxVadc_RequestSlotPriority_lowest',0,0,17
	.byte	'IfxVadc_RequestSlotPriority_low',0,1,17
	.byte	'IfxVadc_RequestSlotPriority_high',0,2,17
	.byte	'IfxVadc_RequestSlotPriority_highest',0,3,0
.L305:
	.byte	16,11,139,3,9,1,17
	.byte	'IfxVadc_RequestSlotStartMode_waitForStart',0,0,17
	.byte	'IfxVadc_RequestSlotStartMode_cancelInjectRepeat',0,1,0,24
	.word	26839
	.byte	25
	.word	26888
	.byte	25
	.word	26902
	.byte	3,0,24
	.word	26928
	.byte	25
	.word	26971
	.byte	3,0
.L310:
	.byte	16,11,188,2,9,1,17
	.byte	'IfxVadc_Protection_channelControl0',0,0,17
	.byte	'IfxVadc_Protection_channelControl1',0,1,17
	.byte	'IfxVadc_Protection_channelControl2',0,2,17
	.byte	'IfxVadc_Protection_channelControl3',0,3,17
	.byte	'IfxVadc_Protection_channelControl4',0,4,17
	.byte	'IfxVadc_Protection_channelControl5',0,5,17
	.byte	'IfxVadc_Protection_channelControl6',0,6,17
	.byte	'IfxVadc_Protection_channelControl7',0,7,17
	.byte	'IfxVadc_Protection_channelControl8',0,8,17
	.byte	'IfxVadc_Protection_channelControl9',0,9,17
	.byte	'IfxVadc_Protection_channelControl10',0,10,17
	.byte	'IfxVadc_Protection_channelControl11',0,11,17
	.byte	'IfxVadc_Protection_channelControl12',0,12,17
	.byte	'IfxVadc_Protection_channelControl13',0,13,17
	.byte	'IfxVadc_Protection_channelControl14',0,14,17
	.byte	'IfxVadc_Protection_externalMultiplexer',0,15,17
	.byte	'IfxVadc_Protection_initGroup0',0,16,17
	.byte	'IfxVadc_Protection_initGroup1',0,17,17
	.byte	'IfxVadc_Protection_initGroup2',0,18,17
	.byte	'IfxVadc_Protection_initGroup3',0,19,17
	.byte	'IfxVadc_Protection_initGroup4',0,20,17
	.byte	'IfxVadc_Protection_initGroup5',0,21,17
	.byte	'IfxVadc_Protection_initGroup6',0,22,17
	.byte	'IfxVadc_Protection_initGroup7',0,23,17
	.byte	'IfxVadc_Protection_initGroup8',0,24,17
	.byte	'IfxVadc_Protection_initGroup9',0,25,17
	.byte	'IfxVadc_Protection_initGroup10',0,26,17
	.byte	'IfxVadc_Protection_initGroup11',0,27,17
	.byte	'IfxVadc_Protection_initGroup12',0,28,17
	.byte	'IfxVadc_Protection_initGroup13',0,29,17
	.byte	'IfxVadc_Protection_initGroup14',0,30,17
	.byte	'IfxVadc_Protection_globalConfig',0,31,17
	.byte	'IfxVadc_Protection_serviceGroup0',0,32,17
	.byte	'IfxVadc_Protection_serviceGroup1',0,33,17
	.byte	'IfxVadc_Protection_serviceGroup2',0,34,17
	.byte	'IfxVadc_Protection_serviceGroup3',0,35,17
	.byte	'IfxVadc_Protection_serviceGroup4',0,36,17
	.byte	'IfxVadc_Protection_serviceGroup5',0,37,17
	.byte	'IfxVadc_Protection_serviceGroup6',0,38,17
	.byte	'IfxVadc_Protection_serviceGroup7',0,39,17
	.byte	'IfxVadc_Protection_serviceGroup8',0,40,17
	.byte	'IfxVadc_Protection_serviceGroup9',0,41,17
	.byte	'IfxVadc_Protection_serviceGroup10',0,42,17
	.byte	'IfxVadc_Protection_serviceGroup11',0,43,17
	.byte	'IfxVadc_Protection_serviceGroup12',0,44,17
	.byte	'IfxVadc_Protection_serviceGroup13',0,45,17
	.byte	'IfxVadc_Protection_serviceGroup14',0,46,17
	.byte	'IfxVadc_Protection_testFunction',0,47,17
	.byte	'IfxVadc_Protection_resultRegisterGroup0',0,48,17
	.byte	'IfxVadc_Protection_resultRegisterGroup1',0,49,17
	.byte	'IfxVadc_Protection_resultRegisterGroup2',0,50,17
	.byte	'IfxVadc_Protection_resultRegisterGroup3',0,51,17
	.byte	'IfxVadc_Protection_resultRegisterGroup4',0,52,17
	.byte	'IfxVadc_Protection_resultRegisterGroup5',0,53,17
	.byte	'IfxVadc_Protection_resultRegisterGroup6',0,54,17
	.byte	'IfxVadc_Protection_resultRegisterGroup7',0,55,17
	.byte	'IfxVadc_Protection_resultRegisterGroup8',0,56,17
	.byte	'IfxVadc_Protection_resultRegisterGroup9',0,57,17
	.byte	'IfxVadc_Protection_resultRegisterGroup10',0,58,17
	.byte	'IfxVadc_Protection_resultRegisterGroup11',0,59,17
	.byte	'IfxVadc_Protection_resultRegisterGroup12',0,60,17
	.byte	'IfxVadc_Protection_resultRegisterGroup13',0,61,17
	.byte	'IfxVadc_Protection_resultRegisterGroup14',0,62,0
.L317:
	.byte	16,14,93,9,1,17
	.byte	'IfxVadc_GroupId_0',0,0,17
	.byte	'IfxVadc_GroupId_1',0,1,17
	.byte	'IfxVadc_GroupId_2',0,2,17
	.byte	'IfxVadc_GroupId_3',0,3,17
	.byte	'IfxVadc_GroupId_4',0,4,17
	.byte	'IfxVadc_GroupId_5',0,5,17
	.byte	'IfxVadc_GroupId_6',0,6,17
	.byte	'IfxVadc_GroupId_7',0,7,17
	.byte	'IfxVadc_GroupId_global0',0,8,17
	.byte	'IfxVadc_GroupId_global1',0,9,0
.L339:
	.byte	16,11,165,3,9,1,17
	.byte	'IfxVadc_SrcNr_group0',0,0,17
	.byte	'IfxVadc_SrcNr_group1',0,1,17
	.byte	'IfxVadc_SrcNr_group2',0,2,17
	.byte	'IfxVadc_SrcNr_group3',0,3,17
	.byte	'IfxVadc_SrcNr_shared0',0,4,17
	.byte	'IfxVadc_SrcNr_shared1',0,5,17
	.byte	'IfxVadc_SrcNr_shared2',0,6,17
	.byte	'IfxVadc_SrcNr_shared3',0,7,0
.L369:
	.byte	16,11,180,2,9,1,17
	.byte	'IfxVadc_LowSupplyVoltageSelect_5V',0,0,17
	.byte	'IfxVadc_LowSupplyVoltageSelect_3V',0,1,0
.L393:
	.byte	16,11,160,2,9,1,17
	.byte	'IfxVadc_InputClasses_group0',0,0,17
	.byte	'IfxVadc_InputClasses_group1',0,1,17
	.byte	'IfxVadc_InputClasses_global0',0,2,17
	.byte	'IfxVadc_InputClasses_global1',0,3,0
.L397:
	.byte	16,11,187,1,9,1,17
	.byte	'IfxVadc_ConversionType_Compatible',0,0,0
.L402:
	.byte	16,11,145,1,9,1,17
	.byte	'IfxVadc_ChannelResolution_12bit',0,0,17
	.byte	'IfxVadc_ChannelResolution_10bit',0,1,17
	.byte	'IfxVadc_ChannelResolution_8bit',0,2,17
	.byte	'IfxVadc_ChannelResolution_10bitFast',0,5,0
.L413:
	.byte	16,11,236,1,9,1,17
	.byte	'IfxVadc_ExternalMultiplexerMode_softwareControl',0,0,17
	.byte	'IfxVadc_ExternalMultiplexerMode_steady',0,1,17
	.byte	'IfxVadc_ExternalMultiplexerMode_singleStep',0,2,17
	.byte	'IfxVadc_ExternalMultiplexerMode_sequence',0,3,0
.L416:
	.byte	16,11,221,1,9,1,17
	.byte	'IfxVadc_EmuxSelectValue_0',0,0,17
	.byte	'IfxVadc_EmuxSelectValue_1',0,1,17
	.byte	'IfxVadc_EmuxSelectValue_2',0,2,17
	.byte	'IfxVadc_EmuxSelectValue_3',0,3,17
	.byte	'IfxVadc_EmuxSelectValue_4',0,4,17
	.byte	'IfxVadc_EmuxSelectValue_5',0,5,17
	.byte	'IfxVadc_EmuxSelectValue_6',0,6,17
	.byte	'IfxVadc_EmuxSelectValue_7',0,7,0
.L418:
	.byte	16,11,195,1,9,1,17
	.byte	'IfxVadc_EmuxCodingScheme_binary',0,0,17
	.byte	'IfxVadc_EmuxCodingScheme_gray',0,1,0
.L420:
	.byte	16,11,212,1,9,1,17
	.byte	'IfxVadc_EmuxSampleTimeControl_settingChanges',0,0,17
	.byte	'IfxVadc_EmuxSampleTimeControl_always',0,1,0
.L422:
	.byte	16,11,178,1,9,1,17
	.byte	'IfxVadc_ChannelSelectionStyle_channelNumber',0,0,17
	.byte	'IfxVadc_ChannelSelectionStyle_binary',0,1,0,4
	.byte	'short int',0,2,5,28
	.byte	'__wchar_t',0,15,1,1
	.word	32324
	.byte	28
	.byte	'__size_t',0,15,1,1
	.word	294
	.byte	28
	.byte	'__ptrdiff_t',0,15,1,1
	.word	310
	.byte	29,1,6
	.word	32392
	.byte	28
	.byte	'__codeptr',0,15,1,1
	.word	32394
	.byte	16,16,49,9,1,17
	.byte	'IfxSrc_Tos_cpu0',0,0,17
	.byte	'IfxSrc_Tos_cpu1',0,1,17
	.byte	'IfxSrc_Tos_cpu2',0,2,17
	.byte	'IfxSrc_Tos_dma',0,3,0,28
	.byte	'IfxSrc_Tos',0,16,55,3
	.word	32417
	.byte	28
	.byte	'uint8',0,17,89,24
	.word	317
	.byte	28
	.byte	'sint16',0,17,90,24
	.word	32324
	.byte	28
	.byte	'uint16',0,17,91,24
	.word	716
	.byte	28
	.byte	'sint32',0,17,92,24
	.word	28203
	.byte	28
	.byte	'uint32',0,17,93,24
	.word	10129
	.byte	28
	.byte	'float32',0,17,94,24
	.word	10358
	.byte	28
	.byte	'boolean',0,17,104,24
	.word	317
	.byte	4
	.byte	'long long int',0,8,5,28
	.byte	'sint64',0,18,36,28
	.word	32619
	.byte	28
	.byte	'uint64',0,18,37,28
	.word	181
	.byte	28
	.byte	'pvoid',0,18,40,28
	.word	213
	.byte	28
	.byte	'Ifx_TickTime',0,18,43,28
	.word	32619
	.byte	28
	.byte	'Ifx_Priority',0,18,67,16
	.word	716
	.byte	16,18,94,9,1,17
	.byte	'Ifx_RxSel_a',0,0,17
	.byte	'Ifx_RxSel_b',0,1,17
	.byte	'Ifx_RxSel_c',0,2,17
	.byte	'Ifx_RxSel_d',0,3,17
	.byte	'Ifx_RxSel_e',0,4,17
	.byte	'Ifx_RxSel_f',0,5,17
	.byte	'Ifx_RxSel_g',0,6,17
	.byte	'Ifx_RxSel_h',0,7,0,28
	.byte	'Ifx_RxSel',0,18,104,3
	.word	32722
	.byte	28
	.byte	'Ifx_SRC_SRCR_Bits',0,4,62,3
	.word	334
	.byte	28
	.byte	'Ifx_SRC_SRCR',0,4,78,3
	.word	624
	.byte	9
	.byte	'_Ifx_SRC_AGBT',0,4,89,25,4,12
	.byte	'SR',0
	.word	624
	.byte	4,2,35,0,0,13
	.word	32905
	.byte	28
	.byte	'Ifx_SRC_AGBT',0,4,92,3
	.word	32937
	.byte	9
	.byte	'_Ifx_SRC_ASCLIN',0,4,95,25,12,12
	.byte	'TX',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	624
	.byte	4,2,35,8,0,13
	.word	32963
	.byte	28
	.byte	'Ifx_SRC_ASCLIN',0,4,100,3
	.word	33022
	.byte	9
	.byte	'_Ifx_SRC_BCUSPB',0,4,103,25,4,12
	.byte	'SBSRC',0
	.word	624
	.byte	4,2,35,0,0,13
	.word	33050
	.byte	28
	.byte	'Ifx_SRC_BCUSPB',0,4,106,3
	.word	33087
	.byte	14,64
	.word	624
	.byte	15,15,0,9
	.byte	'_Ifx_SRC_CAN',0,4,109,25,64,12
	.byte	'INT',0
	.word	33115
	.byte	64,2,35,0,0,13
	.word	33124
	.byte	28
	.byte	'Ifx_SRC_CAN',0,4,112,3
	.word	33156
	.byte	9
	.byte	'_Ifx_SRC_CCU6',0,4,115,25,16,12
	.byte	'SR0',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	624
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	624
	.byte	4,2,35,12,0,13
	.word	33181
	.byte	28
	.byte	'Ifx_SRC_CCU6',0,4,121,3
	.word	33253
	.byte	14,8
	.word	624
	.byte	15,1,0,9
	.byte	'_Ifx_SRC_CERBERUS',0,4,124,25,8,12
	.byte	'SR',0
	.word	33279
	.byte	8,2,35,0,0,13
	.word	33288
	.byte	28
	.byte	'Ifx_SRC_CERBERUS',0,4,127,3
	.word	33324
	.byte	9
	.byte	'_Ifx_SRC_CIF',0,4,130,1,25,16,12
	.byte	'MI',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'MIEP',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'ISP',0
	.word	624
	.byte	4,2,35,8,12
	.byte	'MJPEG',0
	.word	624
	.byte	4,2,35,12,0,13
	.word	33354
	.byte	28
	.byte	'Ifx_SRC_CIF',0,4,136,1,3
	.word	33428
	.byte	9
	.byte	'_Ifx_SRC_CPU',0,4,139,1,25,4,12
	.byte	'SBSRC',0
	.word	624
	.byte	4,2,35,0,0,13
	.word	33454
	.byte	28
	.byte	'Ifx_SRC_CPU',0,4,142,1,3
	.word	33489
	.byte	14,24
	.word	624
	.byte	15,5,0,9
	.byte	'_Ifx_SRC_DAM',0,4,145,1,25,24,12
	.byte	'SR',0
	.word	33515
	.byte	24,2,35,0,0,13
	.word	33524
	.byte	28
	.byte	'Ifx_SRC_DAM',0,4,148,1,3
	.word	33556
	.byte	14,128,2
	.word	624
	.byte	15,63,0,9
	.byte	'_Ifx_SRC_DMA',0,4,151,1,25,144,2,12
	.byte	'ERR',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	4812
	.byte	12,2,35,4,12
	.byte	'CH',0
	.word	33582
	.byte	128,2,2,35,16,0,13
	.word	33592
	.byte	28
	.byte	'Ifx_SRC_DMA',0,4,156,1,3
	.word	33659
	.byte	9
	.byte	'_Ifx_SRC_DSADC',0,4,159,1,25,8,12
	.byte	'SRM',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'SRA',0
	.word	624
	.byte	4,2,35,4,0,13
	.word	33685
	.byte	28
	.byte	'Ifx_SRC_DSADC',0,4,163,1,3
	.word	33733
	.byte	9
	.byte	'_Ifx_SRC_EMEM',0,4,166,1,25,4,12
	.byte	'SR',0
	.word	624
	.byte	4,2,35,0,0,13
	.word	33761
	.byte	28
	.byte	'Ifx_SRC_EMEM',0,4,169,1,3
	.word	33794
	.byte	9
	.byte	'_Ifx_SRC_ERAY',0,4,172,1,25,80,12
	.byte	'INT',0
	.word	33279
	.byte	8,2,35,0,12
	.byte	'TINT',0
	.word	33279
	.byte	8,2,35,8,12
	.byte	'NDAT',0
	.word	33279
	.byte	8,2,35,16,12
	.byte	'MBSC',0
	.word	33279
	.byte	8,2,35,24,12
	.byte	'OBUSY',0
	.word	624
	.byte	4,2,35,32,12
	.byte	'IBUSY',0
	.word	624
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	18769
	.byte	40,2,35,40,0,13
	.word	33821
	.byte	28
	.byte	'Ifx_SRC_ERAY',0,4,181,1,3
	.word	33948
	.byte	9
	.byte	'_Ifx_SRC_ETH',0,4,184,1,25,4,12
	.byte	'SR',0
	.word	624
	.byte	4,2,35,0,0,13
	.word	33975
	.byte	28
	.byte	'Ifx_SRC_ETH',0,4,187,1,3
	.word	34007
	.byte	9
	.byte	'_Ifx_SRC_FCE',0,4,190,1,25,4,12
	.byte	'SR',0
	.word	624
	.byte	4,2,35,0,0,13
	.word	34033
	.byte	28
	.byte	'Ifx_SRC_FCE',0,4,193,1,3
	.word	34065
	.byte	9
	.byte	'_Ifx_SRC_GPSR',0,4,196,1,25,32,12
	.byte	'SR0',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	624
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	624
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	13080
	.byte	16,2,35,16,0,13
	.word	34091
	.byte	28
	.byte	'Ifx_SRC_GPSR',0,4,203,1,3
	.word	34185
	.byte	9
	.byte	'_Ifx_SRC_GPT12',0,4,206,1,25,48,12
	.byte	'CIRQ',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'T2',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'T3',0
	.word	624
	.byte	4,2,35,8,12
	.byte	'T4',0
	.word	624
	.byte	4,2,35,12,12
	.byte	'T5',0
	.word	624
	.byte	4,2,35,16,12
	.byte	'T6',0
	.word	624
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	3843
	.byte	24,2,35,24,0,13
	.word	34212
	.byte	28
	.byte	'Ifx_SRC_GPT12',0,4,215,1,3
	.word	34329
	.byte	14,12
	.word	624
	.byte	15,2,0,14,32
	.word	624
	.byte	15,7,0,14,32
	.word	34366
	.byte	15,0,0,14,88
	.word	317
	.byte	15,87,0,14,108
	.word	624
	.byte	15,26,0,14,96
	.word	317
	.byte	15,95,0,14,128,1
	.word	34366
	.byte	15,3,0,14,128,3
	.word	317
	.byte	15,255,2,0,14,96
	.word	34366
	.byte	15,2,0,14,160,3
	.word	317
	.byte	15,159,3,0,14,16
	.word	624
	.byte	15,3,0,14,80
	.word	34452
	.byte	15,4,0,14,176,2
	.word	317
	.byte	15,175,2,0,14,48
	.word	317
	.byte	15,47,0,9
	.byte	'_Ifx_SRC_GTM',0,4,218,1,25,208,18,12
	.byte	'AEIIRQ',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'ARUIRQ',0
	.word	34357
	.byte	12,2,35,4,12
	.byte	'reserved_10',0
	.word	2653
	.byte	4,2,35,16,12
	.byte	'BRCIRQ',0
	.word	624
	.byte	4,2,35,20,12
	.byte	'CMPIRQ',0
	.word	624
	.byte	4,2,35,24,12
	.byte	'SPEIRQ',0
	.word	33279
	.byte	8,2,35,28,12
	.byte	'reserved_24',0
	.word	4472
	.byte	8,2,35,36,12
	.byte	'PSM',0
	.word	34375
	.byte	32,2,35,44,12
	.byte	'reserved_4C',0
	.word	34384
	.byte	88,2,35,76,12
	.byte	'DPLL',0
	.word	34393
	.byte	108,3,35,164,1,12
	.byte	'reserved_110',0
	.word	34402
	.byte	96,3,35,144,2,12
	.byte	'ERR',0
	.word	624
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	4812
	.byte	12,3,35,244,2,12
	.byte	'TIM',0
	.word	34411
	.byte	128,1,3,35,128,3,12
	.byte	'reserved_200',0
	.word	34421
	.byte	128,3,3,35,128,4,12
	.byte	'MCS',0
	.word	34411
	.byte	128,1,3,35,128,7,12
	.byte	'reserved_400',0
	.word	34421
	.byte	128,3,3,35,128,8,12
	.byte	'TOM',0
	.word	34432
	.byte	96,3,35,128,11,12
	.byte	'reserved_5E0',0
	.word	34441
	.byte	160,3,3,35,224,11,12
	.byte	'ATOM',0
	.word	34461
	.byte	80,3,35,128,15,12
	.byte	'reserved_7D0',0
	.word	34470
	.byte	176,2,3,35,208,15,12
	.byte	'MCSW0',0
	.word	34452
	.byte	16,3,35,128,18,12
	.byte	'reserved_910',0
	.word	34481
	.byte	48,3,35,144,18,12
	.byte	'MCSW1',0
	.word	34452
	.byte	16,3,35,192,18,0,13
	.word	34490
	.byte	28
	.byte	'Ifx_SRC_GTM',0,4,244,1,3
	.word	34952
	.byte	9
	.byte	'_Ifx_SRC_HSCT',0,4,247,1,25,4,12
	.byte	'SR',0
	.word	624
	.byte	4,2,35,0,0,13
	.word	34978
	.byte	28
	.byte	'Ifx_SRC_HSCT',0,4,250,1,3
	.word	35011
	.byte	9
	.byte	'_Ifx_SRC_HSM',0,4,253,1,25,8,12
	.byte	'HSM',0
	.word	33279
	.byte	8,2,35,0,0,13
	.word	35038
	.byte	28
	.byte	'Ifx_SRC_HSM',0,4,128,2,3
	.word	35071
	.byte	9
	.byte	'_Ifx_SRC_HSSL',0,4,131,2,25,16,12
	.byte	'COK',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'RDI',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	624
	.byte	4,2,35,8,12
	.byte	'TRG',0
	.word	624
	.byte	4,2,35,12,0,13
	.word	35097
	.byte	28
	.byte	'Ifx_SRC_HSSL',0,4,137,2,3
	.word	35170
	.byte	14,56
	.word	317
	.byte	15,55,0,9
	.byte	'_Ifx_SRC_I2C',0,4,140,2,25,80,12
	.byte	'BREQ',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'LBREQ',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'SREQ',0
	.word	624
	.byte	4,2,35,8,12
	.byte	'LSREQ',0
	.word	624
	.byte	4,2,35,12,12
	.byte	'ERR',0
	.word	624
	.byte	4,2,35,16,12
	.byte	'P',0
	.word	624
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	35197
	.byte	56,2,35,24,0,13
	.word	35206
	.byte	28
	.byte	'Ifx_SRC_I2C',0,4,149,2,3
	.word	35329
	.byte	9
	.byte	'_Ifx_SRC_LMU',0,4,152,2,25,4,12
	.byte	'SR',0
	.word	624
	.byte	4,2,35,0,0,13
	.word	35355
	.byte	28
	.byte	'Ifx_SRC_LMU',0,4,155,2,3
	.word	35387
	.byte	9
	.byte	'_Ifx_SRC_MSC',0,4,158,2,25,20,12
	.byte	'SR0',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	624
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	624
	.byte	4,2,35,12,12
	.byte	'SR4',0
	.word	624
	.byte	4,2,35,16,0,13
	.word	35413
	.byte	28
	.byte	'Ifx_SRC_MSC',0,4,165,2,3
	.word	35498
	.byte	9
	.byte	'_Ifx_SRC_PMU',0,4,168,2,25,4,12
	.byte	'SR',0
	.word	624
	.byte	4,2,35,0,0,13
	.word	35524
	.byte	28
	.byte	'Ifx_SRC_PMU',0,4,171,2,3
	.word	35556
	.byte	9
	.byte	'_Ifx_SRC_PSI5',0,4,174,2,25,32,12
	.byte	'SR',0
	.word	34366
	.byte	32,2,35,0,0,13
	.word	35582
	.byte	28
	.byte	'Ifx_SRC_PSI5',0,4,177,2,3
	.word	35615
	.byte	9
	.byte	'_Ifx_SRC_PSI5S',0,4,180,2,25,32,12
	.byte	'SR',0
	.word	34366
	.byte	32,2,35,0,0,13
	.word	35642
	.byte	28
	.byte	'Ifx_SRC_PSI5S',0,4,183,2,3
	.word	35676
	.byte	9
	.byte	'_Ifx_SRC_QSPI',0,4,186,2,25,24,12
	.byte	'TX',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	624
	.byte	4,2,35,8,12
	.byte	'PT',0
	.word	624
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	2653
	.byte	4,2,35,16,12
	.byte	'U',0
	.word	624
	.byte	4,2,35,20,0,13
	.word	35704
	.byte	28
	.byte	'Ifx_SRC_QSPI',0,4,194,2,3
	.word	35806
	.byte	9
	.byte	'_Ifx_SRC_SCU',0,4,197,2,25,20,12
	.byte	'DTS',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'ERU',0
	.word	34452
	.byte	16,2,35,4,0,13
	.word	35833
	.byte	28
	.byte	'Ifx_SRC_SCU',0,4,201,2,3
	.word	35879
	.byte	14,40
	.word	624
	.byte	15,9,0,9
	.byte	'_Ifx_SRC_SENT',0,4,204,2,25,40,12
	.byte	'SR',0
	.word	35905
	.byte	40,2,35,0,0,13
	.word	35914
	.byte	28
	.byte	'Ifx_SRC_SENT',0,4,207,2,3
	.word	35947
	.byte	9
	.byte	'_Ifx_SRC_SMU',0,4,210,2,25,12,12
	.byte	'SR',0
	.word	34357
	.byte	12,2,35,0,0,13
	.word	35974
	.byte	28
	.byte	'Ifx_SRC_SMU',0,4,213,2,3
	.word	36006
	.byte	9
	.byte	'_Ifx_SRC_STM',0,4,216,2,25,8,12
	.byte	'SR0',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	624
	.byte	4,2,35,4,0,13
	.word	36032
	.byte	28
	.byte	'Ifx_SRC_STM',0,4,220,2,3
	.word	36078
	.byte	9
	.byte	'_Ifx_SRC_VADCCG',0,4,223,2,25,16,12
	.byte	'SR0',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	624
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	624
	.byte	4,2,35,12,0,13
	.word	36104
	.byte	28
	.byte	'Ifx_SRC_VADCCG',0,4,229,2,3
	.word	36179
	.byte	9
	.byte	'_Ifx_SRC_VADCG',0,4,232,2,25,16,12
	.byte	'SR0',0
	.word	624
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	624
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	624
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	624
	.byte	4,2,35,12,0,13
	.word	36208
	.byte	28
	.byte	'Ifx_SRC_VADCG',0,4,238,2,3
	.word	36282
	.byte	9
	.byte	'_Ifx_SRC_XBAR',0,4,241,2,25,4,12
	.byte	'SRC',0
	.word	624
	.byte	4,2,35,0,0,13
	.word	36310
	.byte	28
	.byte	'Ifx_SRC_XBAR',0,4,244,2,3
	.word	36344
	.byte	14,4
	.word	32905
	.byte	15,0,0,13
	.word	36371
	.byte	9
	.byte	'_Ifx_SRC_GAGBT',0,4,129,3,25,4,12
	.byte	'AGBT',0
	.word	36380
	.byte	4,2,35,0,0,13
	.word	36385
	.byte	28
	.byte	'Ifx_SRC_GAGBT',0,4,132,3,3
	.word	36421
	.byte	14,48
	.word	32963
	.byte	15,3,0,13
	.word	36449
	.byte	9
	.byte	'_Ifx_SRC_GASCLIN',0,4,135,3,25,48,12
	.byte	'ASCLIN',0
	.word	36458
	.byte	48,2,35,0,0,13
	.word	36463
	.byte	28
	.byte	'Ifx_SRC_GASCLIN',0,4,138,3,3
	.word	36503
	.byte	13
	.word	33050
	.byte	9
	.byte	'_Ifx_SRC_GBCU',0,4,141,3,25,4,12
	.byte	'SPB',0
	.word	36533
	.byte	4,2,35,0,0,13
	.word	36538
	.byte	28
	.byte	'Ifx_SRC_GBCU',0,4,144,3,3
	.word	36572
	.byte	14,64
	.word	33124
	.byte	15,0,0,13
	.word	36599
	.byte	9
	.byte	'_Ifx_SRC_GCAN',0,4,147,3,25,64,12
	.byte	'CAN',0
	.word	36608
	.byte	64,2,35,0,0,13
	.word	36613
	.byte	28
	.byte	'Ifx_SRC_GCAN',0,4,150,3,3
	.word	36647
	.byte	14,32
	.word	33181
	.byte	15,1,0,13
	.word	36674
	.byte	9
	.byte	'_Ifx_SRC_GCCU6',0,4,153,3,25,32,12
	.byte	'CCU6',0
	.word	36683
	.byte	32,2,35,0,0,13
	.word	36688
	.byte	28
	.byte	'Ifx_SRC_GCCU6',0,4,156,3,3
	.word	36724
	.byte	13
	.word	33288
	.byte	9
	.byte	'_Ifx_SRC_GCERBERUS',0,4,159,3,25,8,12
	.byte	'CERBERUS',0
	.word	36752
	.byte	8,2,35,0,0,13
	.word	36757
	.byte	28
	.byte	'Ifx_SRC_GCERBERUS',0,4,162,3,3
	.word	36801
	.byte	14,16
	.word	33354
	.byte	15,0,0,13
	.word	36833
	.byte	9
	.byte	'_Ifx_SRC_GCIF',0,4,165,3,25,16,12
	.byte	'CIF',0
	.word	36842
	.byte	16,2,35,0,0,13
	.word	36847
	.byte	28
	.byte	'Ifx_SRC_GCIF',0,4,168,3,3
	.word	36881
	.byte	14,12
	.word	33454
	.byte	15,2,0,13
	.word	36908
	.byte	9
	.byte	'_Ifx_SRC_GCPU',0,4,171,3,25,12,12
	.byte	'CPU',0
	.word	36917
	.byte	12,2,35,0,0,13
	.word	36922
	.byte	28
	.byte	'Ifx_SRC_GCPU',0,4,174,3,3
	.word	36956
	.byte	14,24
	.word	33524
	.byte	15,0,0,13
	.word	36983
	.byte	9
	.byte	'_Ifx_SRC_GDAM',0,4,177,3,25,24,12
	.byte	'DAM',0
	.word	36992
	.byte	24,2,35,0,0,13
	.word	36997
	.byte	28
	.byte	'Ifx_SRC_GDAM',0,4,180,3,3
	.word	37031
	.byte	14,144,2
	.word	33592
	.byte	15,0,0,13
	.word	37058
	.byte	9
	.byte	'_Ifx_SRC_GDMA',0,4,183,3,25,144,2,12
	.byte	'DMA',0
	.word	37068
	.byte	144,2,2,35,0,0,13
	.word	37073
	.byte	28
	.byte	'Ifx_SRC_GDMA',0,4,186,3,3
	.word	37109
	.byte	14,48
	.word	33685
	.byte	15,5,0,13
	.word	37136
	.byte	9
	.byte	'_Ifx_SRC_GDSADC',0,4,189,3,25,48,12
	.byte	'DSADC',0
	.word	37145
	.byte	48,2,35,0,0,13
	.word	37150
	.byte	28
	.byte	'Ifx_SRC_GDSADC',0,4,192,3,3
	.word	37188
	.byte	14,4
	.word	33761
	.byte	15,0,0,13
	.word	37217
	.byte	9
	.byte	'_Ifx_SRC_GEMEM',0,4,195,3,25,4,12
	.byte	'EMEM',0
	.word	37226
	.byte	4,2,35,0,0,13
	.word	37231
	.byte	28
	.byte	'Ifx_SRC_GEMEM',0,4,198,3,3
	.word	37267
	.byte	14,80
	.word	33821
	.byte	15,0,0,13
	.word	37295
	.byte	9
	.byte	'_Ifx_SRC_GERAY',0,4,201,3,25,80,12
	.byte	'ERAY',0
	.word	37304
	.byte	80,2,35,0,0,13
	.word	37309
	.byte	28
	.byte	'Ifx_SRC_GERAY',0,4,204,3,3
	.word	37345
	.byte	14,4
	.word	33975
	.byte	15,0,0,13
	.word	37373
	.byte	9
	.byte	'_Ifx_SRC_GETH',0,4,207,3,25,4,12
	.byte	'ETH',0
	.word	37382
	.byte	4,2,35,0,0,13
	.word	37387
	.byte	28
	.byte	'Ifx_SRC_GETH',0,4,210,3,3
	.word	37421
	.byte	14,4
	.word	34033
	.byte	15,0,0,13
	.word	37448
	.byte	9
	.byte	'_Ifx_SRC_GFCE',0,4,213,3,25,4,12
	.byte	'FCE',0
	.word	37457
	.byte	4,2,35,0,0,13
	.word	37462
	.byte	28
	.byte	'Ifx_SRC_GFCE',0,4,216,3,3
	.word	37496
	.byte	14,96
	.word	34091
	.byte	15,2,0,13
	.word	37523
	.byte	9
	.byte	'_Ifx_SRC_GGPSR',0,4,219,3,25,96,12
	.byte	'GPSR',0
	.word	37532
	.byte	96,2,35,0,0,13
	.word	37537
	.byte	28
	.byte	'Ifx_SRC_GGPSR',0,4,222,3,3
	.word	37573
	.byte	14,48
	.word	34212
	.byte	15,0,0,13
	.word	37601
	.byte	9
	.byte	'_Ifx_SRC_GGPT12',0,4,225,3,25,48,12
	.byte	'GPT12',0
	.word	37610
	.byte	48,2,35,0,0,13
	.word	37615
	.byte	28
	.byte	'Ifx_SRC_GGPT12',0,4,228,3,3
	.word	37653
	.byte	14,208,18
	.word	34490
	.byte	15,0,0,13
	.word	37682
	.byte	9
	.byte	'_Ifx_SRC_GGTM',0,4,231,3,25,208,18,12
	.byte	'GTM',0
	.word	37692
	.byte	208,18,2,35,0,0,13
	.word	37697
	.byte	28
	.byte	'Ifx_SRC_GGTM',0,4,234,3,3
	.word	37733
	.byte	14,4
	.word	34978
	.byte	15,0,0,13
	.word	37760
	.byte	9
	.byte	'_Ifx_SRC_GHSCT',0,4,237,3,25,4,12
	.byte	'HSCT',0
	.word	37769
	.byte	4,2,35,0,0,13
	.word	37774
	.byte	28
	.byte	'Ifx_SRC_GHSCT',0,4,240,3,3
	.word	37810
	.byte	14,8
	.word	35038
	.byte	15,0,0,13
	.word	37838
	.byte	9
	.byte	'_Ifx_SRC_GHSM',0,4,243,3,25,8,12
	.byte	'HSM',0
	.word	37847
	.byte	8,2,35,0,0,13
	.word	37852
	.byte	28
	.byte	'Ifx_SRC_GHSM',0,4,246,3,3
	.word	37886
	.byte	14,64
	.word	35097
	.byte	15,3,0,13
	.word	37913
	.byte	9
	.byte	'_Ifx_SRC_GHSSL',0,4,249,3,25,68,12
	.byte	'HSSL',0
	.word	37922
	.byte	64,2,35,0,12
	.byte	'EXI',0
	.word	624
	.byte	4,2,35,64,0,13
	.word	37927
	.byte	28
	.byte	'Ifx_SRC_GHSSL',0,4,253,3,3
	.word	37976
	.byte	14,80
	.word	35206
	.byte	15,0,0,13
	.word	38004
	.byte	9
	.byte	'_Ifx_SRC_GI2C',0,4,128,4,25,80,12
	.byte	'I2C',0
	.word	38013
	.byte	80,2,35,0,0,13
	.word	38018
	.byte	28
	.byte	'Ifx_SRC_GI2C',0,4,131,4,3
	.word	38052
	.byte	14,4
	.word	35355
	.byte	15,0,0,13
	.word	38079
	.byte	9
	.byte	'_Ifx_SRC_GLMU',0,4,134,4,25,4,12
	.byte	'LMU',0
	.word	38088
	.byte	4,2,35,0,0,13
	.word	38093
	.byte	28
	.byte	'Ifx_SRC_GLMU',0,4,137,4,3
	.word	38127
	.byte	14,40
	.word	35413
	.byte	15,1,0,13
	.word	38154
	.byte	9
	.byte	'_Ifx_SRC_GMSC',0,4,140,4,25,40,12
	.byte	'MSC',0
	.word	38163
	.byte	40,2,35,0,0,13
	.word	38168
	.byte	28
	.byte	'Ifx_SRC_GMSC',0,4,143,4,3
	.word	38202
	.byte	14,8
	.word	35524
	.byte	15,1,0,13
	.word	38229
	.byte	9
	.byte	'_Ifx_SRC_GPMU',0,4,146,4,25,8,12
	.byte	'PMU',0
	.word	38238
	.byte	8,2,35,0,0,13
	.word	38243
	.byte	28
	.byte	'Ifx_SRC_GPMU',0,4,149,4,3
	.word	38277
	.byte	14,32
	.word	35582
	.byte	15,0,0,13
	.word	38304
	.byte	9
	.byte	'_Ifx_SRC_GPSI5',0,4,152,4,25,32,12
	.byte	'PSI5',0
	.word	38313
	.byte	32,2,35,0,0,13
	.word	38318
	.byte	28
	.byte	'Ifx_SRC_GPSI5',0,4,155,4,3
	.word	38354
	.byte	14,32
	.word	35642
	.byte	15,0,0,13
	.word	38382
	.byte	9
	.byte	'_Ifx_SRC_GPSI5S',0,4,158,4,25,32,12
	.byte	'PSI5S',0
	.word	38391
	.byte	32,2,35,0,0,13
	.word	38396
	.byte	28
	.byte	'Ifx_SRC_GPSI5S',0,4,161,4,3
	.word	38434
	.byte	14,96
	.word	35704
	.byte	15,3,0,13
	.word	38463
	.byte	9
	.byte	'_Ifx_SRC_GQSPI',0,4,164,4,25,96,12
	.byte	'QSPI',0
	.word	38472
	.byte	96,2,35,0,0,13
	.word	38477
	.byte	28
	.byte	'Ifx_SRC_GQSPI',0,4,167,4,3
	.word	38513
	.byte	13
	.word	35833
	.byte	9
	.byte	'_Ifx_SRC_GSCU',0,4,170,4,25,20,12
	.byte	'SCU',0
	.word	38541
	.byte	20,2,35,0,0,13
	.word	38546
	.byte	28
	.byte	'Ifx_SRC_GSCU',0,4,173,4,3
	.word	38580
	.byte	14,40
	.word	35914
	.byte	15,0,0,13
	.word	38607
	.byte	9
	.byte	'_Ifx_SRC_GSENT',0,4,176,4,25,40,12
	.byte	'SENT',0
	.word	38616
	.byte	40,2,35,0,0,13
	.word	38621
	.byte	28
	.byte	'Ifx_SRC_GSENT',0,4,179,4,3
	.word	38657
	.byte	14,12
	.word	35974
	.byte	15,0,0,13
	.word	38685
	.byte	9
	.byte	'_Ifx_SRC_GSMU',0,4,182,4,25,12,12
	.byte	'SMU',0
	.word	38694
	.byte	12,2,35,0,0,13
	.word	38699
	.byte	28
	.byte	'Ifx_SRC_GSMU',0,4,185,4,3
	.word	38733
	.byte	14,24
	.word	36032
	.byte	15,2,0,13
	.word	38760
	.byte	9
	.byte	'_Ifx_SRC_GSTM',0,4,188,4,25,24,12
	.byte	'STM',0
	.word	38769
	.byte	24,2,35,0,0,13
	.word	38774
	.byte	28
	.byte	'Ifx_SRC_GSTM',0,4,191,4,3
	.word	38808
	.byte	14,128,1
	.word	36208
	.byte	15,7,0,13
	.word	38835
	.byte	14,160,1
	.word	317
	.byte	15,159,1,0,14,32
	.word	36104
	.byte	15,1,0,13
	.word	38861
	.byte	9
	.byte	'_Ifx_SRC_GVADC',0,4,194,4,25,192,2,12
	.byte	'G',0
	.word	38845
	.byte	128,1,2,35,0,12
	.byte	'reserved_80',0
	.word	38850
	.byte	160,1,3,35,128,1,12
	.byte	'CG',0
	.word	38870
	.byte	32,3,35,160,2,0,13
	.word	38875
	.byte	28
	.byte	'Ifx_SRC_GVADC',0,4,199,4,3
	.word	38946
	.byte	13
	.word	36310
	.byte	9
	.byte	'_Ifx_SRC_GXBAR',0,4,202,4,25,4,12
	.byte	'XBAR',0
	.word	38974
	.byte	4,2,35,0,0,13
	.word	38979
	.byte	28
	.byte	'Ifx_SRC_GXBAR',0,4,205,4,3
	.word	39015
	.byte	28
	.byte	'IfxVadc_GroupId',0,14,105,3
	.word	30839
	.byte	14,160,1
	.word	10129
	.byte	15,39,0,19
	.word	39067
	.byte	30
	.byte	'IfxVadc_cfg_srcAddresses',0,14,111,25
	.word	39077
	.byte	1,1,28
	.byte	'Ifx_VADC_ACCEN0_Bits',0,12,83,3
	.word	11289
	.byte	28
	.byte	'Ifx_VADC_ACCPROT0_Bits',0,12,108,3
	.word	12290
	.byte	28
	.byte	'Ifx_VADC_ACCPROT1_Bits',0,12,132,1,3
	.word	12693
	.byte	28
	.byte	'Ifx_VADC_BRSCTRL_Bits',0,12,148,1,3
	.word	14375
	.byte	28
	.byte	'Ifx_VADC_BRSMR_Bits',0,12,165,1,3
	.word	14652
	.byte	28
	.byte	'Ifx_VADC_BRSPND_Bits',0,12,171,1,3
	.word	14278
	.byte	28
	.byte	'Ifx_VADC_BRSSEL_Bits',0,12,177,1,3
	.word	14172
	.byte	28
	.byte	'Ifx_VADC_CHCTR_Bits',0,12,197,1,3
	.word	23929
	.byte	28
	.byte	'Ifx_VADC_CLC_Bits',0,12,207,1,3
	.word	10454
	.byte	28
	.byte	'Ifx_VADC_EMUXSEL_Bits',0,12,215,1,3
	.word	15509
	.byte	28
	.byte	'Ifx_VADC_G_ALIAS_Bits',0,12,224,1,3
	.word	17383
	.byte	28
	.byte	'Ifx_VADC_G_ARBCFG_Bits',0,12,244,1,3
	.word	15652
	.byte	28
	.byte	'Ifx_VADC_G_ARBPR_Bits',0,12,135,2,3
	.word	15995
	.byte	28
	.byte	'Ifx_VADC_G_ASCTRL_Bits',0,12,154,2,3
	.word	20094
	.byte	28
	.byte	'Ifx_VADC_G_ASMR_Bits',0,12,171,2,3
	.word	20427
	.byte	28
	.byte	'Ifx_VADC_G_ASPND_Bits',0,12,177,2,3
	.word	20799
	.byte	28
	.byte	'Ifx_VADC_G_ASSEL_Bits',0,12,183,2,3
	.word	20712
	.byte	28
	.byte	'Ifx_VADC_G_BFL_Bits',0,12,203,2,3
	.word	17878
	.byte	28
	.byte	'Ifx_VADC_G_BFLC_Bits',0,12,213,2,3
	.word	18448
	.byte	28
	.byte	'Ifx_VADC_G_BFLNP_Bits',0,12,223,2,3
	.word	18604
	.byte	28
	.byte	'Ifx_VADC_G_BFLS_Bits',0,12,238,2,3
	.word	18206
	.byte	28
	.byte	'Ifx_VADC_G_BOUND_Bits',0,12,247,2,3
	.word	17534
	.byte	28
	.byte	'Ifx_VADC_G_CEFCLR_Bits',0,12,133,3,3
	.word	21597
	.byte	28
	.byte	'Ifx_VADC_G_CEFLAG_Bits',0,12,147,3,3
	.word	20895
	.byte	28
	.byte	'Ifx_VADC_G_CEVNP0_Bits',0,12,160,3,3
	.word	22299
	.byte	28
	.byte	'Ifx_VADC_G_CHASS_Bits',0,12,197,3,3
	.word	16328
	.byte	28
	.byte	'Ifx_VADC_G_EMUXCTR_Bits',0,12,212,3,3
	.word	23329
	.byte	28
	.byte	'Ifx_VADC_G_Q0R0_Bits',0,12,223,3,3
	.word	19561
	.byte	28
	.byte	'Ifx_VADC_G_QBUR0_Bits',0,12,234,3,3
	.word	19730
	.byte	28
	.byte	'Ifx_VADC_G_QCTRL0_Bits',0,12,253,3,3
	.word	18778
	.byte	28
	.byte	'Ifx_VADC_G_QINR0_Bits',0,12,135,4,3
	.word	19900
	.byte	28
	.byte	'Ifx_VADC_G_QMR0_Bits',0,12,150,4,3
	.word	19111
	.byte	28
	.byte	'Ifx_VADC_G_QSR0_Bits',0,12,162,4,3
	.word	19362
	.byte	28
	.byte	'Ifx_VADC_G_REFCLR_Bits',0,12,184,4,3
	.word	21818
	.byte	28
	.byte	'Ifx_VADC_G_REFLAG_Bits',0,12,206,4,3
	.word	21116
	.byte	28
	.byte	'Ifx_VADC_G_REVNP0_Bits',0,12,219,4,3
	.word	22514
	.byte	28
	.byte	'Ifx_VADC_G_REVNP1_Bits',0,12,232,4,3
	.word	22729
	.byte	28
	.byte	'Ifx_VADC_G_RRASS_Bits',0,12,254,4,3
	.word	16996
	.byte	28
	.byte	'Ifx_VADC_G_SEFCLR_Bits',0,12,134,5,3
	.word	22174
	.byte	28
	.byte	'Ifx_VADC_G_SEFLAG_Bits',0,12,142,5,3
	.word	21472
	.byte	28
	.byte	'Ifx_VADC_G_SEVNP_Bits',0,12,150,5,3
	.word	22950
	.byte	28
	.byte	'Ifx_VADC_G_SRACT_Bits',0,12,165,5,3
	.word	23078
	.byte	28
	.byte	'Ifx_VADC_G_SYNCTR_Bits',0,12,176,5,3
	.word	17692
	.byte	28
	.byte	'Ifx_VADC_G_VFR_Bits',0,12,198,5,3
	.word	23592
	.byte	28
	.byte	'Ifx_VADC_GLOBBOUND_Bits',0,12,207,5,3
	.word	13320
	.byte	28
	.byte	'Ifx_VADC_GLOBCFG_Bits',0,12,231,5,3
	.word	11868
	.byte	28
	.byte	'Ifx_VADC_GLOBEFLAG_Bits',0,12,244,5,3
	.word	13489
	.byte	28
	.byte	'Ifx_VADC_GLOBEVNP_Bits',0,12,253,5,3
	.word	13738
	.byte	28
	.byte	'Ifx_VADC_GLOBRCR_Bits',0,12,136,6,3
	.word	14945
	.byte	28
	.byte	'Ifx_VADC_GLOBRES_Bits',0,12,148,6,3
	.word	15141
	.byte	28
	.byte	'Ifx_VADC_GLOBRESD_Bits',0,12,160,6,3
	.word	15320
	.byte	28
	.byte	'Ifx_VADC_GLOBTF_Bits',0,12,177,6,3
	.word	13890
	.byte	28
	.byte	'Ifx_VADC_ICLASS_Bits',0,12,190,6,3
	.word	13089
	.byte	28
	.byte	'Ifx_VADC_ID_Bits',0,12,198,6,3
	.word	10612
	.byte	28
	.byte	'Ifx_VADC_KRST0_Bits',0,12,206,6,3
	.word	11165
	.byte	28
	.byte	'Ifx_VADC_KRST1_Bits',0,12,213,6,3
	.word	11060
	.byte	28
	.byte	'Ifx_VADC_KRSTCLR_Bits',0,12,220,6,3
	.word	10953
	.byte	28
	.byte	'Ifx_VADC_OCS_Bits',0,12,233,6,3
	.word	10746
	.byte	28
	.byte	'Ifx_VADC_RCR_Bits',0,12,246,6,3
	.word	24291
	.byte	28
	.byte	'Ifx_VADC_RES_Bits',0,12,130,7,3
	.word	24513
	.byte	28
	.byte	'Ifx_VADC_RESD_Bits',0,12,142,7,3
	.word	24697
	.byte	28
	.byte	'Ifx_VADC_ACCEN0',0,12,158,7,3
	.word	11819
	.byte	28
	.byte	'Ifx_VADC_ACCPROT0',0,12,169,7,3
	.word	12653
	.byte	28
	.byte	'Ifx_VADC_ACCPROT1',0,12,180,7,3
	.word	13040
	.byte	28
	.byte	'Ifx_VADC_BRSCTRL',0,12,191,7,3
	.word	14612
	.byte	28
	.byte	'Ifx_VADC_BRSMR',0,12,202,7,3
	.word	14896
	.byte	28
	.byte	'Ifx_VADC_BRSPND',0,12,213,7,3
	.word	14326
	.byte	28
	.byte	'Ifx_VADC_BRSSEL',0,12,224,7,3
	.word	14220
	.byte	28
	.byte	'Ifx_VADC_CHCTR',0,12,235,7,3
	.word	24242
	.byte	28
	.byte	'Ifx_VADC_CLC',0,12,246,7,3
	.word	10572
	.byte	28
	.byte	'Ifx_VADC_EMUXSEL',0,12,129,8,3
	.word	15601
	.byte	28
	.byte	'Ifx_VADC_G_ALIAS',0,12,140,8,3
	.word	17494
	.byte	28
	.byte	'Ifx_VADC_G_ARBCFG',0,12,151,8,3
	.word	15955
	.byte	28
	.byte	'Ifx_VADC_G_ARBPR',0,12,162,8,3
	.word	16288
	.byte	28
	.byte	'Ifx_VADC_G_ASCTRL',0,12,173,8,3
	.word	20387
	.byte	28
	.byte	'Ifx_VADC_G_ASMR',0,12,184,8,3
	.word	20672
	.byte	28
	.byte	'Ifx_VADC_G_ASPND',0,12,195,8,3
	.word	20846
	.byte	28
	.byte	'Ifx_VADC_G_ASSEL',0,12,206,8,3
	.word	20759
	.byte	28
	.byte	'Ifx_VADC_G_BFL',0,12,217,8,3
	.word	18166
	.byte	28
	.byte	'Ifx_VADC_G_BFLC',0,12,228,8,3
	.word	18564
	.byte	28
	.byte	'Ifx_VADC_G_BFLNP',0,12,239,8,3
	.word	18729
	.byte	28
	.byte	'Ifx_VADC_G_BFLS',0,12,250,8,3
	.word	18408
	.byte	28
	.byte	'Ifx_VADC_G_BOUND',0,12,133,9,3
	.word	17652
	.byte	28
	.byte	'Ifx_VADC_G_CEFCLR',0,12,144,9,3
	.word	21778
	.byte	28
	.byte	'Ifx_VADC_G_CEFLAG',0,12,155,9,3
	.word	21076
	.byte	28
	.byte	'Ifx_VADC_G_CEVNP0',0,12,166,9,3
	.word	22474
	.byte	28
	.byte	'Ifx_VADC_G_CHASS',0,12,177,9,3
	.word	16956
	.byte	28
	.byte	'Ifx_VADC_G_EMUXCTR',0,12,188,9,3
	.word	23552
	.byte	28
	.byte	'Ifx_VADC_G_Q0R0',0,12,199,9,3
	.word	19690
	.byte	28
	.byte	'Ifx_VADC_G_QBUR0',0,12,210,9,3
	.word	19860
	.byte	28
	.byte	'Ifx_VADC_G_QCTRL0',0,12,221,9,3
	.word	19071
	.byte	28
	.byte	'Ifx_VADC_G_QINR0',0,12,232,9,3
	.word	20017
	.byte	28
	.byte	'Ifx_VADC_G_QMR0',0,12,243,9,3
	.word	19322
	.byte	28
	.byte	'Ifx_VADC_G_QSR0',0,12,254,9,3
	.word	19521
	.byte	28
	.byte	'Ifx_VADC_G_REFCLR',0,12,137,10,3
	.word	22134
	.byte	28
	.byte	'Ifx_VADC_G_REFLAG',0,12,148,10,3
	.word	21432
	.byte	28
	.byte	'Ifx_VADC_G_REVNP0',0,12,159,10,3
	.word	22689
	.byte	28
	.byte	'Ifx_VADC_G_REVNP1',0,12,170,10,3
	.word	22910
	.byte	28
	.byte	'Ifx_VADC_G_RRASS',0,12,181,10,3
	.word	17343
	.byte	28
	.byte	'Ifx_VADC_G_SEFCLR',0,12,192,10,3
	.word	22259
	.byte	28
	.byte	'Ifx_VADC_G_SEFLAG',0,12,203,10,3
	.word	21557
	.byte	28
	.byte	'Ifx_VADC_G_SEVNP',0,12,214,10,3
	.word	23038
	.byte	28
	.byte	'Ifx_VADC_G_SRACT',0,12,225,10,3
	.word	23289
	.byte	28
	.byte	'Ifx_VADC_G_SYNCTR',0,12,236,10,3
	.word	17838
	.byte	28
	.byte	'Ifx_VADC_G_VFR',0,12,247,10,3
	.word	23889
	.byte	28
	.byte	'Ifx_VADC_GLOBBOUND',0,12,130,11,3
	.word	13440
	.byte	28
	.byte	'Ifx_VADC_GLOBCFG',0,12,141,11,3
	.word	12250
	.byte	28
	.byte	'Ifx_VADC_GLOBEFLAG',0,12,152,11,3
	.word	13689
	.byte	28
	.byte	'Ifx_VADC_GLOBEVNP',0,12,163,11,3
	.word	13850
	.byte	28
	.byte	'Ifx_VADC_GLOBRCR',0,12,174,11,3
	.word	15092
	.byte	28
	.byte	'Ifx_VADC_GLOBRES',0,12,185,11,3
	.word	15280
	.byte	28
	.byte	'Ifx_VADC_GLOBRESD',0,12,196,11,3
	.word	15460
	.byte	28
	.byte	'Ifx_VADC_GLOBTF',0,12,207,11,3
	.word	14132
	.byte	28
	.byte	'Ifx_VADC_ICLASS',0,12,218,11,3
	.word	13271
	.byte	28
	.byte	'Ifx_VADC_ID',0,12,229,11,3
	.word	10697
	.byte	28
	.byte	'Ifx_VADC_KRST0',0,12,240,11,3
	.word	11249
	.byte	28
	.byte	'Ifx_VADC_KRST1',0,12,251,11,3
	.word	11125
	.byte	28
	.byte	'Ifx_VADC_KRSTCLR',0,12,134,12,3
	.word	11020
	.byte	28
	.byte	'Ifx_VADC_OCS',0,12,145,12,3
	.word	10913
	.byte	28
	.byte	'Ifx_VADC_RCR',0,12,156,12,3
	.word	24464
	.byte	28
	.byte	'Ifx_VADC_RES',0,12,167,12,3
	.word	24648
	.byte	28
	.byte	'Ifx_VADC_RESD',0,12,178,12,3
	.word	24833
	.byte	13
	.word	24893
	.byte	28
	.byte	'Ifx_VADC_G',0,12,254,12,3
	.word	42544
	.byte	13
	.word	25977
	.byte	28
	.byte	'Ifx_VADC',0,12,184,13,3
	.word	42569
	.byte	28
	.byte	'Ifx_P_ACCEN0_Bits',0,8,79,3
	.word	8209
	.byte	28
	.byte	'Ifx_P_ACCEN1_Bits',0,8,85,3
	.word	8122
	.byte	28
	.byte	'Ifx_P_ESR_Bits',0,8,107,3
	.word	4481
	.byte	28
	.byte	'Ifx_P_ID_Bits',0,8,115,3
	.word	2534
	.byte	28
	.byte	'Ifx_P_IN_Bits',0,8,137,1,3
	.word	3529
	.byte	28
	.byte	'Ifx_P_IOCR0_Bits',0,8,150,1,3
	.word	2662
	.byte	28
	.byte	'Ifx_P_IOCR12_Bits',0,8,163,1,3
	.word	3309
	.byte	28
	.byte	'Ifx_P_IOCR4_Bits',0,8,176,1,3
	.word	2877
	.byte	28
	.byte	'Ifx_P_IOCR8_Bits',0,8,189,1,3
	.word	3092
	.byte	28
	.byte	'Ifx_P_LPCR0_Bits',0,8,197,1,3
	.word	7481
	.byte	28
	.byte	'Ifx_P_LPCR1_Bits',0,8,205,1,3
	.word	7605
	.byte	28
	.byte	'Ifx_P_LPCR1_P21_Bits',0,8,215,1,3
	.word	7689
	.byte	28
	.byte	'Ifx_P_LPCR2_Bits',0,8,229,1,3
	.word	7869
	.byte	28
	.byte	'Ifx_P_OMCR0_Bits',0,8,240,1,3
	.word	6120
	.byte	28
	.byte	'Ifx_P_OMCR12_Bits',0,8,250,1,3
	.word	6644
	.byte	28
	.byte	'Ifx_P_OMCR4_Bits',0,8,133,2,3
	.word	6294
	.byte	28
	.byte	'Ifx_P_OMCR8_Bits',0,8,144,2,3
	.word	6468
	.byte	28
	.byte	'Ifx_P_OMCR_Bits',0,8,166,2,3
	.word	7133
	.byte	28
	.byte	'Ifx_P_OMR_Bits',0,8,203,2,3
	.word	1963
	.byte	28
	.byte	'Ifx_P_OMSR0_Bits',0,8,213,2,3
	.word	5457
	.byte	28
	.byte	'Ifx_P_OMSR12_Bits',0,8,224,2,3
	.word	5945
	.byte	28
	.byte	'Ifx_P_OMSR4_Bits',0,8,235,2,3
	.word	5604
	.byte	28
	.byte	'Ifx_P_OMSR8_Bits',0,8,246,2,3
	.word	5773
	.byte	28
	.byte	'Ifx_P_OMSR_Bits',0,8,140,3,3
	.word	6800
	.byte	28
	.byte	'Ifx_P_OUT_Bits',0,8,162,3,3
	.word	1647
	.byte	28
	.byte	'Ifx_P_PCSR_Bits',0,8,179,3,3
	.word	5187
	.byte	28
	.byte	'Ifx_P_PDISC_Bits',0,8,201,3,3
	.word	4821
	.byte	28
	.byte	'Ifx_P_PDR0_Bits',0,8,222,3,3
	.word	3852
	.byte	28
	.byte	'Ifx_P_PDR1_Bits',0,8,243,3,3
	.word	4156
	.byte	28
	.byte	'Ifx_P_ACCEN0',0,8,131,4,3
	.word	8736
	.byte	28
	.byte	'Ifx_P_ACCEN1',0,8,142,4,3
	.word	8169
	.byte	28
	.byte	'Ifx_P_ESR',0,8,153,4,3
	.word	4772
	.byte	28
	.byte	'Ifx_P_ID',0,8,164,4,3
	.word	2613
	.byte	28
	.byte	'Ifx_P_IN',0,8,175,4,3
	.word	3803
	.byte	28
	.byte	'Ifx_P_IOCR0',0,8,186,4,3
	.word	2837
	.byte	28
	.byte	'Ifx_P_IOCR12',0,8,197,4,3
	.word	3489
	.byte	28
	.byte	'Ifx_P_IOCR4',0,8,208,4,3
	.word	3052
	.byte	28
	.byte	'Ifx_P_IOCR8',0,8,219,4,3
	.word	3269
	.byte	28
	.byte	'Ifx_P_LPCR0',0,8,230,4,3
	.word	7565
	.byte	28
	.byte	'Ifx_P_LPCR1',0,8,243,4,3
	.word	7814
	.byte	28
	.byte	'Ifx_P_LPCR2',0,8,254,4,3
	.word	8073
	.byte	28
	.byte	'Ifx_P_OMCR',0,8,137,5,3
	.word	7441
	.byte	28
	.byte	'Ifx_P_OMCR0',0,8,148,5,3
	.word	6254
	.byte	28
	.byte	'Ifx_P_OMCR12',0,8,159,5,3
	.word	6760
	.byte	28
	.byte	'Ifx_P_OMCR4',0,8,170,5,3
	.word	6428
	.byte	28
	.byte	'Ifx_P_OMCR8',0,8,181,5,3
	.word	6604
	.byte	28
	.byte	'Ifx_P_OMR',0,8,192,5,3
	.word	2494
	.byte	28
	.byte	'Ifx_P_OMSR',0,8,203,5,3
	.word	7093
	.byte	28
	.byte	'Ifx_P_OMSR0',0,8,214,5,3
	.word	5564
	.byte	28
	.byte	'Ifx_P_OMSR12',0,8,225,5,3
	.word	6080
	.byte	28
	.byte	'Ifx_P_OMSR4',0,8,236,5,3
	.word	5733
	.byte	28
	.byte	'Ifx_P_OMSR8',0,8,247,5,3
	.word	5905
	.byte	28
	.byte	'Ifx_P_OUT',0,8,130,6,3
	.word	1923
	.byte	28
	.byte	'Ifx_P_PCSR',0,8,141,6,3
	.word	5417
	.byte	28
	.byte	'Ifx_P_PDISC',0,8,152,6,3
	.word	5147
	.byte	28
	.byte	'Ifx_P_PDR0',0,8,163,6,3
	.word	4116
	.byte	28
	.byte	'Ifx_P_PDR1',0,8,174,6,3
	.word	4432
	.byte	13
	.word	8776
	.byte	28
	.byte	'Ifx_P',0,8,223,6,3
	.word	43910
	.byte	16,19,131,11,9,1,17
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,17
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,28
	.byte	'IfxScu_CCUCON0_CLKSEL',0,19,135,11,3
	.word	43930
	.byte	16,19,145,11,9,1,17
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,17
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,17
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,28
	.byte	'IfxScu_WDTCON1_IR',0,19,150,11,3
	.word	44027
	.byte	9
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,6,45,16,4,10
	.byte	'EN0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_ACCEN0_Bits',0,6,79,3
	.word	44149
	.byte	9
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,6,82,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN1_Bits',0,6,85,3
	.word	44706
	.byte	9
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,6,88,16,4,10
	.byte	'STM0DIS',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'STM1DIS',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'STM2DIS',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	294
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,6,94,3
	.word	44783
	.byte	9
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,6,97,16,4,10
	.byte	'BAUD1DIV',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'BAUD2DIV',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'SRIDIV',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'LPDIV',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'SPBDIV',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'FSI2DIV',0,1
	.word	317
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	317
	.byte	2,0,2,35,2,10
	.byte	'FSIDIV',0,1
	.word	317
	.byte	2,6,2,35,3,10
	.byte	'ADCCLKSEL',0,1
	.word	317
	.byte	2,4,2,35,3,10
	.byte	'CLKSEL',0,1
	.word	317
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON0_Bits',0,6,111,3
	.word	44919
	.byte	9
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,6,114,16,4,10
	.byte	'CANDIV',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'ERAYDIV',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'STMDIV',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'GTMDIV',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'ETHDIV',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'ASCLINFDIV',0,1
	.word	317
	.byte	4,0,2,35,2,10
	.byte	'ASCLINSDIV',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'INSEL',0,1
	.word	317
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON1_Bits',0,6,126,3
	.word	45197
	.byte	9
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,6,129,1,16,4,10
	.byte	'BBBDIV',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON2_Bits',0,6,135,1,3
	.word	45435
	.byte	9
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,6,138,1,16,4,10
	.byte	'PLLDIV',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'PLLSEL',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'PLLERAYDIV',0,1
	.word	317
	.byte	6,2,2,35,1,10
	.byte	'PLLERAYSEL',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'SRIDIV',0,1
	.word	317
	.byte	6,2,2,35,2,10
	.byte	'SRISEL',0,1
	.word	317
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	5,3,2,35,3,10
	.byte	'SLCK',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'UP',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON3_Bits',0,6,150,1,3
	.word	45563
	.byte	9
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,6,153,1,16,4,10
	.byte	'SPBDIV',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'SPBSEL',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'GTMDIV',0,1
	.word	317
	.byte	6,2,2,35,1,10
	.byte	'GTMSEL',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'STMDIV',0,1
	.word	317
	.byte	6,2,2,35,2,10
	.byte	'STMSEL',0,1
	.word	317
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	5,3,2,35,3,10
	.byte	'SLCK',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'UP',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON4_Bits',0,6,165,1,3
	.word	45806
	.byte	9
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,6,168,1,16,4,10
	.byte	'MAXDIV',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON5_Bits',0,6,174,1,3
	.word	46041
	.byte	9
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,6,177,1,16,4,10
	.byte	'CPU0DIV',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	294
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON6_Bits',0,6,181,1,3
	.word	46169
	.byte	9
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,6,184,1,16,4,10
	.byte	'CPU1DIV',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	294
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON7_Bits',0,6,188,1,3
	.word	46269
	.byte	9
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,6,191,1,16,4,10
	.byte	'CPU2DIV',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	294
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON8_Bits',0,6,195,1,3
	.word	46369
	.byte	9
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,6,198,1,16,4,10
	.byte	'ADCDIV',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'ADCSEL',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	21,3,2,35,0,10
	.byte	'SLCK',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'UP',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON9_Bits',0,6,206,1,3
	.word	46469
	.byte	9
	.byte	'_Ifx_SCU_CHIPID_Bits',0,6,209,1,16,4,10
	.byte	'CHREV',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'CHTEC',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'CHID',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'EEA',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'UCODE',0,1
	.word	317
	.byte	7,0,2,35,2,10
	.byte	'FSIZE',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'SP',0,1
	.word	317
	.byte	2,2,2,35,3,10
	.byte	'SEC',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CHIPID_Bits',0,6,220,1,3
	.word	46631
	.byte	9
	.byte	'_Ifx_SCU_DTSCON_Bits',0,6,223,1,16,4,10
	.byte	'PWD',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'START',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'CAL',0,4
	.word	294
	.byte	20,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'SLCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_DTSCON_Bits',0,6,231,1,3
	.word	46839
	.byte	9
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,6,234,1,16,4,10
	.byte	'LOWER',0,2
	.word	716
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	317
	.byte	5,1,2,35,1,10
	.byte	'LLU',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'UPPER',0,2
	.word	716
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	317
	.byte	4,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'UOF',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_DTSLIM_Bits',0,6,243,1,3
	.word	47004
	.byte	9
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,6,246,1,16,4,10
	.byte	'RESULT',0,2
	.word	716
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	317
	.byte	4,2,2,35,1,10
	.byte	'RDY',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'BUSY',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,6,253,1,3
	.word	47187
	.byte	9
	.byte	'_Ifx_SCU_EICR_Bits',0,6,128,2,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'EXIS0',0,1
	.word	317
	.byte	3,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'FEN0',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'REN0',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'LDEN0',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'EIEN0',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'INP0',0,1
	.word	317
	.byte	3,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	294
	.byte	5,12,2,35,0,10
	.byte	'EXIS1',0,1
	.word	317
	.byte	3,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'FEN1',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'REN1',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'LDEN1',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'EIEN1',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'INP1',0,1
	.word	317
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EICR_Bits',0,6,147,2,3
	.word	47341
	.byte	9
	.byte	'_Ifx_SCU_EIFR_Bits',0,6,150,2,16,4,10
	.byte	'INTF0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'INTF1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'INTF2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'INTF3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'INTF4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'INTF5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'INTF6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'INTF7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_EIFR_Bits',0,6,161,2,3
	.word	47705
	.byte	9
	.byte	'_Ifx_SCU_EMSR_Bits',0,6,164,2,16,4,10
	.byte	'POL',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'MODE',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'ENON',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'PSEL',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	716
	.byte	12,0,2,35,0,10
	.byte	'EMSF',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'SEMSF',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	317
	.byte	6,0,2,35,2,10
	.byte	'EMSFM',0,1
	.word	317
	.byte	2,6,2,35,3,10
	.byte	'SEMSFM',0,1
	.word	317
	.byte	2,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	317
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_EMSR_Bits',0,6,177,2,3
	.word	47916
	.byte	9
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,6,180,2,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	7,1,2,35,0,10
	.byte	'EDCON',0,2
	.word	716
	.byte	2,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	294
	.byte	23,0,2,35,0,0,28
	.byte	'Ifx_SCU_ESRCFG_Bits',0,6,185,2,3
	.word	48168
	.byte	9
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,6,188,2,16,4,10
	.byte	'ARI',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ARC',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_ESROCFG_Bits',0,6,193,2,3
	.word	48286
	.byte	9
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,6,196,2,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	28,4,2,35,0,10
	.byte	'EVR13OFF',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'BPEVR13OFF',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVR13CON_Bits',0,6,203,2,3
	.word	48397
	.byte	9
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,6,206,2,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	28,4,2,35,0,10
	.byte	'EVR33OFF',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'BPEVR33OFF',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVR33CON_Bits',0,6,213,2,3
	.word	48560
	.byte	9
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,6,216,2,16,4,10
	.byte	'ADC13V',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'ADC33V',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'ADCSWDV',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,6,223,2,3
	.word	48723
	.byte	9
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,6,226,2,16,4,10
	.byte	'DVS13TRIM',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'DVS33TRIM',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,6,233,2,3
	.word	48881
	.byte	9
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,6,236,2,16,4,10
	.byte	'EVR13OVMOD',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'EVR13UVMOD',0,1
	.word	317
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'EVR33OVMOD',0,1
	.word	317
	.byte	2,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	317
	.byte	2,4,2,35,1,10
	.byte	'EVR33UVMOD',0,1
	.word	317
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'SWDOVMOD',0,1
	.word	317
	.byte	2,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	317
	.byte	2,4,2,35,2,10
	.byte	'SWDUVMOD',0,1
	.word	317
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	716
	.byte	8,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,6,252,2,3
	.word	49046
	.byte	9
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,6,255,2,16,4,10
	.byte	'OSCTRIM',0,2
	.word	716
	.byte	10,6,2,35,0,10
	.byte	'OSCPTAT',0,1
	.word	317
	.byte	6,0,2,35,1,10
	.byte	'OSCANASEL',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'HPBGTRIM',0,2
	.word	716
	.byte	7,5,2,35,2,10
	.byte	'HPBGCLKEN',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'OSC3V3',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	317
	.byte	2,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,6,137,3,3
	.word	49414
	.byte	9
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,6,140,3,16,4,10
	.byte	'EVR13OVVAL',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'EVR33OVVAL',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'SWDOVVAL',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVROVMON_Bits',0,6,148,3,3
	.word	49635
	.byte	9
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,6,151,3,16,4,10
	.byte	'RST13TRIM',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	16,8,2,35,0,10
	.byte	'RST13OFF',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'BPRST13OFF',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'RST33OFF',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'BPRST33OFF',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'RSTSWDOFF',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'BPRSTSWDOFF',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,6,163,3,3
	.word	49814
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,6,166,3,16,4,10
	.byte	'SD5P',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'SD5I',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'SD5D',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,6,173,3,3
	.word	50079
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,6,176,3,16,4,10
	.byte	'SD33P',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'SD33I',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'SD33D',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,6,183,3,3
	.word	50232
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,6,186,3,16,4,10
	.byte	'CT5REG0',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'CT5REG1',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'CT5REG2',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,6,193,3,3
	.word	50388
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,6,196,3,16,4,10
	.byte	'CT5REG3',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'CT5REG4',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	15,1,2,35,2,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,6,202,3,3
	.word	50550
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,6,205,3,16,4,10
	.byte	'CT33REG0',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'CT33REG1',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'CT33REG2',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,6,212,3,3
	.word	50693
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,6,215,3,16,4,10
	.byte	'CT33REG3',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'CT33REG4',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	15,1,2,35,2,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,6,221,3,3
	.word	50858
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,6,224,3,16,4,10
	.byte	'SDFREQSPRD',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'SDFREQ',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'SDSTEP',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	317
	.byte	2,2,2,35,3,10
	.byte	'SDSAMPLE',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,6,232,3,3
	.word	51003
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,6,235,3,16,4,10
	.byte	'DRVP',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'SDMINMAXDC',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'DRVN',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'SDLUT',0,1
	.word	317
	.byte	6,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,6,243,3,3
	.word	51184
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,6,246,3,16,4,10
	.byte	'SDPWMPRE',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'SDPID',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'SDVOKLVL',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,6,253,3,3
	.word	51358
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,6,128,4,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'SYNCDIV',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	294
	.byte	20,1,2,35,0,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,6,134,4,3
	.word	51518
	.byte	9
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,6,137,4,16,4,10
	.byte	'EVR13',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'OV13',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'EVR33',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'OV33',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'OVSWD',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'UV13',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'UV33',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'UVSWD',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EXTPASS13',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'EXTPASS33',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'BGPROK',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	294
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,6,151,4,3
	.word	51662
	.byte	9
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,6,154,4,16,4,10
	.byte	'EVR13TRIM',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'SDVOUTSEL',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	14,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,6,161,4,3
	.word	51936
	.byte	9
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,6,164,4,16,4,10
	.byte	'EVR13UVVAL',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'EVR33UVVAL',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'SWDUVVAL',0,1
	.word	317
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,6,172,4,3
	.word	52091
	.byte	9
	.byte	'_Ifx_SCU_EXTCON_Bits',0,6,175,4,16,4,10
	.byte	'EN0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'SEL0',0,1
	.word	317
	.byte	4,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	716
	.byte	10,0,2,35,0,10
	.byte	'EN1',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'NSEL',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'SEL1',0,1
	.word	317
	.byte	4,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	317
	.byte	2,0,2,35,2,10
	.byte	'DIV1',0,1
	.word	317
	.byte	8,0,2,35,3,0,28
	.byte	'Ifx_SCU_EXTCON_Bits',0,6,186,4,3
	.word	52270
	.byte	9
	.byte	'_Ifx_SCU_FDR_Bits',0,6,189,4,16,4,10
	.byte	'STEP',0,2
	.word	716
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	317
	.byte	4,2,2,35,1,10
	.byte	'DM',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'RESULT',0,2
	.word	716
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	317
	.byte	5,1,2,35,3,10
	.byte	'DISCLK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_FDR_Bits',0,6,197,4,3
	.word	52488
	.byte	9
	.byte	'_Ifx_SCU_FMR_Bits',0,6,200,4,16,4,10
	.byte	'FS0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'FS1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'FS2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'FS3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'FS4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'FS5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'FS6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'FS7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'FC0',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'FC1',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'FC2',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'FC3',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'FC4',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'FC5',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'FC6',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'FC7',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	8,0,2,35,3,0,28
	.byte	'Ifx_SCU_FMR_Bits',0,6,220,4,3
	.word	52651
	.byte	9
	.byte	'_Ifx_SCU_ID_Bits',0,6,223,4,16,4,10
	.byte	'MODREV',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_ID_Bits',0,6,228,4,3
	.word	52987
	.byte	9
	.byte	'_Ifx_SCU_IGCR_Bits',0,6,231,4,16,4,10
	.byte	'IPEN00',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'IPEN01',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'IPEN02',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'IPEN03',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'IPEN04',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'IPEN05',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'IPEN06',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'IPEN07',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	5,3,2,35,1,10
	.byte	'GEEN0',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'IGP0',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'IPEN10',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'IPEN11',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'IPEN12',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'IPEN13',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'IPEN14',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'IPEN15',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'IPEN16',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'IPEN17',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	5,3,2,35,3,10
	.byte	'GEEN1',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'IGP1',0,1
	.word	317
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_SCU_IGCR_Bits',0,6,255,4,3
	.word	53094
	.byte	9
	.byte	'_Ifx_SCU_IN_Bits',0,6,130,5,16,4,10
	.byte	'P0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_IN_Bits',0,6,135,5,3
	.word	53546
	.byte	9
	.byte	'_Ifx_SCU_IOCR_Bits',0,6,138,5,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'PC0',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'PC1',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_IOCR_Bits',0,6,145,5,3
	.word	53645
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,6,148,5,16,4,10
	.byte	'LBISTREQ',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'LBISTREQP',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'PATTERNS',0,2
	.word	716
	.byte	14,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,6,154,5,3
	.word	53795
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,6,157,5,16,4,10
	.byte	'SEED',0,4
	.word	294
	.byte	23,9,2,35,0,10
	.byte	'reserved_23',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'SPLITSH',0,1
	.word	317
	.byte	3,5,2,35,3,10
	.byte	'BODY',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'LBISTFREQU',0,1
	.word	317
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,6,164,5,3
	.word	53944
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,6,167,5,16,4,10
	.byte	'SIGNATURE',0,4
	.word	294
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	7,1,2,35,3,10
	.byte	'LBISTDONE',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,6,172,5,3
	.word	54105
	.byte	9
	.byte	'_Ifx_SCU_LCLCON_Bits',0,6,175,5,16,4,10
	.byte	'reserved_0',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'LS',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	716
	.byte	14,1,2,35,2,10
	.byte	'LSEN',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_LCLCON_Bits',0,6,181,5,3
	.word	54235
	.byte	9
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,6,184,5,16,4,10
	.byte	'LCLT0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'LCLT1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_LCLTEST_Bits',0,6,189,5,3
	.word	54367
	.byte	9
	.byte	'_Ifx_SCU_MANID_Bits',0,6,192,5,16,4,10
	.byte	'DEPT',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'MANUF',0,2
	.word	716
	.byte	11,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_MANID_Bits',0,6,197,5,3
	.word	54482
	.byte	9
	.byte	'_Ifx_SCU_OMR_Bits',0,6,200,5,16,4,10
	.byte	'PS0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	716
	.byte	14,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	716
	.byte	14,0,2,35,2,0,28
	.byte	'Ifx_SCU_OMR_Bits',0,6,208,5,3
	.word	54593
	.byte	9
	.byte	'_Ifx_SCU_OSCCON_Bits',0,6,211,5,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PLLLV',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'OSCRES',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'GAINSEL',0,1
	.word	317
	.byte	2,3,2,35,0,10
	.byte	'MODE',0,1
	.word	317
	.byte	2,1,2,35,0,10
	.byte	'SHBY',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'PLLHV',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'X1D',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'X1DEN',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'OSCVAL',0,1
	.word	317
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	317
	.byte	2,1,2,35,2,10
	.byte	'APREN',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'CAP0EN',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'CAP1EN',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'CAP2EN',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'CAP3EN',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	317
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_OSCCON_Bits',0,6,232,5,3
	.word	54751
	.byte	9
	.byte	'_Ifx_SCU_OUT_Bits',0,6,235,5,16,4,10
	.byte	'P0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_OUT_Bits',0,6,240,5,3
	.word	55163
	.byte	9
	.byte	'_Ifx_SCU_OVCCON_Bits',0,6,243,5,16,4,10
	.byte	'CSEL0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'CSEL1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'CSEL2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	716
	.byte	13,0,2,35,0,10
	.byte	'OVSTRT',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'OVSTP',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'DCINVAL',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	317
	.byte	5,0,2,35,2,10
	.byte	'OVCONF',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'POVCONF',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	317
	.byte	6,0,2,35,3,0,28
	.byte	'Ifx_SCU_OVCCON_Bits',0,6,128,6,3
	.word	55264
	.byte	9
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,6,131,6,16,4,10
	.byte	'OVEN0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'OVEN1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'OVEN2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	294
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,6,137,6,3
	.word	55531
	.byte	9
	.byte	'_Ifx_SCU_PDISC_Bits',0,6,140,6,16,4,10
	.byte	'PDIS0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDISC_Bits',0,6,145,6,3
	.word	55667
	.byte	9
	.byte	'_Ifx_SCU_PDR_Bits',0,6,148,6,16,4,10
	.byte	'PD0',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	317
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDR_Bits',0,6,155,6,3
	.word	55778
	.byte	9
	.byte	'_Ifx_SCU_PDRR_Bits',0,6,158,6,16,4,10
	.byte	'PDR0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PDR1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'PDR2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'PDR3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PDR4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'PDR5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'PDR6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PDR7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDRR_Bits',0,6,169,6,3
	.word	55911
	.byte	9
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,6,172,6,16,4,10
	.byte	'VCOBYP',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'MODEN',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	716
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	317
	.byte	7,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	317
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	317
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_PLLCON0_Bits',0,6,189,6,3
	.word	56114
	.byte	9
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,6,192,6,16,4,10
	.byte	'K2DIV',0,1
	.word	317
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	317
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	317
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	716
	.byte	9,0,2,35,2,0,28
	.byte	'Ifx_SCU_PLLCON1_Bits',0,6,200,6,3
	.word	56470
	.byte	9
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,6,203,6,16,4,10
	.byte	'MODCFG',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_PLLCON2_Bits',0,6,207,6,3
	.word	56648
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,6,210,6,16,4,10
	.byte	'VCOBYP',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	716
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	317
	.byte	5,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	317
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	317
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,6,227,6,3
	.word	56748
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,6,230,6,16,4,10
	.byte	'K2DIV',0,1
	.word	317
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	317
	.byte	4,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	317
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	716
	.byte	9,0,2,35,2,0,28
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,6,238,6,3
	.word	57118
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,6,241,6,16,4,10
	.byte	'VCOBYST',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PWDSTAT',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	294
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,6,250,6,3
	.word	57304
	.byte	9
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,6,253,6,16,4,10
	.byte	'VCOBYST',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'MODRUN',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,6,136,7,3
	.word	57502
	.byte	9
	.byte	'_Ifx_SCU_PMCSR_Bits',0,6,139,7,16,4,10
	.byte	'REQSLP',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'SMUSLP',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	317
	.byte	5,0,2,35,0,10
	.byte	'PMST',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	294
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR_Bits',0,6,146,7,3
	.word	57735
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,6,149,7,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ESR1WKEN',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'PINAWKEN',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'PINBWKEN',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'ESR0DFEN',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'ESR0EDCON',0,1
	.word	317
	.byte	2,1,2,35,0,10
	.byte	'ESR1DFEN',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'ESR1EDCON',0,1
	.word	317
	.byte	2,6,2,35,1,10
	.byte	'PINADFEN',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'PINAEDCON',0,1
	.word	317
	.byte	2,3,2,35,1,10
	.byte	'PINBDFEN',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'PINBEDCON',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'STBYRAMSEL',0,1
	.word	317
	.byte	2,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	317
	.byte	2,3,2,35,2,10
	.byte	'TRISTEN',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'TRISTREQ',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'PORSTDF',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'PWRWKEN',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'DCDCSYNC',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'BLNKFIL',0,1
	.word	317
	.byte	3,3,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,6,175,7,3
	.word	57887
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,6,178,7,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'CPUIDLSEL',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'IRADIS',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	294
	.byte	11,8,2,35,0,10
	.byte	'CPUSEL',0,1
	.word	317
	.byte	3,5,2,35,3,10
	.byte	'STBYEVEN',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'STBYEV',0,1
	.word	317
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,6,189,7,3
	.word	58435
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,6,192,7,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKP',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUN',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PINAWKP',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUN',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'PINBWKP',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUN',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'PWRWKP',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'PORSTDF',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'HWCFGEVR',0,1
	.word	317
	.byte	3,3,2,35,1,10
	.byte	'STBYRAM',0,1
	.word	317
	.byte	2,1,2,35,1,10
	.byte	'TRIST',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	317
	.byte	4,4,2,35,2,10
	.byte	'ESR1WKEN',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'PINAWKEN',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'PINBWKEN',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'PWRWKEN',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'BLNKFIL',0,1
	.word	317
	.byte	3,5,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	317
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,6,214,7,3
	.word	58680
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,6,217,7,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKPCLR',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUNCLR',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PINAWKPCLR',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUNCLR',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'PINBWKPCLR',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUNCLR',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'PWRWKPCLR',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	294
	.byte	23,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,6,228,7,3
	.word	59141
	.byte	9
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,6,231,7,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'CLRC',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	716
	.byte	10,4,2,35,0,10
	.byte	'CSS0',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'CSS1',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'CSS2',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'USRINFO',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_RSTCON2_Bits',0,6,241,7,3
	.word	59411
	.byte	9
	.byte	'_Ifx_SCU_RSTCON_Bits',0,6,244,7,16,4,10
	.byte	'ESR0',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'ESR1',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	317
	.byte	2,2,2,35,0,10
	.byte	'SMU',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'SW',0,1
	.word	317
	.byte	2,6,2,35,1,10
	.byte	'STM0',0,1
	.word	317
	.byte	2,4,2,35,1,10
	.byte	'STM1',0,1
	.word	317
	.byte	2,2,2,35,1,10
	.byte	'STM2',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_RSTCON_Bits',0,6,255,7,3
	.word	59620
	.byte	9
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,6,130,8,16,4,10
	.byte	'ESR0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ESR1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'SMU',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'SW',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'STM0',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'STM1',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'STM2',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'PORST',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'CB0',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'CB1',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'CB3',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	317
	.byte	2,1,2,35,2,10
	.byte	'EVR13',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'EVR33',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'SWD',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	317
	.byte	2,4,2,35,3,10
	.byte	'STBYR',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	317
	.byte	3,0,2,35,3,0,28
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,6,153,8,3
	.word	59831
	.byte	9
	.byte	'_Ifx_SCU_SAFECON_Bits',0,6,156,8,16,4,10
	.byte	'HBT',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	294
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_SCU_SAFECON_Bits',0,6,160,8,3
	.word	60263
	.byte	9
	.byte	'_Ifx_SCU_STSTAT_Bits',0,6,163,8,16,4,10
	.byte	'HWCFG',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'FTM',0,1
	.word	317
	.byte	7,1,2,35,1,10
	.byte	'MODE',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'FCBAE',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'LUDIS',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'TRSTL',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'SPDEN',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	317
	.byte	3,0,2,35,2,10
	.byte	'RAMINT',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	317
	.byte	7,0,2,35,3,0,28
	.byte	'Ifx_SCU_STSTAT_Bits',0,6,176,8,3
	.word	60359
	.byte	9
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,6,179,8,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'SWRSTREQ',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,6,184,8,3
	.word	60619
	.byte	9
	.byte	'_Ifx_SCU_SYSCON_Bits',0,6,187,8,16,4,10
	.byte	'CCTRIG0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'RAMINTM',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'SETLUDIS',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	317
	.byte	3,0,2,35,0,10
	.byte	'DATM',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	294
	.byte	23,0,2,35,0,0,28
	.byte	'Ifx_SCU_SYSCON_Bits',0,6,196,8,3
	.word	60744
	.byte	9
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,6,199,8,16,4,10
	.byte	'ESR0T',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,6,206,8,3
	.word	60941
	.byte	9
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,6,209,8,16,4,10
	.byte	'ESR0T',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,6,216,8,3
	.word	61094
	.byte	9
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,6,219,8,16,4,10
	.byte	'ESR0T',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSET_Bits',0,6,226,8,3
	.word	61247
	.byte	9
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,6,229,8,16,4,10
	.byte	'ESR0T',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,6,236,8,3
	.word	61400
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,6,245,8,3
	.word	738
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,6,132,9,3
	.word	874
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,6,148,9,3
	.word	1118
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,6,151,9,16,4,10
	.byte	'ENDINIT',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'LCK',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'PW',0,2
	.word	716
	.byte	14,0,2,35,0,10
	.byte	'REL',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,6,157,9,3
	.word	61655
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,6,160,9,16,4,10
	.byte	'CLRIRF',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'IR0',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	317
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,6,173,9,3
	.word	61781
	.byte	9
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,6,176,9,16,4,10
	.byte	'AE',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	317
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,6,189,9,3
	.word	62033
	.byte	11,6,197,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44149
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN0',0,6,205,9,3
	.word	62252
	.byte	11,6,208,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44706
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN1',0,6,216,9,3
	.word	62316
	.byte	11,6,219,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44783
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ARSTDIS',0,6,227,9,3
	.word	62380
	.byte	11,6,230,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44919
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON0',0,6,238,9,3
	.word	62445
	.byte	11,6,241,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45197
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON1',0,6,249,9,3
	.word	62510
	.byte	11,6,252,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45435
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON2',0,6,132,10,3
	.word	62575
	.byte	11,6,135,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45563
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON3',0,6,143,10,3
	.word	62640
	.byte	11,6,146,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45806
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON4',0,6,154,10,3
	.word	62705
	.byte	11,6,157,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46041
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON5',0,6,165,10,3
	.word	62770
	.byte	11,6,168,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46169
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON6',0,6,176,10,3
	.word	62835
	.byte	11,6,179,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46269
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON7',0,6,187,10,3
	.word	62900
	.byte	11,6,190,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46369
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON8',0,6,198,10,3
	.word	62965
	.byte	11,6,201,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46469
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON9',0,6,209,10,3
	.word	63030
	.byte	11,6,212,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46631
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CHIPID',0,6,220,10,3
	.word	63095
	.byte	11,6,223,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46839
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_DTSCON',0,6,231,10,3
	.word	63159
	.byte	11,6,234,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47004
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_DTSLIM',0,6,242,10,3
	.word	63223
	.byte	11,6,245,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47187
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_DTSSTAT',0,6,253,10,3
	.word	63287
	.byte	11,6,128,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47341
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EICR',0,6,136,11,3
	.word	63352
	.byte	11,6,139,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47705
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EIFR',0,6,147,11,3
	.word	63414
	.byte	11,6,150,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47916
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EMSR',0,6,158,11,3
	.word	63476
	.byte	11,6,161,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48168
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ESRCFG',0,6,169,11,3
	.word	63538
	.byte	11,6,172,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48286
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ESROCFG',0,6,180,11,3
	.word	63602
	.byte	11,6,183,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48397
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVR13CON',0,6,191,11,3
	.word	63667
	.byte	11,6,194,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48560
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVR33CON',0,6,202,11,3
	.word	63733
	.byte	11,6,205,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48723
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRADCSTAT',0,6,213,11,3
	.word	63799
	.byte	11,6,216,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48881
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRDVSTAT',0,6,224,11,3
	.word	63867
	.byte	11,6,227,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49046
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRMONCTRL',0,6,235,11,3
	.word	63934
	.byte	11,6,238,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49414
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVROSCCTRL',0,6,246,11,3
	.word	64002
	.byte	11,6,249,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49635
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVROVMON',0,6,129,12,3
	.word	64070
	.byte	11,6,132,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49814
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRRSTCON',0,6,140,12,3
	.word	64136
	.byte	11,6,143,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50079
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,6,151,12,3
	.word	64203
	.byte	11,6,154,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50232
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,6,162,12,3
	.word	64272
	.byte	11,6,165,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50388
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,6,173,12,3
	.word	64341
	.byte	11,6,176,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50550
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,6,184,12,3
	.word	64410
	.byte	11,6,187,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50693
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,6,195,12,3
	.word	64479
	.byte	11,6,198,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50858
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,6,206,12,3
	.word	64548
	.byte	11,6,209,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51003
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCTRL1',0,6,217,12,3
	.word	64617
	.byte	11,6,220,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51184
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCTRL2',0,6,228,12,3
	.word	64685
	.byte	11,6,231,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51358
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCTRL3',0,6,239,12,3
	.word	64753
	.byte	11,6,242,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51518
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCTRL4',0,6,250,12,3
	.word	64821
	.byte	11,6,253,12,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51662
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSTAT',0,6,133,13,3
	.word	64889
	.byte	11,6,136,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51936
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRTRIM',0,6,144,13,3
	.word	64954
	.byte	11,6,147,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52091
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRUVMON',0,6,155,13,3
	.word	65019
	.byte	11,6,158,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52270
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EXTCON',0,6,166,13,3
	.word	65085
	.byte	11,6,169,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52488
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_FDR',0,6,177,13,3
	.word	65149
	.byte	11,6,180,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52651
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_FMR',0,6,188,13,3
	.word	65210
	.byte	11,6,191,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52987
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ID',0,6,199,13,3
	.word	65271
	.byte	11,6,202,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53094
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IGCR',0,6,210,13,3
	.word	65331
	.byte	11,6,213,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53546
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IN',0,6,221,13,3
	.word	65393
	.byte	11,6,224,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53645
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IOCR',0,6,232,13,3
	.word	65453
	.byte	11,6,235,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53795
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL0',0,6,243,13,3
	.word	65515
	.byte	11,6,246,13,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53944
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL1',0,6,254,13,3
	.word	65583
	.byte	11,6,129,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54105
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL2',0,6,137,14,3
	.word	65651
	.byte	11,6,140,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54235
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LCLCON',0,6,148,14,3
	.word	65719
	.byte	11,6,151,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54367
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LCLTEST',0,6,159,14,3
	.word	65783
	.byte	11,6,162,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54482
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_MANID',0,6,170,14,3
	.word	65848
	.byte	11,6,173,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54593
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OMR',0,6,181,14,3
	.word	65911
	.byte	11,6,184,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54751
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OSCCON',0,6,192,14,3
	.word	65972
	.byte	11,6,195,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55163
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OUT',0,6,203,14,3
	.word	66036
	.byte	11,6,206,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55264
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OVCCON',0,6,214,14,3
	.word	66097
	.byte	11,6,217,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55531
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OVCENABLE',0,6,225,14,3
	.word	66161
	.byte	11,6,228,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55667
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDISC',0,6,236,14,3
	.word	66228
	.byte	11,6,239,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55778
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDR',0,6,247,14,3
	.word	66291
	.byte	11,6,250,14,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55911
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDRR',0,6,130,15,3
	.word	66352
	.byte	11,6,133,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56114
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLCON0',0,6,141,15,3
	.word	66414
	.byte	11,6,144,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56470
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLCON1',0,6,152,15,3
	.word	66479
	.byte	11,6,155,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56648
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLCON2',0,6,163,15,3
	.word	66544
	.byte	11,6,166,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56748
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLERAYCON0',0,6,174,15,3
	.word	66609
	.byte	11,6,177,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57118
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLERAYCON1',0,6,185,15,3
	.word	66678
	.byte	11,6,188,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57304
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLERAYSTAT',0,6,196,15,3
	.word	66747
	.byte	11,6,199,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57502
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLSTAT',0,6,207,15,3
	.word	66816
	.byte	11,6,210,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57735
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR',0,6,218,15,3
	.word	66881
	.byte	11,6,221,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57887
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWCR0',0,6,229,15,3
	.word	66944
	.byte	11,6,232,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58435
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWCR1',0,6,240,15,3
	.word	67009
	.byte	11,6,243,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58680
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWSTAT',0,6,251,15,3
	.word	67074
	.byte	11,6,254,15,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59141
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWSTATCLR',0,6,134,16,3
	.word	67140
	.byte	11,6,137,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59620
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON',0,6,145,16,3
	.word	67209
	.byte	11,6,148,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59411
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON2',0,6,156,16,3
	.word	67273
	.byte	11,6,159,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59831
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTSTAT',0,6,167,16,3
	.word	67338
	.byte	11,6,170,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60263
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SAFECON',0,6,178,16,3
	.word	67403
	.byte	11,6,181,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60359
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STSTAT',0,6,189,16,3
	.word	67468
	.byte	11,6,192,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60619
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SWRSTCON',0,6,200,16,3
	.word	67532
	.byte	11,6,203,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60744
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSCON',0,6,211,16,3
	.word	67598
	.byte	11,6,214,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60941
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPCLR',0,6,222,16,3
	.word	67662
	.byte	11,6,225,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61094
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPDIS',0,6,233,16,3
	.word	67727
	.byte	11,6,236,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61247
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSET',0,6,244,16,3
	.word	67792
	.byte	11,6,247,16,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61400
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSTAT',0,6,255,16,3
	.word	67857
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_CON0',0,6,138,17,3
	.word	834
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_CON1',0,6,149,17,3
	.word	1078
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_SR',0,6,160,17,3
	.word	1309
	.byte	11,6,163,17,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61655
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_CON0',0,6,171,17,3
	.word	68008
	.byte	11,6,174,17,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61781
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_CON1',0,6,182,17,3
	.word	68075
	.byte	11,6,185,17,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62033
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_SR',0,6,193,17,3
	.word	68142
	.byte	13
	.word	1349
	.byte	28
	.byte	'Ifx_SCU_WDTCPU',0,6,209,17,3
	.word	68207
	.byte	9
	.byte	'_Ifx_SCU_WDTS',0,6,212,17,25,12,12
	.byte	'CON0',0
	.word	68008
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	68075
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	68142
	.byte	4,2,35,8,0,13
	.word	68236
	.byte	28
	.byte	'Ifx_SCU_WDTS',0,6,217,17,3
	.word	68297
	.byte	14,8
	.word	63538
	.byte	15,1,0,14,12
	.word	66881
	.byte	15,2,0,13
	.word	68236
	.byte	14,36
	.word	1349
	.byte	15,2,0,13
	.word	68347
	.byte	14,16
	.word	63352
	.byte	15,3,0,14,16
	.word	65331
	.byte	15,3,0,14,180,3
	.word	317
	.byte	15,179,3,0,9
	.byte	'_Ifx_SCU',0,6,230,17,25,128,8,12
	.byte	'reserved_0',0
	.word	4472
	.byte	8,2,35,0,12
	.byte	'ID',0
	.word	65271
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	2653
	.byte	4,2,35,12,12
	.byte	'OSCCON',0
	.word	65972
	.byte	4,2,35,16,12
	.byte	'PLLSTAT',0
	.word	66816
	.byte	4,2,35,20,12
	.byte	'PLLCON0',0
	.word	66414
	.byte	4,2,35,24,12
	.byte	'PLLCON1',0
	.word	66479
	.byte	4,2,35,28,12
	.byte	'PLLCON2',0
	.word	66544
	.byte	4,2,35,32,12
	.byte	'PLLERAYSTAT',0
	.word	66747
	.byte	4,2,35,36,12
	.byte	'PLLERAYCON0',0
	.word	66609
	.byte	4,2,35,40,12
	.byte	'PLLERAYCON1',0
	.word	66678
	.byte	4,2,35,44,12
	.byte	'CCUCON0',0
	.word	62445
	.byte	4,2,35,48,12
	.byte	'CCUCON1',0
	.word	62510
	.byte	4,2,35,52,12
	.byte	'FDR',0
	.word	65149
	.byte	4,2,35,56,12
	.byte	'EXTCON',0
	.word	65085
	.byte	4,2,35,60,12
	.byte	'CCUCON2',0
	.word	62575
	.byte	4,2,35,64,12
	.byte	'CCUCON3',0
	.word	62640
	.byte	4,2,35,68,12
	.byte	'CCUCON4',0
	.word	62705
	.byte	4,2,35,72,12
	.byte	'CCUCON5',0
	.word	62770
	.byte	4,2,35,76,12
	.byte	'RSTSTAT',0
	.word	67338
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	2653
	.byte	4,2,35,84,12
	.byte	'RSTCON',0
	.word	67209
	.byte	4,2,35,88,12
	.byte	'ARSTDIS',0
	.word	62380
	.byte	4,2,35,92,12
	.byte	'SWRSTCON',0
	.word	67532
	.byte	4,2,35,96,12
	.byte	'RSTCON2',0
	.word	67273
	.byte	4,2,35,100,12
	.byte	'reserved_68',0
	.word	2653
	.byte	4,2,35,104,12
	.byte	'EVRRSTCON',0
	.word	64136
	.byte	4,2,35,108,12
	.byte	'ESRCFG',0
	.word	68324
	.byte	8,2,35,112,12
	.byte	'ESROCFG',0
	.word	63602
	.byte	4,2,35,120,12
	.byte	'SYSCON',0
	.word	67598
	.byte	4,2,35,124,12
	.byte	'CCUCON6',0
	.word	62835
	.byte	4,3,35,128,1,12
	.byte	'CCUCON7',0
	.word	62900
	.byte	4,3,35,132,1,12
	.byte	'CCUCON8',0
	.word	62965
	.byte	4,3,35,136,1,12
	.byte	'CCUCON9',0
	.word	63030
	.byte	4,3,35,140,1,12
	.byte	'reserved_90',0
	.word	4812
	.byte	12,3,35,144,1,12
	.byte	'PDR',0
	.word	66291
	.byte	4,3,35,156,1,12
	.byte	'IOCR',0
	.word	65453
	.byte	4,3,35,160,1,12
	.byte	'OUT',0
	.word	66036
	.byte	4,3,35,164,1,12
	.byte	'OMR',0
	.word	65911
	.byte	4,3,35,168,1,12
	.byte	'IN',0
	.word	65393
	.byte	4,3,35,172,1,12
	.byte	'EVRSTAT',0
	.word	64889
	.byte	4,3,35,176,1,12
	.byte	'EVRDVSTAT',0
	.word	63867
	.byte	4,3,35,180,1,12
	.byte	'EVR13CON',0
	.word	63667
	.byte	4,3,35,184,1,12
	.byte	'EVR33CON',0
	.word	63733
	.byte	4,3,35,188,1,12
	.byte	'STSTAT',0
	.word	67468
	.byte	4,3,35,192,1,12
	.byte	'reserved_C4',0
	.word	2653
	.byte	4,3,35,196,1,12
	.byte	'PMSWCR0',0
	.word	66944
	.byte	4,3,35,200,1,12
	.byte	'PMSWSTAT',0
	.word	67074
	.byte	4,3,35,204,1,12
	.byte	'PMSWSTATCLR',0
	.word	67140
	.byte	4,3,35,208,1,12
	.byte	'PMCSR',0
	.word	68333
	.byte	12,3,35,212,1,12
	.byte	'DTSSTAT',0
	.word	63287
	.byte	4,3,35,224,1,12
	.byte	'DTSCON',0
	.word	63159
	.byte	4,3,35,228,1,12
	.byte	'PMSWCR1',0
	.word	67009
	.byte	4,3,35,232,1,12
	.byte	'reserved_EC',0
	.word	2653
	.byte	4,3,35,236,1,12
	.byte	'WDTS',0
	.word	68342
	.byte	12,3,35,240,1,12
	.byte	'EMSR',0
	.word	63476
	.byte	4,3,35,252,1,12
	.byte	'WDTCPU',0
	.word	68356
	.byte	36,3,35,128,2,12
	.byte	'TRAPSTAT',0
	.word	67857
	.byte	4,3,35,164,2,12
	.byte	'TRAPSET',0
	.word	67792
	.byte	4,3,35,168,2,12
	.byte	'TRAPCLR',0
	.word	67662
	.byte	4,3,35,172,2,12
	.byte	'TRAPDIS',0
	.word	67727
	.byte	4,3,35,176,2,12
	.byte	'LCLCON0',0
	.word	65719
	.byte	4,3,35,180,2,12
	.byte	'LCLCON1',0
	.word	65719
	.byte	4,3,35,184,2,12
	.byte	'LCLTEST',0
	.word	65783
	.byte	4,3,35,188,2,12
	.byte	'CHIPID',0
	.word	63095
	.byte	4,3,35,192,2,12
	.byte	'MANID',0
	.word	65848
	.byte	4,3,35,196,2,12
	.byte	'reserved_148',0
	.word	4472
	.byte	8,3,35,200,2,12
	.byte	'SAFECON',0
	.word	67403
	.byte	4,3,35,208,2,12
	.byte	'reserved_154',0
	.word	13080
	.byte	16,3,35,212,2,12
	.byte	'LBISTCTRL0',0
	.word	65515
	.byte	4,3,35,228,2,12
	.byte	'LBISTCTRL1',0
	.word	65583
	.byte	4,3,35,232,2,12
	.byte	'LBISTCTRL2',0
	.word	65651
	.byte	4,3,35,236,2,12
	.byte	'reserved_170',0
	.word	10737
	.byte	28,3,35,240,2,12
	.byte	'PDISC',0
	.word	66228
	.byte	4,3,35,140,3,12
	.byte	'reserved_190',0
	.word	4472
	.byte	8,3,35,144,3,12
	.byte	'EVRTRIM',0
	.word	64954
	.byte	4,3,35,152,3,12
	.byte	'EVRADCSTAT',0
	.word	63799
	.byte	4,3,35,156,3,12
	.byte	'EVRUVMON',0
	.word	65019
	.byte	4,3,35,160,3,12
	.byte	'EVROVMON',0
	.word	64070
	.byte	4,3,35,164,3,12
	.byte	'EVRMONCTRL',0
	.word	63934
	.byte	4,3,35,168,3,12
	.byte	'reserved_1AC',0
	.word	2653
	.byte	4,3,35,172,3,12
	.byte	'EVRSDCTRL1',0
	.word	64617
	.byte	4,3,35,176,3,12
	.byte	'EVRSDCTRL2',0
	.word	64685
	.byte	4,3,35,180,3,12
	.byte	'EVRSDCTRL3',0
	.word	64753
	.byte	4,3,35,184,3,12
	.byte	'EVRSDCTRL4',0
	.word	64821
	.byte	4,3,35,188,3,12
	.byte	'EVRSDCOEFF1',0
	.word	64203
	.byte	4,3,35,192,3,12
	.byte	'EVRSDCOEFF2',0
	.word	64272
	.byte	4,3,35,196,3,12
	.byte	'EVRSDCOEFF3',0
	.word	64341
	.byte	4,3,35,200,3,12
	.byte	'EVRSDCOEFF4',0
	.word	64410
	.byte	4,3,35,204,3,12
	.byte	'EVRSDCOEFF5',0
	.word	64479
	.byte	4,3,35,208,3,12
	.byte	'EVRSDCOEFF6',0
	.word	64548
	.byte	4,3,35,212,3,12
	.byte	'EVROSCCTRL',0
	.word	64002
	.byte	4,3,35,216,3,12
	.byte	'reserved_1DC',0
	.word	2653
	.byte	4,3,35,220,3,12
	.byte	'OVCENABLE',0
	.word	66161
	.byte	4,3,35,224,3,12
	.byte	'OVCCON',0
	.word	66097
	.byte	4,3,35,228,3,12
	.byte	'reserved_1E8',0
	.word	18769
	.byte	40,3,35,232,3,12
	.byte	'EICR',0
	.word	68361
	.byte	16,3,35,144,4,12
	.byte	'EIFR',0
	.word	63414
	.byte	4,3,35,160,4,12
	.byte	'FMR',0
	.word	65210
	.byte	4,3,35,164,4,12
	.byte	'PDRR',0
	.word	66352
	.byte	4,3,35,168,4,12
	.byte	'IGCR',0
	.word	68370
	.byte	16,3,35,172,4,12
	.byte	'reserved_23C',0
	.word	2653
	.byte	4,3,35,188,4,12
	.byte	'DTSLIM',0
	.word	63223
	.byte	4,3,35,192,4,12
	.byte	'reserved_244',0
	.word	68379
	.byte	180,3,3,35,196,4,12
	.byte	'ACCEN1',0
	.word	62316
	.byte	4,3,35,248,7,12
	.byte	'ACCEN0',0
	.word	62252
	.byte	4,3,35,252,7,0,13
	.word	68390
	.byte	28
	.byte	'Ifx_SCU',0,6,210,18,3
	.word	70370
	.byte	16,7,63,9,1,17
	.byte	'IfxPort_InputMode_undefined',0,127,17
	.byte	'IfxPort_InputMode_noPullDevice',0,0,17
	.byte	'IfxPort_InputMode_pullDown',0,8,17
	.byte	'IfxPort_InputMode_pullUp',0,16,0,28
	.byte	'IfxPort_InputMode',0,7,69,3
	.word	70392
	.byte	28
	.byte	'IfxPort_OutputIdx',0,7,110,3
	.word	9458
	.byte	28
	.byte	'IfxPort_OutputMode',0,7,118,3
	.word	9389
	.byte	16,7,124,9,1,17
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,17
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,17
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,17
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,17
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,17
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,17
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,17
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,17
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,17
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,17
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,17
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,28
	.byte	'IfxPort_PadDriver',0,7,138,1,3
	.word	70596
	.byte	28
	.byte	'IfxPort_State',0,7,158,1,3
	.word	9771
	.byte	31,7,170,1,9,8,12
	.byte	'port',0
	.word	9384
	.byte	4,2,35,0,12
	.byte	'pinIndex',0
	.word	317
	.byte	1,2,35,4,0,28
	.byte	'IfxPort_Pin',0,7,174,1,3
	.word	71060
	.byte	31,20,39,15,20,12
	.byte	'module',0
	.word	26834
	.byte	4,2,35,0,12
	.byte	'groupId',0
	.word	30839
	.byte	1,2,35,4,12
	.byte	'pin',0
	.word	71060
	.byte	8,2,35,8,12
	.byte	'select',0
	.word	9458
	.byte	1,2,35,16,0,19
	.word	71120
	.byte	28
	.byte	'IfxVadc_GxBfl_Out',0,20,45,3
	.word	71188
	.byte	31,20,48,15,16,12
	.byte	'module',0
	.word	26834
	.byte	4,2,35,0,12
	.byte	'pin',0
	.word	71060
	.byte	8,2,35,4,12
	.byte	'select',0
	.word	9458
	.byte	1,2,35,12,0,19
	.word	71219
	.byte	28
	.byte	'IfxVadc_Emux_Out',0,20,53,3
	.word	71270
	.byte	4
	.byte	'unsigned int',0,4,7,9
	.byte	'_Ifx_CPU_A_Bits',0,21,45,16,4,10
	.byte	'ADDR',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_A_Bits',0,21,48,3
	.word	71316
	.byte	9
	.byte	'_Ifx_CPU_BIV_Bits',0,21,51,16,4,10
	.byte	'VSS',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'BIV',0,4
	.word	71300
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CPU_BIV_Bits',0,21,55,3
	.word	71377
	.byte	9
	.byte	'_Ifx_CPU_BTV_Bits',0,21,58,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'BTV',0,4
	.word	71300
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CPU_BTV_Bits',0,21,62,3
	.word	71456
	.byte	9
	.byte	'_Ifx_CPU_CCNT_Bits',0,21,65,16,4,10
	.byte	'CountValue',0,4
	.word	71300
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	71300
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_CCNT_Bits',0,21,69,3
	.word	71542
	.byte	9
	.byte	'_Ifx_CPU_CCTRL_Bits',0,21,72,16,4,10
	.byte	'CM',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'CE',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'M1',0,4
	.word	71300
	.byte	3,27,2,35,0,10
	.byte	'M2',0,4
	.word	71300
	.byte	3,24,2,35,0,10
	.byte	'M3',0,4
	.word	71300
	.byte	3,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	71300
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_CPU_CCTRL_Bits',0,21,80,3
	.word	71631
	.byte	9
	.byte	'_Ifx_CPU_COMPAT_Bits',0,21,83,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'RM',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'SP',0,4
	.word	71300
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	71300
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_CPU_COMPAT_Bits',0,21,89,3
	.word	71777
	.byte	9
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,21,92,16,4,10
	.byte	'CORE_ID',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	71300
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_CORE_ID_Bits',0,21,96,3
	.word	71904
	.byte	9
	.byte	'_Ifx_CPU_CPR_L_Bits',0,21,99,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	71300
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_CPR_L_Bits',0,21,103,3
	.word	72002
	.byte	9
	.byte	'_Ifx_CPU_CPR_U_Bits',0,21,106,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	71300
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_CPR_U_Bits',0,21,110,3
	.word	72095
	.byte	9
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,21,113,16,4,10
	.byte	'MOD_REV',0,4
	.word	71300
	.byte	8,24,2,35,0,10
	.byte	'MOD_32B',0,4
	.word	71300
	.byte	8,16,2,35,0,10
	.byte	'MOD',0,4
	.word	71300
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_CPU_ID_Bits',0,21,118,3
	.word	72188
	.byte	9
	.byte	'_Ifx_CPU_CPXE_Bits',0,21,121,16,4,10
	.byte	'XE',0,4
	.word	71300
	.byte	8,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	71300
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CPU_CPXE_Bits',0,21,125,3
	.word	72296
	.byte	9
	.byte	'_Ifx_CPU_CREVT_Bits',0,21,128,1,16,4,10
	.byte	'EVTA',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	71300
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	71300
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	71300
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	71300
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CPU_CREVT_Bits',0,21,136,1,3
	.word	72383
	.byte	9
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,21,139,1,16,4,10
	.byte	'CID',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	71300
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_CUS_ID_Bits',0,21,143,1,3
	.word	72537
	.byte	9
	.byte	'_Ifx_CPU_D_Bits',0,21,146,1,16,4,10
	.byte	'DATA',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_D_Bits',0,21,149,1,3
	.word	72631
	.byte	9
	.byte	'_Ifx_CPU_DATR_Bits',0,21,152,1,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'SBE',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'reserved_4',0,4
	.word	71300
	.byte	5,23,2,35,0,10
	.byte	'CWE',0,4
	.word	71300
	.byte	1,22,2,35,0,10
	.byte	'CFE',0,4
	.word	71300
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	71300
	.byte	3,18,2,35,0,10
	.byte	'SOE',0,4
	.word	71300
	.byte	1,17,2,35,0,10
	.byte	'SME',0,4
	.word	71300
	.byte	1,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	71300
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_DATR_Bits',0,21,163,1,3
	.word	72694
	.byte	9
	.byte	'_Ifx_CPU_DBGSR_Bits',0,21,166,1,16,4,10
	.byte	'DE',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'HALT',0,4
	.word	71300
	.byte	2,29,2,35,0,10
	.byte	'SIH',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'SUSP',0,4
	.word	71300
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	71300
	.byte	1,26,2,35,0,10
	.byte	'PREVSUSP',0,4
	.word	71300
	.byte	1,25,2,35,0,10
	.byte	'PEVT',0,4
	.word	71300
	.byte	1,24,2,35,0,10
	.byte	'EVTSRC',0,4
	.word	71300
	.byte	5,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	71300
	.byte	19,0,2,35,0,0,28
	.byte	'Ifx_CPU_DBGSR_Bits',0,21,177,1,3
	.word	72912
	.byte	9
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,21,180,1,16,4,10
	.byte	'DTA',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	71300
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CPU_DBGTCR_Bits',0,21,184,1,3
	.word	73127
	.byte	9
	.byte	'_Ifx_CPU_DCON0_Bits',0,21,187,1,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'DCBYP',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	71300
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_CPU_DCON0_Bits',0,21,192,1,3
	.word	73221
	.byte	9
	.byte	'_Ifx_CPU_DCON2_Bits',0,21,195,1,16,4,10
	.byte	'DCACHE_SZE',0,4
	.word	71300
	.byte	16,16,2,35,0,10
	.byte	'DSCRATCH_SZE',0,4
	.word	71300
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_DCON2_Bits',0,21,199,1,3
	.word	73337
	.byte	9
	.byte	'_Ifx_CPU_DCX_Bits',0,21,202,1,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	6,26,2,35,0,10
	.byte	'DCXValue',0,4
	.word	71300
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_CPU_DCX_Bits',0,21,206,1,3
	.word	73438
	.byte	9
	.byte	'_Ifx_CPU_DEADD_Bits',0,21,209,1,16,4,10
	.byte	'ERROR_ADDRESS',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_DEADD_Bits',0,21,212,1,3
	.word	73531
	.byte	9
	.byte	'_Ifx_CPU_DIEAR_Bits',0,21,215,1,16,4,10
	.byte	'TA',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_DIEAR_Bits',0,21,218,1,3
	.word	73611
	.byte	9
	.byte	'_Ifx_CPU_DIETR_Bits',0,21,221,1,16,4,10
	.byte	'IED',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	71300
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	71300
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	71300
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	71300
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	71300
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	71300
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	71300
	.byte	18,0,2,35,0,0,28
	.byte	'Ifx_CPU_DIETR_Bits',0,21,233,1,3
	.word	73680
	.byte	9
	.byte	'_Ifx_CPU_DMS_Bits',0,21,236,1,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'DMSValue',0,4
	.word	71300
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CPU_DMS_Bits',0,21,240,1,3
	.word	73909
	.byte	9
	.byte	'_Ifx_CPU_DPR_L_Bits',0,21,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	71300
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_DPR_L_Bits',0,21,247,1,3
	.word	74002
	.byte	9
	.byte	'_Ifx_CPU_DPR_U_Bits',0,21,250,1,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	71300
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_DPR_U_Bits',0,21,254,1,3
	.word	74097
	.byte	9
	.byte	'_Ifx_CPU_DPRE_Bits',0,21,129,2,16,4,10
	.byte	'RE',0,4
	.word	71300
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	71300
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_DPRE_Bits',0,21,133,2,3
	.word	74192
	.byte	9
	.byte	'_Ifx_CPU_DPWE_Bits',0,21,136,2,16,4,10
	.byte	'WE',0,4
	.word	71300
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	71300
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_DPWE_Bits',0,21,140,2,3
	.word	74282
	.byte	9
	.byte	'_Ifx_CPU_DSTR_Bits',0,21,143,2,16,4,10
	.byte	'SRE',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'GAE',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'LBE',0,4
	.word	71300
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	71300
	.byte	3,26,2,35,0,10
	.byte	'CRE',0,4
	.word	71300
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	71300
	.byte	7,18,2,35,0,10
	.byte	'DTME',0,4
	.word	71300
	.byte	1,17,2,35,0,10
	.byte	'LOE',0,4
	.word	71300
	.byte	1,16,2,35,0,10
	.byte	'SDE',0,4
	.word	71300
	.byte	1,15,2,35,0,10
	.byte	'SCE',0,4
	.word	71300
	.byte	1,14,2,35,0,10
	.byte	'CAC',0,4
	.word	71300
	.byte	1,13,2,35,0,10
	.byte	'MPE',0,4
	.word	71300
	.byte	1,12,2,35,0,10
	.byte	'CLE',0,4
	.word	71300
	.byte	1,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	71300
	.byte	3,8,2,35,0,10
	.byte	'ALN',0,4
	.word	71300
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	71300
	.byte	7,0,2,35,0,0,28
	.byte	'Ifx_CPU_DSTR_Bits',0,21,161,2,3
	.word	74372
	.byte	9
	.byte	'_Ifx_CPU_EXEVT_Bits',0,21,164,2,16,4,10
	.byte	'EVTA',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	71300
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	71300
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	71300
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	71300
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CPU_EXEVT_Bits',0,21,172,2,3
	.word	74696
	.byte	9
	.byte	'_Ifx_CPU_FCX_Bits',0,21,175,2,16,4,10
	.byte	'FCXO',0,4
	.word	71300
	.byte	16,16,2,35,0,10
	.byte	'FCXS',0,4
	.word	71300
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	71300
	.byte	12,0,2,35,0,0,28
	.byte	'Ifx_CPU_FCX_Bits',0,21,180,2,3
	.word	74850
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,21,183,2,16,4,10
	.byte	'TST',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'TCL',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	71300
	.byte	6,24,2,35,0,10
	.byte	'RM',0,4
	.word	71300
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	71300
	.byte	8,14,2,35,0,10
	.byte	'FXE',0,4
	.word	71300
	.byte	1,13,2,35,0,10
	.byte	'FUE',0,4
	.word	71300
	.byte	1,12,2,35,0,10
	.byte	'FZE',0,4
	.word	71300
	.byte	1,11,2,35,0,10
	.byte	'FVE',0,4
	.word	71300
	.byte	1,10,2,35,0,10
	.byte	'FIE',0,4
	.word	71300
	.byte	1,9,2,35,0,10
	.byte	'reserved_23',0,4
	.word	71300
	.byte	3,6,2,35,0,10
	.byte	'FX',0,4
	.word	71300
	.byte	1,5,2,35,0,10
	.byte	'FU',0,4
	.word	71300
	.byte	1,4,2,35,0,10
	.byte	'FZ',0,4
	.word	71300
	.byte	1,3,2,35,0,10
	.byte	'FV',0,4
	.word	71300
	.byte	1,2,2,35,0,10
	.byte	'FI',0,4
	.word	71300
	.byte	1,1,2,35,0,10
	.byte	'reserved_31',0,4
	.word	71300
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,21,202,2,3
	.word	74956
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,205,2,16,4,10
	.byte	'OPC',0,4
	.word	71300
	.byte	8,24,2,35,0,10
	.byte	'FMT',0,4
	.word	71300
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	71300
	.byte	7,16,2,35,0,10
	.byte	'DREG',0,4
	.word	71300
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	71300
	.byte	12,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,212,2,3
	.word	75305
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,21,215,2,16,4,10
	.byte	'PC',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,21,218,2,3
	.word	75465
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,221,2,16,4,10
	.byte	'SRC1',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,224,2,3
	.word	75546
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,227,2,16,4,10
	.byte	'SRC2',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,230,2,3
	.word	75633
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,233,2,16,4,10
	.byte	'SRC3',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,236,2,3
	.word	75720
	.byte	9
	.byte	'_Ifx_CPU_ICNT_Bits',0,21,239,2,16,4,10
	.byte	'CountValue',0,4
	.word	71300
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	71300
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_ICNT_Bits',0,21,243,2,3
	.word	75807
	.byte	9
	.byte	'_Ifx_CPU_ICR_Bits',0,21,246,2,16,4,10
	.byte	'CCPN',0,4
	.word	71300
	.byte	10,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	71300
	.byte	5,17,2,35,0,10
	.byte	'IE',0,4
	.word	71300
	.byte	1,16,2,35,0,10
	.byte	'PIPN',0,4
	.word	71300
	.byte	10,6,2,35,0,10
	.byte	'reserved_26',0,4
	.word	71300
	.byte	6,0,2,35,0,0,28
	.byte	'Ifx_CPU_ICR_Bits',0,21,253,2,3
	.word	75898
	.byte	9
	.byte	'_Ifx_CPU_ISP_Bits',0,21,128,3,16,4,10
	.byte	'ISP',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_ISP_Bits',0,21,131,3,3
	.word	76041
	.byte	9
	.byte	'_Ifx_CPU_LCX_Bits',0,21,134,3,16,4,10
	.byte	'LCXO',0,4
	.word	71300
	.byte	16,16,2,35,0,10
	.byte	'LCXS',0,4
	.word	71300
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	71300
	.byte	12,0,2,35,0,0,28
	.byte	'Ifx_CPU_LCX_Bits',0,21,139,3,3
	.word	76107
	.byte	9
	.byte	'_Ifx_CPU_M1CNT_Bits',0,21,142,3,16,4,10
	.byte	'CountValue',0,4
	.word	71300
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	71300
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_M1CNT_Bits',0,21,146,3,3
	.word	76213
	.byte	9
	.byte	'_Ifx_CPU_M2CNT_Bits',0,21,149,3,16,4,10
	.byte	'CountValue',0,4
	.word	71300
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	71300
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_M2CNT_Bits',0,21,153,3,3
	.word	76306
	.byte	9
	.byte	'_Ifx_CPU_M3CNT_Bits',0,21,156,3,16,4,10
	.byte	'CountValue',0,4
	.word	71300
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	71300
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_M3CNT_Bits',0,21,160,3,3
	.word	76399
	.byte	9
	.byte	'_Ifx_CPU_PC_Bits',0,21,163,3,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'PC',0,4
	.word	71300
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CPU_PC_Bits',0,21,167,3,3
	.word	76492
	.byte	9
	.byte	'_Ifx_CPU_PCON0_Bits',0,21,170,3,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'PCBYP',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	71300
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_CPU_PCON0_Bits',0,21,175,3,3
	.word	76577
	.byte	9
	.byte	'_Ifx_CPU_PCON1_Bits',0,21,178,3,16,4,10
	.byte	'PCINV',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'PBINV',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	71300
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_CPU_PCON1_Bits',0,21,183,3,3
	.word	76693
	.byte	9
	.byte	'_Ifx_CPU_PCON2_Bits',0,21,186,3,16,4,10
	.byte	'PCACHE_SZE',0,4
	.word	71300
	.byte	16,16,2,35,0,10
	.byte	'PSCRATCH_SZE',0,4
	.word	71300
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_PCON2_Bits',0,21,190,3,3
	.word	76804
	.byte	9
	.byte	'_Ifx_CPU_PCXI_Bits',0,21,193,3,16,4,10
	.byte	'PCXO',0,4
	.word	71300
	.byte	16,16,2,35,0,10
	.byte	'PCXS',0,4
	.word	71300
	.byte	4,12,2,35,0,10
	.byte	'UL',0,4
	.word	71300
	.byte	1,11,2,35,0,10
	.byte	'PIE',0,4
	.word	71300
	.byte	1,10,2,35,0,10
	.byte	'PCPN',0,4
	.word	71300
	.byte	10,0,2,35,0,0,28
	.byte	'Ifx_CPU_PCXI_Bits',0,21,200,3,3
	.word	76905
	.byte	9
	.byte	'_Ifx_CPU_PIEAR_Bits',0,21,203,3,16,4,10
	.byte	'TA',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_PIEAR_Bits',0,21,206,3,3
	.word	77035
	.byte	9
	.byte	'_Ifx_CPU_PIETR_Bits',0,21,209,3,16,4,10
	.byte	'IED',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	71300
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	71300
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	71300
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	71300
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	71300
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	71300
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	71300
	.byte	18,0,2,35,0,0,28
	.byte	'Ifx_CPU_PIETR_Bits',0,21,221,3,3
	.word	77104
	.byte	9
	.byte	'_Ifx_CPU_PMA0_Bits',0,21,224,3,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	13,19,2,35,0,10
	.byte	'DAC',0,4
	.word	71300
	.byte	3,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	71300
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_PMA0_Bits',0,21,229,3,3
	.word	77333
	.byte	9
	.byte	'_Ifx_CPU_PMA1_Bits',0,21,232,3,16,4,10
	.byte	'reserved_0',0,4
	.word	71300
	.byte	14,18,2,35,0,10
	.byte	'CAC',0,4
	.word	71300
	.byte	2,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	71300
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_PMA1_Bits',0,21,237,3,3
	.word	77446
	.byte	9
	.byte	'_Ifx_CPU_PMA2_Bits',0,21,240,3,16,4,10
	.byte	'PSI',0,4
	.word	71300
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	71300
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_PMA2_Bits',0,21,244,3,3
	.word	77559
	.byte	9
	.byte	'_Ifx_CPU_PSTR_Bits',0,21,247,3,16,4,10
	.byte	'FRE',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'FBE',0,4
	.word	71300
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	71300
	.byte	9,20,2,35,0,10
	.byte	'FPE',0,4
	.word	71300
	.byte	1,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	71300
	.byte	1,18,2,35,0,10
	.byte	'FME',0,4
	.word	71300
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	71300
	.byte	17,0,2,35,0,0,28
	.byte	'Ifx_CPU_PSTR_Bits',0,21,129,4,3
	.word	77650
	.byte	9
	.byte	'_Ifx_CPU_PSW_Bits',0,21,132,4,16,4,10
	.byte	'CDC',0,4
	.word	71300
	.byte	7,25,2,35,0,10
	.byte	'CDE',0,4
	.word	71300
	.byte	1,24,2,35,0,10
	.byte	'GW',0,4
	.word	71300
	.byte	1,23,2,35,0,10
	.byte	'IS',0,4
	.word	71300
	.byte	1,22,2,35,0,10
	.byte	'IO',0,4
	.word	71300
	.byte	2,20,2,35,0,10
	.byte	'PRS',0,4
	.word	71300
	.byte	2,18,2,35,0,10
	.byte	'S',0,4
	.word	71300
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	71300
	.byte	12,5,2,35,0,10
	.byte	'SAV',0,4
	.word	71300
	.byte	1,4,2,35,0,10
	.byte	'AV',0,4
	.word	71300
	.byte	1,3,2,35,0,10
	.byte	'SV',0,4
	.word	71300
	.byte	1,2,2,35,0,10
	.byte	'V',0,4
	.word	71300
	.byte	1,1,2,35,0,10
	.byte	'C',0,4
	.word	71300
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_PSW_Bits',0,21,147,4,3
	.word	77853
	.byte	9
	.byte	'_Ifx_CPU_SEGEN_Bits',0,21,150,4,16,4,10
	.byte	'ADFLIP',0,4
	.word	71300
	.byte	8,24,2,35,0,10
	.byte	'ADTYPE',0,4
	.word	71300
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	71300
	.byte	21,1,2,35,0,10
	.byte	'AE',0,4
	.word	71300
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_SEGEN_Bits',0,21,156,4,3
	.word	78096
	.byte	9
	.byte	'_Ifx_CPU_SMACON_Bits',0,21,159,4,16,4,10
	.byte	'PC',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'PT',0,4
	.word	71300
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	71300
	.byte	5,24,2,35,0,10
	.byte	'DC',0,4
	.word	71300
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	71300
	.byte	1,22,2,35,0,10
	.byte	'DT',0,4
	.word	71300
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	71300
	.byte	13,8,2,35,0,10
	.byte	'IODT',0,4
	.word	71300
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	71300
	.byte	7,0,2,35,0,0,28
	.byte	'Ifx_CPU_SMACON_Bits',0,21,171,4,3
	.word	78224
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,21,174,4,16,4,10
	.byte	'EN',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,21,177,4,3
	.word	78465
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,21,180,4,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,21,183,4,3
	.word	78548
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,21,186,4,16,4,10
	.byte	'EN',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,21,189,4,3
	.word	78639
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,21,192,4,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,21,195,4,3
	.word	78730
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,21,198,4,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	294
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,21,202,4,3
	.word	78829
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,21,205,4,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	294
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,21,209,4,3
	.word	78936
	.byte	9
	.byte	'_Ifx_CPU_SWEVT_Bits',0,21,212,4,16,4,10
	.byte	'EVTA',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	71300
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	71300
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	71300
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	71300
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CPU_SWEVT_Bits',0,21,220,4,3
	.word	79043
	.byte	9
	.byte	'_Ifx_CPU_SYSCON_Bits',0,21,223,4,16,4,10
	.byte	'FCDSF',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'PROTEN',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'TPROTEN',0,4
	.word	71300
	.byte	1,29,2,35,0,10
	.byte	'IS',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'IT',0,4
	.word	71300
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	71300
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_CPU_SYSCON_Bits',0,21,231,4,3
	.word	79197
	.byte	9
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,21,234,4,16,4,10
	.byte	'ASI',0,4
	.word	71300
	.byte	5,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	71300
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,21,238,4,3
	.word	79358
	.byte	9
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,21,241,4,16,4,10
	.byte	'TEXP0',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'TEXP1',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'TEXP2',0,4
	.word	71300
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	71300
	.byte	13,16,2,35,0,10
	.byte	'TTRAP',0,4
	.word	71300
	.byte	1,15,2,35,0,10
	.byte	'reserved_17',0,4
	.word	71300
	.byte	15,0,2,35,0,0,28
	.byte	'Ifx_CPU_TPS_CON_Bits',0,21,249,4,3
	.word	79456
	.byte	9
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,21,252,4,16,4,10
	.byte	'Timer',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,21,255,4,3
	.word	79628
	.byte	9
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,21,130,5,16,4,10
	.byte	'ADDR',0,4
	.word	71300
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_TR_ADR_Bits',0,21,133,5,3
	.word	79708
	.byte	9
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,21,136,5,16,4,10
	.byte	'EVTA',0,4
	.word	71300
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	71300
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	71300
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	71300
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	71300
	.byte	4,20,2,35,0,10
	.byte	'TYP',0,4
	.word	71300
	.byte	1,19,2,35,0,10
	.byte	'RNG',0,4
	.word	71300
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	71300
	.byte	1,17,2,35,0,10
	.byte	'ASI_EN',0,4
	.word	71300
	.byte	1,16,2,35,0,10
	.byte	'ASI',0,4
	.word	71300
	.byte	5,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	71300
	.byte	6,5,2,35,0,10
	.byte	'AST',0,4
	.word	71300
	.byte	1,4,2,35,0,10
	.byte	'ALD',0,4
	.word	71300
	.byte	1,3,2,35,0,10
	.byte	'reserved_29',0,4
	.word	71300
	.byte	3,0,2,35,0,0,28
	.byte	'Ifx_CPU_TR_EVT_Bits',0,21,153,5,3
	.word	79781
	.byte	9
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,21,156,5,16,4,10
	.byte	'T0',0,4
	.word	71300
	.byte	1,31,2,35,0,10
	.byte	'T1',0,4
	.word	71300
	.byte	1,30,2,35,0,10
	.byte	'T2',0,4
	.word	71300
	.byte	1,29,2,35,0,10
	.byte	'T3',0,4
	.word	71300
	.byte	1,28,2,35,0,10
	.byte	'T4',0,4
	.word	71300
	.byte	1,27,2,35,0,10
	.byte	'T5',0,4
	.word	71300
	.byte	1,26,2,35,0,10
	.byte	'T6',0,4
	.word	71300
	.byte	1,25,2,35,0,10
	.byte	'T7',0,4
	.word	71300
	.byte	1,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	71300
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,21,167,5,3
	.word	80099
	.byte	11,21,175,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71316
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_A',0,21,183,5,3
	.word	80294
	.byte	11,21,186,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71377
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_BIV',0,21,194,5,3
	.word	80353
	.byte	11,21,197,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71456
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_BTV',0,21,205,5,3
	.word	80414
	.byte	11,21,208,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71542
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CCNT',0,21,216,5,3
	.word	80475
	.byte	11,21,219,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71631
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CCTRL',0,21,227,5,3
	.word	80537
	.byte	11,21,230,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71777
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_COMPAT',0,21,238,5,3
	.word	80600
	.byte	11,21,241,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71904
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CORE_ID',0,21,249,5,3
	.word	80664
	.byte	11,21,252,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72002
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CPR_L',0,21,132,6,3
	.word	80729
	.byte	11,21,135,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72095
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CPR_U',0,21,143,6,3
	.word	80792
	.byte	11,21,146,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72188
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CPU_ID',0,21,154,6,3
	.word	80855
	.byte	11,21,157,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72296
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CPXE',0,21,165,6,3
	.word	80919
	.byte	11,21,168,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72383
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CREVT',0,21,176,6,3
	.word	80981
	.byte	11,21,179,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72537
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CUS_ID',0,21,187,6,3
	.word	81044
	.byte	11,21,190,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72631
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_D',0,21,198,6,3
	.word	81108
	.byte	11,21,201,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72694
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DATR',0,21,209,6,3
	.word	81167
	.byte	11,21,212,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72912
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DBGSR',0,21,220,6,3
	.word	81229
	.byte	11,21,223,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73127
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DBGTCR',0,21,231,6,3
	.word	81292
	.byte	11,21,234,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73221
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DCON0',0,21,242,6,3
	.word	81356
	.byte	11,21,245,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73337
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DCON2',0,21,253,6,3
	.word	81419
	.byte	11,21,128,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73438
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DCX',0,21,136,7,3
	.word	81482
	.byte	11,21,139,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73531
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DEADD',0,21,147,7,3
	.word	81543
	.byte	11,21,150,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73611
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DIEAR',0,21,158,7,3
	.word	81606
	.byte	11,21,161,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73680
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DIETR',0,21,169,7,3
	.word	81669
	.byte	11,21,172,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73909
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DMS',0,21,180,7,3
	.word	81732
	.byte	11,21,183,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74002
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DPR_L',0,21,191,7,3
	.word	81793
	.byte	11,21,194,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74097
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DPR_U',0,21,202,7,3
	.word	81856
	.byte	11,21,205,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74192
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DPRE',0,21,213,7,3
	.word	81919
	.byte	11,21,216,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74282
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DPWE',0,21,224,7,3
	.word	81981
	.byte	11,21,227,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74372
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DSTR',0,21,235,7,3
	.word	82043
	.byte	11,21,238,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74696
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_EXEVT',0,21,246,7,3
	.word	82105
	.byte	11,21,249,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74850
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FCX',0,21,129,8,3
	.word	82168
	.byte	11,21,132,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74956
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,21,140,8,3
	.word	82229
	.byte	11,21,143,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75305
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,21,151,8,3
	.word	82299
	.byte	11,21,154,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75465
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,21,162,8,3
	.word	82369
	.byte	11,21,165,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75546
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,21,173,8,3
	.word	82438
	.byte	11,21,176,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75633
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,21,184,8,3
	.word	82509
	.byte	11,21,187,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75720
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,21,195,8,3
	.word	82580
	.byte	11,21,198,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75807
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_ICNT',0,21,206,8,3
	.word	82651
	.byte	11,21,209,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75898
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_ICR',0,21,217,8,3
	.word	82713
	.byte	11,21,220,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76041
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_ISP',0,21,228,8,3
	.word	82774
	.byte	11,21,231,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76107
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_LCX',0,21,239,8,3
	.word	82835
	.byte	11,21,242,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76213
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_M1CNT',0,21,250,8,3
	.word	82896
	.byte	11,21,253,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76306
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_M2CNT',0,21,133,9,3
	.word	82959
	.byte	11,21,136,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76399
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_M3CNT',0,21,144,9,3
	.word	83022
	.byte	11,21,147,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76492
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PC',0,21,155,9,3
	.word	83085
	.byte	11,21,158,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76577
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PCON0',0,21,166,9,3
	.word	83145
	.byte	11,21,169,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76693
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PCON1',0,21,177,9,3
	.word	83208
	.byte	11,21,180,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76804
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PCON2',0,21,188,9,3
	.word	83271
	.byte	11,21,191,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76905
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PCXI',0,21,199,9,3
	.word	83334
	.byte	11,21,202,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77035
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PIEAR',0,21,210,9,3
	.word	83396
	.byte	11,21,213,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77104
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PIETR',0,21,221,9,3
	.word	83459
	.byte	11,21,224,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77333
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PMA0',0,21,232,9,3
	.word	83522
	.byte	11,21,235,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77446
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PMA1',0,21,243,9,3
	.word	83584
	.byte	11,21,246,9,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77559
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PMA2',0,21,254,9,3
	.word	83646
	.byte	11,21,129,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77650
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PSTR',0,21,137,10,3
	.word	83708
	.byte	11,21,140,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77853
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PSW',0,21,148,10,3
	.word	83770
	.byte	11,21,151,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78096
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SEGEN',0,21,159,10,3
	.word	83831
	.byte	11,21,162,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78224
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SMACON',0,21,170,10,3
	.word	83894
	.byte	11,21,173,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78465
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_ACCENA',0,21,181,10,3
	.word	83958
	.byte	11,21,184,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78548
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_ACCENB',0,21,192,10,3
	.word	84028
	.byte	11,21,195,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78639
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,21,203,10,3
	.word	84098
	.byte	11,21,206,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78730
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,21,214,10,3
	.word	84172
	.byte	11,21,217,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78829
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,21,225,10,3
	.word	84246
	.byte	11,21,228,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78936
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,21,236,10,3
	.word	84316
	.byte	11,21,239,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79043
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SWEVT',0,21,247,10,3
	.word	84386
	.byte	11,21,250,10,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79197
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SYSCON',0,21,130,11,3
	.word	84449
	.byte	11,21,133,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79358
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TASK_ASI',0,21,141,11,3
	.word	84513
	.byte	11,21,144,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79456
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TPS_CON',0,21,152,11,3
	.word	84579
	.byte	11,21,155,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79628
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TPS_TIMER',0,21,163,11,3
	.word	84644
	.byte	11,21,166,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79708
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TR_ADR',0,21,174,11,3
	.word	84711
	.byte	11,21,177,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79781
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TR_EVT',0,21,185,11,3
	.word	84775
	.byte	11,21,188,11,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80099
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TRIG_ACC',0,21,196,11,3
	.word	84839
	.byte	9
	.byte	'_Ifx_CPU_CPR',0,21,207,11,25,8,12
	.byte	'L',0
	.word	80729
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	80792
	.byte	4,2,35,4,0,13
	.word	84905
	.byte	28
	.byte	'Ifx_CPU_CPR',0,21,211,11,3
	.word	84947
	.byte	9
	.byte	'_Ifx_CPU_DPR',0,21,214,11,25,8,12
	.byte	'L',0
	.word	81793
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	81856
	.byte	4,2,35,4,0,13
	.word	84973
	.byte	28
	.byte	'Ifx_CPU_DPR',0,21,218,11,3
	.word	85015
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN',0,21,221,11,25,16,12
	.byte	'LA',0
	.word	84246
	.byte	4,2,35,0,12
	.byte	'UA',0
	.word	84316
	.byte	4,2,35,4,12
	.byte	'ACCENA',0
	.word	84098
	.byte	4,2,35,8,12
	.byte	'ACCENB',0
	.word	84172
	.byte	4,2,35,12,0,13
	.word	85041
	.byte	28
	.byte	'Ifx_CPU_SPROT_RGN',0,21,227,11,3
	.word	85123
	.byte	14,12
	.word	84644
	.byte	15,2,0,9
	.byte	'_Ifx_CPU_TPS',0,21,230,11,25,16,12
	.byte	'CON',0
	.word	84579
	.byte	4,2,35,0,12
	.byte	'TIMER',0
	.word	85155
	.byte	12,2,35,4,0,13
	.word	85164
	.byte	28
	.byte	'Ifx_CPU_TPS',0,21,234,11,3
	.word	85212
	.byte	9
	.byte	'_Ifx_CPU_TR',0,21,237,11,25,8,12
	.byte	'EVT',0
	.word	84775
	.byte	4,2,35,0,12
	.byte	'ADR',0
	.word	84711
	.byte	4,2,35,4,0,13
	.word	85238
	.byte	28
	.byte	'Ifx_CPU_TR',0,21,241,11,3
	.word	85283
	.byte	28
	.byte	'IfxCpu_ResourceCpu',0,10,89,3
	.word	9952
	.byte	16,9,118,9,1,17
	.byte	'IfxCpu_CounterMode_normal',0,0,17
	.byte	'IfxCpu_CounterMode_task',0,1,0,28
	.byte	'IfxCpu_CounterMode',0,9,122,3
	.word	85335
	.byte	31,9,132,1,9,6,12
	.byte	'counter',0
	.word	10129
	.byte	4,2,35,0,12
	.byte	'overlfow',0
	.word	317
	.byte	1,2,35,4,0,28
	.byte	'IfxCpu_Counter',0,9,136,1,3
	.word	85422
	.byte	31,9,144,1,9,32,12
	.byte	'instruction',0
	.word	85422
	.byte	6,2,35,0,12
	.byte	'clock',0
	.word	85422
	.byte	6,2,35,6,12
	.byte	'counter1',0
	.word	85422
	.byte	6,2,35,12,12
	.byte	'counter2',0
	.word	85422
	.byte	6,2,35,18,12
	.byte	'counter3',0
	.word	85422
	.byte	6,2,35,24,0,28
	.byte	'IfxCpu_Perf',0,9,151,1,3
	.word	85488
	.byte	9
	.byte	'_Ifx_STM_ACCEN0_Bits',0,22,45,16,4,10
	.byte	'EN0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_STM_ACCEN0_Bits',0,22,79,3
	.word	85606
	.byte	9
	.byte	'_Ifx_STM_ACCEN1_Bits',0,22,82,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_ACCEN1_Bits',0,22,85,3
	.word	86163
	.byte	9
	.byte	'_Ifx_STM_CAP_Bits',0,22,88,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_CAP_Bits',0,22,91,3
	.word	86240
	.byte	9
	.byte	'_Ifx_STM_CAPSV_Bits',0,22,94,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_CAPSV_Bits',0,22,97,3
	.word	86312
	.byte	9
	.byte	'_Ifx_STM_CLC_Bits',0,22,100,16,4,10
	.byte	'DISR',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_STM_CLC_Bits',0,22,107,3
	.word	86388
	.byte	9
	.byte	'_Ifx_STM_CMCON_Bits',0,22,110,16,4,10
	.byte	'MSIZE0',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	317
	.byte	3,0,2,35,0,10
	.byte	'MSTART0',0,1
	.word	317
	.byte	5,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	317
	.byte	3,0,2,35,1,10
	.byte	'MSIZE1',0,1
	.word	317
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	317
	.byte	3,0,2,35,2,10
	.byte	'MSTART1',0,1
	.word	317
	.byte	5,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	317
	.byte	3,0,2,35,3,0,28
	.byte	'Ifx_STM_CMCON_Bits',0,22,120,3
	.word	86529
	.byte	9
	.byte	'_Ifx_STM_CMP_Bits',0,22,123,16,4,10
	.byte	'CMPVAL',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_CMP_Bits',0,22,126,3
	.word	86747
	.byte	9
	.byte	'_Ifx_STM_ICR_Bits',0,22,129,1,16,4,10
	.byte	'CMP0EN',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'CMP0IR',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'CMP0OS',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'CMP1EN',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'CMP1IR',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'CMP1OS',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,4
	.word	294
	.byte	25,0,2,35,0,0,28
	.byte	'Ifx_STM_ICR_Bits',0,22,139,1,3
	.word	86814
	.byte	9
	.byte	'_Ifx_STM_ID_Bits',0,22,142,1,16,4,10
	.byte	'MODREV',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_STM_ID_Bits',0,22,147,1,3
	.word	87017
	.byte	9
	.byte	'_Ifx_STM_ISCR_Bits',0,22,150,1,16,4,10
	.byte	'CMP0IRR',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'CMP0IRS',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'CMP1IRR',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'CMP1IRS',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_STM_ISCR_Bits',0,22,157,1,3
	.word	87124
	.byte	9
	.byte	'_Ifx_STM_KRST0_Bits',0,22,160,1,16,4,10
	.byte	'RST',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_STM_KRST0_Bits',0,22,165,1,3
	.word	87275
	.byte	9
	.byte	'_Ifx_STM_KRST1_Bits',0,22,168,1,16,4,10
	.byte	'RST',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	294
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_STM_KRST1_Bits',0,22,172,1,3
	.word	87386
	.byte	9
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,22,175,1,16,4,10
	.byte	'CLR',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	294
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_STM_KRSTCLR_Bits',0,22,179,1,3
	.word	87478
	.byte	9
	.byte	'_Ifx_STM_OCS_Bits',0,22,182,1,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	24,8,2,35,0,10
	.byte	'SUS',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	317
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_STM_OCS_Bits',0,22,189,1,3
	.word	87574
	.byte	9
	.byte	'_Ifx_STM_TIM0_Bits',0,22,192,1,16,4,10
	.byte	'STM31_0',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM0_Bits',0,22,195,1,3
	.word	87720
	.byte	9
	.byte	'_Ifx_STM_TIM0SV_Bits',0,22,198,1,16,4,10
	.byte	'STM31_0',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM0SV_Bits',0,22,201,1,3
	.word	87792
	.byte	9
	.byte	'_Ifx_STM_TIM1_Bits',0,22,204,1,16,4,10
	.byte	'STM35_4',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM1_Bits',0,22,207,1,3
	.word	87868
	.byte	9
	.byte	'_Ifx_STM_TIM2_Bits',0,22,210,1,16,4,10
	.byte	'STM39_8',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM2_Bits',0,22,213,1,3
	.word	87940
	.byte	9
	.byte	'_Ifx_STM_TIM3_Bits',0,22,216,1,16,4,10
	.byte	'STM43_12',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM3_Bits',0,22,219,1,3
	.word	88012
	.byte	9
	.byte	'_Ifx_STM_TIM4_Bits',0,22,222,1,16,4,10
	.byte	'STM47_16',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM4_Bits',0,22,225,1,3
	.word	88085
	.byte	9
	.byte	'_Ifx_STM_TIM5_Bits',0,22,228,1,16,4,10
	.byte	'STM51_20',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM5_Bits',0,22,231,1,3
	.word	88158
	.byte	9
	.byte	'_Ifx_STM_TIM6_Bits',0,22,234,1,16,4,10
	.byte	'STM63_32',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM6_Bits',0,22,237,1,3
	.word	88231
	.byte	11,22,245,1,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85606
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_ACCEN0',0,22,253,1,3
	.word	88304
	.byte	11,22,128,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86163
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_ACCEN1',0,22,136,2,3
	.word	88368
	.byte	11,22,139,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86240
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_CAP',0,22,147,2,3
	.word	88432
	.byte	11,22,150,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86312
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_CAPSV',0,22,158,2,3
	.word	88493
	.byte	11,22,161,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86388
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_CLC',0,22,169,2,3
	.word	88556
	.byte	11,22,172,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86529
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_CMCON',0,22,180,2,3
	.word	88617
	.byte	11,22,183,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86747
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_CMP',0,22,191,2,3
	.word	88680
	.byte	11,22,194,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86814
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_ICR',0,22,202,2,3
	.word	88741
	.byte	11,22,205,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87017
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_ID',0,22,213,2,3
	.word	88802
	.byte	11,22,216,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87124
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_ISCR',0,22,224,2,3
	.word	88862
	.byte	11,22,227,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87275
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_KRST0',0,22,235,2,3
	.word	88924
	.byte	11,22,238,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87386
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_KRST1',0,22,246,2,3
	.word	88987
	.byte	11,22,249,2,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87478
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_KRSTCLR',0,22,129,3,3
	.word	89050
	.byte	11,22,132,3,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87574
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_OCS',0,22,140,3,3
	.word	89115
	.byte	11,22,143,3,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87720
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM0',0,22,151,3,3
	.word	89176
	.byte	11,22,154,3,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87792
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM0SV',0,22,162,3,3
	.word	89238
	.byte	11,22,165,3,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87868
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM1',0,22,173,3,3
	.word	89302
	.byte	11,22,176,3,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87940
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM2',0,22,184,3,3
	.word	89364
	.byte	11,22,187,3,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88012
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM3',0,22,195,3,3
	.word	89426
	.byte	11,22,198,3,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88085
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM4',0,22,206,3,3
	.word	89488
	.byte	11,22,209,3,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88158
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM5',0,22,217,3,3
	.word	89550
	.byte	11,22,220,3,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88231
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM6',0,22,228,3,3
	.word	89612
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,23,45,16,4,10
	.byte	'EN0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,23,79,3
	.word	89674
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,23,82,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,23,85,3
	.word	90235
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,23,88,16,4,10
	.byte	'SEL',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	294
	.byte	22,0,2,35,0,0,28
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,23,95,3
	.word	90316
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,23,98,16,4,10
	.byte	'VLD0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'VLD1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'VLD2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'VLD3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'VLD4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'VLD5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'VLD6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'VLD7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'VLD8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'VLD9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	294
	.byte	22,0,2,35,0,0,28
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,23,111,3
	.word	90469
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,23,114,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	294
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	317
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,23,121,3
	.word	90717
	.byte	9
	.byte	'_Ifx_FLASH_COMM0_Bits',0,23,124,16,4,10
	.byte	'STATUS',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_FLASH_COMM0_Bits',0,23,128,1,3
	.word	90863
	.byte	9
	.byte	'_Ifx_FLASH_COMM1_Bits',0,23,131,1,16,4,10
	.byte	'STATUS',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_COMM1_Bits',0,23,136,1,3
	.word	90961
	.byte	9
	.byte	'_Ifx_FLASH_COMM2_Bits',0,23,139,1,16,4,10
	.byte	'STATUS',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_COMM2_Bits',0,23,144,1,3
	.word	91077
	.byte	9
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,23,147,1,16,4,10
	.byte	'RCODE',0,4
	.word	294
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	716
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_ECCRD_Bits',0,23,153,1,3
	.word	91193
	.byte	9
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,23,156,1,16,4,10
	.byte	'RCODE',0,4
	.word	294
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	716
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_ECCRP_Bits',0,23,162,1,3
	.word	91333
	.byte	9
	.byte	'_Ifx_FLASH_ECCW_Bits',0,23,165,1,16,4,10
	.byte	'WCODE',0,4
	.word	294
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	716
	.byte	8,2,2,35,2,10
	.byte	'DECENCDIS',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'PECENCDIS',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_ECCW_Bits',0,23,171,1,3
	.word	91473
	.byte	9
	.byte	'_Ifx_FLASH_FCON_Bits',0,23,174,1,16,4,10
	.byte	'WSPFLASH',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'WSECPF',0,1
	.word	317
	.byte	2,2,2,35,0,10
	.byte	'WSDFLASH',0,2
	.word	716
	.byte	6,4,2,35,0,10
	.byte	'WSECDF',0,1
	.word	317
	.byte	3,1,2,35,1,10
	.byte	'IDLE',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'ESLDIS',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'SLEEP',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'NSAFECC',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'STALL',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'RES21',0,1
	.word	317
	.byte	2,2,2,35,2,10
	.byte	'RES23',0,1
	.word	317
	.byte	2,0,2,35,2,10
	.byte	'VOPERM',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'PROERM',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	317
	.byte	3,2,2,35,3,10
	.byte	'PR5V',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_FCON_Bits',0,23,193,1,3
	.word	91612
	.byte	9
	.byte	'_Ifx_FLASH_FPRO_Bits',0,23,196,1,16,4,10
	.byte	'PROINP',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'PRODISP',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'PROIND',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'PRODISD',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'PROINHSMCOTP',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'PROINOTP',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'RES7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'PROINDBG',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'PRODISDBG',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'PROINHSM',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	317
	.byte	5,0,2,35,1,10
	.byte	'DCFP',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'DDFP',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'DDFPX',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'DDFD',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'ENPE',0,1
	.word	317
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	317
	.byte	8,0,2,35,3,0,28
	.byte	'Ifx_FLASH_FPRO_Bits',0,23,218,1,3
	.word	91974
	.byte	9
	.byte	'_Ifx_FLASH_FSR_Bits',0,23,221,1,16,4,10
	.byte	'FABUSY',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'D0BUSY',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'D1BUSY',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'P0BUSY',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'P1BUSY',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'RES6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PROG',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'PFPAGE',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'PROER',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'PFSBER',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'PFDBER',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'PFMBER',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'RES17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'DFSBER',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'DFDBER',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'DFTBER',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'DFMBER',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'SRIADDERR',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	716
	.byte	2,7,2,35,2,10
	.byte	'PVER',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'SLM',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'ORIER',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_FSR_Bits',0,23,254,1,3
	.word	92415
	.byte	9
	.byte	'_Ifx_FLASH_HSMFCON_Bits',0,23,129,2,16,4,10
	.byte	'LCKHSMUCB',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	22,8,2,35,0,10
	.byte	'VOPERM',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	317
	.byte	5,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_HSMFCON_Bits',0,23,137,2,3
	.word	93023
	.byte	9
	.byte	'_Ifx_FLASH_HSMFSR_Bits',0,23,140,2,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'D1BUSY',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	317
	.byte	4,1,2,35,0,10
	.byte	'PROG',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	294
	.byte	12,7,2,35,0,10
	.byte	'PVER',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	317
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_FLASH_HSMFSR_Bits',0,23,156,2,3
	.word	93203
	.byte	9
	.byte	'_Ifx_FLASH_HSMMARD_Bits',0,23,159,2,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'SELD1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,4
	.word	294
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMMARD_Bits',0,23,167,2,3
	.word	93525
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRAD_Bits',0,23,170,2,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	294
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMRRAD_Bits',0,23,174,2,3
	.word	93706
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRCT_Bits',0,23,177,2,16,4,10
	.byte	'STRT',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	317
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	317
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_HSMRRCT_Bits',0,23,188,2,3
	.word	93806
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD0_Bits',0,23,191,2,16,4,10
	.byte	'DATA',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMRRD0_Bits',0,23,194,2,3
	.word	94022
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD1_Bits',0,23,197,2,16,4,10
	.byte	'DATA',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMRRD1_Bits',0,23,200,2,3
	.word	94101
	.byte	9
	.byte	'_Ifx_FLASH_ID_Bits',0,23,203,2,16,4,10
	.byte	'MOD_REV',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'MOD_TYPE',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_ID_Bits',0,23,208,2,3
	.word	94180
	.byte	9
	.byte	'_Ifx_FLASH_MARD_Bits',0,23,211,2,16,4,10
	.byte	'HMARGIN',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'SELD0',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,2
	.word	716
	.byte	10,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_MARD_Bits',0,23,221,2,3
	.word	94293
	.byte	9
	.byte	'_Ifx_FLASH_MARP_Bits',0,23,224,2,16,4,10
	.byte	'SELP0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'SELP1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'RES2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'RES3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	716
	.byte	11,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_MARP_Bits',0,23,233,2,3
	.word	94507
	.byte	9
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,23,236,2,16,4,10
	.byte	'L',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'NSAFECC',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'RAMIN',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'RAMINSEL',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'OSCCFG',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'MODE',0,1
	.word	317
	.byte	2,5,2,35,1,10
	.byte	'APREN',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'CAP0EN',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'CAP1EN',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'CAP2EN',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'CAP3EN',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'ESR0CNT',0,2
	.word	716
	.byte	12,4,2,35,2,10
	.byte	'RES29',0,1
	.word	317
	.byte	2,2,2,35,3,10
	.byte	'RES30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_PROCOND_Bits',0,23,253,2,3
	.word	94694
	.byte	9
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,23,128,3,16,4,10
	.byte	'OCDSDIS',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'EDM',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,23,134,3,3
	.word	95018
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,23,137,3,16,4,10
	.byte	'HSMDBGDIS',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'TSTIFLCK',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'HSMTSTDIS',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'RES15',0,2
	.word	716
	.byte	12,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,23,145,3,3
	.word	95161
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,23,148,3,16,4,10
	.byte	'HSMBOOTEN',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'SSWWAIT',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'HSMDX',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'HSM6X',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'HSM16X',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'HSM17X',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'HSMENPINS',0,2
	.word	716
	.byte	2,7,2,35,0,10
	.byte	'HSMENRES',0,1
	.word	317
	.byte	2,5,2,35,1,10
	.byte	'DESTDBG',0,1
	.word	317
	.byte	2,3,2,35,1,10
	.byte	'BLKFLAN',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	716
	.byte	14,0,2,35,2,0,28
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,23,165,3,3
	.word	95350
	.byte	9
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,23,168,3,16,4,10
	.byte	'S0ROM',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'S1ROM',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'S2ROM',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'S3ROM',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'S4ROM',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'S5ROM',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'S7ROM',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'S8ROM',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'S9ROM',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'S10ROM',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'S11ROM',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'S12ROM',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'S13ROM',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'S14ROM',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'S15ROM',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'S18ROM',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'S19ROM',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'S20ROM',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'S21ROM',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'S22ROM',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'S23ROM',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'S24ROM',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'S25ROM',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'S26ROM',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	317
	.byte	2,3,2,35,3,10
	.byte	'BML',0,1
	.word	317
	.byte	2,1,2,35,3,10
	.byte	'TP',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,23,200,3,3
	.word	95713
	.byte	9
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,23,203,3,16,4,10
	.byte	'S0L',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'S1L',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'S2L',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'S3L',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'S4L',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'S5L',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'S6L',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'S7L',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'S8L',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'S9L',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'S10L',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'S11L',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'S12L',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'S13L',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'S14L',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'S15L',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'S16L',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'S17L',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'S18L',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'S19L',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'S20L',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'S21L',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'S22L',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'S23L',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'S24L',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'S25L',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'S26L',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	317
	.byte	4,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_PROCONP_Bits',0,23,234,3,3
	.word	96308
	.byte	9
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,23,237,3,16,4,10
	.byte	'S0WOP',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'S1WOP',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'S2WOP',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'S3WOP',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'S4WOP',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'S5WOP',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'S6WOP',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'S7WOP',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'S8WOP',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'S9WOP',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'S10WOP',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'S11WOP',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'S12WOP',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'S13WOP',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'S14WOP',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'S15WOP',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'S16WOP',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'S17WOP',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'S18WOP',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'S19WOP',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'S20WOP',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'S21WOP',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'S22WOP',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'S23WOP',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'S24WOP',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'S25WOP',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'S26WOP',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	317
	.byte	4,1,2,35,3,10
	.byte	'DATM',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,23,140,4,3
	.word	96832
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,23,143,4,16,4,10
	.byte	'TAG',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	294
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,23,147,4,3
	.word	97414
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,23,150,4,16,4,10
	.byte	'TAG',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	294
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,23,154,4,3
	.word	97516
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,23,157,4,16,4,10
	.byte	'TAG',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	294
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,23,161,4,3
	.word	97618
	.byte	9
	.byte	'_Ifx_FLASH_RRAD_Bits',0,23,164,4,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	294
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RRAD_Bits',0,23,168,4,3
	.word	97720
	.byte	9
	.byte	'_Ifx_FLASH_RRCT_Bits',0,23,171,4,16,4,10
	.byte	'STRT',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	317
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	317
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_RRCT_Bits',0,23,182,4,3
	.word	97814
	.byte	9
	.byte	'_Ifx_FLASH_RRD0_Bits',0,23,185,4,16,4,10
	.byte	'DATA',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RRD0_Bits',0,23,188,4,3
	.word	98024
	.byte	9
	.byte	'_Ifx_FLASH_RRD1_Bits',0,23,191,4,16,4,10
	.byte	'DATA',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RRD1_Bits',0,23,194,4,3
	.word	98097
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,23,197,4,16,4,10
	.byte	'SEL',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	294
	.byte	22,0,2,35,0,0,28
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,23,204,4,3
	.word	98170
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,23,207,4,16,4,10
	.byte	'VLD0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	294
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,23,211,4,3
	.word	98325
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,23,214,4,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	294
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	317
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,23,221,4,3
	.word	98430
	.byte	11,23,229,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89674
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ACCEN0',0,23,237,4,3
	.word	98578
	.byte	11,23,240,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90235
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ACCEN1',0,23,248,4,3
	.word	98644
	.byte	11,23,251,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90316
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_CBAB_CFG',0,23,131,5,3
	.word	98710
	.byte	11,23,134,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90469
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_CBAB_STAT',0,23,142,5,3
	.word	98778
	.byte	11,23,145,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90717
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_CBAB_TOP',0,23,153,5,3
	.word	98847
	.byte	11,23,156,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90863
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_COMM0',0,23,164,5,3
	.word	98915
	.byte	11,23,167,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90961
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_COMM1',0,23,175,5,3
	.word	98980
	.byte	11,23,178,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91077
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_COMM2',0,23,186,5,3
	.word	99045
	.byte	11,23,189,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91193
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ECCRD',0,23,197,5,3
	.word	99110
	.byte	11,23,200,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91333
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ECCRP',0,23,208,5,3
	.word	99175
	.byte	11,23,211,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91473
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ECCW',0,23,219,5,3
	.word	99240
	.byte	11,23,222,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91612
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_FCON',0,23,230,5,3
	.word	99304
	.byte	11,23,233,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91974
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_FPRO',0,23,241,5,3
	.word	99368
	.byte	11,23,244,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	92415
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_FSR',0,23,252,5,3
	.word	99432
	.byte	11,23,255,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	93023
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMFCON',0,23,135,6,3
	.word	99495
	.byte	11,23,138,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	93203
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMFSR',0,23,146,6,3
	.word	99562
	.byte	11,23,149,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	93525
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMMARD',0,23,157,6,3
	.word	99628
	.byte	11,23,160,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	93706
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMRRAD',0,23,168,6,3
	.word	99695
	.byte	11,23,171,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	93806
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMRRCT',0,23,179,6,3
	.word	99762
	.byte	11,23,182,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	94022
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMRRD0',0,23,190,6,3
	.word	99829
	.byte	11,23,193,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	94101
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_HSMRRD1',0,23,201,6,3
	.word	99896
	.byte	11,23,204,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	94180
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ID',0,23,212,6,3
	.word	99963
	.byte	11,23,215,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	94293
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_MARD',0,23,223,6,3
	.word	100025
	.byte	11,23,226,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	94507
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_MARP',0,23,234,6,3
	.word	100089
	.byte	11,23,237,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	94694
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCOND',0,23,245,6,3
	.word	100153
	.byte	11,23,248,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95018
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONDBG',0,23,128,7,3
	.word	100220
	.byte	11,23,131,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95161
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONHSM',0,23,139,7,3
	.word	100289
	.byte	11,23,142,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95350
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,23,150,7,3
	.word	100358
	.byte	11,23,153,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95713
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONOTP',0,23,161,7,3
	.word	100431
	.byte	11,23,164,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	96308
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONP',0,23,172,7,3
	.word	100500
	.byte	11,23,175,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	96832
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONWOP',0,23,183,7,3
	.word	100567
	.byte	11,23,186,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	97414
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG0',0,23,194,7,3
	.word	100636
	.byte	11,23,197,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	97516
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG1',0,23,205,7,3
	.word	100704
	.byte	11,23,208,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	97618
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG2',0,23,216,7,3
	.word	100772
	.byte	11,23,219,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	97720
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RRAD',0,23,227,7,3
	.word	100840
	.byte	11,23,230,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	97814
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RRCT',0,23,238,7,3
	.word	100904
	.byte	11,23,241,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	98024
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RRD0',0,23,249,7,3
	.word	100968
	.byte	11,23,252,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	98097
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RRD1',0,23,132,8,3
	.word	101032
	.byte	11,23,135,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	98170
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_UBAB_CFG',0,23,143,8,3
	.word	101096
	.byte	11,23,146,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	98325
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_UBAB_STAT',0,23,154,8,3
	.word	101164
	.byte	11,23,157,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	98430
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_UBAB_TOP',0,23,165,8,3
	.word	101233
	.byte	9
	.byte	'_Ifx_FLASH_CBAB',0,23,176,8,25,12,12
	.byte	'CFG',0
	.word	98710
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	98778
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	98847
	.byte	4,2,35,8,0,13
	.word	101301
	.byte	28
	.byte	'Ifx_FLASH_CBAB',0,23,181,8,3
	.word	101364
	.byte	9
	.byte	'_Ifx_FLASH_RDB',0,23,184,8,25,12,12
	.byte	'CFG0',0
	.word	100636
	.byte	4,2,35,0,12
	.byte	'CFG1',0
	.word	100704
	.byte	4,2,35,4,12
	.byte	'CFG2',0
	.word	100772
	.byte	4,2,35,8,0,13
	.word	101393
	.byte	28
	.byte	'Ifx_FLASH_RDB',0,23,189,8,3
	.word	101457
	.byte	9
	.byte	'_Ifx_FLASH_UBAB',0,23,192,8,25,12,12
	.byte	'CFG',0
	.word	101096
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	101164
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	101233
	.byte	4,2,35,8,0,13
	.word	101485
	.byte	28
	.byte	'Ifx_FLASH_UBAB',0,23,197,8,3
	.word	101548
	.byte	32,1,1,6
	.word	101577
	.byte	28
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,13,129,1,16
	.word	101580
	.byte	31,13,197,5,9,8,12
	.byte	'value',0
	.word	10129
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	10129
	.byte	4,2,35,4,0,28
	.byte	'IfxScuCcu_CcuconRegConfig',0,13,201,5,3
	.word	101625
	.byte	31,13,206,5,9,8,12
	.byte	'pDivider',0
	.word	317
	.byte	1,2,35,0,12
	.byte	'nDivider',0
	.word	317
	.byte	1,2,35,1,12
	.byte	'k2Initial',0
	.word	317
	.byte	1,2,35,2,12
	.byte	'waitTime',0
	.word	10358
	.byte	4,2,35,4,0,28
	.byte	'IfxScuCcu_InitialStepConfig',0,13,212,5,3
	.word	101696
	.byte	31,13,216,5,9,12,12
	.byte	'k2Step',0
	.word	317
	.byte	1,2,35,0,12
	.byte	'waitTime',0
	.word	10358
	.byte	4,2,35,2,12
	.byte	'hookFunction',0
	.word	101585
	.byte	4,2,35,8,0,28
	.byte	'IfxScuCcu_PllStepsConfig',0,13,221,5,3
	.word	101813
	.byte	6
	.word	101577
	.byte	31,13,229,5,9,56,12
	.byte	'ccucon0',0
	.word	101625
	.byte	8,2,35,0,12
	.byte	'ccucon1',0
	.word	101625
	.byte	8,2,35,8,12
	.byte	'ccucon2',0
	.word	101625
	.byte	8,2,35,16,12
	.byte	'ccucon5',0
	.word	101625
	.byte	8,2,35,24,12
	.byte	'ccucon6',0
	.word	101625
	.byte	8,2,35,32,12
	.byte	'ccucon7',0
	.word	101625
	.byte	8,2,35,40,12
	.byte	'ccucon8',0
	.word	101625
	.byte	8,2,35,48,0,28
	.byte	'IfxScuCcu_ClockDistributionConfig',0,13,238,5,3
	.word	101915
	.byte	31,13,242,5,9,8,12
	.byte	'value',0
	.word	10129
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	10129
	.byte	4,2,35,4,0,28
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,13,246,5,3
	.word	102084
	.byte	6
	.word	101813
	.byte	31,13,251,5,9,16,12
	.byte	'numOfPllDividerSteps',0
	.word	317
	.byte	1,2,35,0,12
	.byte	'pllDividerStep',0
	.word	102160
	.byte	4,2,35,4,12
	.byte	'pllInitialStep',0
	.word	101696
	.byte	8,2,35,8,0,28
	.byte	'IfxScuCcu_SysPllConfig',0,13,128,6,3
	.word	102165
	.byte	9
	.byte	'_Ifx_CCU6_ACCEN0_Bits',0,24,45,16,4,10
	.byte	'EN0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	317
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	317
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	317
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	317
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	317
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	317
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	317
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	317
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	317
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	317
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	317
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	317
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	317
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	317
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_CCU6_ACCEN0_Bits',0,24,79,3
	.word	102282
	.byte	9
	.byte	'_Ifx_CCU6_ACCEN1_Bits',0,24,82,16,4,10
	.byte	'reserved_0',0,4
	.word	294
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CCU6_ACCEN1_Bits',0,24,85,3
	.word	102841
	.byte	9
	.byte	'_Ifx_CCU6_CC60R_Bits',0,24,88,16,4,10
	.byte	'CCV',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_CC60R_Bits',0,24,92,3
	.word	102920
	.byte	9
	.byte	'_Ifx_CCU6_CC60SR_Bits',0,24,95,16,4,10
	.byte	'CCS',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_CC60SR_Bits',0,24,99,3
	.word	103013
	.byte	9
	.byte	'_Ifx_CCU6_CC61R_Bits',0,24,102,16,4,10
	.byte	'CCV',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_CC61R_Bits',0,24,106,3
	.word	103108
	.byte	9
	.byte	'_Ifx_CCU6_CC61SR_Bits',0,24,109,16,4,10
	.byte	'CCS',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_CC61SR_Bits',0,24,113,3
	.word	103201
	.byte	9
	.byte	'_Ifx_CCU6_CC62R_Bits',0,24,116,16,4,10
	.byte	'CCV',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_CC62R_Bits',0,24,120,3
	.word	103296
	.byte	9
	.byte	'_Ifx_CCU6_CC62SR_Bits',0,24,123,16,4,10
	.byte	'CCS',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_CC62SR_Bits',0,24,127,3
	.word	103389
	.byte	9
	.byte	'_Ifx_CCU6_CC63R_Bits',0,24,130,1,16,4,10
	.byte	'CCV',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_CC63R_Bits',0,24,134,1,3
	.word	103484
	.byte	9
	.byte	'_Ifx_CCU6_CC63SR_Bits',0,24,137,1,16,4,10
	.byte	'CCS',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_CC63SR_Bits',0,24,141,1,3
	.word	103579
	.byte	9
	.byte	'_Ifx_CCU6_CLC_Bits',0,24,144,1,16,4,10
	.byte	'DISR',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_CCU6_CLC_Bits',0,24,151,1,3
	.word	103676
	.byte	9
	.byte	'_Ifx_CCU6_CMPMODIF_Bits',0,24,154,1,16,4,10
	.byte	'MCC60S',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'MCC61S',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'MCC62S',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	317
	.byte	3,2,2,35,0,10
	.byte	'MCC63S',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'MCC60R',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'MCC61R',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'MCC62R',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	317
	.byte	3,2,2,35,1,10
	.byte	'MCC63R',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	294
	.byte	17,0,2,35,0,0,28
	.byte	'Ifx_CCU6_CMPMODIF_Bits',0,24,168,1,3
	.word	103821
	.byte	9
	.byte	'_Ifx_CCU6_CMPSTAT_Bits',0,24,171,1,16,4,10
	.byte	'CC60ST',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'CC61ST',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'CC62ST',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'CCPOS60',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'CCPOS61',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'CCPOS62',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'CC63ST',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'CC60PS',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'COUT60PS',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'CC61PS',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'COUT61PS',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'CC62PS',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'COUT62PS',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'COUT63PS',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'T13IM',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_CMPSTAT_Bits',0,24,190,1,3
	.word	104118
	.byte	9
	.byte	'_Ifx_CCU6_ID_Bits',0,24,193,1,16,4,10
	.byte	'MODREV',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'MODNUMBER',0,1
	.word	317
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_ID_Bits',0,24,198,1,3
	.word	104504
	.byte	9
	.byte	'_Ifx_CCU6_IEN_Bits',0,24,201,1,16,4,10
	.byte	'ENCC60R',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ENCC60F',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'ENCC61R',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'ENCC61F',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'ENCC62R',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'ENCC62F',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'ENT12OM',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'ENT12PM',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'ENT13CM',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'ENT13PM',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'ENTRPF',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'ENCHE',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'ENWHE',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'ENIDLE',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'ENSTR',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_IEN_Bits',0,24,220,1,3
	.word	104617
	.byte	9
	.byte	'_Ifx_CCU6_IMON_Bits',0,24,223,1,16,4,10
	.byte	'LBE',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'CCPOS0I',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'CCPOS1I',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'CCPOS2I',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'CC60INI',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'CC61INI',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'CC62INI',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'CTRAPI',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'T12HRI',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'T13HRI',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	294
	.byte	22,0,2,35,0,0,28
	.byte	'Ifx_CCU6_IMON_Bits',0,24,236,1,3
	.word	104993
	.byte	9
	.byte	'_Ifx_CCU6_INP_Bits',0,24,239,1,16,4,10
	.byte	'INPCC60',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'INPCC61',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'INPCC62',0,1
	.word	317
	.byte	2,2,2,35,0,10
	.byte	'INPCHE',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'INPERR',0,1
	.word	317
	.byte	2,6,2,35,1,10
	.byte	'INPT12',0,1
	.word	317
	.byte	2,4,2,35,1,10
	.byte	'INPT13',0,1
	.word	317
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	294
	.byte	18,0,2,35,0,0,28
	.byte	'Ifx_CCU6_INP_Bits',0,24,249,1,3
	.word	105254
	.byte	9
	.byte	'_Ifx_CCU6_IS_Bits',0,24,252,1,16,4,10
	.byte	'ICC60R',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'ICC60F',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'ICC61R',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'ICC61F',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'ICC62R',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'ICC62F',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'T12OM',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'T12PM',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'T13CM',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'T13PM',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'TRPF',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'TRPS',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'CHE',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'WHE',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'IDLE',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'STR',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_IS_Bits',0,24,143,2,3
	.word	105459
	.byte	9
	.byte	'_Ifx_CCU6_ISR_Bits',0,24,146,2,16,4,10
	.byte	'RCC60R',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'RCC60F',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'RCC61R',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'RCC61F',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'RCC62R',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'RCC62F',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'RT12OM',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'RT12PM',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'RT13CM',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'RT13PM',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'RTRPF',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'RCHE',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'RWHE',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'RIDLE',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'RSTR',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_ISR_Bits',0,24,165,2,3
	.word	105802
	.byte	9
	.byte	'_Ifx_CCU6_ISS_Bits',0,24,168,2,16,4,10
	.byte	'SCC60R',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'SCC60F',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'SCC61R',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'SCC61F',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'SCC62R',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'SCC62F',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'ST12OM',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'ST12PM',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'ST13CM',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'ST13PM',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'STRPF',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'SWHC',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'SCHE',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'SWHE',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'SIDLE',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'SSTR',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_ISS_Bits',0,24,187,2,3
	.word	106163
	.byte	9
	.byte	'_Ifx_CCU6_KRST0_Bits',0,24,190,2,16,4,10
	.byte	'RST',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	294
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_CCU6_KRST0_Bits',0,24,195,2,3
	.word	106517
	.byte	9
	.byte	'_Ifx_CCU6_KRST1_Bits',0,24,198,2,16,4,10
	.byte	'RST',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	294
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CCU6_KRST1_Bits',0,24,202,2,3
	.word	106630
	.byte	9
	.byte	'_Ifx_CCU6_KRSTCLR_Bits',0,24,205,2,16,4,10
	.byte	'CLR',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	294
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CCU6_KRSTCLR_Bits',0,24,209,2,3
	.word	106724
	.byte	9
	.byte	'_Ifx_CCU6_KSCSR_Bits',0,24,212,2,16,4,10
	.byte	'SB0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'SB1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'SB2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'SB3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_CCU6_KSCSR_Bits',0,24,219,2,3
	.word	106822
	.byte	9
	.byte	'_Ifx_CCU6_LI_Bits',0,24,222,2,16,4,10
	.byte	'reserved_0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'CCPOS0EN',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'CCPOS1EN',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'CCPOS2EN',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'CC60INEN',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'CC61INEN',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'CC62INEN',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'CTRAPEN',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'T12HREN',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'T13HREN',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	317
	.byte	3,3,2,35,1,10
	.byte	'LBEEN',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'INPLBE',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_LI_Bits',0,24,238,2,3
	.word	106961
	.byte	9
	.byte	'_Ifx_CCU6_MCFG_Bits',0,24,241,2,16,4,10
	.byte	'T12',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'T13',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'MCM',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	294
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CCU6_MCFG_Bits',0,24,247,2,3
	.word	107292
	.byte	9
	.byte	'_Ifx_CCU6_MCMCTR_Bits',0,24,250,2,16,4,10
	.byte	'SWSEL',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'SWSYN',0,1
	.word	317
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'STE12U',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'STE12D',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'STE13U',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	294
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_CCU6_MCMCTR_Bits',0,24,132,3,3
	.word	107414
	.byte	9
	.byte	'_Ifx_CCU6_MCMOUT_Bits',0,24,135,3,16,4,10
	.byte	'MCMP',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'R',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EXPH',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'CURH',0,1
	.word	317
	.byte	3,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	294
	.byte	18,0,2,35,0,0,28
	.byte	'Ifx_CCU6_MCMOUT_Bits',0,24,143,3,3
	.word	107628
	.byte	9
	.byte	'_Ifx_CCU6_MCMOUTS_Bits',0,24,146,3,16,4,10
	.byte	'MCMPS',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'STRMCM',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'EXPHS',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'CURHS',0,1
	.word	317
	.byte	3,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'STRHP',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_MCMOUTS_Bits',0,24,156,3,3
	.word	107793
	.byte	9
	.byte	'_Ifx_CCU6_MODCTR_Bits',0,24,159,3,16,4,10
	.byte	'T12MODEN',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'MCMEN',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'T13MODEN',0,1
	.word	317
	.byte	6,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'ECT13O',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_MODCTR_Bits',0,24,168,3,3
	.word	108008
	.byte	9
	.byte	'_Ifx_CCU6_MOSEL_Bits',0,24,171,3,16,4,10
	.byte	'TRIG0SEL',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'TRIG1SEL',0,1
	.word	317
	.byte	3,2,2,35,0,10
	.byte	'TRIG2SEL',0,2
	.word	716
	.byte	3,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	294
	.byte	23,0,2,35,0,0,28
	.byte	'Ifx_CCU6_MOSEL_Bits',0,24,177,3,3
	.word	108210
	.byte	9
	.byte	'_Ifx_CCU6_OCS_Bits',0,24,180,3,16,4,10
	.byte	'TGS',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'TGB',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'TG_P',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	294
	.byte	20,8,2,35,0,10
	.byte	'SUS',0,1
	.word	317
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	317
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	317
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	317
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_CCU6_OCS_Bits',0,24,190,3,3
	.word	108349
	.byte	9
	.byte	'_Ifx_CCU6_PISEL0_Bits',0,24,193,3,16,4,10
	.byte	'ISCC60',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'ISCC61',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'ISCC62',0,1
	.word	317
	.byte	2,2,2,35,0,10
	.byte	'ISTRP',0,1
	.word	317
	.byte	2,0,2,35,0,10
	.byte	'ISPOS0',0,1
	.word	317
	.byte	2,6,2,35,1,10
	.byte	'ISPOS1',0,1
	.word	317
	.byte	2,4,2,35,1,10
	.byte	'ISPOS2',0,1
	.word	317
	.byte	2,2,2,35,1,10
	.byte	'IST12HR',0,1
	.word	317
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_PISEL0_Bits',0,24,204,3,3
	.word	108543
	.byte	9
	.byte	'_Ifx_CCU6_PISEL2_Bits',0,24,207,3,16,4,10
	.byte	'IST13HR',0,1
	.word	317
	.byte	2,6,2,35,0,10
	.byte	'ISCNT12',0,1
	.word	317
	.byte	2,4,2,35,0,10
	.byte	'ISCNT13',0,1
	.word	317
	.byte	2,2,2,35,0,10
	.byte	'T12EXT',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'T13EXT',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CCU6_PISEL2_Bits',0,24,215,3,3
	.word	108769
	.byte	9
	.byte	'_Ifx_CCU6_PSLR_Bits',0,24,218,3,16,4,10
	.byte	'PSL',0,1
	.word	317
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'PSL63',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	294
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CCU6_PSLR_Bits',0,24,224,3,3
	.word	108943
	.byte	9
	.byte	'_Ifx_CCU6_T12_Bits',0,24,227,3,16,4,10
	.byte	'T12CV',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_T12_Bits',0,24,231,3,3
	.word	109074
	.byte	9
	.byte	'_Ifx_CCU6_T12DTC_Bits',0,24,234,3,16,4,10
	.byte	'DTM',0,1
	.word	317
	.byte	8,0,2,35,0,10
	.byte	'DTE0',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'DTE1',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'DTE2',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'DTR0',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'DTR1',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'DTR2',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	294
	.byte	17,0,2,35,0,0,28
	.byte	'Ifx_CCU6_T12DTC_Bits',0,24,245,3,3
	.word	109167
	.byte	9
	.byte	'_Ifx_CCU6_T12MSEL_Bits',0,24,248,3,16,4,10
	.byte	'MSEL60',0,1
	.word	317
	.byte	4,4,2,35,0,10
	.byte	'MSEL61',0,1
	.word	317
	.byte	4,0,2,35,0,10
	.byte	'MSEL62',0,1
	.word	317
	.byte	4,4,2,35,1,10
	.byte	'HSYNC',0,1
	.word	317
	.byte	3,1,2,35,1,10
	.byte	'DBYP',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_T12MSEL_Bits',0,24,128,4,3
	.word	109383
	.byte	9
	.byte	'_Ifx_CCU6_T12PR_Bits',0,24,131,4,16,4,10
	.byte	'T12PV',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_T12PR_Bits',0,24,135,4,3
	.word	109554
	.byte	9
	.byte	'_Ifx_CCU6_T13_Bits',0,24,138,4,16,4,10
	.byte	'T13CV',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_T13_Bits',0,24,142,4,3
	.word	109651
	.byte	9
	.byte	'_Ifx_CCU6_T13PR_Bits',0,24,145,4,16,4,10
	.byte	'T13PV',0,2
	.word	716
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_T13PR_Bits',0,24,149,4,3
	.word	109744
	.byte	9
	.byte	'_Ifx_CCU6_TCTR0_Bits',0,24,152,4,16,4,10
	.byte	'T12CLK',0,1
	.word	317
	.byte	3,5,2,35,0,10
	.byte	'T12PRE',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'T12R',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'STE12',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'CDIR',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'CTM',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'T13CLK',0,1
	.word	317
	.byte	3,5,2,35,1,10
	.byte	'T13PRE',0,1
	.word	317
	.byte	1,4,2,35,1,10
	.byte	'T13R',0,1
	.word	317
	.byte	1,3,2,35,1,10
	.byte	'STE13',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	294
	.byte	18,0,2,35,0,0,28
	.byte	'Ifx_CCU6_TCTR0_Bits',0,24,165,4,3
	.word	109841
	.byte	9
	.byte	'_Ifx_CCU6_TCTR2_Bits',0,24,168,4,16,4,10
	.byte	'T12SSC',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'T13SSC',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'T13TEC',0,1
	.word	317
	.byte	3,3,2,35,0,10
	.byte	'T13TED',0,1
	.word	317
	.byte	2,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'T12RSEL',0,1
	.word	317
	.byte	2,6,2,35,1,10
	.byte	'T13RSEL',0,1
	.word	317
	.byte	2,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	294
	.byte	20,0,2,35,0,0,28
	.byte	'Ifx_CCU6_TCTR2_Bits',0,24,178,4,3
	.word	110090
	.byte	9
	.byte	'_Ifx_CCU6_TCTR4_Bits',0,24,181,4,16,4,10
	.byte	'T12RR',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'T12RS',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'T12RES',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'DTRES',0,1
	.word	317
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	317
	.byte	1,3,2,35,0,10
	.byte	'T12CNT',0,1
	.word	317
	.byte	1,2,2,35,0,10
	.byte	'T12STR',0,1
	.word	317
	.byte	1,1,2,35,0,10
	.byte	'T12STD',0,1
	.word	317
	.byte	1,0,2,35,0,10
	.byte	'T13RR',0,1
	.word	317
	.byte	1,7,2,35,1,10
	.byte	'T13RS',0,1
	.word	317
	.byte	1,6,2,35,1,10
	.byte	'T13RES',0,1
	.word	317
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	317
	.byte	2,3,2,35,1,10
	.byte	'T13CNT',0,1
	.word	317
	.byte	1,2,2,35,1,10
	.byte	'T13STR',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'T13STD',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_TCTR4_Bits',0,24,199,4,3
	.word	110302
	.byte	9
	.byte	'_Ifx_CCU6_TRPCTR_Bits',0,24,202,4,16,4,10
	.byte	'TRPM0',0,1
	.word	317
	.byte	1,7,2,35,0,10
	.byte	'TRPM1',0,1
	.word	317
	.byte	1,6,2,35,0,10
	.byte	'TRPM2',0,1
	.word	317
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	317
	.byte	5,0,2,35,0,10
	.byte	'TRPEN',0,1
	.word	317
	.byte	6,2,2,35,1,10
	.byte	'TRPEN13',0,1
	.word	317
	.byte	1,1,2,35,1,10
	.byte	'TRPPEN',0,1
	.word	317
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	716
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_CCU6_TRPCTR_Bits',0,24,212,4,3
	.word	110656
	.byte	11,24,220,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	102282
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_ACCEN0',0,24,228,4,3
	.word	110865
	.byte	11,24,231,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	102841
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_ACCEN1',0,24,239,4,3
	.word	110930
	.byte	11,24,242,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	102920
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CC60R',0,24,250,4,3
	.word	110995
	.byte	11,24,253,4,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103013
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CC60SR',0,24,133,5,3
	.word	111059
	.byte	11,24,136,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103108
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CC61R',0,24,144,5,3
	.word	111124
	.byte	11,24,147,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103201
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CC61SR',0,24,155,5,3
	.word	111188
	.byte	11,24,158,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103296
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CC62R',0,24,166,5,3
	.word	111253
	.byte	11,24,169,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103389
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CC62SR',0,24,177,5,3
	.word	111317
	.byte	11,24,180,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103484
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CC63R',0,24,188,5,3
	.word	111382
	.byte	11,24,191,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103579
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CC63SR',0,24,199,5,3
	.word	111446
	.byte	11,24,202,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103676
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CLC',0,24,210,5,3
	.word	111511
	.byte	11,24,213,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103821
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CMPMODIF',0,24,221,5,3
	.word	111573
	.byte	11,24,224,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	104118
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_CMPSTAT',0,24,232,5,3
	.word	111640
	.byte	11,24,235,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	104504
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_ID',0,24,243,5,3
	.word	111706
	.byte	11,24,246,5,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	104617
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_IEN',0,24,254,5,3
	.word	111767
	.byte	11,24,129,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	104993
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_IMON',0,24,137,6,3
	.word	111829
	.byte	11,24,140,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	105254
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_INP',0,24,148,6,3
	.word	111892
	.byte	11,24,151,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	105459
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_IS',0,24,159,6,3
	.word	111954
	.byte	11,24,162,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	105802
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_ISR',0,24,170,6,3
	.word	112015
	.byte	11,24,173,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106163
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_ISS',0,24,181,6,3
	.word	112077
	.byte	11,24,184,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106517
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_KRST0',0,24,192,6,3
	.word	112139
	.byte	11,24,195,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106630
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_KRST1',0,24,203,6,3
	.word	112203
	.byte	11,24,206,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106724
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_KRSTCLR',0,24,214,6,3
	.word	112267
	.byte	11,24,217,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106822
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_KSCSR',0,24,225,6,3
	.word	112333
	.byte	11,24,228,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106961
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_LI',0,24,236,6,3
	.word	112397
	.byte	11,24,239,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	107292
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_MCFG',0,24,247,6,3
	.word	112458
	.byte	11,24,250,6,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	107414
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_MCMCTR',0,24,130,7,3
	.word	112521
	.byte	11,24,133,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	107628
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_MCMOUT',0,24,141,7,3
	.word	112586
	.byte	11,24,144,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	107793
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_MCMOUTS',0,24,152,7,3
	.word	112651
	.byte	11,24,155,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	108008
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_MODCTR',0,24,163,7,3
	.word	112717
	.byte	11,24,166,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	108210
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_MOSEL',0,24,174,7,3
	.word	112782
	.byte	11,24,177,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	108349
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_OCS',0,24,185,7,3
	.word	112846
	.byte	11,24,188,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	108543
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_PISEL0',0,24,196,7,3
	.word	112908
	.byte	11,24,199,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	108769
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_PISEL2',0,24,207,7,3
	.word	112973
	.byte	11,24,210,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	108943
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_PSLR',0,24,218,7,3
	.word	113038
	.byte	11,24,221,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	109074
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_T12',0,24,229,7,3
	.word	113101
	.byte	11,24,232,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	109167
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_T12DTC',0,24,240,7,3
	.word	113163
	.byte	11,24,243,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	109383
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_T12MSEL',0,24,251,7,3
	.word	113228
	.byte	11,24,254,7,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	109554
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_T12PR',0,24,134,8,3
	.word	113294
	.byte	11,24,137,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	109651
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_T13',0,24,145,8,3
	.word	113358
	.byte	11,24,148,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	109744
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_T13PR',0,24,156,8,3
	.word	113420
	.byte	11,24,159,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	109841
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_TCTR0',0,24,167,8,3
	.word	113484
	.byte	11,24,170,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	110090
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_TCTR2',0,24,178,8,3
	.word	113548
	.byte	11,24,181,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	110302
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_TCTR4',0,24,189,8,3
	.word	113612
	.byte	11,24,192,8,9,4,12
	.byte	'U',0
	.word	294
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	310
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	110656
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CCU6_TRPCTR',0,24,200,8,3
	.word	113676
	.byte	16,11,70,9,1,17
	.byte	'IfxVadc_AnalogConverterMode_off',0,0,17
	.byte	'IfxVadc_AnalogConverterMode_slowStandby',0,1,17
	.byte	'IfxVadc_AnalogConverterMode_fastStandby',0,2,17
	.byte	'IfxVadc_AnalogConverterMode_normalOperation',0,3,0,28
	.byte	'IfxVadc_AnalogConverterMode',0,11,76,3
	.word	113741
	.byte	16,11,80,9,1,17
	.byte	'IfxVadc_ArbitrationRounds_4_slots',0,0,17
	.byte	'IfxVadc_ArbitrationRounds_8_slots',0,1,17
	.byte	'IfxVadc_ArbitrationRounds_16_slots',0,2,17
	.byte	'IfxVadc_ArbitrationRounds_20_slots',0,3,0,28
	.byte	'IfxVadc_ArbitrationRounds',0,11,86,3
	.word	113947
	.byte	16,11,90,9,1,17
	.byte	'IfxVadc_BoundaryExtension_standard',0,0,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult1',0,1,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult2',0,2,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult3',0,3,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult4',0,4,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult5',0,5,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult6',0,6,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult7',0,7,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult8',0,8,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult9',0,9,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult10',0,10,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult11',0,11,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult12',0,12,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult13',0,13,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult14',0,14,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult15',0,15,0,28
	.byte	'IfxVadc_BoundaryExtension',0,11,108,3
	.word	114133
	.byte	16,11,112,9,1,17
	.byte	'IfxVadc_BoundarySelection_group0',0,0,17
	.byte	'IfxVadc_BoundarySelection_group1',0,1,17
	.byte	'IfxVadc_BoundarySelection_global0',0,2,17
	.byte	'IfxVadc_BoundarySelection_global1',0,3,0,28
	.byte	'IfxVadc_BoundarySelection',0,11,118,3
	.word	114921
	.byte	28
	.byte	'IfxVadc_ChannelId',0,11,133,1,3
	.word	27895
	.byte	16,11,137,1,9,1,17
	.byte	'IfxVadc_ChannelReference_standard',0,0,17
	.byte	'IfxVadc_ChannelReference_channel0',0,1,0,28
	.byte	'IfxVadc_ChannelReference',0,11,141,1,3
	.word	115130
	.byte	28
	.byte	'IfxVadc_ChannelResolution',0,11,151,1,3
	.word	31503
	.byte	16,11,155,1,9,1,17
	.byte	'IfxVadc_ChannelResult_0',0,0,17
	.byte	'IfxVadc_ChannelResult_1',0,1,17
	.byte	'IfxVadc_ChannelResult_2',0,2,17
	.byte	'IfxVadc_ChannelResult_3',0,3,17
	.byte	'IfxVadc_ChannelResult_4',0,4,17
	.byte	'IfxVadc_ChannelResult_5',0,5,17
	.byte	'IfxVadc_ChannelResult_6',0,6,17
	.byte	'IfxVadc_ChannelResult_7',0,7,17
	.byte	'IfxVadc_ChannelResult_8',0,8,17
	.byte	'IfxVadc_ChannelResult_9',0,9,17
	.byte	'IfxVadc_ChannelResult_10',0,10,17
	.byte	'IfxVadc_ChannelResult_11',0,11,17
	.byte	'IfxVadc_ChannelResult_12',0,12,17
	.byte	'IfxVadc_ChannelResult_13',0,13,17
	.byte	'IfxVadc_ChannelResult_14',0,14,17
	.byte	'IfxVadc_ChannelResult_15',0,15,0,28
	.byte	'IfxVadc_ChannelResult',0,11,173,1,3
	.word	115278
	.byte	28
	.byte	'IfxVadc_ChannelSelectionStyle',0,11,183,1,3
	.word	32232
	.byte	28
	.byte	'IfxVadc_ConversionType',0,11,190,1,3
	.word	31460
	.byte	28
	.byte	'IfxVadc_EmuxCodingScheme',0,11,199,1,3
	.word	32066
	.byte	16,11,203,1,9,1,17
	.byte	'IfxVadc_EmuxInterface_0',0,0,17
	.byte	'IfxVadc_EmuxInterface_1',0,1,0,28
	.byte	'IfxVadc_EmuxInterface',0,11,207,1,3
	.word	115843
	.byte	28
	.byte	'IfxVadc_EmuxSampleTimeControl',0,11,216,1,3
	.word	32139
	.byte	28
	.byte	'IfxVadc_EmuxSelectValue',0,11,231,1,3
	.word	31835
	.byte	28
	.byte	'IfxVadc_ExternalMultiplexerMode',0,11,242,1,3
	.word	31649
	.byte	16,11,246,1,9,1,17
	.byte	'IfxVadc_FifoMode_seperateResultRegister',0,0,17
	.byte	'IfxVadc_FifoMode_fifoStructure',0,1,17
	.byte	'IfxVadc_FifoMode_maximumMode',0,2,17
	.byte	'IfxVadc_FifoMode_minimumMode',0,3,0,28
	.byte	'IfxVadc_FifoMode',0,11,252,1,3
	.word	116046
	.byte	16,11,128,2,9,1,17
	.byte	'IfxVadc_GatingMode_disabled',0,0,17
	.byte	'IfxVadc_GatingMode_always',0,1,17
	.byte	'IfxVadc_GatingMode_gatingHigh',0,2,17
	.byte	'IfxVadc_GatingMode_gatingLow',0,3,0,28
	.byte	'IfxVadc_GatingMode',0,11,134,2,3
	.word	116216
	.byte	16,11,138,2,9,1,17
	.byte	'IfxVadc_GatingSource_0',0,0,17
	.byte	'IfxVadc_GatingSource_1',0,1,17
	.byte	'IfxVadc_GatingSource_2',0,2,17
	.byte	'IfxVadc_GatingSource_3',0,3,17
	.byte	'IfxVadc_GatingSource_4',0,4,17
	.byte	'IfxVadc_GatingSource_5',0,5,17
	.byte	'IfxVadc_GatingSource_6',0,6,17
	.byte	'IfxVadc_GatingSource_7',0,7,17
	.byte	'IfxVadc_GatingSource_8',0,8,17
	.byte	'IfxVadc_GatingSource_9',0,9,17
	.byte	'IfxVadc_GatingSource_10',0,10,17
	.byte	'IfxVadc_GatingSource_11',0,11,17
	.byte	'IfxVadc_GatingSource_12',0,12,17
	.byte	'IfxVadc_GatingSource_13',0,13,17
	.byte	'IfxVadc_GatingSource_14',0,14,17
	.byte	'IfxVadc_GatingSource_15',0,15,0,28
	.byte	'IfxVadc_GatingSource',0,11,156,2,3
	.word	116372
	.byte	28
	.byte	'IfxVadc_InputClasses',0,11,166,2,3
	.word	31331
	.byte	16,11,170,2,9,1,17
	.byte	'IfxVadc_LimitCheck_noCheck',0,0,17
	.byte	'IfxVadc_LimitCheck_eventIfInArea',0,1,17
	.byte	'IfxVadc_LimitCheck_eventIfOutsideArea',0,2,17
	.byte	'IfxVadc_LimitCheck_always',0,3,0,28
	.byte	'IfxVadc_LimitCheck',0,11,176,2,3
	.word	116845
	.byte	28
	.byte	'IfxVadc_LowSupplyVoltageSelect',0,11,184,2,3
	.word	31252
	.byte	28
	.byte	'IfxVadc_Protection',0,11,253,2,3
	.word	28513
	.byte	28
	.byte	'IfxVadc_RequestSlotPriority',0,11,135,3,3
	.word	28232
	.byte	28
	.byte	'IfxVadc_RequestSlotStartMode',0,11,143,3,3
	.word	28383
	.byte	28
	.byte	'IfxVadc_RequestSource',0,11,152,3,3
	.word	28102
	.byte	16,11,157,3,9,1,17
	.byte	'IfxVadc_SleepMode_enable',0,0,17
	.byte	'IfxVadc_SleepMode_disable',0,1,0,28
	.byte	'IfxVadc_SleepMode',0,11,161,3,3
	.word	117186
	.byte	28
	.byte	'IfxVadc_SrcNr',0,11,175,3,3
	.word	31057
	.byte	28
	.byte	'IfxVadc_Status',0,11,190,3,3
	.word	27668
	.byte	16,11,194,3,9,1,17
	.byte	'IfxVadc_TriggerMode_noExternalTrigger',0,0,17
	.byte	'IfxVadc_TriggerMode_uponFallingEdge',0,1,17
	.byte	'IfxVadc_TriggerMode_uponRisingEdge',0,2,17
	.byte	'IfxVadc_TriggerMode_uponAnyEdge',0,3,0,28
	.byte	'IfxVadc_TriggerMode',0,11,200,3,3
	.word	117322
	.byte	16,11,204,3,9,1,17
	.byte	'IfxVadc_TriggerSource_0',0,0,17
	.byte	'IfxVadc_TriggerSource_1',0,1,17
	.byte	'IfxVadc_TriggerSource_2',0,2,17
	.byte	'IfxVadc_TriggerSource_3',0,3,17
	.byte	'IfxVadc_TriggerSource_4',0,4,17
	.byte	'IfxVadc_TriggerSource_5',0,5,17
	.byte	'IfxVadc_TriggerSource_6',0,6,17
	.byte	'IfxVadc_TriggerSource_7',0,7,17
	.byte	'IfxVadc_TriggerSource_8',0,8,17
	.byte	'IfxVadc_TriggerSource_9',0,9,17
	.byte	'IfxVadc_TriggerSource_10',0,10,17
	.byte	'IfxVadc_TriggerSource_11',0,11,17
	.byte	'IfxVadc_TriggerSource_12',0,12,17
	.byte	'IfxVadc_TriggerSource_13',0,13,17
	.byte	'IfxVadc_TriggerSource_14',0,14,17
	.byte	'IfxVadc_TriggerSource_15',0,15,0,28
	.byte	'IfxVadc_TriggerSource',0,11,222,3,3
	.word	117507
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L136:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	0,0,0,4,36,0,3,8,11,15,62,15,0,0,5,59,0,3,8,0,0,6,15,0,73,19,0,0,7,46,1,3,8,32,13,58,15,59,15,57,15,73
	.byte	19,54,15,39,12,0,0,8,5,0,3,8,58,15,59,15,57,15,73,19,0,0,9,19,1,3,8,58,15,59,15,57,15,11,15,0,0,10,13
	.byte	0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,11,23,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,13,53,0,73,19,0,0,14,1,1,11,15,73,19,0,0,15,33,0,47,15,0,0,16,4,1,58,15,59,15,57,15,11,15,0,0,17
	.byte	40,0,3,8,28,13,0,0,18,13,0,73,19,11,15,56,9,0,0,19,38,0,73,19,0,0,20,46,1,3,8,54,15,39,12,63,12,60,12
	.byte	0,0,21,5,0,73,19,0,0,22,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,23,5,0,3,8,73,19,0,0,24,46,1,49,19
	.byte	0,0,25,5,0,49,19,0,0,26,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,27,46,0,3,8,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,63,12,60,12,0,0,28,22,0,3,8,58,15,59,15,57,15,73,19,0,0,29,21,0,54,15,0,0,30,52
	.byte	0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,31,19,1,58,15,59,15,57,15,11,15,0,0,32,21,0,54,15,39,12
	.byte	0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L137:
	.word	.L540-.L539
.L539:
	.half	3
	.word	.L542-.L541
.L541:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Src\\Std\\IfxSrc.h',0,0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Port\\Std\\IfxPort.h',0,0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0
	.byte	'IfxCpu_cfg.h',0,2,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.h',0,0,0,0
	.byte	'IfxVadc_regdef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Scu\\Std\\IfxScuCcu.h',0,0,0,0
	.byte	'IfxVadc_cfg.h',0,2,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0
	.byte	'IfxSrc_cfg.h',0,2,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Platform_Types.h',0,0
	.byte	0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Ifx_Types.h',0,0,0,0
	.byte	'IfxScu_cfg.h',0,2,0,0
	.byte	'IfxVadc_PinMap.h',0,3,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'IfxStm_regdef.h',0,1,0,0
	.byte	'IfxFlash_regdef.h',0,1,0,0
	.byte	'IfxCcu6_regdef.h',0,1,0,0,0
.L542:
.L540:
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_info'
.L138:
	.word	258
	.half	3
	.word	.L139
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L141,.L140
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_getBackgroundScanStatus',0,1,181,1,16
	.word	.L268
	.byte	1,1,1
	.word	.L103,.L269,.L102
	.byte	4
	.byte	'vadc',0,1,181,1,58
	.word	.L270,.L271
	.byte	5
	.word	.L103,.L269
	.byte	6
	.byte	'i',0,1,184,1,20
	.word	.L272,.L273
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_abbrev'
.L139:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_line'
.L140:
	.word	.L544-.L543
.L543:
	.half	3
	.word	.L546-.L545
.L545:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L546:
	.byte	5,17,7,0,5,2
	.word	.L103
	.byte	3,187,1,1,5,43,9
	.half	.L547-.L103
	.byte	3,126,1,5,28,9
	.half	.L15-.L547
	.byte	3,2,1,5,9,9
	.half	.L548-.L15
	.byte	1,5,20,7,9
	.half	.L549-.L548
	.byte	3,2,1,5,1,3,9,1,5,46,7,9
	.half	.L16-.L549
	.byte	3,115,1,5,43,1,5,12,7,9
	.half	.L550-.L16
	.byte	3,12,1,5,1,3,1,1,7,9
	.half	.L142-.L550
	.byte	0,1,1
.L544:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_ranges'
.L141:
	.word	-1,.L103,0,.L142-.L103,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_info'
.L143:
	.word	371
	.half	3
	.word	.L144
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L146,.L145
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_getResultBasedOnRequestSource',0,1,152,2,14
	.word	.L274
	.byte	1,1,1
	.word	.L109,.L275,.L108
	.byte	4
	.byte	'vadc',0,1,152,2,62
	.word	.L270,.L276
	.byte	4
	.byte	'group',0,1,152,2,80
	.word	.L277,.L278
	.byte	4
	.byte	'channel',0,1,152,2,105
	.word	.L279,.L280
	.byte	4
	.byte	'sourceType',0,1,152,2,136,1
	.word	.L281,.L282
	.byte	5
	.word	.L109,.L275
	.byte	6
	.byte	'sourceResultRegister',0,1,154,2,18
	.word	.L283,.L284
	.byte	6
	.byte	'tmpResult',0,1,155,2,18
	.word	.L274,.L285
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_abbrev'
.L144:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_line'
.L145:
	.word	.L552-.L551
.L551:
	.half	3
	.word	.L554-.L553
.L553:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L554:
	.byte	5,39,7,0,5,2
	.word	.L109
	.byte	3,153,2,1,5,10,9
	.half	.L482-.L109
	.byte	3,5,1,7,9
	.half	.L555-.L482
	.byte	3,4,1,7,9
	.half	.L556-.L555
	.byte	3,4,1,7,9
	.half	.L557-.L556
	.byte	1,5,47,9
	.half	.L34-.L557
	.byte	3,121,1,5,9,9
	.half	.L483-.L34
	.byte	3,1,1,5,47,9
	.half	.L35-.L483
	.byte	3,3,1,5,9,9
	.half	.L484-.L35
	.byte	3,1,1,5,47,9
	.half	.L36-.L484
	.byte	3,3,1,5,5,9
	.half	.L37-.L36
	.byte	3,4,1,5,13,7,9
	.half	.L558-.L37
	.byte	3,8,1,5,78,7,9
	.half	.L559-.L558
	.byte	1,5,89,9
	.half	.L560-.L559
	.byte	1,5,97,9
	.half	.L485-.L560
	.byte	1,5,49,7,9
	.half	.L561-.L485
	.byte	3,2,1,5,32,9
	.half	.L486-.L561
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L562-.L486
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L563-.L562
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L564-.L563
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L565-.L564
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L566-.L565
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L567-.L566
	.byte	1,5,1,3,11,1,5,50,7,9
	.half	.L42-.L567
	.byte	3,123,1,5,61,9
	.half	.L568-.L42
	.byte	1,5,37,9
	.half	.L41-.L568
	.byte	1,5,69,9
	.half	.L569-.L41
	.byte	1,5,1,9
	.half	.L487-.L569
	.byte	3,5,1,7,9
	.half	.L147-.L487
	.byte	0,1,1
.L552:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_ranges'
.L146:
	.word	-1,.L109,0,.L147-.L109,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_info'
.L148:
	.word	233
	.half	3
	.word	.L149
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L151,.L150
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_getScanStatus',0,1,202,2,16
	.word	.L268
	.byte	1,1,1
	.word	.L111,.L286,.L110
	.byte	4
	.byte	'group',0,1,202,2,50
	.word	.L277,.L287
	.byte	5
	.word	.L111,.L286
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_abbrev'
.L149:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_line'
.L150:
	.word	.L571-.L570
.L570:
	.half	3
	.word	.L573-.L572
.L572:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L573:
	.byte	5,21,7,0,5,2
	.word	.L111
	.byte	3,205,2,1,5,16,9
	.half	.L574-.L111
	.byte	3,2,1,5,1,9
	.half	.L575-.L574
	.byte	3,6,1,7,9
	.half	.L152-.L575
	.byte	0,1,1
.L571:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_ranges'
.L151:
	.word	-1,.L111,0,.L152-.L111,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_info'
.L153:
	.word	263
	.half	3
	.word	.L154
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L156,.L155
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_setScan',0,1,153,4,6,1,1,1
	.word	.L131,.L288,.L130
	.byte	4
	.byte	'group',0,1,153,4,34
	.word	.L277,.L289
	.byte	4
	.byte	'channels',0,1,153,4,48
	.word	.L290,.L291
	.byte	4
	.byte	'mask',0,1,153,4,65
	.word	.L290,.L292
	.byte	5
	.word	.L131,.L288
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_abbrev'
.L154:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_line'
.L155:
	.word	.L577-.L576
.L576:
	.half	3
	.word	.L579-.L578
.L578:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L579:
	.byte	5,40,7,0,5,2
	.word	.L131
	.byte	3,156,4,1,5,35,1,5,40,9
	.half	.L580-.L131
	.byte	1,5,38,9
	.half	.L581-.L580
	.byte	1,5,59,9
	.half	.L582-.L581
	.byte	1,5,47,9
	.half	.L534-.L582
	.byte	1,5,20,1,5,1,9
	.half	.L583-.L534
	.byte	3,1,1,7,9
	.half	.L157-.L583
	.byte	0,1,1
.L577:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_ranges'
.L156:
	.word	-1,.L131,0,.L157-.L131,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_info'
.L158:
	.word	234
	.half	3
	.word	.L159
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L161,.L160
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_getQueueStatus',0,1,134,2,16
	.word	.L268
	.byte	1,1,1
	.word	.L107,.L293,.L106
	.byte	4
	.byte	'group',0,1,134,2,51
	.word	.L277,.L294
	.byte	5
	.word	.L107,.L293
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_abbrev'
.L159:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_line'
.L160:
	.word	.L585-.L584
.L584:
	.half	3
	.word	.L587-.L586
.L586:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L587:
	.byte	5,29,7,0,5,2
	.word	.L107
	.byte	3,138,2,1,5,13,9
	.half	.L588-.L107
	.byte	1,5,1,9
	.half	.L589-.L588
	.byte	3,10,1,7,9
	.half	.L162-.L589
	.byte	0,1,1
.L585:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_ranges'
.L161:
	.word	-1,.L107,0,.L162-.L107,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_info'
.L163:
	.word	240
	.half	3
	.word	.L164
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L166,.L165
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_getAdcAnalogFrequency',0,1,163,1,9
	.word	.L295
	.byte	1,1,1
	.word	.L97,.L296,.L96
	.byte	4
	.byte	'vadc',0,1,163,1,49
	.word	.L270,.L297
	.byte	5
	.word	.L97,.L296
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_abbrev'
.L164:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_line'
.L165:
	.word	.L591-.L590
.L590:
	.half	3
	.word	.L593-.L592
.L592:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L593:
	.byte	5,9,7,0,5,2
	.word	.L97
	.byte	3,162,1,1,5,37,9
	.half	.L466-.L97
	.byte	3,2,1,5,63,9
	.half	.L465-.L466
	.byte	1,5,46,9
	.half	.L594-.L465
	.byte	1,5,40,9
	.half	.L595-.L594
	.byte	1,5,1,3,1,1,7,9
	.half	.L167-.L595
	.byte	0,1,1
.L591:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_ranges'
.L166:
	.word	-1,.L97,0,.L167-.L97,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_info'
.L168:
	.word	241
	.half	3
	.word	.L169
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L171,.L170
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_getAdcDigitalFrequency',0,1,169,1,9
	.word	.L295
	.byte	1,1,1
	.word	.L99,.L298,.L98
	.byte	4
	.byte	'vadc',0,1,169,1,50
	.word	.L270,.L299
	.byte	5
	.word	.L99,.L298
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_abbrev'
.L169:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_line'
.L170:
	.word	.L597-.L596
.L596:
	.half	3
	.word	.L599-.L598
.L598:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L599:
	.byte	5,9,7,0,5,2
	.word	.L99
	.byte	3,168,1,1,5,37,9
	.half	.L468-.L99
	.byte	3,2,1,5,63,9
	.half	.L467-.L468
	.byte	1,5,46,9
	.half	.L600-.L467
	.byte	1,5,40,9
	.half	.L601-.L600
	.byte	1,5,1,3,1,1,7,9
	.half	.L172-.L601
	.byte	0,1,1
.L597:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_ranges'
.L171:
	.word	-1,.L99,0,.L172-.L99,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_info'
.L173:
	.word	314
	.half	3
	.word	.L174
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L176,.L175
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_setArbiterPriority',0,1,129,4,6,1,1,1
	.word	.L129,.L300,.L128
	.byte	4
	.byte	'vadcG',0,1,129,4,45
	.word	.L277,.L301
	.byte	4
	.byte	'slotEnable',0,1,129,4,60
	.word	.L272,.L302
	.byte	4
	.byte	'prio',0,1,129,4,100
	.word	.L303,.L304
	.byte	4
	.byte	'mode',0,1,129,4,135,1
	.word	.L305,.L306
	.byte	4
	.byte	'slot',0,1,129,4,163,1
	.word	.L281,.L307
	.byte	5
	.word	.L129,.L300
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_abbrev'
.L174:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_line'
.L175:
	.word	.L603-.L602
.L602:
	.half	3
	.word	.L605-.L604
.L604:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L605:
	.byte	5,69,7,0,5,2
	.word	.L129
	.byte	3,132,4,1,5,5,9
	.half	.L606-.L129
	.byte	3,126,1,5,38,7,9
	.half	.L607-.L606
	.byte	3,2,1,5,21,1,5,60,9
	.half	.L533-.L607
	.byte	3,1,1,5,24,9
	.half	.L532-.L533
	.byte	3,127,1,5,29,9
	.half	.L608-.L532
	.byte	3,1,1,5,21,9
	.half	.L609-.L608
	.byte	1,5,56,9
	.half	.L610-.L609
	.byte	1,5,27,9
	.half	.L611-.L610
	.byte	1,5,24,9
	.half	.L612-.L611
	.byte	1,5,31,9
	.half	.L613-.L612
	.byte	3,5,1,5,21,9
	.half	.L614-.L613
	.byte	3,124,1,5,33,9
	.half	.L615-.L614
	.byte	1,5,66,9
	.half	.L531-.L615
	.byte	3,4,1,5,24,9
	.half	.L616-.L531
	.byte	3,124,1,5,36,9
	.half	.L617-.L616
	.byte	3,4,1,5,9,9
	.half	.L618-.L617
	.byte	3,126,1,5,25,7,9
	.half	.L619-.L618
	.byte	3,2,1,5,28,9
	.half	.L620-.L619
	.byte	1,5,80,1,5,25,9
	.half	.L76-.L620
	.byte	3,4,1,5,31,9
	.half	.L621-.L76
	.byte	1,5,28,9
	.half	.L622-.L621
	.byte	1,5,9,3,126,1,5,29,9
	.half	.L75-.L622
	.byte	3,7,1,5,21,1,5,56,9
	.half	.L623-.L75
	.byte	1,5,27,9
	.half	.L624-.L623
	.byte	1,5,24,9
	.half	.L625-.L624
	.byte	1,5,1,9
	.half	.L626-.L625
	.byte	3,2,1,7,9
	.half	.L177-.L626
	.byte	0,1,1
.L603:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_ranges'
.L176:
	.word	-1,.L129,0,.L177-.L129,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_info'
.L178:
	.word	268
	.half	3
	.word	.L179
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L181,.L180
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_disableAccess',0,1,54,6,1,1,1
	.word	.L85,.L308,.L84
	.byte	4
	.byte	'vadc',0,1,54,38
	.word	.L270,.L309
	.byte	4
	.byte	'protectionSet',0,1,54,63
	.word	.L310,.L311
	.byte	5
	.word	.L312
	.byte	6
	.byte	'passwd',0,1,56,12
	.word	.L313,.L314
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_abbrev'
.L179:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_line'
.L180:
	.word	.L628-.L627
.L627:
	.half	3
	.word	.L630-.L629
.L629:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L630:
	.byte	5,6,7,0,5,2
	.word	.L85
	.byte	3,53,1,5,56,9
	.half	.L437-.L85
	.byte	3,2,1,5,19,9
	.half	.L436-.L437
	.byte	1,5,34,9
	.half	.L440-.L436
	.byte	3,1,1,5,25,9
	.half	.L439-.L440
	.byte	3,2,1,5,5,9
	.half	.L631-.L439
	.byte	1,5,30,7,9
	.half	.L632-.L631
	.byte	3,2,1,5,23,1,5,41,9
	.half	.L633-.L632
	.byte	1,5,26,9
	.half	.L634-.L633
	.byte	1,5,58,9
	.half	.L635-.L634
	.byte	1,5,23,9
	.half	.L2-.L635
	.byte	3,4,1,5,26,9
	.half	.L438-.L2
	.byte	1,5,32,9
	.half	.L3-.L438
	.byte	3,3,1,5,1,9
	.half	.L182-.L3
	.byte	3,1,0,1,1
.L628:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_ranges'
.L181:
	.word	-1,.L85,0,.L182-.L85,0,0
.L312:
	.word	-1,.L85,0,.L308-.L85,-1,.L87,0,.L267-.L87,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_info'
.L183:
	.word	297
	.half	3
	.word	.L184
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L186,.L185
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_disablePostCalibration',0,1,72,6,1,1,1
	.word	.L89,.L315,.L88
	.byte	4
	.byte	'vadc',0,1,72,47
	.word	.L270,.L316
	.byte	4
	.byte	'group',0,1,72,69
	.word	.L317,.L318
	.byte	4
	.byte	'disable',0,1,72,84
	.word	.L272,.L319
	.byte	5
	.word	.L89,.L315
	.byte	6
	.word	.L320
	.byte	7
	.byte	'mask',0,1,78,16
	.word	.L290,.L322
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_abbrev'
.L184:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,11,1,85
	.byte	6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_line'
.L185:
	.word	.L637-.L636
.L636:
	.half	3
	.word	.L639-.L638
.L638:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L639:
	.byte	5,6,7,0,5,2
	.word	.L89
	.byte	3,199,0,1,5,5,9
	.half	.L442-.L89
	.byte	3,2,1,5,36,7,9
	.half	.L640-.L442
	.byte	3,2,1,5,23,9
	.half	.L321-.L640
	.byte	3,2,1,5,57,9
	.half	.L641-.L321
	.byte	1,5,25,9
	.half	.L642-.L641
	.byte	1,5,9,9
	.half	.L444-.L642
	.byte	3,2,1,5,26,7,9
	.half	.L643-.L444
	.byte	3,2,1,5,29,9
	.half	.L443-.L643
	.byte	1,5,36,1,5,1,9
	.half	.L4-.L443
	.byte	3,9,1,5,32,7,9
	.half	.L5-.L4
	.byte	3,123,1,5,26,1,5,32,9
	.half	.L445-.L5
	.byte	1,5,29,9
	.half	.L446-.L445
	.byte	1,5,37,9
	.half	.L644-.L446
	.byte	3,3,1,5,1,9
	.half	.L187-.L644
	.byte	3,2,0,1,1
.L637:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_ranges'
.L186:
	.word	-1,.L89,0,.L187-.L89,0,0
.L320:
	.word	-1,.L89,.L321-.L89,.L4-.L89,.L5-.L89,.L315-.L89,-1,.L91,0,.L262-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_info'
.L188:
	.word	271
	.half	3
	.word	.L189
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L191,.L190
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_enableAccess',0,1,94,6,1,1,1
	.word	.L93,.L323,.L92
	.byte	4
	.byte	'vadc',0,1,94,37
	.word	.L270,.L324
	.byte	4
	.byte	'protectionSet',0,1,94,62
	.word	.L310,.L325
	.byte	5
	.word	.L93,.L323
	.byte	6
	.byte	'passwd',0,1,96,12
	.word	.L313,.L326
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_abbrev'
.L189:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_line'
.L190:
	.word	.L646-.L645
.L645:
	.half	3
	.word	.L648-.L647
.L647:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L648:
	.byte	5,6,7,0,5,2
	.word	.L93
	.byte	3,221,0,1,5,56,9
	.half	.L453-.L93
	.byte	3,2,1,5,19,9
	.half	.L450-.L453
	.byte	1,5,34,9
	.half	.L452-.L450
	.byte	3,1,1,5,25,9
	.half	.L451-.L452
	.byte	3,2,1,5,5,9
	.half	.L649-.L451
	.byte	1,5,31,7,9
	.half	.L650-.L649
	.byte	3,2,1,5,23,1,5,42,9
	.half	.L651-.L650
	.byte	1,5,29,9
	.half	.L652-.L651
	.byte	1,5,26,9
	.half	.L653-.L652
	.byte	1,5,59,9
	.half	.L654-.L653
	.byte	1,5,23,9
	.half	.L7-.L654
	.byte	3,4,1,5,29,9
	.half	.L655-.L7
	.byte	1,5,26,9
	.half	.L656-.L655
	.byte	1,5,32,9
	.half	.L8-.L656
	.byte	3,3,1,5,1,9
	.half	.L192-.L8
	.byte	3,1,0,1,1
.L646:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_ranges'
.L191:
	.word	-1,.L93,0,.L192-.L93,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_info'
.L193:
	.word	302
	.half	3
	.word	.L194
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L196,.L195
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_enableGroupSync',0,1,112,6,1,1,1
	.word	.L95,.L327,.L94
	.byte	4
	.byte	'vadc',0,1,112,40
	.word	.L270,.L328
	.byte	4
	.byte	'ccu6Num',0,1,112,53
	.word	.L290,.L329
	.byte	5
	.word	.L95,.L327
	.byte	6
	.byte	'passwd',0,1,114,12
	.word	.L313,.L330
	.byte	5
	.word	.L331,.L332
	.byte	6
	.byte	'vadcGlobCfg',0,1,119,26
	.word	.L333,.L334
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_abbrev'
.L194:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_line'
.L195:
	.word	.L658-.L657
.L657:
	.half	3
	.word	.L660-.L659
.L659:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L660:
	.byte	5,6,7,0,5,2
	.word	.L95
	.byte	3,239,0,1,5,53,9
	.half	.L460-.L95
	.byte	3,2,1,5,19,9
	.half	.L455-.L460
	.byte	1,5,31,9
	.half	.L459-.L455
	.byte	3,1,1,5,44,9
	.half	.L331-.L459
	.byte	3,5,1,5,29,9
	.half	.L462-.L331
	.byte	3,1,1,9
	.half	.L661-.L462
	.byte	3,1,1,5,36,3,2,1,5,25,9
	.half	.L457-.L661
	.byte	3,1,1,5,37,9
	.half	.L662-.L457
	.byte	3,1,1,5,5,9
	.half	.L332-.L662
	.byte	3,3,1,5,21,7,9
	.half	.L663-.L332
	.byte	3,3,1,5,22,9
	.half	.L664-.L663
	.byte	3,2,1,5,34,9
	.half	.L458-.L664
	.byte	3,3,1,5,32,9
	.half	.L665-.L458
	.byte	1,9
	.half	.L666-.L665
	.byte	3,1,1,5,23,9
	.half	.L667-.L666
	.byte	3,1,1,5,32,9
	.half	.L668-.L667
	.byte	1,5,67,9
	.half	.L669-.L668
	.byte	3,1,1,5,32,1,5,22,9
	.half	.L670-.L669
	.byte	3,1,1,5,32,9
	.half	.L671-.L670
	.byte	1,5,35,3,124,1,5,10,9
	.half	.L9-.L671
	.byte	3,6,1,5,23,7,9
	.half	.L672-.L9
	.byte	3,3,1,5,21,1,9
	.half	.L463-.L672
	.byte	3,1,1,5,22,9
	.half	.L673-.L463
	.byte	3,2,1,5,34,9
	.half	.L674-.L673
	.byte	3,3,1,5,32,9
	.half	.L675-.L674
	.byte	1,9
	.half	.L676-.L675
	.byte	3,1,1,5,23,9
	.half	.L677-.L676
	.byte	3,1,1,5,32,9
	.half	.L678-.L677
	.byte	1,5,67,9
	.half	.L679-.L678
	.byte	3,1,1,5,32,1,5,22,9
	.half	.L680-.L679
	.byte	3,1,1,5,32,9
	.half	.L681-.L680
	.byte	1,5,29,9
	.half	.L11-.L681
	.byte	3,3,1,5,1,9
	.half	.L197-.L11
	.byte	3,1,0,1,1
.L658:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_ranges'
.L196:
	.word	-1,.L95,0,.L197-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_info'
.L198:
	.word	222
	.half	3
	.word	.L199
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L201,.L200
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_getAdcModuleFrequency',0,1,175,1,9
	.word	.L295
	.byte	1,1,1
	.word	.L101,.L335,.L100
	.byte	4
	.word	.L101,.L335
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_abbrev'
.L199:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_line'
.L200:
	.word	.L683-.L682
.L682:
	.half	3
	.word	.L685-.L684
.L684:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L685:
	.byte	5,37,7,0,5,2
	.word	.L101
	.byte	3,176,1,1,5,1,7,9
	.half	.L202-.L101
	.byte	3,1,0,1,1
.L683:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_ranges'
.L201:
	.word	-1,.L101,0,.L202-.L101,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_info'
.L203:
	.word	252
	.half	3
	.word	.L204
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L206,.L205
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_getSrcAddress',0,1,217,2,24
	.word	.L336
	.byte	1,1,1
	.word	.L113,.L337,.L112
	.byte	4
	.byte	'group',0,1,217,2,62
	.word	.L317,.L338
	.byte	4
	.byte	'index',0,1,217,2,83
	.word	.L339,.L340
	.byte	5
	.word	.L113,.L337
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_abbrev'
.L204:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_line'
.L205:
	.word	.L687-.L686
.L686:
	.half	3
	.word	.L689-.L688
.L688:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L689:
	.byte	5,5,7,0,5,2
	.word	.L113
	.byte	3,220,2,1,5,15,7,9
	.half	.L690-.L113
	.byte	3,2,1,5,20,9
	.half	.L691-.L690
	.byte	3,2,1,5,27,9
	.half	.L692-.L691
	.byte	1,5,54,9
	.half	.L49-.L692
	.byte	3,14,1,5,28,1,5,65,9
	.half	.L488-.L49
	.byte	1,5,28,1,5,52,9
	.half	.L489-.L488
	.byte	1,5,18,9
	.half	.L693-.L489
	.byte	3,2,1,5,1,9
	.half	.L694-.L693
	.byte	3,1,1,7,9
	.half	.L207-.L694
	.byte	0,1,1
.L687:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_ranges'
.L206:
	.word	-1,.L113,0,.L207-.L113,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_info'
.L208:
	.word	299
	.half	3
	.word	.L209
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L211,.L210
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_initialiseAdcArbiterClock',0,1,245,2,6,1,1,1
	.word	.L115,.L341,.L114
	.byte	4
	.byte	'vadc',0,1,245,2,50
	.word	.L270,.L342
	.byte	4
	.byte	'arbiterClockDivider',0,1,245,2,63
	.word	.L290,.L343
	.byte	5
	.word	.L115,.L341
	.byte	6
	.byte	'tempGLOBCFG',0,1,247,2,22
	.word	.L333,.L344
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_abbrev'
.L209:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_line'
.L210:
	.word	.L696-.L695
.L695:
	.half	3
	.word	.L698-.L697
.L697:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L698:
	.byte	5,6,7,0,5,2
	.word	.L115
	.byte	3,244,2,1,5,40,9
	.half	.L493-.L115
	.byte	3,3,1,5,18,9
	.half	.L492-.L493
	.byte	3,1,1,5,25,9
	.half	.L699-.L492
	.byte	1,5,32,9
	.half	.L700-.L699
	.byte	3,2,1,5,25,9
	.half	.L490-.L700
	.byte	3,127,1,5,32,9
	.half	.L701-.L490
	.byte	3,1,1,5,25,9
	.half	.L491-.L701
	.byte	3,1,1,5,33,9
	.half	.L702-.L491
	.byte	3,1,1,5,1,9
	.half	.L212-.L702
	.byte	3,1,0,1,1
.L696:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_ranges'
.L211:
	.word	-1,.L115,0,.L212-.L115,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_info'
.L213:
	.word	303
	.half	3
	.word	.L214
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L216,.L215
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_initialiseAdcConverterClock',0,1,129,3,6,1,1,1
	.word	.L117,.L345,.L116
	.byte	4
	.byte	'vadc',0,1,129,3,52
	.word	.L270,.L346
	.byte	4
	.byte	'converterClockDivider',0,1,129,3,65
	.word	.L290,.L347
	.byte	5
	.word	.L117,.L345
	.byte	6
	.byte	'tempGLOBCFG',0,1,131,3,22
	.word	.L333,.L348
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_abbrev'
.L214:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_line'
.L215:
	.word	.L704-.L703
.L703:
	.half	3
	.word	.L706-.L705
.L705:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L706:
	.byte	5,6,7,0,5,2
	.word	.L117
	.byte	3,128,3,1,5,40,9
	.half	.L498-.L117
	.byte	3,3,1,5,25,9
	.half	.L497-.L498
	.byte	3,1,1,5,32,9
	.half	.L707-.L497
	.byte	3,2,1,5,25,9
	.half	.L495-.L707
	.byte	3,127,1,5,32,3,1,1,5,25,9
	.half	.L496-.L495
	.byte	3,1,1,5,33,9
	.half	.L708-.L496
	.byte	3,1,1,5,1,9
	.half	.L217-.L708
	.byte	3,1,0,1,1
.L704:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_ranges'
.L216:
	.word	-1,.L117,0,.L217-.L117,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_info'
.L218:
	.word	290
	.half	3
	.word	.L219
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L221,.L220
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_initializeFAdcD',0,1,141,3,8
	.word	.L290
	.byte	1,1,1
	.word	.L119,.L349,.L118
	.byte	4
	.byte	'vadc',0,1,141,3,42
	.word	.L270,.L350
	.byte	4
	.byte	'fAdcD',0,1,141,3,55
	.word	.L290,.L351
	.byte	5
	.word	.L119,.L349
	.byte	6
	.byte	'divD',0,1,143,3,12
	.word	.L290,.L352
	.byte	6
	.byte	'fadc',0,1,145,3,12
	.word	.L290,.L353
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_abbrev'
.L219:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_line'
.L220:
	.word	.L710-.L709
.L709:
	.half	3
	.word	.L712-.L711
.L711:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L712:
	.byte	5,8,7,0,5,2
	.word	.L119
	.byte	3,140,3,1,5,44,9
	.half	.L501-.L119
	.byte	3,4,1,5,20,9
	.half	.L503-.L501
	.byte	3,2,1,5,28,9
	.half	.L713-.L503
	.byte	1,5,20,9
	.half	.L502-.L713
	.byte	3,2,1,5,45,3,3,1,5,27,9
	.half	.L506-.L502
	.byte	3,127,1,5,19,9
	.half	.L505-.L506
	.byte	1,5,1,3,3,1,7,9
	.half	.L222-.L505
	.byte	0,1,1
.L710:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_ranges'
.L221:
	.word	-1,.L119,0,.L222-.L119,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_info'
.L223:
	.word	310
	.half	3
	.word	.L224
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L226,.L225
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_initializeFAdcI',0,1,157,3,8
	.word	.L290
	.byte	1,1,1
	.word	.L121,.L354,.L120
	.byte	4
	.byte	'vadc',0,1,157,3,42
	.word	.L270,.L355
	.byte	4
	.byte	'fAdcI',0,1,157,3,55
	.word	.L290,.L356
	.byte	5
	.word	.L121,.L354
	.byte	6
	.byte	'divA',0,1,159,3,12
	.word	.L290,.L357
	.byte	6
	.byte	'result',0,1,160,3,12
	.word	.L290,.L358
	.byte	6
	.byte	'fadc',0,1,161,3,12
	.word	.L290,.L359
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_abbrev'
.L224:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_line'
.L225:
	.word	.L715-.L714
.L714:
	.half	3
	.word	.L717-.L716
.L716:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L717:
	.byte	5,8,7,0,5,2
	.word	.L121
	.byte	3,156,3,1,5,44,9
	.half	.L508-.L121
	.byte	3,4,1,5,20,9
	.half	.L510-.L508
	.byte	3,3,1,5,26,9
	.half	.L718-.L510
	.byte	1,5,20,9
	.half	.L719-.L718
	.byte	3,2,1,5,25,9
	.half	.L509-.L719
	.byte	1,5,26,9
	.half	.L720-.L509
	.byte	3,1,1,5,20,9
	.half	.L721-.L720
	.byte	1,5,27,9
	.half	.L512-.L721
	.byte	3,1,1,5,19,9
	.half	.L722-.L512
	.byte	1,5,18,3,2,1,5,5,9
	.half	.L513-.L722
	.byte	1,5,24,7,9
	.half	.L723-.L513
	.byte	3,2,1,5,31,9
	.half	.L724-.L723
	.byte	3,2,1,5,23,9
	.half	.L725-.L724
	.byte	1,5,16,9
	.half	.L511-.L725
	.byte	1,5,22,9
	.half	.L52-.L511
	.byte	3,7,1,5,66,9
	.half	.L726-.L52
	.byte	1,5,56,9
	.half	.L727-.L726
	.byte	1,5,63,9
	.half	.L728-.L727
	.byte	1,5,16,7,9
	.half	.L729-.L728
	.byte	3,2,1,5,19,1,5,51,9
	.half	.L53-.L729
	.byte	3,4,1,5,5,9
	.half	.L54-.L53
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L227-.L54
	.byte	0,1,1
.L715:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_ranges'
.L226:
	.word	-1,.L121,0,.L227-.L121,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_info'
.L228:
	.word	279
	.half	3
	.word	.L229
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L231,.L230
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_isPostCalibration',0,1,194,3,9
	.word	.L272
	.byte	1,1,1
	.word	.L123,.L360,.L122
	.byte	4
	.byte	'vadc',0,1,194,3,45
	.word	.L270,.L361
	.byte	4
	.byte	'group',0,1,194,3,67
	.word	.L317,.L362
	.byte	5
	.word	.L123,.L360
	.byte	6
	.byte	'pcEnabled',0,1,196,3,13
	.word	.L272,.L363
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_abbrev'
.L229:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_line'
.L230:
	.word	.L731-.L730
.L730:
	.half	3
	.word	.L733-.L732
.L732:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L733:
	.byte	5,10,7,0,5,2
	.word	.L123
	.byte	3,199,3,1,7,9
	.half	.L734-.L123
	.byte	3,2,1,7,9
	.half	.L735-.L734
	.byte	3,2,1,7,9
	.half	.L736-.L735
	.byte	3,2,1,7,9
	.half	.L737-.L736
	.byte	3,2,1,7,9
	.half	.L738-.L737
	.byte	3,2,1,7,9
	.half	.L739-.L738
	.byte	3,2,1,7,9
	.half	.L740-.L739
	.byte	3,2,1,7,9
	.half	.L741-.L740
	.byte	1,5,56,9
	.half	.L56-.L741
	.byte	3,114,1,5,9,9
	.half	.L742-.L56
	.byte	3,1,1,5,56,9
	.half	.L57-.L742
	.byte	3,1,1,5,9,9
	.half	.L743-.L57
	.byte	3,1,1,5,56,9
	.half	.L58-.L743
	.byte	3,1,1,5,9,9
	.half	.L744-.L58
	.byte	3,1,1,5,56,9
	.half	.L59-.L744
	.byte	3,1,1,5,9,9
	.half	.L745-.L59
	.byte	3,1,1,5,56,9
	.half	.L60-.L745
	.byte	3,1,1,5,9,9
	.half	.L746-.L60
	.byte	3,1,1,5,56,9
	.half	.L61-.L746
	.byte	3,1,1,5,9,9
	.half	.L747-.L61
	.byte	3,1,1,5,56,9
	.half	.L62-.L747
	.byte	3,1,1,5,9,9
	.half	.L748-.L62
	.byte	3,1,1,5,56,9
	.half	.L63-.L748
	.byte	3,1,1,5,64,9
	.half	.L65-.L63
	.byte	1,5,1,3,7,1,5,39,7,9
	.half	.L64-.L65
	.byte	3,123,1,5,1,3,5,1,7,9
	.half	.L232-.L64
	.byte	0,1,1
.L731:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_ranges'
.L231:
	.word	-1,.L123,0,.L232-.L123,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_info'
.L233:
	.word	247
	.half	3
	.word	.L234
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L236,.L235
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_resetKernel',0,1,224,3,6,1,1,1
	.word	.L125,.L364,.L124
	.byte	4
	.byte	'vadc',0,1,224,3,36
	.word	.L270,.L365
	.byte	5
	.word	.L125,.L364
	.byte	6
	.byte	'passwd',0,1,226,3,12
	.word	.L313,.L366
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_abbrev'
.L234:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_line'
.L235:
	.word	.L750-.L749
.L749:
	.half	3
	.word	.L752-.L751
.L751:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L752:
	.byte	5,6,7,0,5,2
	.word	.L125
	.byte	3,223,3,1,5,53,9
	.half	.L516-.L125
	.byte	3,2,1,5,19,9
	.half	.L515-.L516
	.byte	1,5,31,9
	.half	.L518-.L515
	.byte	3,2,1,5,32,9
	.half	.L517-.L518
	.byte	3,1,1,5,18,9
	.half	.L521-.L517
	.byte	3,1,1,5,29,9
	.half	.L753-.L521
	.byte	3,2,1,5,23,9
	.half	.L522-.L753
	.byte	3,126,1,5,18,9
	.half	.L754-.L522
	.byte	3,1,1,5,23,9
	.half	.L755-.L754
	.byte	1,5,29,9
	.half	.L756-.L755
	.byte	3,1,1,5,25,9
	.half	.L74-.L756
	.byte	3,2,1,5,38,9
	.half	.L757-.L74
	.byte	1,5,31,7,9
	.half	.L758-.L757
	.byte	3,4,1,5,20,9
	.half	.L759-.L758
	.byte	3,1,1,5,25,9
	.half	.L760-.L759
	.byte	1,5,33,9
	.half	.L520-.L760
	.byte	3,1,1,5,29,9
	.half	.L524-.L520
	.byte	3,1,1,5,1,9
	.half	.L237-.L524
	.byte	3,1,0,1,1
.L750:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_ranges'
.L236:
	.word	-1,.L125,0,.L237-.L125,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_info'
.L238:
	.word	292
	.half	3
	.word	.L239
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L241,.L240
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_selectPowerSupplyVoltage',0,1,245,3,6,1,1,1
	.word	.L127,.L367,.L126
	.byte	4
	.byte	'vadc',0,1,245,3,49
	.word	.L270,.L368
	.byte	4
	.byte	'supplyVoltage',0,1,245,3,86
	.word	.L369,.L370
	.byte	5
	.word	.L127,.L367
	.byte	6
	.byte	'tempGLOBCFG',0,1,247,3,22
	.word	.L333,.L371
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_abbrev'
.L239:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_line'
.L240:
	.word	.L762-.L761
.L761:
	.half	3
	.word	.L764-.L763
.L763:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L764:
	.byte	5,6,7,0,5,2
	.word	.L127
	.byte	3,244,3,1,5,40,9
	.half	.L529-.L127
	.byte	3,3,1,5,18,9
	.half	.L528-.L529
	.byte	3,1,1,5,25,9
	.half	.L765-.L528
	.byte	1,5,32,9
	.half	.L766-.L765
	.byte	3,2,1,5,25,9
	.half	.L526-.L766
	.byte	3,127,1,5,32,9
	.half	.L767-.L526
	.byte	3,1,1,5,25,9
	.half	.L527-.L767
	.byte	3,1,1,5,33,9
	.half	.L768-.L527
	.byte	3,1,1,5,1,9
	.half	.L242-.L768
	.byte	3,1,0,1,1
.L762:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_ranges'
.L241:
	.word	-1,.L127,0,.L242-.L127,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_info'
.L243:
	.word	396
	.half	3
	.word	.L244
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L246,.L245
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_startupCalibration',0,1,161,4,6,1,1,1
	.word	.L133,.L372,.L132
	.byte	4
	.byte	'vadc',0,1,161,4,43
	.word	.L270,.L373
	.byte	5
	.word	.L133,.L372
	.byte	6
	.byte	'calibrationRunning',0,1,163,4,13
	.word	.L272,.L374
	.byte	6
	.byte	'adcCalGroupNum',0,1,164,4,13
	.word	.L272,.L375
	.byte	7
	.word	.L376,.L377,.L378
	.byte	8
	.word	.L379,.L380
	.byte	9
	.word	.L381,.L377,.L378
	.byte	0,7
	.word	.L382,.L80,.L383
	.byte	8
	.word	.L384,.L385
	.byte	8
	.word	.L386,.L387
	.byte	10
	.word	.L388,.L80,.L383
	.byte	6
	.byte	'status',0,2,132,14,11
	.word	.L272,.L389
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_abbrev'
.L244:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_line'
.L245:
	.word	.L770-.L769
.L769:
	.half	3
	.word	.L772-.L771
.L771:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.h',0,0,0,0,0
.L772:
	.byte	5,6,7,0,5,2
	.word	.L133
	.byte	3,160,4,1,5,32,9
	.half	.L535-.L133
	.byte	3,6,1,4,2,5,20,9
	.half	.L377-.L535
	.byte	3,134,12,1,5,27,9
	.half	.L773-.L377
	.byte	1,4,1,5,33,9
	.half	.L378-.L773
	.byte	3,253,115,1,5,28,9
	.half	.L79-.L378
	.byte	3,6,1,4,2,5,18,3,213,9,1,4,1,5,77,9
	.half	.L537-.L79
	.byte	3,173,118,1,4,2,5,46,9
	.half	.L80-.L537
	.byte	3,211,9,1,4,1,5,93,9
	.half	.L774-.L80
	.byte	3,173,118,1,4,2,5,46,9
	.half	.L775-.L774
	.byte	3,211,9,1,4,1,5,36,9
	.half	.L538-.L775
	.byte	3,177,118,1,5,77,3,124,1,5,41,7,9
	.half	.L383-.L538
	.byte	3,11,1,5,1,7,9
	.half	.L776-.L383
	.byte	3,1,1,7,9
	.half	.L247-.L776
	.byte	0,1,1
.L770:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_ranges'
.L246:
	.word	-1,.L133,0,.L247-.L133,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_info'
.L248:
	.word	510
	.half	3
	.word	.L249
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L251,.L250
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_getChannelConversionTime',0,1,202,1,9
	.word	.L295
	.byte	1,1,1
	.word	.L105,.L390,.L104
	.byte	4
	.byte	'vadc',0,1,202,1,52
	.word	.L270,.L391
	.byte	4
	.byte	'group',0,1,202,1,74
	.word	.L317,.L392
	.byte	4
	.byte	'inputClass',0,1,202,1,102
	.word	.L393,.L394
	.byte	4
	.byte	'analogFrequency',0,1,202,1,122
	.word	.L295,.L395
	.byte	4
	.byte	'moduleFrequency',0,1,202,1,147,1
	.word	.L295,.L396
	.byte	4
	.byte	'conversionMode',0,1,202,1,187,1
	.word	.L397,.L398
	.byte	5
	.word	.L105,.L390
	.byte	6
	.byte	'conversionTime',0,1,204,1,31
	.word	.L295,.L399
	.byte	6
	.byte	'vadcG',0,1,205,1,31
	.word	.L277,.L400
	.byte	6
	.byte	'stc',0,1,206,1,31
	.word	.L290,.L401
	.byte	6
	.byte	'resolution',0,1,207,1,31
	.word	.L402,.L403
	.byte	6
	.byte	'n',0,1,208,1,31
	.word	.L290,.L404
	.byte	6
	.byte	'inputClassNum',0,1,210,1,31
	.word	.L290,.L405
	.byte	7
	.word	.L406
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_abbrev'
.L249:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_line'
.L250:
	.word	.L778-.L777
.L777:
	.half	3
	.word	.L780-.L779
.L779:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L780:
	.byte	5,57,7,0,5,2
	.word	.L105
	.byte	3,204,1,1,5,9,3,125,1,5,56,9
	.half	.L470-.L105
	.byte	3,3,1,5,9,9
	.half	.L781-.L470
	.byte	3,125,1,5,56,9
	.half	.L472-.L781
	.byte	3,3,1,5,46,9
	.half	.L473-.L472
	.byte	3,127,1,5,5,9
	.half	.L475-.L473
	.byte	3,8,1,5,38,7,9
	.half	.L782-.L475
	.byte	3,3,1,5,55,9
	.half	.L474-.L782
	.byte	1,5,82,9
	.half	.L783-.L474
	.byte	3,1,1,5,35,9
	.half	.L476-.L783
	.byte	3,126,1,5,36,9
	.half	.L19-.L476
	.byte	3,6,1,5,41,9
	.half	.L478-.L19
	.byte	3,1,1,5,58,9
	.half	.L477-.L478
	.byte	1,5,85,9
	.half	.L479-.L477
	.byte	3,1,1,5,10,9
	.half	.L784-.L479
	.byte	3,5,1,7,9
	.half	.L785-.L784
	.byte	3,2,1,7,9
	.half	.L786-.L785
	.byte	3,2,1,7,9
	.half	.L787-.L786
	.byte	3,2,1,7,9
	.half	.L788-.L787
	.byte	1,5,49,9
	.half	.L21-.L788
	.byte	3,122,1,5,9,3,1,1,5,49,9
	.half	.L23-.L21
	.byte	3,3,1,5,9,3,1,1,5,49,9
	.half	.L22-.L23
	.byte	3,1,1,5,9,3,1,1,5,49,9
	.half	.L25-.L22
	.byte	3,1,1,5,5,9
	.half	.L26-.L25
	.byte	3,4,1,5,78,7,9
	.half	.L407-.L26
	.byte	3,6,1,5,82,9
	.half	.L471-.L407
	.byte	1,5,9,9
	.half	.L408-.L471
	.byte	3,124,1,5,57,7,9
	.half	.L409-.L408
	.byte	3,3,1,5,48,9
	.half	.L469-.L409
	.byte	3,1,1,5,52,9
	.half	.L481-.L469
	.byte	1,5,42,9
	.half	.L789-.L481
	.byte	1,5,30,9
	.half	.L790-.L789
	.byte	1,5,23,3,127,1,5,44,9
	.half	.L30-.L790
	.byte	3,6,1,5,30,9
	.half	.L480-.L30
	.byte	1,5,53,9
	.half	.L31-.L480
	.byte	1,5,71,9
	.half	.L791-.L31
	.byte	1,5,1,9
	.half	.L29-.L791
	.byte	3,9,1,7,9
	.half	.L252-.L29
	.byte	0,1,1
.L778:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_ranges'
.L251:
	.word	-1,.L105,0,.L252-.L105,0,0
.L406:
	.word	-1,.L105,.L407-.L105,.L408-.L105,.L409-.L105,.L30-.L105,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_info'
.L253:
	.word	429
	.half	3
	.word	.L254
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L256,.L255
	.byte	2
	.word	.L134
	.byte	3
	.byte	'IfxVadc_configExternalMultiplexerMode',0,1,35,6,1,1,1
	.word	.L83,.L410,.L82
	.byte	4
	.byte	'vadc',0,1,35,54
	.word	.L270,.L411
	.byte	4
	.byte	'vadcG',0,1,35,72
	.word	.L277,.L412
	.byte	4
	.byte	'mode',0,1,35,111
	.word	.L413,.L414
	.byte	4
	.byte	'channels',0,1,35,123
	.word	.L272,.L415
	.byte	4
	.byte	'startChannel',0,1,35,157,1
	.word	.L416,.L417
	.byte	4
	.byte	'code',0,1,35,196,1
	.word	.L418,.L419
	.byte	4
	.byte	'sampleTimeControl',0,1,35,232,1
	.word	.L420,.L421
	.byte	4
	.byte	'channelSelectionStyle',0,1,35,153,2
	.word	.L422,.L423
	.byte	5
	.word	.L83,.L410
	.byte	6
	.byte	'emuxctr',0,1,37,24
	.word	.L424,.L425
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_abbrev'
.L254:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_line'
.L255:
	.word	.L793-.L792
.L792:
	.half	3
	.word	.L795-.L794
.L794:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L795:
	.byte	5,14,7,0,5,2
	.word	.L83
	.byte	3,38,1,5,6,3,124,1,5,24,9
	.half	.L432-.L83
	.byte	3,4,1,5,6,3,124,1,5,24,9
	.half	.L433-.L432
	.byte	3,5,1,5,32,9
	.half	.L796-.L433
	.byte	3,6,1,5,24,9
	.half	.L428-.L796
	.byte	3,123,1,9
	.half	.L797-.L428
	.byte	3,1,1,9
	.half	.L798-.L797
	.byte	3,1,1,5,14,9
	.half	.L799-.L798
	.byte	3,1,1,5,24,9
	.half	.L429-.L799
	.byte	1,9
	.half	.L800-.L429
	.byte	3,1,1,5,32,9
	.half	.L431-.L800
	.byte	3,1,1,5,33,9
	.half	.L426-.L431
	.byte	3,4,1,5,24,3,125,1,9
	.half	.L801-.L426
	.byte	3,1,1,5,33,3,2,1,5,24,9
	.half	.L435-.L801
	.byte	3,127,1,5,33,9
	.half	.L802-.L435
	.byte	3,1,1,5,1,7,9
	.half	.L257-.L802
	.byte	3,1,0,1,1
.L793:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_ranges'
.L256:
	.word	-1,.L83,0,.L257-.L83,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L258:
	.word	186
	.half	3
	.word	.L259
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L261,.L260
	.byte	2
	.word	.L134
	.byte	3
	.byte	'.cocofun_4',0,1,72,6,1
	.word	.L91,.L262,.L90
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L259:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L260:
	.word	.L804-.L803
.L803:
	.half	3
	.word	.L806-.L805
.L805:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L806:
	.byte	5,37,7,0,5,2
	.word	.L91
	.byte	3,216,0,1,9
	.half	.L262-.L91
	.byte	0,1,1,5,36,0,5,2
	.word	.L91
	.byte	3,251,0,1,5,37,9
	.half	.L447-.L91
	.byte	3,93,1,7,9
	.half	.L262-.L447
	.byte	0,1,1,5,37,0,5,2
	.word	.L91
	.byte	3,253,0,1,9
	.half	.L447-.L91
	.byte	3,91,1,7,9
	.half	.L262-.L447
	.byte	0,1,1,5,33,0,5,2
	.word	.L91
	.byte	3,252,2,1,5,37,9
	.half	.L447-.L91
	.byte	3,220,125,1,7,9
	.half	.L262-.L447
	.byte	0,1,1,5,33,0,5,2
	.word	.L91
	.byte	3,136,3,1,5,37,9
	.half	.L447-.L91
	.byte	3,208,125,1,7,9
	.half	.L262-.L447
	.byte	0,1,1,5,32,0,5,2
	.word	.L91
	.byte	3,228,3,1,5,37,9
	.half	.L447-.L91
	.byte	3,244,124,1,7,9
	.half	.L262-.L447
	.byte	0,1,1,5,33,0,5,2
	.word	.L91
	.byte	3,239,3,1,5,37,9
	.half	.L447-.L91
	.byte	3,233,124,1,7,9
	.half	.L262-.L447
	.byte	0,1,1,5,33,0,5,2
	.word	.L91
	.byte	3,252,3,1,5,37,9
	.half	.L447-.L91
	.byte	3,220,124,1,7,9
	.half	.L262-.L447
	.byte	0,1,1,5,33,0,5,2
	.word	.L91
	.byte	3,169,4,1,5,37,9
	.half	.L447-.L91
	.byte	3,175,124,1,7,9
	.half	.L262-.L447
	.byte	0,1,1
.L804:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L261:
	.word	-1,.L91,0,.L262-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L263:
	.word	186
	.half	3
	.word	.L264
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L266,.L265
	.byte	2
	.word	.L134
	.byte	3
	.byte	'.cocofun_5',0,1,54,6,1
	.word	.L87,.L267,.L86
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L264:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L265:
	.word	.L808-.L807
.L807:
	.half	3
	.word	.L810-.L809
.L809:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L810:
	.byte	5,59,7,0,5,2
	.word	.L87
	.byte	3,192,0,1,5,23,1,5,30,9
	.half	.L811-.L87
	.byte	1,5,41,9
	.half	.L812-.L811
	.byte	1,9
	.half	.L267-.L812
	.byte	0,1,1,5,60,0,5,2
	.word	.L87
	.byte	3,232,0,1,5,23,1,5,31,9
	.half	.L811-.L87
	.byte	1,5,42,9
	.half	.L812-.L811
	.byte	1,5,41,3,88,1,7,9
	.half	.L267-.L812
	.byte	0,1,1
.L808:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L266:
	.word	-1,.L87,0,.L267-.L87,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L90:
	.word	-1,.L91,0,.L262-.L91
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L86:
	.word	-1,.L87,0,.L267-.L87
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_loc'
.L82:
	.word	-1,.L83,0,.L410-.L83
	.half	2
	.byte	138,0
	.word	0,0
.L423:
	.word	-1,.L83,0,.L410-.L83
	.half	2
	.byte	145,4
	.word	.L427-.L83,.L429-.L83
	.half	1
	.byte	81
	.word	0,0
.L415:
	.word	-1,.L83,0,.L426-.L83
	.half	1
	.byte	85
	.word	0,0
.L419:
	.word	-1,.L83,0,.L426-.L83
	.half	1
	.byte	87
	.word	0,0
.L425:
	.word	-1,.L83,0,.L427-.L83
	.half	1
	.byte	95
	.word	.L434-.L83,.L410-.L83
	.half	1
	.byte	95
	.word	0,0
.L414:
	.word	-1,.L83,0,.L428-.L83
	.half	1
	.byte	84
	.word	0,0
.L421:
	.word	-1,.L83,0,.L410-.L83
	.half	2
	.byte	145,0
	.word	.L430-.L83,.L431-.L83
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L417:
	.word	-1,.L83,0,.L426-.L83
	.half	1
	.byte	86
	.word	0,0
.L411:
	.word	-1,.L83,0,.L426-.L83
	.half	1
	.byte	100
	.word	.L432-.L83,.L410-.L83
	.half	1
	.byte	111
	.word	.L435-.L83,.L410-.L83
	.half	1
	.byte	100
	.word	0,0
.L412:
	.word	-1,.L83,0,.L426-.L83
	.half	1
	.byte	101
	.word	.L433-.L83,.L410-.L83
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_loc'
.L84:
	.word	-1,.L85,0,.L308-.L85
	.half	2
	.byte	138,0
	.word	0,0
.L314:
	.word	-1,.L85,.L436-.L85,.L439-.L85
	.half	1
	.byte	82
	.word	.L440-.L85,.L438-.L85
	.half	1
	.byte	89
	.word	.L87-.L85,.L267-.L85
	.half	1
	.byte	89
	.word	.L3-.L85,.L308-.L85
	.half	1
	.byte	89
	.word	.L441-.L85,.L308-.L85
	.half	1
	.byte	84
	.word	0,0
.L311:
	.word	-1,.L85,0,.L436-.L85
	.half	1
	.byte	84
	.word	.L436-.L85,.L438-.L85
	.half	1
	.byte	88
	.word	.L87-.L85,.L267-.L85
	.half	1
	.byte	88
	.word	.L3-.L85,.L308-.L85
	.half	1
	.byte	88
	.word	0,0
.L309:
	.word	-1,.L85,0,.L436-.L85
	.half	1
	.byte	100
	.word	.L437-.L85,.L438-.L85
	.half	1
	.byte	111
	.word	.L87-.L85,.L267-.L85
	.half	1
	.byte	111
	.word	.L3-.L85,.L308-.L85
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_loc'
.L88:
	.word	-1,.L89,0,.L315-.L89
	.half	2
	.byte	138,0
	.word	0,0
.L319:
	.word	-1,.L89,0,.L321-.L89
	.half	1
	.byte	85
	.word	.L442-.L89,.L443-.L89
	.half	1
	.byte	95
	.word	.L4-.L89,.L5-.L89
	.half	1
	.byte	85
	.word	.L4-.L89,.L445-.L89
	.half	1
	.byte	95
	.word	0,0
.L318:
	.word	-1,.L89,0,.L321-.L89
	.half	1
	.byte	84
	.word	.L4-.L89,.L5-.L89
	.half	1
	.byte	84
	.word	.L91-.L89,.L447-.L89
	.half	1
	.byte	88
	.word	.L448-.L89,.L315-.L89
	.half	1
	.byte	88
	.word	0,0
.L322:
	.word	-1,.L89,.L444-.L89,.L4-.L89
	.half	5
	.byte	144,32,157,32,0
	.word	.L5-.L89,.L446-.L89
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L316:
	.word	-1,.L89,0,.L321-.L89
	.half	1
	.byte	100
	.word	.L4-.L89,.L5-.L89
	.half	1
	.byte	100
	.word	.L91-.L89,.L447-.L89
	.half	1
	.byte	111
	.word	.L448-.L89,.L315-.L89
	.half	1
	.byte	111
	.word	.L449-.L89,.L315-.L89
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_loc'
.L92:
	.word	-1,.L93,0,.L323-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L326:
	.word	-1,.L93,.L450-.L93,.L451-.L93
	.half	1
	.byte	82
	.word	.L87-.L93,.L267-.L93
	.half	1
	.byte	89
	.word	.L452-.L93,.L323-.L93
	.half	1
	.byte	89
	.word	.L454-.L93,.L323-.L93
	.half	1
	.byte	84
	.word	0,0
.L325:
	.word	-1,.L93,0,.L450-.L93
	.half	1
	.byte	84
	.word	.L87-.L93,.L267-.L93
	.half	1
	.byte	88
	.word	.L450-.L93,.L323-.L93
	.half	1
	.byte	88
	.word	0,0
.L324:
	.word	-1,.L93,0,.L450-.L93
	.half	1
	.byte	100
	.word	.L87-.L93,.L267-.L93
	.half	1
	.byte	111
	.word	.L453-.L93,.L323-.L93
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_loc'
.L94:
	.word	-1,.L95,0,.L327-.L95
	.half	2
	.byte	138,0
	.word	0,0
.L329:
	.word	-1,.L95,0,.L455-.L95
	.half	1
	.byte	84
	.word	.L91-.L95,.L262-.L95
	.half	1
	.byte	95
	.word	.L455-.L95,.L458-.L95
	.half	1
	.byte	95
	.word	.L9-.L95,.L463-.L95
	.half	1
	.byte	95
	.word	0,0
.L330:
	.word	-1,.L95,.L455-.L95,.L331-.L95
	.half	1
	.byte	82
	.word	.L91-.L95,.L262-.L95
	.half	1
	.byte	89
	.word	.L459-.L95,.L327-.L95
	.half	1
	.byte	89
	.word	.L464-.L95,.L327-.L95
	.half	1
	.byte	84
	.word	0,0
.L328:
	.word	-1,.L95,0,.L455-.L95
	.half	1
	.byte	100
	.word	.L91-.L95,.L262-.L95
	.half	1
	.byte	111
	.word	.L447-.L95,.L262-.L95
	.half	1
	.byte	100
	.word	.L456-.L95,.L457-.L95
	.half	1
	.byte	100
	.word	.L460-.L95,.L327-.L95
	.half	1
	.byte	111
	.word	.L461-.L95,.L332-.L95
	.half	1
	.byte	100
	.word	0,0
.L334:
	.word	-1,.L95,.L91-.L95,.L262-.L95
	.half	1
	.byte	88
	.word	.L462-.L95,.L327-.L95
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_loc'
.L96:
	.word	-1,.L97,0,.L296-.L97
	.half	2
	.byte	138,0
	.word	0,0
.L297:
	.word	-1,.L97,0,.L465-.L97
	.half	1
	.byte	100
	.word	.L466-.L97,.L296-.L97
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_loc'
.L98:
	.word	-1,.L99,0,.L298-.L99
	.half	2
	.byte	138,0
	.word	0,0
.L299:
	.word	-1,.L99,0,.L467-.L99
	.half	1
	.byte	100
	.word	.L468-.L99,.L298-.L99
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_loc'
.L100:
	.word	-1,.L101,0,.L335-.L101
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_loc'
.L102:
	.word	-1,.L103,0,.L269-.L103
	.half	2
	.byte	138,0
	.word	0,0
.L273:
	.word	0,0
.L271:
	.word	-1,.L103,0,.L269-.L103
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_loc'
.L104:
	.word	-1,.L105,0,.L390-.L105
	.half	2
	.byte	138,0
	.word	0,0
.L395:
	.word	-1,.L105,0,.L469-.L105
	.half	1
	.byte	86
	.word	.L472-.L105,.L390-.L105
	.half	1
	.byte	88
	.word	.L30-.L105,.L31-.L105
	.half	1
	.byte	86
	.word	0,0
.L398:
	.word	-1,.L105,0,.L390-.L105
	.half	2
	.byte	145,0
	.word	.L470-.L105,.L471-.L105
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L399:
	.word	-1,.L105,.L475-.L105,.L469-.L105
	.half	1
	.byte	82
	.word	.L30-.L105,.L31-.L105
	.half	1
	.byte	82
	.word	.L29-.L105,.L390-.L105
	.half	1
	.byte	82
	.word	0,0
.L392:
	.word	-1,.L105,0,.L469-.L105
	.half	1
	.byte	84
	.word	.L30-.L105,.L31-.L105
	.half	1
	.byte	84
	.word	0,0
.L394:
	.word	-1,.L105,0,.L469-.L105
	.half	1
	.byte	85
	.word	.L30-.L105,.L31-.L105
	.half	1
	.byte	85
	.word	0,0
.L405:
	.word	-1,.L105,.L478-.L105,.L479-.L105
	.half	1
	.byte	95
	.word	0,0
.L396:
	.word	-1,.L105,0,.L469-.L105
	.half	1
	.byte	87
	.word	.L30-.L105,.L31-.L105
	.half	1
	.byte	87
	.word	0,0
.L404:
	.word	-1,.L105,.L26-.L105,.L481-.L105
	.half	1
	.byte	89
	.word	.L30-.L105,.L31-.L105
	.half	1
	.byte	89
	.word	0,0
.L403:
	.word	-1,.L105,.L20-.L105,.L31-.L105
	.half	1
	.byte	95
	.word	0,0
.L401:
	.word	-1,.L105,.L476-.L105,.L19-.L105
	.half	1
	.byte	90
	.word	.L20-.L105,.L480-.L105
	.half	1
	.byte	90
	.word	0,0
.L391:
	.word	-1,.L105,0,.L469-.L105
	.half	1
	.byte	100
	.word	.L30-.L105,.L31-.L105
	.half	1
	.byte	100
	.word	0,0
.L400:
	.word	-1,.L105,.L473-.L105,.L474-.L105
	.half	1
	.byte	111
	.word	.L19-.L105,.L477-.L105
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_loc'
.L106:
	.word	-1,.L107,0,.L293-.L107
	.half	2
	.byte	138,0
	.word	0,0
.L294:
	.word	-1,.L107,0,.L293-.L107
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_loc'
.L108:
	.word	-1,.L109,0,.L275-.L109
	.half	2
	.byte	138,0
	.word	0,0
.L280:
	.word	-1,.L109,0,.L275-.L109
	.half	1
	.byte	84
	.word	0,0
.L278:
	.word	-1,.L109,0,.L275-.L109
	.half	1
	.byte	101
	.word	0,0
.L284:
	.word	-1,.L109,.L482-.L109,.L483-.L109
	.half	1
	.byte	95
	.word	.L35-.L109,.L484-.L109
	.half	1
	.byte	95
	.word	.L36-.L109,.L485-.L109
	.half	1
	.byte	95
	.word	0,0
.L282:
	.word	-1,.L109,0,.L275-.L109
	.half	1
	.byte	85
	.word	0,0
.L285:
	.word	-1,.L109,.L486-.L109,.L42-.L109
	.half	1
	.byte	82
	.word	.L487-.L109,.L275-.L109
	.half	1
	.byte	82
	.word	0,0
.L276:
	.word	-1,.L109,0,.L275-.L109
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_loc'
.L110:
	.word	-1,.L111,0,.L286-.L111
	.half	2
	.byte	138,0
	.word	0,0
.L287:
	.word	-1,.L111,0,.L286-.L111
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_loc'
.L112:
	.word	-1,.L113,0,.L337-.L113
	.half	2
	.byte	138,0
	.word	0,0
.L338:
	.word	-1,.L113,0,.L488-.L113
	.half	1
	.byte	84
	.word	0,0
.L340:
	.word	-1,.L113,0,.L489-.L113
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_loc'
.L114:
	.word	-1,.L115,0,.L341-.L115
	.half	2
	.byte	138,0
	.word	0,0
.L343:
	.word	-1,.L115,0,.L490-.L115
	.half	1
	.byte	84
	.word	0,0
.L344:
	.word	-1,.L115,.L91-.L115,.L262-.L115
	.half	1
	.byte	88
	.word	.L492-.L115,.L341-.L115
	.half	1
	.byte	88
	.word	0,0
.L342:
	.word	-1,.L115,0,.L491-.L115
	.half	1
	.byte	100
	.word	.L91-.L115,.L262-.L115
	.half	1
	.byte	111
	.word	.L493-.L115,.L341-.L115
	.half	1
	.byte	111
	.word	.L447-.L115,.L262-.L115
	.half	1
	.byte	100
	.word	.L494-.L115,.L341-.L115
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_loc'
.L116:
	.word	-1,.L117,0,.L345-.L117
	.half	2
	.byte	138,0
	.word	0,0
.L347:
	.word	-1,.L117,0,.L495-.L117
	.half	1
	.byte	84
	.word	0,0
.L348:
	.word	-1,.L117,.L91-.L117,.L262-.L117
	.half	1
	.byte	95
	.word	.L497-.L117,.L345-.L117
	.half	1
	.byte	95
	.word	0,0
.L346:
	.word	-1,.L117,0,.L496-.L117
	.half	1
	.byte	100
	.word	.L91-.L117,.L262-.L117
	.half	1
	.byte	111
	.word	.L498-.L117,.L345-.L117
	.half	1
	.byte	111
	.word	.L447-.L117,.L262-.L117
	.half	1
	.byte	100
	.word	.L499-.L117,.L345-.L117
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_loc'
.L118:
	.word	-1,.L119,0,.L349-.L119
	.half	2
	.byte	138,0
	.word	0,0
.L352:
	.word	-1,.L119,.L504-.L119,.L505-.L119
	.half	1
	.byte	95
	.word	0,0
.L351:
	.word	-1,.L119,0,.L500-.L119
	.half	1
	.byte	84
	.word	.L500-.L119,.L502-.L119
	.half	1
	.byte	95
	.word	0,0
.L353:
	.word	-1,.L119,.L503-.L119,.L349-.L119
	.half	1
	.byte	88
	.word	0,0
.L350:
	.word	-1,.L119,0,.L500-.L119
	.half	1
	.byte	100
	.word	.L501-.L119,.L349-.L119
	.half	1
	.byte	111
	.word	.L504-.L119,.L506-.L119
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_loc'
.L120:
	.word	-1,.L121,0,.L354-.L121
	.half	2
	.byte	138,0
	.word	0,0
.L357:
	.word	-1,.L121,.L512-.L121,.L54-.L121
	.half	1
	.byte	84
	.word	0,0
.L356:
	.word	-1,.L121,0,.L507-.L121
	.half	1
	.byte	84
	.word	.L507-.L121,.L509-.L121
	.half	1
	.byte	95
	.word	0,0
.L359:
	.word	-1,.L121,.L510-.L121,.L511-.L121
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L358:
	.word	-1,.L121,.L513-.L121,.L354-.L121
	.half	1
	.byte	88
	.word	0,0
.L355:
	.word	-1,.L121,0,.L507-.L121
	.half	1
	.byte	100
	.word	.L508-.L121,.L354-.L121
	.half	1
	.byte	111
	.word	.L514-.L121,.L54-.L121
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_loc'
.L122:
	.word	-1,.L123,0,.L360-.L123
	.half	2
	.byte	138,0
	.word	0,0
.L362:
	.word	-1,.L123,0,.L360-.L123
	.half	1
	.byte	84
	.word	0,0
.L363:
	.word	0,0
.L361:
	.word	-1,.L123,0,.L360-.L123
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_loc'
.L124:
	.word	-1,.L125,0,.L364-.L125
	.half	2
	.byte	138,0
	.word	0,0
.L366:
	.word	-1,.L125,.L515-.L125,.L517-.L125
	.half	1
	.byte	82
	.word	.L518-.L125,.L517-.L125
	.half	1
	.byte	88
	.word	.L91-.L125,.L262-.L125
	.half	1
	.byte	88
	.word	.L519-.L125,.L520-.L125
	.half	1
	.byte	88
	.word	.L522-.L125,.L74-.L125
	.half	1
	.byte	84
	.word	.L523-.L125,.L364-.L125
	.half	1
	.byte	88
	.word	.L525-.L125,.L364-.L125
	.half	1
	.byte	84
	.word	0,0
.L365:
	.word	-1,.L125,0,.L515-.L125
	.half	1
	.byte	100
	.word	.L516-.L125,.L517-.L125
	.half	1
	.byte	111
	.word	.L91-.L125,.L262-.L125
	.half	1
	.byte	111
	.word	.L519-.L125,.L520-.L125
	.half	1
	.byte	111
	.word	.L447-.L125,.L262-.L125
	.half	1
	.byte	100
	.word	.L519-.L125,.L521-.L125
	.half	1
	.byte	100
	.word	.L523-.L125,.L364-.L125
	.half	1
	.byte	111
	.word	.L523-.L125,.L524-.L125
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_loc'
.L126:
	.word	-1,.L127,0,.L367-.L127
	.half	2
	.byte	138,0
	.word	0,0
.L370:
	.word	-1,.L127,0,.L526-.L127
	.half	1
	.byte	84
	.word	0,0
.L371:
	.word	-1,.L127,.L91-.L127,.L262-.L127
	.half	1
	.byte	88
	.word	.L528-.L127,.L367-.L127
	.half	1
	.byte	88
	.word	0,0
.L368:
	.word	-1,.L127,0,.L527-.L127
	.half	1
	.byte	100
	.word	.L91-.L127,.L262-.L127
	.half	1
	.byte	111
	.word	.L529-.L127,.L367-.L127
	.half	1
	.byte	111
	.word	.L447-.L127,.L262-.L127
	.half	1
	.byte	100
	.word	.L530-.L127,.L367-.L127
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_loc'
.L128:
	.word	-1,.L129,0,.L300-.L129
	.half	2
	.byte	138,0
	.word	0,0
.L306:
	.word	-1,.L129,0,.L300-.L129
	.half	1
	.byte	86
	.word	0,0
.L304:
	.word	-1,.L129,0,.L531-.L129
	.half	1
	.byte	85
	.word	.L75-.L129,.L78-.L129
	.half	1
	.byte	85
	.word	0,0
.L307:
	.word	-1,.L129,0,.L532-.L129
	.half	1
	.byte	87
	.word	.L75-.L129,.L78-.L129
	.half	1
	.byte	87
	.word	0,0
.L302:
	.word	-1,.L129,0,.L533-.L129
	.half	1
	.byte	84
	.word	.L75-.L129,.L78-.L129
	.half	1
	.byte	84
	.word	0,0
.L301:
	.word	-1,.L129,0,.L300-.L129
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_loc'
.L130:
	.word	-1,.L131,0,.L288-.L131
	.half	2
	.byte	138,0
	.word	0,0
.L291:
	.word	-1,.L131,0,.L534-.L131
	.half	1
	.byte	84
	.word	0,0
.L289:
	.word	-1,.L131,0,.L288-.L131
	.half	1
	.byte	100
	.word	0,0
.L292:
	.word	-1,.L131,0,.L288-.L131
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_loc'
.L132:
	.word	-1,.L133,0,.L372-.L133
	.half	2
	.byte	138,0
	.word	0,0
.L375:
	.word	0,0
.L387:
	.word	0,0
.L374:
	.word	-1,.L133,.L537-.L133,.L372-.L133
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L389:
	.word	-1,.L133,.L538-.L133,.L372-.L133
	.half	1
	.byte	95
	.word	0,0
.L373:
	.word	-1,.L133,0,.L377-.L133
	.half	1
	.byte	100
	.word	.L535-.L133,.L378-.L133
	.half	1
	.byte	111
	.word	.L91-.L133,.L262-.L133
	.half	1
	.byte	111
	.word	.L536-.L133,.L372-.L133
	.half	1
	.byte	111
	.word	.L447-.L133,.L262-.L133
	.half	1
	.byte	100
	.word	.L536-.L133,.L79-.L133
	.half	1
	.byte	100
	.word	0,0
.L385:
	.word	0,0
.L380:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L813:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L83,.L410-.L83
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L85,.L308-.L85
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L89,.L315-.L89
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L93,.L323-.L93
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L95,.L327-.L95
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L97,.L296-.L97
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L99,.L298-.L99
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L101,.L335-.L101
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_frame'
	.word	20
	.word	.L813,.L103,.L269-.L103
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L105,.L390-.L105
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L813,.L107,.L293-.L107
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_frame'
	.word	20
	.word	.L813,.L109,.L275-.L109
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L813,.L111,.L286-.L111
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L813,.L113,.L337-.L113
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L115,.L341-.L115
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L117,.L345-.L117
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L119,.L349-.L119
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L121,.L354-.L121
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_frame'
	.word	24
	.word	.L813,.L123,.L360-.L123
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L125,.L364-.L125
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L127,.L367-.L127
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_frame'
	.word	24
	.word	.L813,.L129,.L300-.L129
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_frame'
	.word	24
	.word	.L813,.L131,.L288-.L131
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_frame'
	.word	12
	.word	.L813,.L133,.L372-.L133
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L814:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L814,.L87,.L267-.L87
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L814,.L91,.L262-.L91
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\4_McHal\Tricore\Vadc\Std\IfxVadc.c	   575      } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
	; Module end
