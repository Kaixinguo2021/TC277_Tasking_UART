	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\1_SrvSw\\StdIf\\.IfxStdIf_DPipe.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc27xc -D__CPU_TC27XC__ --core=tc1.6.x --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\2_CDrv\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.src ..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c'

	
$TC16X
	.sdecl	'.zrodata.IfxStdIf_DPipe..1.cnt',data,rom
	.sect	'.zrodata.IfxStdIf_DPipe..1.cnt'
	.align	4
.1.cnt:	.type	object
	.size	.1.cnt,8
	.word	-1,2147483647
	
	.sdecl	'.text.IfxStdIf_DPipe.IfxStdIf_DPipe_print',code,cluster('IfxStdIf_DPipe_print')
	.sect	'.text.IfxStdIf_DPipe.IfxStdIf_DPipe_print'
	.align	2
	
	.global	IfxStdIf_DPipe_print

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     1  /**
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     2   * \file IfxStdIf_DPipe.c
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     3   * \brief Standard interface: Data Pipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     4   * \ingroup IfxStdIf
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     5   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     8   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     9   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    11   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    12   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    16   * products.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    17   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    23   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    24   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    25  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    26  #include "IfxStdIf_DPipe.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    27  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    28  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    29  #include <string.h>
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    30  #include <stdio.h>
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    31  #include <stdarg.h>
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    32  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    33  void IfxStdIf_DPipe_print(IfxStdIf_DPipe *stdif, pchar format, ...)
; Function IfxStdIf_DPipe_print
.L4:
IfxStdIf_DPipe_print:	.type	func
	mov.aa	a15,a4
.L41:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    34  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    35      if (!stdif->txDisabled)
	ld.bu	d15,[a15]4
.L50:
	lea	a10,[a10]-264
.L38:
	jne	d15,#0,.L2
.L19:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    36      {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    37          char      message[STDIF_DPIPE_MAX_PRINT_SIZE + 1];
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    38          Ifx_SizeT count;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    39          va_list   args;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    40          va_start(args, format);
	lea	a6,[a10]264
.L51:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    41          vsprintf((char *)message, format, args);
	mov.aa	a4,a10
.L40:
	call	vsprintf
.L39:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    42          va_end(args);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    43          count = (Ifx_SizeT)strlen(message);
	mov.aa	a4,a10
	call	strlen
.L25:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   * products.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * \ingroup library_srvsw_stdif
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * and read data to/from as communciation channel.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * \par Porting StandardIo to DPipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   * replace all
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   *  - StandardIo type with IfxStdIf_DPipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   *  - StandardIo_print with IfxStdIf_DPipe_print
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * delete StandardIo.c and StandardIo.h
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * The following files are already ported: Ifx_Console, Ifx_Shell
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41  #ifndef STDIF_DPIPE_H_
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42  #define STDIF_DPIPE_H_ 1
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44  #include "IfxStdIf.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45  //----------------------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46  #ifndef ENDL
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47  #    define ENDL       "\r\n"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48  #endif
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50  /** \brief Forward declaration */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56  /** \brief Size of the buffer allocated on the stack for the print function */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61   * Initially the parameter 'count' specifies count of data to write.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62   * After execution the data pointed by 'count' specifies the data actually written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65   * \param data Pointer to the start of data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69   * \retval TRUE Returns TRUE if all items could be written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70   * \retval FALSE Returns FALSE if not all the items could be written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver driver, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  /** \brief Read data from the \ref IfxStdIf_DPipe object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76   * Initially the parameter 'count' specifies count of data to read.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   * After execution the data pointed by 'count' specifies the data actually read.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   * \param data Pointer to the start of data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \retval TRUE Returns TRUE if all items could be read
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   * \retval FALSE Returns FALSE if not all the items could be read
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver driver, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  /** \brief Returns the number of bytes in the rx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * \return Returns the number of bytes in the rx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97  /** \brief Returns read event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \return Returns read event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  /** \brief Returns number of bytes send
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   * \return Returns number of bytes send
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  /** \brief Returns the time stamp of the last transmit data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   * \return Returns the time stamp of the last transmit data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  /** \brief Returns the number of free bytes (free space) in the tx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   * \return Returns the number of free bytes in the tx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  /** \brief Returns write event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   * \return Returns write event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  /** \brief Indicates if the required number of bytes are available for read in the buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver driver, Ifx_SizeT count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148  /** \brief  Indicates if there is enough free space to write the data in the buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver driver, Ifx_SizeT count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159  /** \brief Flush the transmit buffer by transmitting all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   * \param timeout timeout for the flush operation
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164   * \return Returns TRUE if the FIFO is empty
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver driver, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168  /** \brief Clears the RX buffer by removing all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return void
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  /** \brief Clears the TX buffer by removing all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \return void
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182  /** \brief handler called on reveive event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189  /** \brief handler called on transmit event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196  /** \brief handler called on error event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203  /** \brief Reset the sendCount counter
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211  /** \brief Standard interface object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  struct IfxStdIf_DPipe_
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218      /* Standard interface APIs */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237  };
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238  /** \addtogroup library_srvsw_stdif_dpipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239   * \{ */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240  /** \copydoc IfxStdIf_DPipe_Write
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdif, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      return stdif->write(stdif->driver, data, count, timeout);
	ld.a	a2,[a15]8
.L52:
	ld.a	a4,[a15]
.L53:
	ld.d	e4,.1.cnt
.L54:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    44  essage);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    45          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, count < STDIF_DPIPE_MAX_PRINT_SIZE);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    46          //return
	mov.aa	a5,a10
.L55:
	lea	a6,[a10]256
.L26:
	st.h	[a10]256,d2
.L37:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \version iLLD_1_0_0_11_0
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   * products.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * \ingroup library_srvsw_stdif
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * and read data to/from as communciation channel.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * \par Porting StandardIo to DPipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   * replace all
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   *  - StandardIo type with IfxStdIf_DPipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   *  - StandardIo_print with IfxStdIf_DPipe_print
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * delete StandardIo.c and StandardIo.h
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * The following files are already ported: Ifx_Console, Ifx_Shell
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41  #ifndef STDIF_DPIPE_H_
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42  #define STDIF_DPIPE_H_ 1
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44  #include "IfxStdIf.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45  //----------------------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46  #ifndef ENDL
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47  #    define ENDL       "\r\n"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48  #endif
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50  /** \brief Forward declaration */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56  /** \brief Size of the buffer allocated on the stack for the print function */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61   * Initially the parameter 'count' specifies count of data to write.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62   * After execution the data pointed by 'count' specifies the data actually written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65   * \param data Pointer to the start of data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69   * \retval TRUE Returns TRUE if all items could be written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70   * \retval FALSE Returns FALSE if not all the items could be written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver driver, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  /** \brief Read data from the \ref IfxStdIf_DPipe object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76   * Initially the parameter 'count' specifies count of data to read.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   * After execution the data pointed by 'count' specifies the data actually read.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   * \param data Pointer to the start of data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \retval TRUE Returns TRUE if all items could be read
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   * \retval FALSE Returns FALSE if not all the items could be read
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver driver, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  /** \brief Returns the number of bytes in the rx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * \return Returns the number of bytes in the rx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97  /** \brief Returns read event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \return Returns read event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  /** \brief Returns number of bytes send
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   * \return Returns number of bytes send
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  /** \brief Returns the time stamp of the last transmit data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   * \return Returns the time stamp of the last transmit data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  /** \brief Returns the number of free bytes (free space) in the tx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   * \return Returns the number of free bytes in the tx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  /** \brief Returns write event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   * \return Returns write event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  /** \brief Indicates if the required number of bytes are available for read in the buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver driver, Ifx_SizeT count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148  /** \brief  Indicates if there is enough free space to write the data in the buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver driver, Ifx_SizeT count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159  /** \brief Flush the transmit buffer by transmitting all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   * \param timeout timeout for the flush operation
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164   * \return Returns TRUE if the FIFO is empty
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver driver, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168  /** \brief Clears the RX buffer by removing all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return void
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  /** \brief Clears the TX buffer by removing all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \return void
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182  /** \brief handler called on reveive event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189  /** \brief handler called on transmit event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196  /** \brief handler called on error event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203  /** \brief Reset the sendCount counter
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205   * \param driver Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211  /** \brief Standard interface object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  struct IfxStdIf_DPipe_
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218      /* Standard interface APIs */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237  };
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238  /** \addtogroup library_srvsw_stdif_dpipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239   * \{ */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240  /** \copydoc IfxStdIf_DPipe_Write
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdif, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      return stdif->write(stdif->driver, data, count, timeout);
	ji	a2
.L2:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    47  return
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    48          IfxStdIf_DPipe_write(stdif, (void *)message, &count, TIME_INFINITE);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    49      }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    50      else
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    51      {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    52          //return TRUE;
	ret
.L14:
	
__IfxStdIf_DPipe_print_function_end:
	.size	IfxStdIf_DPipe_print,__IfxStdIf_DPipe_print_function_end-IfxStdIf_DPipe_print
.L13:
	; End of function
	
	.calls	'IfxStdIf_DPipe_print','vsprintf'
	.calls	'IfxStdIf_DPipe_print','strlen'
	.calls	'IfxStdIf_DPipe_print','__INDIRECT__'
	.extern	strlen
	.extern	vsprintf
	.extern	__printf_float
	.extern	__printf_llong
	.extern	__INDIRECT__
	.calls	'IfxStdIf_DPipe_print','',264
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L6:
	.word	2403
	.half	3
	.word	.L7
	.byte	4
.L5:
	.byte	1
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L8
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.byte	'void',0,4
	.word	165
	.byte	5
	.byte	'IfxStdIf_InterfaceDriver',0,2,97,15
	.word	171
.L22:
	.byte	2
	.byte	'short int',0,2,5,4
	.word	209
	.byte	2
	.byte	'long long int',0,8,5,6
	.word	148
	.byte	1,1,7
	.word	171
	.byte	7
	.word	171
	.byte	7
	.word	222
	.byte	7
	.word	227
	.byte	0,4
	.word	244
	.byte	5
	.byte	'IfxStdIf_DPipe_Write',0,1,72,19
	.word	272
	.byte	5
	.byte	'IfxStdIf_DPipe_Read',0,1,87,19
	.word	272
	.byte	2
	.byte	'long int',0,4,5,6
	.word	334
	.byte	1,1,7
	.word	171
	.byte	0,4
	.word	346
	.byte	5
	.byte	'IfxStdIf_DPipe_GetReadCount',0,1,95,18
	.word	359
	.byte	8
	.word	148
	.byte	4
	.word	400
	.byte	6
	.word	405
	.byte	1,1,7
	.word	171
	.byte	0,4
	.word	410
	.byte	5
	.byte	'IfxStdIf_DPipe_GetReadEvent',0,1,103,36
	.word	423
	.byte	5
	.byte	'IfxStdIf_DPipe_GetWriteCount',0,1,127,18
	.word	359
	.byte	4
	.word	410
	.byte	5
	.byte	'IfxStdIf_DPipe_GetWriteEvent',0,1,135,1,37
	.word	501
	.byte	6
	.word	148
	.byte	1,1,7
	.word	171
	.byte	7
	.word	209
	.byte	7
	.word	227
	.byte	0,4
	.word	544
	.byte	5
	.byte	'IfxStdIf_DPipe_CanReadCount',0,1,146,1,19
	.word	567
	.byte	5
	.byte	'IfxStdIf_DPipe_CanWriteCount',0,1,157,1,19
	.word	567
	.byte	6
	.word	148
	.byte	1,1,7
	.word	171
	.byte	7
	.word	227
	.byte	0,4
	.word	647
	.byte	5
	.byte	'IfxStdIf_DPipe_FlushTx',0,1,166,1,19
	.word	665
	.byte	9,1,1,7
	.word	171
	.byte	0,4
	.word	702
	.byte	5
	.byte	'IfxStdIf_DPipe_ClearTx',0,1,180,1,16
	.word	711
	.byte	5
	.byte	'IfxStdIf_DPipe_ClearRx',0,1,173,1,16
	.word	711
	.byte	5
	.byte	'IfxStdIf_DPipe_OnReceive',0,1,188,1,16
	.word	711
	.byte	5
	.byte	'IfxStdIf_DPipe_OnTransmit',0,1,195,1,16
	.word	711
	.byte	5
	.byte	'IfxStdIf_DPipe_OnError',0,1,202,1,16
	.word	711
	.byte	2
	.byte	'unsigned long int',0,4,7,6
	.word	881
	.byte	1,1,7
	.word	171
	.byte	0,4
	.word	902
	.byte	5
	.byte	'IfxStdIf_DPipe_GetSendCount',0,1,111,18
	.word	915
	.byte	6
	.word	227
	.byte	1,1,7
	.word	171
	.byte	0,4
	.word	956
	.byte	5
	.byte	'IfxStdIf_DPipe_GetTxTimeStamp',0,1,119,24
	.word	969
	.byte	5
	.byte	'IfxStdIf_DPipe_ResetSendCount',0,1,209,1,16
	.word	711
	.byte	10
	.byte	'IfxStdIf_DPipe_',0,1,213,1,8,76,11
	.byte	'driver',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'txDisabled',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'write',0
	.word	277
	.byte	4,2,35,8,11
	.byte	'read',0
	.word	306
	.byte	4,2,35,12,11
	.byte	'getReadCount',0
	.word	364
	.byte	4,2,35,16,11
	.byte	'getReadEvent',0
	.word	428
	.byte	4,2,35,20,11
	.byte	'getWriteCount',0
	.word	464
	.byte	4,2,35,24,11
	.byte	'getWriteEvent',0
	.word	506
	.byte	4,2,35,28,11
	.byte	'canReadCount',0
	.word	572
	.byte	4,2,35,32,11
	.byte	'canWriteCount',0
	.word	609
	.byte	4,2,35,36,11
	.byte	'flushTx',0
	.word	670
	.byte	4,2,35,40,11
	.byte	'clearTx',0
	.word	716
	.byte	4,2,35,44,11
	.byte	'clearRx',0
	.word	748
	.byte	4,2,35,48,11
	.byte	'onReceive',0
	.word	780
	.byte	4,2,35,52,11
	.byte	'onTransmit',0
	.word	814
	.byte	4,2,35,56,11
	.byte	'onError',0
	.word	849
	.byte	4,2,35,60,11
	.byte	'getSendCount',0
	.word	920
	.byte	4,2,35,64,11
	.byte	'getTxTimeStamp',0
	.word	974
	.byte	4,2,35,68,11
	.byte	'resetSendCount',0
	.word	1012
	.byte	4,2,35,72,0
.L15:
	.byte	4
	.word	1051
	.byte	4
	.word	209
.L24:
	.byte	12
	.byte	'IfxStdIf_DPipe_write',0,3,1,242,1,20
	.word	148
	.byte	1,1
.L27:
	.byte	13
	.byte	'stdif',0,1,242,1,57
	.word	1451
.L29:
	.byte	13
	.byte	'data',0,1,242,1,70
	.word	171
.L31:
	.byte	13
	.byte	'count',0,1,242,1,87
	.word	1456
.L33:
	.byte	13
	.byte	'timeout',0,1,242,1,107
	.word	227
.L35:
	.byte	14,0,4
	.word	165
	.byte	4
	.word	244
	.byte	4
	.word	244
	.byte	4
	.word	346
	.byte	4
	.word	410
	.byte	4
	.word	346
	.byte	4
	.word	410
	.byte	4
	.word	544
	.byte	4
	.word	544
	.byte	4
	.word	647
	.byte	4
	.word	702
	.byte	4
	.word	702
	.byte	4
	.word	702
	.byte	4
	.word	702
	.byte	4
	.word	702
	.byte	4
	.word	902
	.byte	4
	.word	956
	.byte	4
	.word	702
	.byte	2
	.byte	'int',0,4,5,15
	.word	1647
	.byte	16
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,7
	.word	1654
	.byte	0,2
	.byte	'unsigned int',0,4,7,8
	.word	1696
	.byte	4
	.word	1696
	.byte	17
	.byte	'__cmpswapw',0
	.word	1712
	.byte	1,1,1,1,18
	.byte	'p',0
	.word	1717
	.byte	18
	.byte	'value',0
	.word	1696
	.byte	18
	.byte	'compare',0
	.word	1696
	.byte	0,19
	.byte	'__dotdotdot__',0
	.word	171
	.byte	1,1,1,1,20
	.word	1461
	.byte	21
	.word	1494
	.byte	21
	.word	1509
	.byte	21
	.word	1523
	.byte	21
	.word	1538
	.byte	14,0,2
	.byte	'char',0,1,6,15
	.word	1824
	.byte	4
	.word	1832
	.byte	15
	.word	1824
	.byte	4
	.word	1842
.L17:
	.byte	5
	.byte	'pchar',0,3,39,28
	.word	1847
.L20:
	.byte	22,128,2
	.word	1824
	.byte	23,255,1,0,24
	.byte	'strlen',0,4,52,17
	.word	1696
	.byte	1,1,1,1,25,4,52,39
	.word	1847
	.byte	0,4
	.word	1824
	.byte	26
	.word	1905
	.byte	26
	.word	1847
	.byte	5
	.byte	'va_list',0,6,24,16
	.word	1905
	.byte	24
	.byte	'vsprintf',0,5,151,1,16
	.word	1647
	.byte	1,1,1,1,25,5,151,1,32
	.word	1910
	.byte	25,5,151,1,55
	.word	1915
	.byte	25,5,151,1,67
	.word	1920
	.byte	0,4
	.word	1824
	.byte	27
	.byte	'__INDIRECT__',0,7,1,1,1,1,1,5
	.byte	'__wchar_t',0,7,1,1
	.word	209
	.byte	5
	.byte	'__size_t',0,7,1,1
	.word	1696
	.byte	5
	.byte	'__ptrdiff_t',0,7,1,1
	.word	1647
	.byte	28,1,4
	.word	2066
	.byte	5
	.byte	'__codeptr',0,7,1,1
	.word	2068
	.byte	5
	.byte	'size_t',0,8,24,25
	.word	1696
	.byte	5
	.byte	'uint8',0,9,89,24
	.word	148
	.byte	5
	.byte	'sint16',0,9,90,24
	.word	209
	.byte	2
	.byte	'unsigned short int',0,2,7,5
	.byte	'uint16',0,9,91,24
	.word	2135
	.byte	5
	.byte	'sint32',0,9,92,24
	.word	334
	.byte	5
	.byte	'uint32',0,9,93,24
	.word	881
	.byte	5
	.byte	'boolean',0,9,104,24
	.word	148
	.byte	5
	.byte	'sint64',0,3,36,28
	.word	227
	.byte	5
	.byte	'pvoid',0,3,40,28
	.word	171
	.byte	5
	.byte	'Ifx_TickTime',0,3,43,28
	.word	227
	.byte	5
	.byte	'Ifx_SizeT',0,3,56,16
	.word	209
	.byte	5
	.byte	'IfxStdIf_DPipe',0,1,51,32
	.word	1051
	.byte	8
	.word	148
	.byte	4
	.word	2309
	.byte	5
	.byte	'IfxStdIf_DPipe_WriteEvent',0,1,53,32
	.word	2314
	.byte	5
	.byte	'IfxStdIf_DPipe_ReadEvent',0,1,54,32
	.word	2314
	.byte	5
	.byte	'_iob_flag_t',0,5,82,25
	.word	2135
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L7:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,59,0,3,8,0,0,4,15,0,73,19,0
	.byte	0,5,22,0,3,8,58,15,59,15,57,15,73,19,0,0,6,21,1,73,19,54,15,39,12,0,0,7,5,0,73,19,0,0,8,53,0,73,19,0,0
	.byte	9,21,1,54,15,39,12,0,0,10,19,1,3,8,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,13,5,0,3,8,58,15,59,15,57,15,73,19,0,0,14,11,0,0,0
	.byte	15,38,0,73,19,0,0,16,46,1,3,8,54,15,39,12,63,12,60,12,0,0,17,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0
	.byte	0,18,5,0,3,8,73,19,0,0,19,46,0,3,8,73,19,54,15,39,12,63,12,60,12,0,0,20,46,1,49,19,0,0,21,5,0,49,19,0
	.byte	0,22,1,1,11,15,73,19,0,0,23,33,0,47,15,0,0,24,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12
	.byte	0,0,25,5,0,58,15,59,15,57,15,73,19,0,0,26,55,0,73,19,0,0,27,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60
	.byte	12,0,0,28,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L8:
	.word	.L43-.L42
.L42:
	.half	3
	.word	.L45-.L44
.L44:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.h',0,0,0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf.h',0,0,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Ifx_Types.h',0,0,0,0
	.byte	'string.h',0,1,0,0
	.byte	'stdio.h',0,1,0,0
	.byte	'stdarg.h',0,1,0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c',0,0,0,0
	.byte	'stddef.h',0,1,0,0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\Platform_Types.h',0,0
	.byte	0,0,0
.L45:
.L43:
	.sdecl	'.debug_info',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_info'
.L9:
	.word	403
	.half	3
	.word	.L10
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC27xD_ASC\\Debug\\',0,12,1
	.word	.L12,.L11
	.byte	2
	.word	.L5
	.byte	3
	.byte	'IfxStdIf_DPipe_print',0,1,33,6,1,1,1
	.word	.L4,.L14,.L3
	.byte	4
	.byte	'stdif',0,1,33,43
	.word	.L15,.L16
	.byte	4
	.byte	'format',0,1,33,56
	.word	.L17,.L18
	.byte	5,1,33,64,6
	.word	.L4,.L14
	.byte	6
	.word	.L19,.L2
	.byte	7
	.byte	'message',0,1,37,19
	.word	.L20,.L21
	.byte	7
	.byte	'count',0,1,38,19
	.word	.L22,.L23
	.byte	8
	.word	.L24,.L25,.L26
	.byte	9
	.word	.L27,.L28
	.byte	9
	.word	.L29,.L30
	.byte	9
	.word	.L31,.L32
	.byte	9
	.word	.L33,.L34
	.byte	10
	.word	.L35,.L36
	.byte	0,8
	.word	.L24,.L37,.L2
	.byte	9
	.word	.L27,.L28
	.byte	9
	.word	.L29,.L30
	.byte	9
	.word	.L31,.L32
	.byte	9
	.word	.L33,.L34
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_abbrev'
.L10:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,24,0,58,15,59,15,57,15,0,0
	.byte	6,11,1,17,1,18,1,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,29,1,49,16,17,1,18,1,0,0,9,5,0,49,16
	.byte	2,6,0,0,10,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_line'
.L11:
	.word	.L47-.L46
.L46:
	.half	3
	.word	.L49-.L48
.L48:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c',0,0,0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.h',0,0,0,0,0
.L49:
	.byte	5,6,7,0,5,2
	.word	.L4
	.byte	3,32,1,5,15,9
	.half	.L41-.L4
	.byte	3,2,1,5,6,9
	.half	.L50-.L41
	.byte	3,126,1,5,10,9
	.half	.L38-.L50
	.byte	3,2,1,5,9,7,9
	.half	.L19-.L38
	.byte	3,5,1,5,26,9
	.half	.L51-.L19
	.byte	3,1,1,5,9,9
	.half	.L40-.L51
	.byte	3,127,1,5,35,9
	.half	.L39-.L40
	.byte	3,3,1,4,2,5,17,9
	.half	.L25-.L39
	.byte	3,201,1,1,5,30,9
	.half	.L52-.L25
	.byte	1,5,53,9
	.half	.L53-.L52
	.byte	1,4,1,5,45,9
	.half	.L54-.L53
	.byte	3,186,126,1,5,55,9
	.half	.L55-.L54
	.byte	1,5,15,9
	.half	.L26-.L55
	.byte	3,125,1,4,2,5,53,9
	.half	.L37-.L26
	.byte	3,201,1,1,4,1,5,1,7,9
	.half	.L2-.L37
	.byte	3,192,126,1,7,9
	.half	.L13-.L2
	.byte	0,1,1
.L47:
	.sdecl	'.debug_ranges',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_ranges'
.L12:
	.word	-1,.L4,0,.L13-.L4,0,0
.L36:
	.word	-1,.L4,.L25-.L4,.L26-.L4,.L37-.L4,.L2-.L4,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_loc'
.L3:
	.word	-1,.L4,0,.L38-.L4
	.half	2
	.byte	138,0
	.word	.L38-.L4,.L2-.L4
	.half	3
	.byte	138,136,2
	.word	.L2-.L4,.L2-.L4
	.half	2
	.byte	138,0
	.word	.L2-.L4,.L14-.L4
	.half	3
	.byte	138,136,2
	.word	.L14-.L4,.L14-.L4
	.half	2
	.byte	138,0
	.word	0,0
.L23:
	.word	-1,.L4,0,.L14-.L4
	.half	2
	.byte	145,120
	.word	0,0
.L32:
	.word	0,0
.L30:
	.word	0,0
.L18:
	.word	-1,.L4,0,.L39-.L4
	.half	1
	.byte	101
	.word	.L2-.L4,.L14-.L4
	.half	1
	.byte	101
	.word	0,0
.L21:
	.word	-1,.L4,0,.L14-.L4
	.half	3
	.byte	145,248,125
	.word	0,0
.L16:
	.word	-1,.L4,0,.L40-.L4
	.half	1
	.byte	100
	.word	.L41-.L4,.L14-.L4
	.half	1
	.byte	111
	.word	.L2-.L4,.L14-.L4
	.half	1
	.byte	100
	.word	0,0
.L28:
	.word	0,0
.L34:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L56:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_frame'
	.word	56
	.word	.L56,.L4,.L14-.L4
	.byte	4
	.word	(.L38-.L4)/2
	.byte	19,136,2,22,26,4,19,138,136,2,4
	.word	(.L2-.L38)/2
	.byte	19,0,8,26,19,136,2,22,26,4,19,138,136,2,4
	.word	(.L14-.L2)/2
	.byte	19,0,8,26,0

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    53      }
	; Module end
